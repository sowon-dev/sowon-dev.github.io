<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Tue, 10 May 2022 14:34:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[WIP]전자정부프레임워크프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/</link>
      <guid>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/</guid>
      <pubDate>Mon, 09 May 2022 04:12:10 GMT</pubDate>
      
      <description>&lt;p&gt;전자정부프레임워크&lt;a href=&quot;https://www.egovframe.go.kr/home/ntt/nttRead.do?menuNo=76&amp;bbsId=171&amp;nttId=1576&quot;&gt;(링크)&lt;/a&gt;는 이번 프로젝트에서 처음 사용해보았다. 사실 특별히 새로울 건 없었다. 왜냐하면 Spring프레임워크와 거의 똑같기 때문이다. 전자정부프레임워크란 “효율적인 정보시스템 개발을 위한 코드 라이브러리, 인터페이스규약, 설정정보 등의 뼈대를 제공하는 표준프레임워크”라고 한다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>전자정부프레임워크<a href="https://www.egovframe.go.kr/home/ntt/nttRead.do?menuNo=76&bbsId=171&nttId=1576">(링크)</a>는 이번 프로젝트에서 처음 사용해보았다. 사실 특별히 새로울 건 없었다. 왜냐하면 Spring프레임워크와 거의 똑같기 때문이다. 전자정부프레임워크란 “효율적인 정보시스템 개발을 위한 코드 라이브러리, 인터페이스규약, 설정정보 등의 뼈대를 제공하는 표준프레임워크”라고 한다. </p><a id="more"></a><p>즉, egovframework는 Spring프레임워크 + MyBatis + MySql + Jsp + Jquery 조합에다가 전자정부프레임워크가 제공하는 라이브러리나 클래스가 추가되어있다고 보면 된다.</p><p><br><br><br></p><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li>프로젝트 설정을 추가했다.<br>프로젝트 진행 중 Spring Security를 도입하자고 건의했다. 다행히 받아들여져서 프로젝트 설정을 추가하는 경험을 할 수 있었다. 프로젝트 진행 중에 다시 프로젝트 셋팅을 건든다는 게 살짝 두려웠던 건 사실이다. 혹시나 내가 추가한 설정들때문에 잘되던 동작들이 꼬일까봐 걱정했는데 다행히 잘 작동해서 뿌듯했다. </li><li>XSS와 CSRF의 차이를 알고 이를 예방했다.<br>CSRF<a href="https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/">(링크)</a>는 사이트 간 요청 위조 약자로 공격대상이 Server이다.<br>XSS<a href="https://sowon-dev.github.io/2022/04/20/220420XSS/">(링크)</a>는 사이트 간 스크립팅의 약자로 공격대상이 Client이다.</li><li>ES5와 ES6 차이를 정확히 알고있다.<br>브라우저 호환성과 ES5와 ES6 차이<a href="https://sowon-dev.github.io/2022/04/18/220418ECMAScript/">(링크)</a>를 확실히 알게되었다.</li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>트리구조 메뉴를 개발하는데 쿼리로 애를 많이 먹었다. 서버로 재귀호출을 돌리면서 tree데이터를 json으로 만들어 화면에 던진 뒤에 jsTree라이브러리<a href="https://www.jstree.com/">(링크)</a>를 사용해 개발을 완료할 수 있었다. 고급 SQL에 대한 공부가 필요하다.</li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>recursive등 고급 SQL을 더 깊게 공부할 것</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>괄호가 &amp;#41;로 자동으로 바뀌어버릴때 해결법(ft.EscapeHtml)</title>
      <link>https://sowon-dev.github.io/2022/05/05/220506EscapeHtml/</link>
      <guid>https://sowon-dev.github.io/2022/05/05/220506EscapeHtml/</guid>
      <pubDate>Thu, 05 May 2022 22:02:04 GMT</pubDate>
      
      <description>&lt;p&gt;jsp페이지에서 검색을 하는데 자동으도 괄호가 escape되어 쿼리에서 where 조건절이 검색되지않았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>jsp페이지에서 검색을 하는데 자동으도 괄호가 escape되어 쿼리에서 where 조건절이 검색되지않았다.</p><a id="more"></a><h2 id="🥨-문제-상황"><a href="#🥨-문제-상황" class="headerlink" title="🥨 문제 상황"></a>🥨 문제 상황</h2><p>아래 예시를 보자. option의 value값에 괄호가 들어가있다. 그결과 브라우저가 자동으로  </p><ul><li><p>jsp페이지</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(코드 생략)</span><br><span class="line">&lt;form name=<span class="string">"searchFrm"</span> method=<span class="string">"get"</span> action=<span class="string">"/example"</span>&gt;</span><br><span class="line">  &lt;select name=<span class="string">"calType"</span>&gt;</span><br><span class="line">&lt;option value=""&gt;:: 전체 ::&lt;/option&gt;</span><br><span class="line">&lt;option value="달력(움력)" &lt;c:if test="$&#123;searchInfo.calType eq '달력(움력)'&#125;"&gt;selected&lt;/c:if&gt;&gt;달력(움력)&lt;/option&gt;</span><br><span class="line">&lt;option value="달력(양력)" &lt;c:if test="$&#123;searchInfo.calType eq '달력(양력)'&#125;"&gt;selected&lt;/c:if&gt;&gt;달력(양력)&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">(코드 생략)</span><br></pre></td></tr></table></figure></li><li><p>sql쿼리</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">   tb_example</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span>USE_AT = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span>CAL_TYPE = <span class="comment">#&#123;calType&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>실행결과 CAL_TYPE 조건이 <code>달력(음력)</code>이 아닌 <code>달력&amp;#40;음력&amp;#41;</code>으로 where 조건절이 들어갔기에 원하는 데이터가 나오지않았다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">   *</span><br><span class="line">FROM</span><br><span class="line">   tb_example</span><br><span class="line">WHERE</span><br><span class="line">1 = 1</span><br><span class="line">ANDUSE_AT = 1</span><br><span class="line">ANDCAL_TYPE = '달력&amp;#40;음력&amp;#41;'</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="🥨-원인"><a href="#🥨-원인" class="headerlink" title="🥨 원인"></a>🥨 원인</h2><p>이는 브라우저에서 자동으로 문자열 escape를 하기 때문이다.</p><ul><li>문자열 escape란? 브라우저에서 get방식 전송시 브라우저 자체적으로 UTF-8문자를 escape한다.</li></ul><p><br><br><br></p><h2 id="🥨-해결방법"><a href="#🥨-해결방법" class="headerlink" title="🥨 해결방법"></a>🥨 해결방법</h2><p>따라서 unescape를 해주면 해결된다.<br>크게 3가지 방법이 있다.</p><ol><li>org.springframework.web.util.HtmlUtils.htmlUnescape</li><li>org.apache.commons.lang.StringEscapeUtils.escapeHtml</li><li>replace메서드 사용</li></ol><p><br><br><br></p><h3 id="1-HtmlUtils-htmlUnescape-사용"><a href="#1-HtmlUtils-htmlUnescape-사용" class="headerlink" title="1 HtmlUtils.htmlUnescape 사용"></a>1 HtmlUtils.htmlUnescape 사용</h3><p>컨트롤러에서 받은 파라미터를 unescape한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">param.setCalType(HtmlUtils.htmlUnescape(param.getCalType()));</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="2-StringEscapeUtils-escapeHtml-사용"><a href="#2-StringEscapeUtils-escapeHtml-사용" class="headerlink" title="2 StringEscapeUtils.escapeHtml 사용"></a>2 StringEscapeUtils.escapeHtml 사용</h3><p>컨트롤러에서 받은 파라미터를 unescape한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">param.setCalType(StringEscapeUtils.escapeHtml(param.getCalType());</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="3-replace-사용"><a href="#3-replace-사용" class="headerlink" title="3 replace() 사용"></a>3 replace() 사용</h3><p>컨트롤러에서 받은 특정 파라미터를 replace메서드를 이용해 바꿔준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">param.getCalType().replace(<span class="string">"&amp;#40;"</span>, <span class="string">"("</span>);</span><br><span class="line">param.getCalType().replace(<span class="string">"&amp;#41;"</span>, <span class="string">")"</span>);</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="🥨-선택"><a href="#🥨-선택" class="headerlink" title="🥨 선택"></a>🥨 선택</h2><p>현재 전자정부프레임워크3.8환경이므로 스프링프레임워크에서 제공하는 htmlUnescape메서드를 사용했다.<br>내 상황에서는 escape가 1번했는데도 정상출력이 되지않아 찾아보니 escape가 2번 되어있었다. 왜일까…?<br>암튼 unescape를 2번해서 해결했다.</p><ul><li>Controller.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">String calTypeUnescape = HtmlUtils.htmlUnescape(param.getCalType());</span><br><span class="line">param.setCalType(HtmlUtils.htmlUnescape(calTypeUnescape));</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p>적용한 뒤 콘솔을 보니 아래처럼 쿼리가 원하는대로 정상출력됐다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">   *</span><br><span class="line">FROM</span><br><span class="line">   tb_example</span><br><span class="line">WHERE</span><br><span class="line">1 = 1</span><br><span class="line">ANDUSE_AT = 1</span><br><span class="line">ANDCAL_TYPE = '달력(음력)'</span><br></pre></td></tr></table></figure><p>해결!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/05/220506EscapeHtml/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>전자정부프레임워크3.8에 CSRF 설정하기</title>
      <link>https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/</link>
      <guid>https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/</guid>
      <pubDate>Mon, 02 May 2022 05:23:27 GMT</pubDate>
      
      <description>&lt;p&gt;CSRF란 Cross Site Request Forgery로 보안 이슈이기때문에 꼭 해결해야한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>CSRF란 Cross Site Request Forgery로 보안 이슈이기때문에 꼭 해결해야한다.</p><a id="more"></a><p>스프링부트로는 CORS 설정을 한 적이 있는데 이번 프로젝트는 전자정부프레임워크를 사용해야해서 조금 새로웠다.<br>전자정부프레임워크 공식문서<a href="https://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte3:fdl:server_security:xmlschema_v3_8">(링크)</a>에 spring security CSRF 간편설정이 있지만 왜인지 설정이 잘 되지않아 그냥 spring security를 pom.xml에 추가했다.</p><h2 id="pom-xml-에-의존성-추가"><a href="#pom-xml-에-의존성-추가" class="headerlink" title="pom.xml 에 의존성 추가"></a>pom.xml 에 의존성 추가</h2><p>프로젝트에 spring security를 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.maven.artifact.version</span>&gt;</span>4.3.16.RELEASE<span class="tag">&lt;/<span class="name">spring.maven.artifact.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">egovframework.rte.version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">egovframework.rte.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security.version</span>&gt;</span>4.2.13.RELEASE<span class="tag">&lt;/<span class="name">security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">(중략)</span><br><span class="line"><span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="web-xml-추가"><a href="#web-xml-추가" class="headerlink" title="web.xml 추가"></a>web.xml 추가</h2><p>아래 필터를 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="context-security-xml-생성"><a href="#context-security-xml-생성" class="headerlink" title="context-security.xml 생성"></a>context-security.xml 생성</h2><p>context 설정에 따라 이름에 맞는 시큐리티 config xml파일을 생성한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:sec</span>=<span class="string">"http://www.springframework.org/schema/security"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/security/spring-security.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:authentication-manager</span> <span class="attr">alias</span>=<span class="string">"authenticationManager"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 인증예외처리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/admin/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/uploads/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/file/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 접근경로 권한처리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">use-expressions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 로그인 페이지 정보 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sec:form-login</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:csrf</span> <span class="attr">disabled</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sec:http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form-login 로그인 페이지를 연결하면 CSRF를 방어할 수 있다.<br>커스텀한 로그인 로직을 사용하기때문에 <code>&lt;sec:form-login  /&gt;</code>해당 부분을 빼고 싶었는데 해당 코드를 빼면 서버 에러가 나서 입력만 하고 연결하지 않았다.<br>참고로 disabled=”false”가 CSRF를 사용하겠다는 의미이다.</p><p><br><br><br></p><h2 id="토큰을-jsp화면에-넣기"><a href="#토큰을-jsp화면에-넣기" class="headerlink" title="토큰을 jsp화면에 넣기"></a>토큰을 jsp화면에 넣기</h2><p>form태그 아래에 넣어주면 된다!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sec:csrfToken</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/CSRF/">CSRF</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ajax랑 axios는 무슨 차이가 있을까?</title>
      <link>https://sowon-dev.github.io/2022/04/30/220430JS-axiosVsajax/</link>
      <guid>https://sowon-dev.github.io/2022/04/30/220430JS-axiosVsajax/</guid>
      <pubDate>Sat, 30 Apr 2022 05:20:43 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트를 진행하다보면 클라이언트와 서버간의 데이터를 요청응답받기 위해 HTTP통신을 하게 된다.&lt;br&gt;이때 자주 사용하는 라이브러리로는 jQuery.ajax와 axios가 있다.&lt;br&gt;이 둘의 차이점은 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트를 진행하다보면 클라이언트와 서버간의 데이터를 요청응답받기 위해 HTTP통신을 하게 된다.<br>이때 자주 사용하는 라이브러리로는 jQuery.ajax와 axios가 있다.<br>이 둘의 차이점은 무엇일까?</p><a id="more"></a><h2 id="ajax는-라이브러리인가"><a href="#ajax는-라이브러리인가" class="headerlink" title="ajax는 라이브러리인가?"></a>ajax는 라이브러리인가?</h2><p>wikipedia<a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29">(링크)</a>에 따르면 ajax는 라이브러리가 아니라 비동기 통신 웹 개발 기술이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ajax (also AJAX /ˈeɪdʒæks/; short for "Asynchronous JavaScript and XML")[1][2] is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. </span><br><span class="line">With Ajax, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behaviour of the existing page. </span><br><span class="line">By decoupling the data interchange layer from the presentation layer, Ajax allows web pages and, by extension, web applications, to change content dynamically without the need to reload the entire page.</span><br><span class="line">[3] In practice, modern implementations commonly utilize JSON instead of XML.</span><br><span class="line"></span><br><span class="line">Ajax is not a technology, but rather a programming concept. </span><br><span class="line">HTML and CSS can be used in combination to mark up and style information. </span><br><span class="line">The webpage can be modified by JavaScript to dynamically display—and allow the user to interact with the new information. </span><br><span class="line">The built-in XMLHttpRequest object is used to execute Ajax on webpages, allowing websites to load content onto the screen without refreshing the page. </span><br><span class="line">Ajax is not a new technology, nor is it a new language. Instead, it is existing technologies used in a new way.</span><br><span class="line"></span><br><span class="line">by wikipedia ajax</span><br></pre></td></tr></table></figure><p>이 기술을 구현한 라이브러리가 바로 jQuery.ajax()와 axios이다.</p><p><br><br><br></p><h2 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax()"></a>jQuery.ajax()</h2><p>사용법은 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"some.php"</span>,</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">location</span>: <span class="string">"Boston"</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">"Data Saved: "</span> + msg );</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios 공식문서<a href="https://axios-http.com/docs/intro">(링크)</a>에 따르면 axios는 node.js와 브라우저를 위한 프로미스기반의 HTTP통신 라이브러리이다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Axios is a promise-based HTTP Client for node.js and the browser. </span><br><span class="line">It is isomorphic (= it can run in the browser and nodejs with the same codebase). </span><br><span class="line">On the server-side it uses the native node.js http module, while on the client (browser) it uses XMLHttpRequests.</span><br></pre></td></tr></table></figure><p>사용법 예시는 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a request for a user with a given ID</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// always executed</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optionally the request above could also be done as</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// always executed</span></span><br><span class="line">  &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Want to use async/await? Add the `async` keyword to your outer function/method.</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">'/user?ID=12345'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="fetch도-있던데"><a href="#fetch도-있던데" class="headerlink" title="fetch도 있던데?"></a>fetch도 있던데?</h2><p>fetch는 axios와 마찬가지로 promise기반 비동기 HTTP 클라이언트이다. 모던 브라우저에 내장되어있기에 바로 사용할 수 있다.<br>사용법은 axios와 거의 유사하고 성능은 fetch가 조금 빠르다고 한다<a href="https://meticulous.ai/blog/fetch-vs-axios/">(링크)</a>.<br>실무에선 아직 한 번도 사용해본적이 없는데 fetch는 몇몇 브라우저에선 지원이 안되기때문이다<a href="https://caniuse.com/fetch">(링크)</a>. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">  method: <span class="string">'GET'</span>, <span class="comment">// other options: POST, PUT, DELETE, etc.</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;&#125;),</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고하면-좋은-글"><a href="#참고하면-좋은-글" class="headerlink" title="참고하면 좋은 글"></a>참고하면 좋은 글</h2><ul><li><a href="https://velog.io/@leehaeun0/Ajax-%EB%8A%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%9D%B8%EA%B0%80%EC%9A%94">Ajax 는 라이브러리 인가요?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/30/220430JS-axiosVsajax/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker는 어떻게 HostOS와 다른 운영체제에서 돌아갈까?</title>
      <link>https://sowon-dev.github.io/2022/04/27/220427DockerDefinition/</link>
      <guid>https://sowon-dev.github.io/2022/04/27/220427DockerDefinition/</guid>
      <pubDate>Wed, 27 Apr 2022 02:22:51 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 VM에 대해 팀장님과 이야기하다가 문득 Docker로 어떻게 리눅스OS를 쓸 수 있는지가 궁금해졌다.&lt;br&gt;HostOS가 원도우 환경에서 VM은 GuestOS를 원하는 대로 설치할 수 있으니 리눅스든 우분투든 원하는 OS를 쓸 수 있다.&lt;br&gt;하지만 Docker는? &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 VM에 대해 팀장님과 이야기하다가 문득 Docker로 어떻게 리눅스OS를 쓸 수 있는지가 궁금해졌다.<br>HostOS가 원도우 환경에서 VM은 GuestOS를 원하는 대로 설치할 수 있으니 리눅스든 우분투든 원하는 OS를 쓸 수 있다.<br>하지만 Docker는? </p><a id="more"></a><p>Docker는 GuestOS를 설치하지 않고 HostOS를 활용한다. 그래서 VM보다 훨씬 가볍고 빠르다.<br><img src="https://miro.medium.com/max/2400/1*wOBkzBpi1Hl9Nr__Jszplg.png" alt="https://medium.com/@darkrasid/docker%EC%99%80-vm-d95d60e56fdd"></p><h2 id="HostOS가-원도우-환경인-Docker에서-어떻게-리눅스OS를-사용할-수-있을까"><a href="#HostOS가-원도우-환경인-Docker에서-어떻게-리눅스OS를-사용할-수-있을까" class="headerlink" title="HostOS가 원도우 환경인 Docker에서 어떻게 리눅스OS를 사용할 수 있을까?"></a>HostOS가 원도우 환경인 Docker에서 어떻게 리눅스OS를 사용할 수 있을까?</h2><p>여러 구글링을 끝에 내가 내린 결론이다. 따라서 정확하지않을 수 있다. (잘못된 부분은 댓글로 알려주시면 이 글을 읽는 모두에게 도움이 됩니다. 감사하겠습니다!)<br><a href="https://www.docker.com/products/docker-desktop/">Docker Desktop for Windows(링크)</a>를 다운로드 받으면 리눅스 엔진이 함께 설치된다.<br>이 리눅스엔진을 통해서 리눅스OS나 우분투OS를 사용할 수 있다!</p><p><br><br></p><h2 id="같이-읽으면-좋은-글"><a href="#같이-읽으면-좋은-글" class="headerlink" title="같이 읽으면 좋은 글"></a>같이 읽으면 좋은 글</h2><ul><li><a href="https://sowon-dev.github.io/2021/03/28/210329Container/">컨테이너, 도커, 쿠버네티스</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Docker/">Docker</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/27/220427DockerDefinition/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title> el태그 대신 &lt;c:out&gt; 사용하는 이유</title>
      <link>https://sowon-dev.github.io/2022/04/26/220426-xssCout/</link>
      <guid>https://sowon-dev.github.io/2022/04/26/220426-xssCout/</guid>
      <pubDate>Tue, 26 Apr 2022 03:25:00 GMT</pubDate>
      
      <description>&lt;p&gt;jsp에서 다양한 방식으로 서버사이드 데이터를 출력할 수 있다.&lt;br&gt;그 중 가장 많이 쓰는건 el태그인데 그 이유는 el태그 사용법이 &lt;code&gt;${}&lt;/code&gt;로 매우 간단하기때문이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>jsp에서 다양한 방식으로 서버사이드 데이터를 출력할 수 있다.<br>그 중 가장 많이 쓰는건 el태그인데 그 이유는 el태그 사용법이 <code>${}</code>로 매우 간단하기때문이다.</p><a id="more"></a><p>el태그만 써도 화면에 값이 잘 출력되는데 왜 굳이 <code>&lt;c:out&gt;</code>를 사용할까?</p><h2 id="결론-XSS-방어하기-위해"><a href="#결론-XSS-방어하기-위해" class="headerlink" title="결론: XSS 방어하기 위해!"></a>결론: XSS 방어하기 위해!</h2><p> <code>&lt;c:out&gt;</code>를 사용하면 escapeXml속성을 활용할 수 있다.<br> escapeXml를 true로 설정함으로써 가장 간단하게 XSS<a href="https://sowon-dev.github.io/2022/04/20/220420XSS/#XSS란">(링크)</a>를 방어할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.escapeXml = true 인 경우(디폴트)</span></span><br><span class="line">&lt;c:out value=<span class="string">"&lt;script type='text/javascript'&gt;alert('테스트');&lt;/script&gt;"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.escapeXml = false 인 경우 == el태그와 동일</span></span><br><span class="line">&lt;c:out value=<span class="string">"&lt;script type='text/javascript'&gt;alert('테스트');&lt;/script&gt;"</span> escapeXml=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></table></figure><ol><li><code>escapeXml = true</code>의 경우, text 그대로 출력된다.</li><li><code>escapeXml = false</code> 인 경우나 el태그인 경우, alert창이 실행된다.</li></ol><p>따라서 XSS 방어하기 위해서는 <code>&lt;c:out&gt;</code>을 사용하는 게 좋다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/26/220426-xssCout/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Async await를 Deferred로 걷어내기</title>
      <link>https://sowon-dev.github.io/2022/04/24/220424AwaitToDeferred/</link>
      <guid>https://sowon-dev.github.io/2022/04/24/220424AwaitToDeferred/</guid>
      <pubDate>Sun, 24 Apr 2022 05:01:06 GMT</pubDate>
      
      <description>&lt;p&gt;ES6문법으로 작업한 내용을 다 걷어내고 ES5문법에 맞춰 작업할 일이 생겼다.&lt;br&gt;Async await를 쓴 것들을 싹 걷어냈다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>ES6문법으로 작업한 내용을 다 걷어내고 ES5문법에 맞춰 작업할 일이 생겼다.<br>Async await를 쓴 것들을 싹 걷어냈다.</p><a id="more"></a><p>ES6에서 ES5로 바로 문법을 변환해주는 사이트<a href="https://es6console.com/">(링크)</a>도 있다.<br>이런 일은 사실 생기면 안 되는건데… 인생은 어쩔수없다.</p><h2 id="Async-await-사용"><a href="#Async-await-사용" class="headerlink" title="Async await 사용"></a>Async await 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSelectBox</span>(<span class="params">nextSelectTagId, parntsId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  $.<span class="keyword">get</span>("/admin/tree?parntsId=" + parntsId, function(data, status) &#123;</span><br><span class="line"><span class="comment">// 코드생략</span></span><br><span class="line">resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 함수는 아래처럼 사용가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> checkedDateset = e.dataset;</span><br><span class="line"><span class="keyword">await</span> setSelectBox(<span class="string">'lev2ClId'</span>, checkedDateset.clid1);</span><br><span class="line"><span class="keyword">await</span> setSelectBox(<span class="string">'lev3ClId'</span>, checkedDateset.clid2);</span><br><span class="line"><span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Deferred"><a href="#Deferred" class="headerlink" title="Deferred"></a>Deferred</h2><p>Promise 선언한 부분은 Deferred로 대체했다.<br>Deferred는 제이쿼리에서 프로미스를 사용할때 쓰는 객체이다.<br>먼저 <code>$.Deferred()</code>로 deferred 객체를 만들고 성공시 resolve호출하면 프로미스의 done이 연결되고, 실패시 reject를 호출하면 fail로 연결된다.<br>그리고 함수의 리턴은 항상 <code>dfd.promise();</code>로 해야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSelectBox</span>(<span class="params">nextSelectTagId, parntsId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = $.Deferred();</span><br><span class="line">$.<span class="keyword">get</span>("/admin/tree?parntsId=" + parntsId, function(data, status) &#123;</span><br><span class="line"><span class="comment">// 코드생략</span></span><br><span class="line">dfd.resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dfd.promise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 함수를 아래처럼 사용하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> checkedDateset = e.dataset;</span><br><span class="line">setSelectBox(<span class="string">'lev2ClId'</span>, checkedDateset.clid1).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> setSelectBox(<span class="string">'lev3ClId'</span>, checkedDateset.clid2); </span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/24/220424AwaitToDeferred/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>input태그에 스크립트 방지하는 방법(XSS 방지)</title>
      <link>https://sowon-dev.github.io/2022/04/20/220420XSS/</link>
      <guid>https://sowon-dev.github.io/2022/04/20/220420XSS/</guid>
      <pubDate>Wed, 20 Apr 2022 02:03:49 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트 테스트기간이라 몇가지 수정해달라는 요청받았다.&lt;br&gt;엑셀로 받았는데 수정사항 내용이 &lt;code&gt;글제목에 태그가 입력됨.&lt;/code&gt; 으로 왔길래 무슨 말일까 고민하고있었다.&lt;br&gt;팀장님이 “XSS방어하면 돼요~”라고 말씀해준 뒤에야 이해할 수 있었다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트 테스트기간이라 몇가지 수정해달라는 요청받았다.<br>엑셀로 받았는데 수정사항 내용이 <code>글제목에 태그가 입력됨.</code> 으로 왔길래 무슨 말일까 고민하고있었다.<br>팀장님이 “XSS방어하면 돼요~”라고 말씀해준 뒤에야 이해할 수 있었다. </p><a id="more"></a><p>아 html태그를 말하는 거였구나.<br>태그가 입력된다는 말이 진짜 html태그가 들어간다는 말이었구나.</p><h2 id="XSS란"><a href="#XSS란" class="headerlink" title="XSS란?"></a>XSS란?</h2><p>XSS란 Cross-site scriptiong에 약어로 input태그에 자바스크립트 함수등의 실행코드를 고의로 작동시켜 해당 사이트를 마음대로 컨트롤하며 Data등을 빼내갈 수 있는 공격법이다.<br>예를 들어 게시글을 수정할때 input태그에 <code>&lt;script&gt;alert(&#39;XSS테스트&#39;);&lt;/script&gt;</code> 를 입력한 뒤 글 수정버튼을 클릭하면 서버사이드랜더링으로 출력되는 값을 그대로 실행하기 때문에 XSS되어 alert창이 실행된다.<br>간단한 alert창이어서 망정이지 DB를 접근하거나 아예 사이트를 제어하는 스크립트를 실행시키는 경우 보안상 큰 문제가 발생할 수 있다.</p><p><br><br><br></p><h2 id="1-Service에서-XSS-방어하기"><a href="#1-Service에서-XSS-방어하기" class="headerlink" title="1 Service에서 XSS 방어하기"></a>1 Service에서 XSS 방어하기</h2><p>XSS를 방어하기 위해서 서버측에서 필터링을 걸어야한다.<br>구글링을 통해 다양한 방법을 찾을 수 있다.<br>보통 script, iframe, embed는 보안에 취약할 수 있기에 꼭 삭제해줘야한다.</p><ul><li>XssUtil.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">cleanXSS</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    String returnVal = value;</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>).replaceAll(<span class="string">"&gt;"</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"\\("</span>, <span class="string">"&amp;#40;"</span>).replaceAll(<span class="string">"\\)"</span>, <span class="string">"&amp;#41;"</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"'"</span>, <span class="string">"&amp;#39;"</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"eval\\((.*)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span>, <span class="string">"\"\""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"script"</span>, <span class="string">""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"iframe"</span>, <span class="string">""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"embed"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> returnVal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>그리고 호출은 서비스에서 진행하면된다.</p><ul><li>BoardServiceImpl.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBoard</span><span class="params">(BoardInfo info)</span> </span>&#123;</span><br><span class="line">info.setSubject(XssUtil.cleanXSS(info.getSubject()));</span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line">boardDao.updateBoard(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="2-JAVA-fILTER를-통해-XSS-방어"><a href="#2-JAVA-fILTER를-통해-XSS-방어" class="headerlink" title="2 JAVA fILTER를 통해 XSS 방어"></a>2 JAVA fILTER를 통해 XSS 방어</h2><ul><li><p>XSSFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XSSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> FilterConfig filterConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filterConfig = filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filterConfig = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        chain.doFilter(<span class="keyword">new</span> RequestWrapper((HttpServletRequest) request), response);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RequestWrapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestWrapper</span><span class="params">(HttpServletRequest servletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(servletRequest);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String parameter) &#123;</span><br><span class="line"> </span><br><span class="line">      String[] values = <span class="keyword">super</span>.getParameterValues(parameter);</span><br><span class="line">      <span class="keyword">if</span> (values==<span class="keyword">null</span>)  &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      <span class="keyword">int</span> count = values.length;</span><br><span class="line">      String[] encodedValues = <span class="keyword">new</span> String[count];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                 encodedValues[i] = cleanXSS(values[i]);</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">return</span> encodedValues;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">          String value = <span class="keyword">super</span>.getParameter(parameter);</span><br><span class="line">          <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">          <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String value = <span class="keyword">super</span>.getHeader(name);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cleanXSS</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">String returnVal = value;</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>).replaceAll(<span class="string">"&gt;"</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"\\("</span>, <span class="string">"&amp;#40;"</span>).replaceAll(<span class="string">"\\)"</span>, <span class="string">"&amp;#41;"</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"'"</span>, <span class="string">"&amp;#39;"</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"eval\\((.*)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span>, <span class="string">"\"\""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"script"</span>, <span class="string">""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"iframe"</span>, <span class="string">""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"embed"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>web.xml 에 필터설정 추가<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.test.api.XSSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="3-lucy-라이브러리-사용"><a href="#3-lucy-라이브러리-사용" class="headerlink" title="3 lucy 라이브러리 사용"></a>3 lucy 라이브러리 사용</h2><p>네이버에서 만든 lucy-xss-filter<a href="https://github.com/naver/lucy-xss-servlet-filter">(링크)</a> 라이브러리가 있다.<br>링크에 접속하면 한국어로 친절히 설명되어있다.<br>pom.xml파일과 web.xml파일, lucy-xss-servlet-filter-rule.xml파일을 설정해주면 된다!<br>가장 사용하기 좋은 방법이 아닐까한다. 실제로 1번 방식으로 했다가 3번방식으로 바꿨다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/20/220420XSS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>input 공백 입력방지하는 가장 쉬운 방법</title>
      <link>https://sowon-dev.github.io/2022/04/19/220419trim/</link>
      <guid>https://sowon-dev.github.io/2022/04/19/220419trim/</guid>
      <pubDate>Tue, 19 Apr 2022 05:32:21 GMT</pubDate>
      
      <description>&lt;p&gt;input태그의 value가 공백일 경우 유효성체크를 해야한다.&lt;br&gt;머릿속에는 여러 가지 방법이 둥둥 떠올랐다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>input태그의 value가 공백일 경우 유효성체크를 해야한다.<br>머릿속에는 여러 가지 방법이 둥둥 떠올랐다.</p><a id="more"></a><p>정규표현식으로 아예 패턴을 만들까? 그냥 trim을 쓸까? validation 라이브러리를 쓸까?<br>이 중 가장 접근이 빠른 방법은 무엇일까?<br>프로젝트는 이미 제이쿼리를 쓰고 있었기에 그냥 trim을 쓰는 것이 에너지를 아껴 다른 코드를 더 집중해서 볼 수 있는 길이라고 판단했다. </p><h2 id="기존-코드"><a href="#기존-코드" class="headerlink" title="기존 코드"></a>기존 코드</h2><p>기존 코드는 value가 빈 값인지만 확인하기 때문에 공백을 입력할 경우 if 조건절에 걸리지 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button[data-role=submit]"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">      <span class="keyword">if</span>($(<span class="string">'input[name="nm"]'</span>).val() == <span class="string">''</span>)&#123;</span><br><span class="line">        toastr.info(<span class="string">'이름은 필수 입력입니다.'</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).val(<span class="string">''</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).focus();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="공백-입력시-유효성-체크-코드"><a href="#공백-입력시-유효성-체크-코드" class="headerlink" title="공백 입력시 유효성 체크 코드"></a>공백 입력시 유효성 체크 코드</h2><p>trim()만 넣어주면 해결!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button[data-role=submit]"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">      <span class="keyword">if</span>($(<span class="string">'input[name="nm"]'</span>).val().trim() == <span class="string">''</span>)&#123;</span><br><span class="line">        toastr.info(<span class="string">'이름은 필수 입력입니다.'</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).val(<span class="string">''</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).focus();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/jQuery/">jQuery</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/19/220419trim/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ECMAScript</title>
      <link>https://sowon-dev.github.io/2022/04/18/220418ECMAScript/</link>
      <guid>https://sowon-dev.github.io/2022/04/18/220418ECMAScript/</guid>
      <pubDate>Mon, 18 Apr 2022 02:49:53 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 고객사로부터 사이트의 달력이 제대로 작동되지 않는다는 연락을 받았다. 내 머신에서는 잘만 되는데 왜그럴까? 유심히 찾아보고있는데 팀장님께서 호환성 문제라고 말씀해주셨다.&lt;br&gt;요구사항을 구현하면서 Promise를 사용했는데 IE는 해당 기능을 지원하지 않아서 제대로 작동하지 않았던 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 고객사로부터 사이트의 달력이 제대로 작동되지 않는다는 연락을 받았다. 내 머신에서는 잘만 되는데 왜그럴까? 유심히 찾아보고있는데 팀장님께서 호환성 문제라고 말씀해주셨다.<br>요구사항을 구현하면서 Promise를 사용했는데 IE는 해당 기능을 지원하지 않아서 제대로 작동하지 않았던 것이다.</p><a id="more"></a><p>이번 프로젝트에서는 IE는 지원하지 않기로 이미 협의했는데 고객사 담당자가 모르고 있었던 것! 이번 기회에 팀장님이 ES6에 대해 설명해주셨는데 더 궁금해서 찾아봤다.</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>ES6이란 ECMAScript 2015 의 약어로 ES2015라고도 불린다.<br>European Computer Manufacturer’s Association(이하 ECMA)에서 js와 Node.js의 기초가 되는 범용 프로그래밍 언어인 ECMAScript를 제정한다. 즉, 스크립트 언어<a href="https://sowon-dev.github.io/2020/05/27/200528javai/#스크립트언어">(링크)</a>가 어떻게 생겨야 하는 지에 관한 기준이다.</p><ul><li>대표적인 ES6문법<ol><li>const변수와 let변수</li><li>화살표 함수</li><li>템플릿 리터럴:백틱을 사용해 문자열 내 변수 사용가능<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 화살표함수와 템플릿 리터럴 예시</span></span><br><span class="line"><span class="keyword">const</span> myIntro = <span class="function">(<span class="params">name, mobile</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`안녕하세요. 이름은 <span class="subst">$&#123;name&#125;</span>이고 제 연락처는 <span class="subst">$&#123;mobile&#125;</span>입니다.`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>프로미스(Promise)</li><li>객체 비구조화: 배열 또는 객체의 값을 새 변수에 쉽게 할당 가능<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 비구조화 예시</span></span><br><span class="line"><span class="keyword">let</span> &#123;name, mobile&#125; = user;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><br><br><br></p><h2 id="JavaScript와-ECMAScript-관계"><a href="#JavaScript와-ECMAScript-관계" class="headerlink" title="JavaScript와 ECMAScript 관계"></a>JavaScript와 ECMAScript 관계</h2><p>실상 두 용어는 혼용되곤 한다.<br>왜냐하면 JavaScript는 1996년에 만들어졌고 이를 표준화하기 위해 ECMAScript가 1997년에 만들어졌다. 그 후 ECMAScript를 준수하면서 JavaScript가 발전해왔다.<br>즉 서로가 서로를 바라보고 있는 셈이다.</p><p><br><br><br></p><h2 id="배운점"><a href="#배운점" class="headerlink" title="배운점"></a>배운점</h2><p>사실 어떤 기능을 사용하건 다양한 브라우저의 호환성 문제를 항상 먼저 확인해야한다.<br>크롬브라우저에서 된다고 모든 브라우저에서 다 되는 게 아니니까! 따라서 프로젝트기획때부터 어떤 브라우저 버전까지 지원할지를 명확히 하는 습관이 필요하다!<br>난중에 시니어가 된 후 프로젝트 계약시 꼭 호환성 문제를 특약으로 명시해야겠다.</p><p>그나저나 만약 호환성문제가 있다면 사용했던 ES6기능을 눈물을 머금고 싹 다 걷어내야하는걸까??<br>NOPE!<br>세상에는 천재들이 많고 그 천재들이 이미 호환성 문제를 해결해주는 라이브러리들을 만들어놨기때문이다.<br>예를 들어 IE에서 Promise를 사용하고 싶은 경우 bluebirdjs<a href="http://bluebirdjs.com/docs/getting-started.html">(링크)</a>라는 라이브러리를 사용하면 된다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://en.wikipedia.org/wiki/ECMAScript">https://en.wikipedia.org/wiki/ECMAScript</a></li><li><a href="https://www.educative.io/edpresso/what-is-ecmascript">https://www.educative.io/edpresso/what-is-ecmascript</a></li><li><a href="https://wormwlrm.github.io/2018/10/03/What-is-the-difference-between-javascript-and-ecmascript.html">https://wormwlrm.github.io/2018/10/03/What-is-the-difference-between-javascript-and-ecmascript.html</a></li><li><a href="https://www.freecodecamp.org/news/write-less-do-more-with-javascript-es6-5fd4a8e50ee2/">https://www.freecodecamp.org/news/write-less-do-more-with-javascript-es6-5fd4a8e50ee2/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/18/220418ECMAScript/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ODBC란</title>
      <link>https://sowon-dev.github.io/2022/04/15/220415ODBC/</link>
      <guid>https://sowon-dev.github.io/2022/04/15/220415ODBC/</guid>
      <pubDate>Fri, 15 Apr 2022 04:57:53 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 CentOS에 odbc Connect를 다운로드해야할 일이 있었다.&lt;br&gt;JDBC&lt;a href=&quot;https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/&quot;&gt;(링크)&lt;/a&gt;는 익히 들어 알고 있는데 ODBC는 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 CentOS에 odbc Connect를 다운로드해야할 일이 있었다.<br>JDBC<a href="https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/">(링크)</a>는 익히 들어 알고 있는데 ODBC는 무엇일까?</p><a id="more"></a><h2 id="ODBC"><a href="#ODBC" class="headerlink" title="ODBC"></a>ODBC</h2><p>Open Database Connectivity의 약자로 DB에 접근하기 위한 API이다. Open이라는 단어가 주는 느낌처럼 어떤 종류의 DB든 접속할 수 있는 표준화된 규격으로 Microsoft에서 만들었다고 한다.<br>규격이 왜 필요할까?<br>세상에는 수많은 DB가 있고 각 DB마다 그들의 규격이 있다. 예를 들면 MariaDB는 MariaDB에서 만든 접근API를 사용해야한다.<br>너무나도 다른 규격들을 하나로 통일하고자 Micro soft는 ODBC를 만들었다.<br>이름 그대로 Open Database Connectivity이니 모든 DB회사들은 이 ODBC API와 통신할 수 있는 DB Driver를 만들게 되는데 그것이 바로 MYSQL ODBC Driver, MSSQL ODBC Driver등이 되었다.</p><iframe width="100%" height="350" src="https://www.youtube.com/embed/VkMXJvaWeTE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.microsoft.com/en-us/sql/odbc/microsoft-open-database-connectivity-odbc?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/odbc/microsoft-open-database-connectivity-odbc?view=sql-server-ver15</a></li><li><a href="https://www.techtarget.com/searchoracle/definition/Open-Database-Connectivity">https://www.techtarget.com/searchoracle/definition/Open-Database-Connectivity</a></li><li><a href="https://bramhyun.tistory.com/63">https://bramhyun.tistory.com/63</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/15/220415ODBC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>try catch와 throws, throw의 차이</title>
      <link>https://sowon-dev.github.io/2022/04/13/220413trycatchvsthrow/</link>
      <guid>https://sowon-dev.github.io/2022/04/13/220413trycatchvsthrow/</guid>
      <pubDate>Wed, 13 Apr 2022 04:52:33 GMT</pubDate>
      
      <description>&lt;p&gt;예외처리기법은 크게 3가지가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;try catch를 통한 예외처리&lt;/li&gt;
&lt;li&gt;throw로 그냥 예외발생시키기&lt;/li&gt;
&lt;li&gt;throws 키워드를 통한 예외처리 위임&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 중 try catch와 throw의 차이는 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>예외처리기법은 크게 3가지가 있다.</p><ol><li>try catch를 통한 예외처리</li><li>throw로 그냥 예외발생시키기</li><li>throws 키워드를 통한 예외처리 위임</li></ol><p>이 중 try catch와 throw의 차이는 무엇일까?</p><a id="more"></a><h2 id="try-catch와-throws의-차이"><a href="#try-catch와-throws의-차이" class="headerlink" title="try catch와 throws의 차이"></a>try catch와 throws의 차이</h2><p>throws의 예외를 던지는 것, 즉 위임이다. 이는 처리와는 다르다.<br>try catch는 예외를 받아서 처리하는 것이다. 이는 처리이다. catch구문에서 사용자가 흐름을 능동적으로 제어할 수 있다.</p><p><br><br><br></p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><p>throws는 메서드에서 처리해야 할 하나 이상의 예외를 메서드를 호출한 곳으로 던져버린다.<br>이러한 위임은 처리와는 다르다.<br>try catch사용시 catch블록에서 예외를 처리해서 없애버린다.<br>BUT 위임은 예외를 없애지 못하고 그냥 호출한 곳으로 예외를 전달만 한다.<br>예외를 전달받은 메서드는 다시 예외 처리 책임이 발생한다.</p><p>throws를 쓰면 예외처리를 해줘야하는 번거로움이 있는데 왜 사용할까?<br>주로 개발자가 직접 정의하는 예외를 발생시키고 싶은 경우 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">customThrowExample</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 다시 예외처리해줘야한다.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">customThrowExample();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"catch구문은 잡히지않는다. try에서 customThrowExample으로 직접 예외를 발생시킴"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2020/07/21/200722javai/">자바 Error와 Exception</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/13/220413trycatchvsthrow/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>예약가능여부 SQL쿼리로 알아보는 주니어 개발자와 시니어 개발자의 차이</title>
      <link>https://sowon-dev.github.io/2022/03/22/220322SQLdiff/</link>
      <guid>https://sowon-dev.github.io/2022/03/22/220322SQLdiff/</guid>
      <pubDate>Tue, 22 Mar 2022 05:26:26 GMT</pubDate>
      
      <description>&lt;p&gt;예약시간표를 만들고싶었다.&lt;br&gt;예악가능한 시간대는 10시와 13시, 15시가 총 3가지이고 예약상태가 예약승인, 예약취소 총 3가지가 있다.&lt;br&gt;예약이 한 번도 없거나, 예약취소가 된 경우 예약이 가능하며 예약승인인 경우 예약이 불가능하다.&lt;br&gt;이때 특정 날짜를 달력에서 선택했을때 시간대별로 예약가능한지 불가능한지를 알고싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>예약시간표를 만들고싶었다.<br>예악가능한 시간대는 10시와 13시, 15시가 총 3가지이고 예약상태가 예약승인, 예약취소 총 3가지가 있다.<br>예약이 한 번도 없거나, 예약취소가 된 경우 예약이 가능하며 예약승인인 경우 예약이 불가능하다.<br>이때 특정 날짜를 달력에서 선택했을때 시간대별로 예약가능한지 불가능한지를 알고싶었다.</p><a id="more"></a><p>예를 들어 달력에서 3월 22일 클릭했을때 예약상태가 null이거나 예약취소이면 예약이 가능하고 예약상태가 예약승인경우에 예약이 불가능하다. 예약시간대와 예약상태는 DB 데이터로 존재하므로 쿼리를 잘 짜서 예약가능여부를 출력하고 싶었다.</p><table><thead><tr><th align="center">선택한날짜(searchDate)</th><th align="center">예약시간대</th><th align="center">예약상태</th><th align="center">예약가능여부</th></tr></thead><tbody><tr><td align="center">2022-03-22</td><td align="center">10시</td><td align="center">예약승인</td><td align="center">X</td></tr><tr><td align="center">2022-03-22</td><td align="center">13시</td><td align="center">null</td><td align="center">O</td></tr><tr><td align="center">2022-03-22</td><td align="center">15시</td><td align="center">예약취소</td><td align="center">O</td></tr></tbody></table><p><br><br><br></p><h2 id="내-쿼리"><a href="#내-쿼리" class="headerlink" title="내 쿼리"></a>내 쿼리</h2><p>예약상태 값이 있든 없든 출력되어야하므로 먼저 left join을 생각했었다. 하지만 기준테이블을 뭘로 잡으면 좋을지 고민해봤지만 주니어의 머리속엔 아무것도 떠오르지 않았다.<br>그래서 고민하다가 union이 떠올랐다. union에 관해서는 2번적도 포스팅을 한 적이 있었는데 언젠가 내 머리속에서 버로 떠올랐으면 했었는데 드디어 떠올랐다.  짜릿해😆<br>배운 지식이 머리속에서 떠오르는 건 짜릿한 경험이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">select date</span><br><span class="line">, ifnull(예약시간대, <span class="string">'10:00'</span>)</span><br><span class="line">, ifnull(count(예약상태), <span class="number">0</span>)</span><br><span class="line">from exampletable</span><br><span class="line">where 예약시간대 = <span class="string">'10:00'</span></span><br><span class="line">and date = #&#123;searchDate&#125;</span><br><span class="line">and 예약상태 = <span class="string">'예약승인'</span></span><br><span class="line"></span><br><span class="line">union </span><br><span class="line"></span><br><span class="line">select date </span><br><span class="line">, ifnull(예약시간대, <span class="string">'13:00'</span>)</span><br><span class="line">, ifnull(count(예약상태), <span class="number">0</span>)</span><br><span class="line">from exampletable</span><br><span class="line">where 예약시간대 = <span class="string">'13:00'</span></span><br><span class="line">and date = #&#123;searchDate&#125;</span><br><span class="line">and 예약상태 = <span class="string">'예약승인'</span></span><br><span class="line"></span><br><span class="line">union </span><br><span class="line"></span><br><span class="line">select date</span><br><span class="line">, ifnull(예약시간대, <span class="string">'15:00'</span>)</span><br><span class="line">, ifnull(count(예약상태), <span class="number">0</span>)</span><br><span class="line">from exampletable</span><br><span class="line">where 예약시간대 = <span class="string">'15:00'</span></span><br><span class="line">and date = #&#123;searchDate&#125;</span><br><span class="line">and 예약상태 = <span class="string">'예약승인'</span></span><br></pre></td></tr></table></figure><p>ifnull을 이용하여 예약이 한 번도 되지 않은 날짜인 경우 0이 출력되도록 했다.<br>해당 일자에 예약이 있었던 경우에는 ‘예약승인’상태가 몇 개인지 count했다.<br>즉 count로 1이상 나오는 경우 예약이 불가능하다. 0이면 예약가능하다.</p><p>union이 머리속에 나온건 좋았지만 중복이 너무 많은 쿼리이다.<br>아쉽고도 아쉬웠다.<br>중복을 없앨 수 있지 않을까? 더 좋은 쿼리가 있을건데! 분명히!<br>구글링을 통해 여러 방법을 따라하면서 고민해보다가 결국 팀장님께 여쭤봤다.</p><p><br><br><br></p><h2 id="중복을-제거한-쿼리"><a href="#중복을-제거한-쿼리" class="headerlink" title="중복을 제거한 쿼리"></a>중복을 제거한 쿼리</h2><p>팀장님이 union쿼리도 이해하기 쉽게 잘 짰다고 칭찬해주셨다.<br>난 참 운도 좋아! 매일 칭찬해주시는 팀장님 그저 빛… 칭찬은 주니어를 춤추게 해🕺<br>“음 중복을 없애고 싶다면 이렇게는 어때요?” 하면서 1분만에 중복이 제거된 쿼리를 짜주셨다.😯<br>솔직히 1분도 안 걸린듯하다. 팀장님. 천재. 그저 빛….<br>바쁘신 와중에 도와주셔서 정말 감사했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.v_dt,</span><br><span class="line">   a.v_tm</span><br><span class="line">   b.cnt</span><br><span class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> <span class="comment"># &#123;searchDate&#125; v_dt,</span></span><br><span class="line">               <span class="string">'10:00'</span>         v_tm</span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="comment"># &#123;searchDate&#125;,</span></span><br><span class="line">               <span class="string">'13:00'</span></span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="comment"># &#123;searchDate&#125;,</span></span><br><span class="line">               <span class="string">'15:00'</span>) a</span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">date</span>,</span><br><span class="line">                         예약시간대,</span><br><span class="line">                         <span class="keyword">Count</span>(*) cnt</span><br><span class="line">                  <span class="keyword">FROM</span>   exampletable</span><br><span class="line">                  <span class="keyword">WHERE</span>  예약상태 = <span class="string">'예약승인'</span></span><br><span class="line">                  <span class="keyword">GROUP</span>  <span class="keyword">BY</span> <span class="built_in">date</span>, 예약시간대) b</span><br><span class="line">              <span class="keyword">ON</span> a.v_dt = b.date</span><br><span class="line">                 <span class="keyword">AND</span> a.v_tm = b.예약시간대;</span><br></pre></td></tr></table></figure><p>from절에 서브쿼리를 사용했는데 서브쿼리안에 <code>from 테이블</code>이 없다. 이는 무조건 출력하겠다는 의미이다.<br>선택한 날짜와 예약시간대 3가지는 항상 출력되야하므로 union을 사용했다.<br>특정 시간대에 아무런 예약상태가 없어 null이 나올 수 있도록 left join을 걸었고 이때 where조건인 예약승인을 넣는다.</p><p>서브쿼리가 들어가고 그 안에 join절이 나오면 어떻게 SQL formatting해야 가독성이 좋아지는지 잘모르겠다. Javascript 코드 포맷터인 Pretieer처럼 SQL도 다수가 사용하는 format형식같은 게 있었으면 좋겠다. </p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQLDB/">MySQLDB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/22/220322SQLdiff/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DispatcherSerlvet 씹어먹기</title>
      <link>https://sowon-dev.github.io/2022/03/16/220316DispatcherServlet/</link>
      <guid>https://sowon-dev.github.io/2022/03/16/220316DispatcherServlet/</guid>
      <pubDate>Wed, 16 Mar 2022 05:34:04 GMT</pubDate>
      
      <description>&lt;p&gt;SpringMVC에선 DispatcherSerlvet가 아주 중요한 역할을 한다.&lt;br&gt;잠깐 SpringMVC란 무엇일까?&lt;br&gt;Spring프레임워크에 Model, View, Controller를 븐리한 디자인 패턴을 말한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SpringMVC에선 DispatcherSerlvet가 아주 중요한 역할을 한다.<br>잠깐 SpringMVC란 무엇일까?<br>Spring프레임워크에 Model, View, Controller를 븐리한 디자인 패턴을 말한다.</p><a id="more"></a><p>Spring 프레임워크는 개발을 지원하기 위해 다양한 clas를 제공하는데 그 중 아래 3가지를 이번 글에서 다룰 것이다.</p><ol><li>DispatcherServlet</li><li>HandlerMapping</li><li>ViewResolver</li></ol><table><thead><tr><th align="center">용어</th><th align="center">역할</th><th align="center">예시</th></tr></thead><tbody><tr><td align="center">DispatcherServlet</td><td align="center">클라이언트의 요청을 받아서 HandlerMapping에 넘긴다</td><td align="center"></td></tr><tr><td align="center">HandlerMapping</td><td align="center">Key-Value구조로 URL-메서드를 저장한 table에서 클라이언트의 요청을 처리할 Controller를 찾는 역할</td><td align="center">@RequestMapping(“/url”) annotaion사용하면 Controller URL Mapping한다.</td></tr><tr><td align="center">ViewResolver</td><td align="center">Controller가 리턴한 View Name에 prefix와 suffix를 적용하여 반환한다.</td><td align="center"></td></tr></tbody></table><p><br><br><br></p><h2 id="SpringMVC-요청-처리-과정"><a href="#SpringMVC-요청-처리-과정" class="headerlink" title="SpringMVC 요청 처리 과정"></a>SpringMVC 요청 처리 과정</h2><p><img src="https://docs.spring.io/spring-framework/docs/2.0.8/reference/images/mvc.png" alt="https://docs.spring.io/spring-framework/docs/2.0.8/reference/mvc.html"></p><ol><li>클라이언트가 요청을 한다. <ul><li>ex) /admin/post/add</li></ul></li><li>DispatcherServlet는 어떤 메서드가 좋은지 HandlerMapping에게 물어본다.</li><li>HandlerMapping는 URL매칭테이블에서 뒤져서 해당 url과 일치하는 메서드를 반환한다. <ul><li>ex) add()</li></ul></li><li>DispatcherServlet는 받은 메서드를 가지고 어떤 HandlerAdapter가 처리할 수 있는 지 확인후 특정 HandlerAdapter에 넘겨준다.</li><li>HandlerAdapter가 받은 정보로 Controller에게 전달한다. <ul><li>ex) @RequestMapping(“/admin/post/add”) public String add(){ return “addForm” }</li><li>스프링의 큰 특징은 관심사의 분리이다. DispatcherServlet이 직접 Controller를 호출하는 것보다 HandlerAdapter를 통함으로써 느슨한 연결이 된다.</li><li>느슨한 연결은 어떤 변경에서든지 유리하게 대처할 수 있다. =&gt; 즉, 변경의 유리한 설계</li></ul></li><li>Controller 반환값을 HandlerAdapter에게 넘겨준다.<ul><li>ex) addForm</li></ul></li><li>HandlerAdapter는 그 값을 DispatcherServlet에게 전달한다.<ul><li>ex) addForm</li></ul></li><li>DispatcherServlet는 ViewResolver에게 전달한다. <ul><li>ex) addForm</li></ul></li><li>ViewResolver는 prefix와 suffix를 적용한 뒤 실제 화면을 알아내서 DispatcherServlet에게 반환한다.<ul><li>ex) /WEB-INF/views/addForm.jsp</li></ul></li><li>DispatcherServlet은 해당 뷰를 호출하면서 Model도 함께 전달한다.</li><li>화면은 Model객체를 가져와서 응답결과를 만들고 클라이언트에게 응답결과를 전달한다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/03/16/220316DispatcherServlet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[STS] 자바버전 안 바뀔때 해결! 자바버전 바꾸는 방법(1.8에서 11로)</title>
      <link>https://sowon-dev.github.io/2022/03/11/220311STS-changeJavaVersion/</link>
      <guid>https://sowon-dev.github.io/2022/03/11/220311STS-changeJavaVersion/</guid>
      <pubDate>Fri, 11 Mar 2022 03:54:33 GMT</pubDate>
      
      <description>&lt;p&gt;자바버전을 깔~끔하게 1.8에서 11로 바꿔보자!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바버전을 깔~끔하게 1.8에서 11로 바꿔보자!</p><a id="more"></a><h2 id="1-Preferences-설정"><a href="#1-Preferences-설정" class="headerlink" title="1 Preferences 설정"></a>1 Preferences 설정</h2><p>Window -&gt; Preferences -&gt; 검색어: Compiler -&gt; Java 하위 Compiler클릭 -&gt; JDK Compliance에서 Compiler compliance level에서 1.8을 11로 변경<br><img src="/img/220311javaVersion1.JPG" alt=""></p><p><br><br><br></p><h2 id="2-pom-xml-설정"><a href="#2-pom-xml-설정" class="headerlink" title="2 pom.xml 설정"></a>2 pom.xml 설정</h2><p>pom.xml을 더블클릭하여 연 뒤 아래 2가지를 수정한다.</p><ol><li><p>properties 하위 java-version을 1.8에서 11로 변경<br><img src="/img/220311javaVersion2.JPG" alt=""></p></li><li><p>plugins 하위 artifactId가 maven-compiler-plugin를 찾은 뒤 그 하위 source와 target을 ${java-version} 으로 변경</p><ul><li><code>${java-version}</code>으로 설정해놓으면 1번에서 설정한 java-version을 그대로 따라가므로 11로 변경하든 16으로 변경하든 다시 1.8로 변경하든 동일한 자바 버전을 바라봐서 추후 변경할 필요가 없다.<br><img src="/img/220311javaVersion3.JPG" alt=""></li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/11/220311STS-changeJavaVersion/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>바이너리 파일이란? 텍스트파일이랑 뭐가 다를까? ft.MIME</title>
      <link>https://sowon-dev.github.io/2022/03/09/220309binaryfile/</link>
      <guid>https://sowon-dev.github.io/2022/03/09/220309binaryfile/</guid>
      <pubDate>Wed, 09 Mar 2022 04:05:04 GMT</pubDate>
      
      <description>&lt;p&gt;바이너리 파일이란 무엇일까?&lt;br&gt;바이너리 파일은 텍스트파일과 비교하면 이해가 쉽다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>바이너리 파일이란 무엇일까?<br>바이너리 파일은 텍스트파일과 비교하면 이해가 쉽다.</p><a id="more"></a><p>표로 간단하게 정리해볼 수 있다.</p><table><thead><tr><th align="center"></th><th align="center">Text File</th><th align="center">Binary File</th></tr></thead><tbody><tr><td align="center">정의</td><td align="center">문자만 저장된 파일</td><td align="center">문자와 숫자가 저장된 파일</td></tr><tr><td align="center">읽기 특징</td><td align="center">문자만 읽을 수 있음. 전부 문자로 읽음</td><td align="center">데이터를 있는 그대로 읽음</td></tr><tr><td align="center">쓰기 특징</td><td align="center">문자만 쓸 수 있음. 숫자를 쓴 경우 모두 문자로 변환 후 씀</td><td align="center">데이터를 있는 그대로 씀</td></tr></tbody></table><p>text파일에 숫자를 쓰는 예를 들어보자.<br>앞서 text파일에은 숫자를 문자로 변환 후 쓴다고 했다.<br>만약 숫자 17을 썼다면 text파일은 17을 ‘1’과 ‘7’로 변환 후 저장한다. 이로 인해 메모장(텍스트에디터)으로 특정 문서를 열면 깨지는 경우가 생긴다.</p><p>이렇게 바이너리 데이터를 텍스트기반인 HTTP 프로토콜에 보내려면 방법이 두 가지가 있다.</p><ol><li>MIME 타입으로 바이너리 데이터를 그대로 보내기</li><li>Base64로 바이너리 데이터를 텍스트로 변환하여 보내기<ul><li>장점: 안전하게 전송가능</li><li>단점: 데이터이 사이즈가 커짐</li></ul></li></ol><p><br><br><br></p><h2 id="MIME-Multipurose-Internet-Mail-Extensions"><a href="#MIME-Multipurose-Internet-Mail-Extensions" class="headerlink" title="MIME(Multipurose Internet Mail Extensions)"></a>MIME(Multipurose Internet Mail Extensions)</h2><p>MIME은 마임이라고 읽으며 텍스트기반 프로토콜에서 바이너리 데이터(예를 들어 이미지, 동영상, 파일)를 전송하기 위해 HTTP의 Context-Type 헤더에 데이터 타입을 명시하여 사용한다.<br>마임타입의 형태는 <code>타입/서브타입</code>으로 기입하면 된다.</p><p><img src="https://www.researchgate.net/profile/Max-Kaiser-9/publication/220273642/figure/tbl1/AS:667773340487683@1536220979214/Selection-of-MIME-types-encountered.png" alt="https://www.researchgate.net"></p><p><br><br><br></p><h2 id="인코딩-Base64-vs-ASCII"><a href="#인코딩-Base64-vs-ASCII" class="headerlink" title="인코딩: Base64 vs ASCII"></a>인코딩: Base64 vs ASCII</h2><p>바이너리 데이터를 텍스트 데이터로 변환할때 크게 두 가지 방식이 있다. 아스키코드와 Base64이다.</p><table><thead><tr><th align="center"></th><th align="center">갯수</th><th align="center">진법</th><th align="center">비트</th><th align="center">어떤 텍스트데이터가 있는지?</th></tr></thead><tbody><tr><td align="center">Base64</td><td align="center">64개 = 2^6</td><td align="center">64진법</td><td align="center">6비트</td><td align="center"><a href="https://en.wikipedia.org/wiki/Base64">0-9 a-z A-Z + / 가 포함됨</a></td></tr><tr><td align="center">ASCII</td><td align="center">128개 = 2^7</td><td align="center">128진법</td><td align="center">7비트</td><td align="center"><a href="https://en.wikipedia.org/wiki/ASCII">0-9 a-z A-Z + / 와 특수문자 포함</a></td></tr></tbody></table><p>ASCII는 Base64에서 특수문자가 포함되어있는데 몇몇 특수문자는 출력이 되지않으므로 ASCII로 변환하면 제대로 되지 않을 수 있다.<br>어떤 인코딩이라든지 Base64의 데이터들은 다 있다. 따라서 안정적인 Base64인코딩을 사용하면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/03/09/220309binaryfile/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>톰캣서버란? Tomcat 내부 구조와 설정파일</title>
      <link>https://sowon-dev.github.io/2022/03/07/220307Server-tomcat/</link>
      <guid>https://sowon-dev.github.io/2022/03/07/220307Server-tomcat/</guid>
      <pubDate>Mon, 07 Mar 2022 02:55:29 GMT</pubDate>
      
      <description>&lt;p&gt;클라이언트가 요청을 보내면 톰캣 내부에서는 어떤 일이 일어날까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>클라이언트가 요청을 보내면 톰캣 내부에서는 어떤 일이 일어날까?</p><a id="more"></a><h2 id="톰캣-서버-내부-구조"><a href="#톰캣-서버-내부-구조" class="headerlink" title="톰캣 서버 내부 구조"></a>톰캣 서버 내부 구조</h2><p><img src="https://flylib.com/books/4/15/1/html/2/id_9807/fig21_01.jpg" alt="https://flylib.com/books/4/15/1/html/2/id_9807/fig21_01.jpg"></p><p>Tomcat Server안에 Service가 있고 그 서비스를 처리하는 것이 Engine(Catalina)이다.<br>Engine안에는 Host가 여러 개가 있을 수 있다.<br>Host안에는 여러 개의 Context가 있을 수 있다.<br>여기사 Context란 쉽게 말해 스프링프로젝트라고 생각하면 된다.<br>Context안에 있는 Servlet이 여러개 있는데 각 Servlet은 쉽게 Controller로 생각할 수 있다.</p><p><img src="https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png" alt="https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png"></p><p>클라이언트가 먼저 url을 요청하면 Thread Pool로 간다. Thread Pool은 요청을 받은 후에 만들면 늦으니까 요청을 받기 전 미리 만들어 놓는다.<br>그 중 요청을 처리하고 있지 않은 Thread 하나가 요청을 받게된다.<br>요청 프로토콜에 따라 Connector가 동일한 프로토콜을 연결해주며 보통 HTTP1.1 프로토콜이다.<br>프로토콜이 프로세스를 처리해서 Engline(Catalina)을 거치고 요청 받은 Host안의 Context까지 찾은 다음 해당 Servlet을 호출한다.<br>Dispatcher Servlet이 요청받은 Controller의 method를 찾아 호출한다.</p><p><br><br><br></p><h2 id="설정파일"><a href="#설정파일" class="headerlink" title="설정파일"></a>설정파일</h2><ul><li>톰캣설치경로/conf/server.xml : 톰캣 서버 설정 파일</li><li>톰캣설치경로/conf/web.xml : 톰캣의 모든 프로젝트의 공통설정 파일</li><li>프로젝트이름/WEB-INF/web.xml : 프로젝트(Context)의 개별 설정</li></ul><p>공통설정파일이 먼저 적용된 후 프로젝트 개별 설정파일이 적용된다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://tomcat.apache.org/tomcat-9.0-doc/architecture/overview.html">https://tomcat.apache.org/tomcat-9.0-doc/architecture/overview.html</a></li><li><a href="https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png">https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png</a></li><li><a href="https://sowon-dev.github.io/2020/10/04/201005jspProcessVSThreadNWebServerVSWAS/#%EC%9B%B9%EC%84%9C%EB%B2%84-WEB-SERVER-VS-%EC%9B%B9%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%84%9C%EB%B2%84-WAS-Web-Application-Server">웹서버(WEB SERVER) VS 웹어플리케이션서버(WAS, Web Application Server)</a></li><li><a href="https://sowon-dev.github.io/2020/08/16/200817jspi/#Servlet%EA%B8%B0%EC%B4%88">Servlet : Servlet용어정리</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Tomcat/">Tomcat</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/07/220307Server-tomcat/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[이클립스/STS] 보기 편하게 code style 설정하기 - 포맷팅설정</title>
      <link>https://sowon-dev.github.io/2022/03/01/220302STS-formatSetting/</link>
      <guid>https://sowon-dev.github.io/2022/03/01/220302STS-formatSetting/</guid>
      <pubDate>Tue, 01 Mar 2022 21:09:29 GMT</pubDate>
      
      <description>&lt;p&gt;이클립스나 STS 기본 코드 스타일은 너무 많은 tab공백 등으로 지저분해보이기도 한다.&lt;br&gt;보기 편하도록 신규 프로젝트 시작시 코드 스타일을 적용하고 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이클립스나 STS 기본 코드 스타일은 너무 많은 tab공백 등으로 지저분해보이기도 한다.<br>보기 편하도록 신규 프로젝트 시작시 코드 스타일을 적용하고 있다.</p><a id="more"></a><p>코드 스타일 적용 단축키: <code>Ctrl + Shift + F</code></p><p>아래는 내가 주로 사용하는 코드 스타일이다.</p><p><br><br></p><h2 id="JAVA-code-style-🎀"><a href="#JAVA-code-style-🎀" class="headerlink" title="JAVA code style 🎀"></a>JAVA code style 🎀</h2><p>자바코드스타일은 구글 스타일을 사용하고 있다.<br>먼저 <a href="https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml">google/styleguide 레포지토리안의 eclipse-java-google-style</a>를 선택하여 xml파일로 다운로드한다.</p><ol><li>이클립스 상단의 Windows &gt; Preferences</li><li>Formatter 검색 후 Java &gt; Code Style &gt; Formatter 클릭 </li><li>Import 버튼 클릭 후 미리 다운로드한 eclipse-java-google-style.xml 파일을 선택한 후 apply 버튼 클릭</li></ol><p>자바 코드 스타일 적용 끝!</p><p><br><br><br></p><h2 id="JavaScript-code-style-🎀"><a href="#JavaScript-code-style-🎀" class="headerlink" title="JavaScript code style 🎀"></a>JavaScript code style 🎀</h2><p>jsp에서 script태그를 이용해 js를 사용하는 경우 이 설정도 함께 해줘야 보기 편하다.</p><ol><li>이클립스 상단의 Windows &gt; Preferences</li><li>Formatter 검색 후 JavaScript &gt; Code Style &gt; Formatter 클릭 </li><li>New 버튼 클릭 후 <code>Profile name: 원하는 이름</code> 기입하고  <code>Initialize settings with the following profile: Eclipse[built-in]</code> 선택 후 OK버튼</li><li>Indentation 에서 <code>Tab policy : Spaces only</code>와 <code>Indentation size : 2</code>, 그리고 <code>Tab size : 2</code>를 기입<ul><li><img src="/img/220302jsCodeStyle1.JPG" alt="Indentation 참고"></li></ul></li><li>Line Wrapping &gt; <code>Maximem line width : 180</code> 기입<ul><li><img src="/img/220302jsCodeStyle2.JPG" alt="Line Wrapping 참고"></li></ul></li></ol><p>자바스크립트 코드 스타일 적용 끝!</p><p><br><br><br></p><h2 id="HTML-code-style-🎀"><a href="#HTML-code-style-🎀" class="headerlink" title="HTML code style 🎀"></a>HTML code style 🎀</h2><ol><li>이클립스 상단의 Windows &gt; Preferences</li><li>html 검색 후  Web &gt; HTML Files &gt; Editor 클릭 <ul><li>Line width : 120</li><li>Indent using spaces 체크</li><li>Indentation size = 2</li><li>Inline Elements &gt; 인라인으로 보이기 싫은 태그들 선택 &gt; Remove<ul><li>나는 주로 select, tr, td를 remove한다.</li></ul></li></ul></li><li>apply 버튼 클릭 후 OK버튼 클릭</li></ol><p><img src="/img/220302jsCodeStyle2.JPG" alt="HTML 설정 참고"></p><p>HTML 코드 스타일 적용 끝!</p><p><br><br><br></p><h2 id="JSP-Validation-OFF-🎀"><a href="#JSP-Validation-OFF-🎀" class="headerlink" title="JSP Validation OFF 🎀"></a>JSP Validation OFF 🎀</h2><p>JSP파일이 많다면 Validation OFF를 하는 게 로딩도 빠르고 보기 편하다.</p><ul><li>Window &gt; Preference &gt; Web &gt; JSP Files &gt; Validation<ul><li>Validate JSP fragemtns 체크해제</li></ul></li></ul><p>끝!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Eclipse/">Eclipse</category>
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/01/220302STS-formatSetting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NoSQL이 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/02/26/220226NoSQL/</link>
      <guid>https://sowon-dev.github.io/2022/02/26/220226NoSQL/</guid>
      <pubDate>Sat, 26 Feb 2022 03:46:51 GMT</pubDate>
      
      <description>&lt;p&gt;NoSQL이란 무엇일까?&lt;br&gt;SQL문을 아예 안쓴다는 말일까?&lt;br&gt;Nope!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>NoSQL이란 무엇일까?<br>SQL문을 아예 안쓴다는 말일까?<br>Nope!</p><a id="more"></a><h2 id="🏷️-NoSQL-Not-Only-SQL"><a href="#🏷️-NoSQL-Not-Only-SQL" class="headerlink" title="🏷️ NoSQL = Not Only SQL"></a>🏷️ NoSQL = Not Only SQL</h2><p>스키마없이 데이터를 표현하는 것이 주된 특징인 일련의 데이터베이스들을 의미한다.</p><p><br><br><br></p><h2 id="🏷️-일반적인특징"><a href="#🏷️-일반적인특징" class="headerlink" title="🏷️ 일반적인특징"></a>🏷️ 일반적인특징</h2><ol><li>정해진 스키마가 없다.</li><li>DB종류에 따라 그 특성이 매우 다르다. (RDBMS가 비슷비슷한 것과는 다름)</li></ol><p><br><br><br></p><h2 id="🏷️-장점"><a href="#🏷️-장점" class="headerlink" title="🏷️ 장점"></a>🏷️ 장점</h2><ol><li>높은 수평 확장성<ul><li>더 많은 인스턴스를 만들어 더 큰 로드를 감당할 수 있음</li></ul></li><li>초기 개발의 용이성</li><li>스키마 설계의 유연성</li></ol><p><br><br><br></p><h2 id="🏷️-단점"><a href="#🏷️-단점" class="headerlink" title="🏷️ 단점"></a>🏷️ 단점</h2><ol><li>표준의 부재<ul><li>표준이 없어서 마이그레이션할때 각각 다 맞춰야 함</li></ul></li><li>SQL에 비해 약한 query capability<ul><li>복잡한 쿼리는 힘듬 -&gt; 단순한 쿼리만 가능</li></ul></li><li>스키마가 없기때문에 data consistency를 어플리케이션 레벨에서 보장해야 함</li></ol><p><br><br><br></p><h2 id="🏷️-종류"><a href="#🏷️-종류" class="headerlink" title="🏷️ 종류"></a>🏷️ 종류</h2><ol><li>Key-value<ul><li>예: Redis, AWS DynamoDB</li><li>모든 레코드는 Key-value의 페어이다.</li><li>NoSQL의 가장 단순한 형태</li></ul></li><li>Document-based<ul><li>예: DynamoDB, CouchDB,몽고DB</li><li>각 레코드가 하나의 문서가 된다.</li><li>key-value종류보다 문서가 구조적이기때문에 쿼리 최적화, 활용성 높은 API가 제공됨</li></ul></li><li>Graph<ul><li>예: Neo4j, AWS Neptune</li><li>그래프 이론을 바탕으로 데이터베이스를 그래프로 표현함</li><li>그래프는 node(객체)와 edge(관계) 그리고 property(객체의 속성)로 이루짐</li><li>관계가 first-class citizen이기 때문에 관계 기반 문제(실시간 추천등)에 유리</li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/NoSQL/">NoSQL</category>
      
      
      <comments>https://sowon-dev.github.io/2022/02/26/220226NoSQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[OS]메모리vs드라이브vsCPU 코어 쉽게 이해하자</title>
      <link>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/</link>
      <guid>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/</guid>
      <pubDate>Wed, 23 Feb 2022 17:12:39 GMT</pubDate>
      
      <description>&lt;p&gt;소스코드를 일절 건드리지않았는데 운영서버의 사이트가 500에러가 났다.&lt;br&gt;팀장님은 드라이브 문제일수있다고 하셨다.&lt;br&gt;💾여기서 드라이브란?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>소스코드를 일절 건드리지않았는데 운영서버의 사이트가 500에러가 났다.<br>팀장님은 드라이브 문제일수있다고 하셨다.<br>💾여기서 드라이브란?</p><a id="more"></a><p>스토리지드라이브를 뜻하며 HDD나 SDD가 해딩된다.<br>메모리와 드라이브 개념을 확실히하기 위해 글을 찾아봤는데 비유가 가장 적합한 글을 찾았다.<br>기업소개사이트인데 Aricles폴더 안에 메모리 개념들이 잘 포스팅되어있다.</p><ul><li><a href="https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do">컴퓨터 메모리(RAM)란 무엇이며 어떤 역할을 합니까?</a></li></ul><p>위 글에 따르면 메모리는 책상과 비슷하다고 한다. 책상안에서 서류작성, 파일보관, 업무전화등 다양한 작업을 진행할 수 있다.<br>이때 책상이 크면 클수록 더 많은 작업을 한꺼번에 펼쳐놓고 처리할 수 있어서 서류 보관 캐비넷(드라이브)에 빠르게 접근이 가능하다.<br>책상이 크다면 이미 책상 위에 올려져있을테니까!</p><p><br><br><br></p><h2 id="그렇다면-CPU-코어는-뭘까-😮"><a href="#그렇다면-CPU-코어는-뭘까-😮" class="headerlink" title="그렇다면 CPU 코어는 뭘까? 😮"></a>그렇다면 CPU 코어는 뭘까? 😮</h2><p>코어가 많을수록 메모리가 많을수록 작업이 빨라진다던데 메모리와 코어, 이 둘은 어떻게 다를까?<br>이에 관해 팀장님이 비유적으로 설명해주셨다.<br><strong>CPU 코어는 책상앞의 사람의 수</strong>로 비유할 수 있다고 한다.👍 사람수가 많을수록 작업이 빨라지니까 CPU 코어가 많을수록 속도가 빨라진다.</p><p>와 역시 팀장님이다. 이해 쏙쏙!!!😆</p><p><br><br><br></p><h2 id="정리-📀"><a href="#정리-📀" class="headerlink" title="정리 📀"></a>정리 📀</h2><ul><li>메모리: 책상</li><li>드라이브: 서류 보관 캐비넷</li><li>CPU 코어: 일을 처리하기 위해 책상앞에 앉아있는 사람<ul><li>예를 들어 CPU 6코어면 6명의 사람이 일처리를 위해 책상 앞에 있다고 생각하면 됨</li></ul></li><li>CPU 스레드: 사람의 손<ul><li>예를 들어 CPU 2코어 4스레드이면 2명의 사람이 4가지 작업을 동시에 할 수 있다고 생각하면 됨</li><li>한 손에 한 작업씩 진행중인 느낌.</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do">https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do</a></li><li>팀장님 설명</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Operating-Systeming/">Operating Systeming</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
