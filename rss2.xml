<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 06 Oct 2020 03:51:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[ITWILL : JSP] JSP전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/jspList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/jspList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌷프로그래밍기초&quot;&gt;&lt;a href=&quot;#🌷프로그래밍기초&quot; class=&quot;headerlink&quot; title=&quot;🌷프로그래밍기초&quot;&gt;&lt;/a&gt;🌷프로그래밍기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/05/28/200528jspi/&quot;&gt;프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;🌷JS기초&quot;&gt;&lt;a href=&quot;#🌷JS기초&quot; class=&quot;headerlink&quot; title=&quot;🌷JS기초&quot;&gt;&lt;/a&gt;🌷JS기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200601jspi/&quot;&gt;JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌷프로그래밍기초"><a href="#🌷프로그래밍기초" class="headerlink" title="🌷프로그래밍기초"></a>🌷프로그래밍기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200528jspi/">프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버</a></li></ol><h2 id="🌷JS기초"><a href="#🌷JS기초" class="headerlink" title="🌷JS기초"></a>🌷JS기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200601jspi/">JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/06/02/200602jspi/">JS를 문서에 나타내는 3가지방법, undefined VS null, 백의자리 Math.floor(), 복합대입연산자로table생성, A++과 ++A차이점, ==과===차이점, 논리표</a></li><li><a href="https://sowon-dev.github.io/2020/06/03/200603jspi/">JAVA SE/EE/ME 차이점, JAVA EE 설정. Tomcat 설치및설정, 이클립스 단축키</a></li><li><a href="https://sowon-dev.github.io/2020/06/04/200604jspi/">아이디와 비번입력, 새로고침location.reload(), 주석한번에 단축키, switch문 출력문 한줄리팩토링</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200609jspi/">반복문 for 순서 자세히, 개발자 도구로 디버깅, 기본 반복문암기, for문과 if문의 자리바꿈에 따른 변화, 반복문의 전위연산 VS 후위연산, do while문</a></li><li><a href="https://sowon-dev.github.io/2020/06/11/200611jspi/">무한반복문, 보조제어(break와continue)문, 익명함수, 재귀함수, 지역변수를 전역에서 사용하는 방법, 내장함수</a></li></ol><h2 id="🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM"><a href="#🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM" class="headerlink" title="🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))"></a>🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi/">Object객체 전체개념, tv채널객체함수, new를 쓰고 안쓰고의 차이</a></li><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi2/">Date객체 자세히, 디데이구하는 함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi/">Array객체 (for ~ in구문, join(), reverse(), sort())</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi2/">String객체, 짤라오는 함수 4종류 .substring(), slice(), substr(), charAt(), .indexOf()와 .lastIndexOf()차이, .concat(), .split(), ID자릿수를 제한하는 이메일 유효성검사</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi3/">이벤트리스너와 이벤트핸들러, 브라우저객체모델, window객체전체</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi/">브라우저객체모델안의 Document객체 (bgColor와 fgColor사용,  img태그에 접근하여 속성 사용, 랜덤 img 출력하기)</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi2/">브라우저객체모델안의 location객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi/">브라우저객체모델안의 history객체, screen객체, navigator객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi2/">문서 객체 모델안의 form태그, 페이지이동방식(get과 post), focus() vs blur() vs select()</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200618jspi/">문서 객체 모델안의 if문에 return;의 역할, radio태그, checkbox태그</a></li></ol><h2 id="🌷JS실습"><a href="#🌷JS실습" class="headerlink" title="🌷JS실습"></a>🌷JS실습</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi/">js로 간단한 회원가입페이지 작성하기</a></li></ol><h2 id="🌷JSP기초"><a href="#🌷JSP기초" class="headerlink" title="🌷JSP기초"></a>🌷JSP기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi2/">JSP 첫 프로젝트 톰캣과 연결</a></li><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi/">JSP 주석과 JSP directive, JSP 스크립트 요소</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi/">JAVA DATATYPE, Integer.parseInt(문자열), 동일한 파라미터의 값을 가지는 데이터가 여러개있을 경우 변수로 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi2/">커넥션풀(Connection Pool)</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi/">Wrapper클래스, 오토 박싱과 오토 언박싱, hierarchy확인법</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-2/">자바 클래스(객체) vs 추상클래스 vs 인터페이스</a></li></ol><h2 id="🌷JSP기초-내장객체-중-영역객체"><a href="#🌷JSP기초-내장객체-중-영역객체" class="headerlink" title="🌷JSP기초 : 내장객체 중 영역객체"></a>🌷JSP기초 : 내장객체 중 영역객체</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi2/">내장객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi2/">영역객체scope</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi/">영역객체 안에서 사용하는 속성(Attribute), 링크이동 방법별 전달가능한 영역(scope)</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi2/">JSP 디렉티브(directive) 중 include VS 액션태그 include, jspf확장자 파일</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi/">세션(Session)</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi2/">==과 str.equals(str2) 차이, 객체와 클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200701jspi/">쿠키(Cookie)</a></li></ol><h2 id="🌷MySQL"><a href="#🌷MySQL" class="headerlink" title="🌷MySQL"></a>🌷MySQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200701jspi2/">MYSQL 설치, MYSQL환경변수설정, cmd에서 명령어 잘못입력해서 mysql못빠져나갈때</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi/">MYSQL 접속순서, DB명령어, 테이블명령어, 데이터명령어</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi2/">MySQL 한글깨짐현상 두가지 해결방법 : cmd와 Workbench, 이클립스와 MYSQL연결</a></li></ol><h2 id="🌷JDBC"><a href="#🌷JDBC" class="headerlink" title="🌷JDBC"></a>🌷JDBC</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi/">JDBC활용 - import쓰는 이유, form페이지로 받은 데이터를 DB에 insert하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi2/">JDBC활용 - JAVA에서 DB 정보 지우기 2가지방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi/">JDBC활용 - DB에서 고객정보를 불러와서 HTML테이블에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi2/">JDBC활용 - TIMESTAMP주의점, JDBC에서 데이터처리</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707jspi/">JDBC활용 - 회원정보수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/08/200708jspi/">JDBC활용 - 회원목록출력하는데 관리자는 빼고 출력하기, 자바 에러 두종류</a></li></ol><h2 id="🌷JAVABEAN"><a href="#🌷JAVABEAN" class="headerlink" title="🌷JAVABEAN"></a>🌷JAVABEAN</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi/">Javabean : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi2/">자바빈 실습1 : 회원가입페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi/">자바빈 실습2 : 로그인 및 로그아웃페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi2/">자바빈 실습3 : 회원정보조회 및 수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi/">자바빈 실습4 : web.xml, 회원정보삭제페이지</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi3/">자바빈 실습5 : 관리자만 확인할 수 있는 회원목록페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi2/">자바빈 실습6 : 게시판만들기(글쓰기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/21/200721jspi/">자바빈 실습7 : 게시판만들기(글 총 갯수, 글목록, 페이징처리)</a></li><li><a href="https://sowon-dev.github.io/2020/07/22/200722jspi/">자바빈 실습8 : 게시판만들기(글내용보기, 글수정하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi/">자바빈 실습9 : 게시판만들기(글삭제하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi2/">자바빈 실습10 : 게시판만들기(답글쓰기)</a></li></ol><h2 id="🌷파일업로드와-다운로드-기능-구현"><a href="#🌷파일업로드와-다운로드-기능-구현" class="headerlink" title="🌷파일업로드와 다운로드 기능 구현"></a>🌷파일업로드와 다운로드 기능 구현</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi/">자바빈 실습11 : MultipartRequest클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi2/">자바빈 실습12 : 파일업로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi3/">자바빈 실습13 : 파일다운로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200728jspi/">자바빈 실습14 : ServletContext 사용하여 파일업로드와 다운로드</a></li></ol><h2 id="🌷자료구조"><a href="#🌷자료구조" class="headerlink" title="🌷자료구조"></a>🌷자료구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi2/">자료구조1 : Collections Framwork(Set계열, List계열)</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi/">자료구조2 : Stack클래스, Queue인터페이스, Map인터페이스</a></li></ol><h2 id="🌷model1-홈페이지만들기"><a href="#🌷model1-홈페이지만들기" class="headerlink" title="🌷model1 홈페이지만들기"></a>🌷model1 홈페이지만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/29/200729jspi/">홈페이지만들기1 : 프로젝트 시작 설정 및 자바빈생성과 DB연결</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi/">홈페이지만들기2 : 아이디중복체크 포함한 회원가입기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi2/">홈페이지만들기3 : 로그인/로그아웃 기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200803jspi/">홈페이지만들기4 : 게시판글쓰기구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi/">홈페이지만들기5 : 게시판에 글목록표시구현</a></li></ol><h2 id="🌷JQuery"><a href="#🌷JQuery" class="headerlink" title="🌷JQuery"></a>🌷JQuery</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi2/">JQuery1 : JQuery 사용설정, 선택자, css()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi/">JQuery2 : attr(), html()와 text(), append()와 prepend()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi2/">JQuery3 : setInterval()와 clearInteval(), CDATA VS PCDATA</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi/">JQuery4 : click(), bind(), event.preventDefault(), unbind(), keyup(), 유효성체크(자바스크립트 vs 제이쿼리)</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi2/">JQuery5 : 유효성체크(자바스크립트 vs 제이쿼리), 제이쿼리 기본효과</a></li><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi/">JQuery6 : innerfade 라이브러리, animate(속성, 속도, 콜백함수)</a></li></ol><h2 id="🌷Ajax"><a href="#🌷Ajax" class="headerlink" title="🌷Ajax"></a>🌷Ajax</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi2/">Ajax : Ajax특징, XMLHttpRequest클래스, txt 페이지 처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi/">Ajax : xml처리, json처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi2/">Ajax : DB데이터를 불러와서 json형태로 변경하여 출력하기</a></li></ol><h2 id="🌷JSTL과-EL"><a href="#🌷JSTL과-EL" class="headerlink" title="🌷JSTL과 EL"></a>🌷JSTL과 EL</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi/">JSTL과 EL : JSTL과 EL개념, CORE 라이브러리(out)</a></li><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi2/">JSTL과 EL : CORE 라이브러리(set)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi/">JSTL과 EL : CORE 라이브러리(if, forEach, forTokens, choose)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi2/">JSTL과 EL : fmt 라이브러리(formatDate, formatNumber)</a></li><li><a href="https://sowon-dev.github.io/2020/08/13/200813jspi/">JSTL과 EL : EL태그로 동일한 name의 파라미터를 EL태그로 쉽게 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi/">JSTL과 EL : EL태그 연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi2/">EL과 Servlet : RequestDispatcher.forward 로 페이지 이동 후 데이터별 출력방법</a></li></ol><h2 id="🌷model2-MVC패턴-쇼핑몰만들기"><a href="#🌷model2-MVC패턴-쇼핑몰만들기" class="headerlink" title="🌷model2(MVC패턴) 쇼핑몰만들기"></a>🌷model2(MVC패턴) 쇼핑몰만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi/">Servlet : Servlet용어정리, model1과 model2(MVC구조) 개발방식 비교</a></li></ol><h3 id="쇼핑몰회원관리"><a href="#쇼핑몰회원관리" class="headerlink" title="쇼핑몰회원관리"></a>쇼핑몰회원관리</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi2/">Servlet회원관리1: 기본설정 및 가상주소생성</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi/">Servlet회원관리2: 회원가입</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi2/">Servlet회원관리3: 로그인</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi3/">Servlet회원관리4: 메인페이지와 로그아웃</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi/">Servlet회원관리5: 회원정보조회</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi2/">Servlet회원관리6: 회원탈퇴</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi/">Servlet회원관리7: 회원전체목록조회(관리자기능)</a></li></ol><h3 id="게시판"><a href="#게시판" class="headerlink" title="게시판"></a>게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/">Servlet게시판1: 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi/">Servlet게시판2: 게시판 글쓰기</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi2/">Servlet게시판3: 게시판 리스트·게시글전체목록·페이징처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi/">Servlet게시판4: 글 내용보기</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi2/">Servlet게시판5: 글 수정하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi/">Servlet게시판6: 글 삭제하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi2/">Servlet게시판7: 답글하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi3/">Servlet게시판8: 파일업로드·파일보기</a></li></ol><h3 id="관리자전용-상품목록과-등록게시판"><a href="#관리자전용-상품목록과-등록게시판" class="headerlink" title="관리자전용 상품목록과 등록게시판"></a>관리자전용 상품목록과 등록게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi4/">Servlet관리자전용상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi5/">Servlet관리자전용상품2 : 상품등록</a></li><li><a href="https://sowon-dev.github.io/2020/09/08/200908jspi/">Servlet관리자전용상품3 : 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi/">Servlet관리자전용상품4 : 상품수정·인기상품처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi2/">Servlet관리자전용상품5 : 상품삭제</a></li></ol><h3 id="일반유저용-상품목록"><a href="#일반유저용-상품목록" class="headerlink" title="일반유저용 상품목록"></a>일반유저용 상품목록</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi/">Servlet일반상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi2/">Servlet일반상품2 : 카테고리별 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi/">Servlet일반상품3 : 상품상세정보</a></li></ol><h3 id="장바구니"><a href="#장바구니" class="headerlink" title="장바구니"></a>장바구니</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi2/">Servlet장바구니1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi3basket/">Servlet장바구니2 : 장바구니에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi4/">Servlet장바구니3 : 장바구니리스트, 장바구니에서 상품삭제</a></li></ol><h3 id="구매하기"><a href="#구매하기" class="headerlink" title="구매하기"></a>구매하기</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/16/200916jspi/">Servlet구매하기1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/17/200917jspi/">Servlet구매하기2 : 구매하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi/">Servlet구매하기3 : 주문목록</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi2/">Servlet구매하기4 : 주문상세정보페이지</a></li></ol><h3 id="관리자용-주문리스트"><a href="#관리자용-주문리스트" class="headerlink" title="관리자용 주문리스트"></a>관리자용 주문리스트</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi/">Servlet관리자용주문목록1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-1/">Servlet관리자용주문목록2 : 고객주문목록</a></li><li>🌟<a href="https://sowon-dev.github.io/2020/09/23/200923jspi-3/">Servlet관리자용주문목록3 : 고객주문목록에서 주문 상태 및 운송장정보 변경</a></li><li><a href="https://sowon-dev.github.io/2020/09/24/200924jspi/">Servlet관리자용주문목록4 : 고객주문목록에서 삭제</a></li></ol><h2 id="🌷스프링프레임워크"><a href="#🌷스프링프레임워크" class="headerlink" title="🌷스프링프레임워크"></a>🌷스프링프레임워크</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/05/201005springi/">프레임워크란, Spring 특징과 기능, 컨테이너란</a></li><li><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/">제어의 역행(IoC)과 의존성 주입(DI)</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201006springi/">Spring 기본 동작순서, JSP와 SPRING의 차이점</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201006springi-1/">회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/jspList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : Android] Android전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/androidList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/androidList/</guid>
      <pubDate>Mon, 16 Nov 2020 00:43:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🍫안드로이드기초&quot;&gt;&lt;a href=&quot;#🍫안드로이드기초&quot; class=&quot;headerlink&quot; title=&quot;🍫안드로이드기초&quot;&gt;&lt;/a&gt;🍫안드로이드기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/09/200909and/&quot;&gt;안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/28/200928and//&quot;&gt;안드로이드 4대 컴포넌트&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🍫안드로이드기초"><a href="#🍫안드로이드기초" class="headerlink" title="🍫안드로이드기초"></a>🍫안드로이드기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200909and/">안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928and//">안드로이드 4대 컴포넌트</a></li></ol><a id="more"></a><h2 id="🍫화면구성"><a href="#🍫화면구성" class="headerlink" title="🍫화면구성"></a>🍫화면구성</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910and/">안드로이드 컴파운드버튼, 이미지넣기</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and/">레이아웃종류 및 레이아웃 안에서 자주 사용되는 속성</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-1/">고급위젯</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-2/">옵션메뉴, 컨텍스트메뉴, 토스트</a></li></ol><h2 id="🍫기능"><a href="#🍫기능" class="headerlink" title="🍫기능"></a>🍫기능</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/24/200924and/">안드로이드 파일처리</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/androidList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : DB] DB전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/DBList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/DBList/</guid>
      <pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌱리눅스와-SQL&quot;&gt;&lt;a href=&quot;#🌱리눅스와-SQL&quot; class=&quot;headerlink&quot; title=&quot;🌱리눅스와 SQL&quot;&gt;&lt;/a&gt;🌱리눅스와 SQL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200602dbi/&quot;&gt;간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/15/200616dbi/&quot;&gt;virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/18/200619dbi/&quot;&gt;CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌱리눅스와-SQL"><a href="#🌱리눅스와-SQL" class="headerlink" title="🌱리눅스와 SQL"></a>🌱리눅스와 SQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200602dbi/">간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200616dbi/">virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200619dbi/">CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi/">SQL DEVELOPER사용방법</a></li></ol><h2 id="🌱DB와-SQL개념"><a href="#🌱DB와-SQL개념" class="headerlink" title="🌱DB와 SQL개념"></a>🌱DB와 SQL개념</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200529dbi/">DB기초이론, DBMS</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200602dbi2/">데이터베이스기초활용</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200605dbi/">DDL vs DML vs DCL</a></li><li><a href="https://sowon-dev.github.io/2020/06/07/200608dbi/">제약조건의 컬럼레벨과 테이블레벨문법, 제약조건 5가지, 버퍼에 있는 자주 사용할 쿼리구문을 저장하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200610dbi/">select as from where, order by, 동일유저 동시접속 가능, 트랜잭션 commit과 rollback</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200717dbi/">트랜잭션(Transaction), 치환변수, save명령어, 리소스부족에러발생시</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200804dbi/">Data Dictionary</a></li></ol><h2 id="🌱Select-구문"><a href="#🌱Select-구문" class="headerlink" title="🌱Select 구문"></a>🌱Select 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200623dbi/">Select 구문을 사용한 데이터 검색, null VS 0 VS 공백, Distinct</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi/">테이블 전체목록조회, 테이블구조조회, WHERE(조건문)절</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi2/">Order by 정렬</a></li></ol><h2 id="🌱단일행함수"><a href="#🌱단일행함수" class="headerlink" title="🌱단일행함수"></a>🌱단일행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi/">단일행함수 : 문자함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi2/">단일행함수 : 숫자함수, 날짜함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi3/">단일행함수 : 변환함수, 일반함수</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200811dbi/">단일행함수 : 조건부 표현식</a></li></ol><h2 id="🌱여러행함수"><a href="#🌱여러행함수" class="headerlink" title="🌱여러행함수"></a>🌱여러행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi4/">여러행함수 : 그룹함수</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707dbi/">여러행함수 : Group by절, Having절</a></li></ol><h2 id="🌱중요-구문"><a href="#🌱중요-구문" class="headerlink" title="🌱중요 구문"></a>🌱중요 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/">JOIN</a></li><li><a href="https://sowon-dev.github.io/2020/07/13/200714dbi/">Subquery1: Subquery개념, 중첩Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/23/200824dbi/">Subquery2: Inlineview, Scalar Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery3: exists연산자, not exists연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery4: with절</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi3/">SQL 기억해야 할 쿼리</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200820dbi/">Top-N분석</a></li></ol><h2 id="🌱데이터조작어-DML-데이터정의어-DDL"><a href="#🌱데이터조작어-DML-데이터정의어-DDL" class="headerlink" title="🌱데이터조작어 (DML) / 데이터정의어 (DDL)"></a>🌱데이터조작어 (DML) / 데이터정의어 (DDL)</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/14/200714dbi2/">데이터조작어DML : insert/update/delete구문</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200721dbi/">데이터정의어DDL : table 생성 table 복사, varchar2와 varchar와 char비교</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200724dbi/">데이터정의어DDL : 테이블수정(컬럼수정, 제약조건수정, 컬럼명수정, 제약조건명수정), 테이블명변경, 테이블삭제, 테이블절단, truncate과 delete과 drop차이</a></li></ol><h2 id="🌱SQL의-OBJECT-종류"><a href="#🌱SQL의-OBJECT-종류" class="headerlink" title="🌱SQL의 OBJECT 종류"></a>🌱SQL의 OBJECT 종류</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200728dbi/">SQL의 OBJECT종류 : view</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi/">SQL의 OBJECT종류 : 시퀀스(Sequence)</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi2/">SQL의 OBJECT종류 : 인덱스(Index), 시노님(Synonym)</a></li></ol><h2 id="🌱DB구조"><a href="#🌱DB구조" class="headerlink" title="🌱DB구조"></a>🌱DB구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/25/200826dbi/">Oracle DB구조1 : Database</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200828dbi/">Oracle DB구조2 : Instance의 SGA메모리구조</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831dbi/">Oracle DB구조3 : Instance의 Background process</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200901dbi2/">Oracle DB구조4 : 구조 완벽정리, 상활별 오라클 DB 순서</a></li></ol><h2 id="🌱DB구현-및-관리"><a href="#🌱DB구현-및-관리" class="headerlink" title="🌱DB구현 및 관리"></a>🌱DB구현 및 관리</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200911dbi/">Oracle DB생성방법 2가지, Oracle DB Tool, Parameterfile 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/14/200914dbi/">오라클의 Database 켜고 끄기</a></li><li><a href="https://sowon-dev.github.io/2020/09/18/200918dbi/">오라클의 Datafile 관리하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/21/200921dbi/">DB유저관리 : user 생성, 권한부여</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi/">데이터충돌, DeadLock</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi2/">DB fail 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928dbi/">Controlfile다중화, Redoligfile다중화</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/DBList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006springi-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006springi-1/</guid>
      <pubDate>Mon, 05 Oct 2020 17:21:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;회원관리프로그램-순서&quot;&gt;&lt;a href=&quot;#회원관리프로그램-순서&quot; class=&quot;headerlink&quot; title=&quot;회원관리프로그램 순서&quot;&gt;&lt;/a&gt;회원관리프로그램 순서&lt;/h2&gt;&lt;p&gt;회원정보를 DB에서 읽어서 출력하는 동작을 구현해보자&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Action 인터페이스 - execute()&lt;/li&gt;
&lt;li&gt;MemberControllerTest 객체 생성 -&amp;gt; 호출</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="회원관리프로그램-순서"><a href="#회원관리프로그램-순서" class="headerlink" title="회원관리프로그램 순서"></a>회원관리프로그램 순서</h2><p>회원정보를 DB에서 읽어서 출력하는 동작을 구현해보자</p><ol><li>Action 인터페이스 - execute()</li><li>MemberControllerTest 객체 생성 -&gt; 호출<a id="more"></a></li><li>SelectMemberAction 객체 사용 </li><li>DAO 객체 생성 -&gt; 처리 (출력)<ul><li>의존관계 Select &lt;-&gt; DAO  : DAO 객체를 주입 </li><li>객체를 미리 생성(Spring) member.xml 생성</li></ul></li></ol><p><br><br><br></p><h2 id="Action-java-인터페이스-생성"><a href="#Action-java-인터페이스-생성" class="headerlink" title="Action.java 인터페이스 생성"></a><code>Action.java</code> 인터페이스 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"><span class="comment">// Action 페이지의 동작을 미리 선언해서 사용</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberControllerTest-java-코드-생성"><a href="#MemberControllerTest-java-코드-생성" class="headerlink" title="MemberControllerTest.java 코드 생성"></a><code>MemberControllerTest.java</code> 코드 생성</h2><ul><li>기존 모델2 방법 : <code>Action action = new SelectMemberAction();</code></li><li>스프링 방법 : <ul><li><code>SelectMemberAction</code>로도 가능하지만 <code>Action</code>처럼 업캐스팅통한 표현이 약한 결합을 띄고있다는 것을 표현하는 것이기때문에 <code>Action</code>처럼 업캐스팅방식이 더 많이 사용한다</li><li><pre><code class="java">BeanFactory fac = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileSystemResource(<span class="string">"member.xml"</span>));<span class="comment">//SelectMemberAction action = (SelectMemberAction) fac.getBean("action");</span>Action action = (Action) fac.getBean(<span class="string">"action"</span>); <span class="comment">//업캐스팅</span>&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li></ul></li></ul><p><br><br><br></p><h2 id="SelectMemberAction-java-생성"><a href="#SelectMemberAction-java-생성" class="headerlink" title="SelectMemberAction.java 생성"></a><code>SelectMemberAction.java</code> 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectMemberAction</span> <span class="keyword">implements</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// Action 인퍼테이스를 사용하여 다형성구현</span></span><br><span class="line">System.out.println(<span class="string">"M: SelectMemberAction 클래스의 execute메서드실행"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 예를 들어</span></span><br><span class="line"><span class="comment"> * 1.파라미터 저장하기</span></span><br><span class="line"><span class="comment"> * 2.세션아이디체크</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//모델2방식</span></span><br><span class="line"><span class="comment">//3.DB접근 -&gt; DAO객체 생성 </span></span><br><span class="line"><span class="comment">//MemberDAO mdao = new MemberDAOImpl();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//의존주입(DI)방식</span></span><br><span class="line"><span class="comment">//3.DB접근 -&gt; DAO객체 생성 </span></span><br><span class="line">BeanFactory fac = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileSystemResource(<span class="string">"member.xml"</span>));</span><br><span class="line">MemberDAO mdao = (MemberDAO) fac.getBean(<span class="string">"mdao"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.메서드</span></span><br><span class="line">List list = mdao.getMemberList();</span><br><span class="line">System.out.println(<span class="string">"M: List데이터저장 ["</span>+ list+<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.페이지이동</span></span><br><span class="line">System.out.println(<span class="string">"M: 페이지이동(View)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberDAO-java-인터페이스-생성"><a href="#MemberDAO-java-인터페이스-생성" class="headerlink" title="MemberDAO.java 인터페이스 생성"></a><code>MemberDAO.java</code> 인터페이스 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberDAO</span> </span>&#123;</span><br><span class="line"><span class="comment">//DAO역할을 하는 객체로 사용됨</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//회원목록가져오기</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getMemberList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberDAOImpl-java-생성"><a href="#MemberDAOImpl-java-생성" class="headerlink" title="MemberDAOImpl.java 생성"></a><code>MemberDAOImpl.java</code> 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDAOImpl</span> <span class="keyword">implements</span> <span class="title">MemberDAO</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//디비연결메서드</span></span><br><span class="line"><span class="comment">//자원해제메서드</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getMemberList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DAO: 디비연결"</span>);</span><br><span class="line">System.out.println(<span class="string">"DAO: sql작성 &amp; pstmt객체생성 &amp; ?입력 &amp; sql쿼리구문실행 &amp; rs에 가져온 정보를 List저장"</span>);</span><br><span class="line">System.out.println(<span class="string">"DAO: 자원해제"</span>);</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"빽다방"</span>);</span><br><span class="line">list.add(<span class="string">"더벤티"</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="member-xml-인터페이스-생성"><a href="#member-xml-인터페이스-생성" class="headerlink" title="member.xml 인터페이스 생성"></a><code>member.xml</code> 인터페이스 생성</h2><ul><li>파라미터가 없으므로 bean태그만 생성. 안에 <code>&lt;property name=&quot;&quot;&gt;</code>를 사용하지않아도 됨</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DTD --&gt;</span><br><span class="line">&lt;!DOCTYPE beans PUBLIC <span class="string">"-//SPRING//DTD BEAN//EN"</span> <span class="string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans&gt;</span><br><span class="line">&lt;!-- Controller_Action  --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"action"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itwill.member.SelectMemberAction"</span>&gt;</span><br><span class="line">&lt;!-- 파라미터가 없으므로 bean태그만 생성  --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DAO --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"mdao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itwill.member.db.MemberDAOImpl"</span>&gt;</span><br><span class="line">&lt;!-- 파라미터가 없으므로 bean태그만 생성  --&gt;</span><br><span class="line">&lt;property name=""&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006springi-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]Spring 기본 동작순서, JSP와 SPRING의 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006springi/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006springi/</guid>
      <pubDate>Mon, 05 Oct 2020 15:15:13 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;스프링기본동작순서&quot;&gt;&lt;a href=&quot;#스프링기본동작순서&quot; class=&quot;headerlink&quot; title=&quot;스프링기본동작순서&quot;&gt;&lt;/a&gt;스프링기본동작순서&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="스프링기본동작순서"><a href="#스프링기본동작순서" class="headerlink" title="스프링기본동작순서"></a>스프링기본동작순서</h2><a id="more"></a><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F2737783B56DE20C7101302" alt="https://server-engineer.tistory.com/253"></p><p><br><br><br></p><h2 id="JSP와-SPRING의-차이점"><a href="#JSP와-SPRING의-차이점" class="headerlink" title="JSP와 SPRING의 차이점"></a>JSP와 SPRING의 차이점</h2><p>문득 궁금해져서 검색해보니 아주 명쾌한 비유와 설명을 찾았다.</p><blockquote><p>JSP란?<br>JSP는 HTML문서에 내부적으로 자바문법을 사용할 수 있게 하는 웹페이지 스크립트 언어입니다.</p><p>Spring Framework 란?<br>Spring은 다양한 개발 빠르게 적용할 수 있게 만들어 놓은 도구입니다. Java는 삽을 들고 땅을 파는 거라면, Spring은 포크레인으로 땅을 파는 것과 같다고 표현할 수 있습니다.</p><p>JSP와 Spring의 차이<br>JSP는 웹 페이지 영역에서 사용되고, Spring은 웹 서비스 전반적 환경을 구성합니다.</p><p>Spring이 나라라고 한다면, JSP는 도시 입니다. 스프링은 프로그램 전반적인 근본이 되는 환경을 구축하고있고, JSP는 그 환경의 일부분에 사용되는 언어입니다.<br>출처 : <a href="https://cloudstudying.kr/questions/79">https://cloudstudying.kr/questions/79</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006springi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING] 프레임워크란, Spring 특징과 기능, 컨테이너란</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005springi/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005springi/</guid>
      <pubDate>Sun, 04 Oct 2020 20:06:41 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Framework란&quot;&gt;&lt;a href=&quot;#Framework란&quot; class=&quot;headerlink&quot; title=&quot;Framework란?&quot;&gt;&lt;/a&gt;Framework란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;어떤것을 구성하는 구조/뼈대/틀&lt;/li&gt;
&lt;li&gt;사용될 기능을 클래스/인터페이스로 만들어놓고 제공해주는 형태&lt;/li&gt;
&lt;li&gt;직접적인 구현X, 활용O</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Framework란"><a href="#Framework란" class="headerlink" title="Framework란?"></a>Framework란?</h2><ul><li>어떤것을 구성하는 구조/뼈대/틀</li><li>사용될 기능을 클래스/인터페이스로 만들어놓고 제공해주는 형태</li><li>직접적인 구현X, 활용O<a id="more"></a></li><li>프레임워크 등장배경 : 기존 언어의 불편함을 개선하기 위해서<ul><li>개발생산성 향상됨</li></ul></li><li><a href="http://ldg.pe.kr/framework_reference/spring/ver1.2.2/html/springbeansdtd.html">spring beans DTD</a> : 해당 문서의 저장되는 데이터를지정한다.</li></ul><p><br><br><br></p><h2 id="컨테이너-Container"><a href="#컨테이너-Container" class="headerlink" title="컨테이너 Container"></a>컨테이너 Container</h2><blockquote><p>Container 는 Spring 의 핵심입니다. Container 는 개발자를 대신하여, Bean 을 생성 / 관리 / 제거합니다. Container 가 Bean 을 관리해주기 때문에, 개발자는 모듈 간에 의존 및 결합으로 인해 발생하는 문제로부터 자유로워 졌습니다. 아래와 같이 독립적인 코드를 작성해서 Annotaion 만 남겨주면 Container 가 개발자가 원하는 상황에 코드를 실행합니다. 따라서 개발자는 메서드가 언제, 어디서 호출되어야 하는지 그리고 메서드를 호출하기 위해 필요한 매개 변수를 준비해서 전달하지 않습니다. Container 가 개발자 대신 알아서 호출합니다.<br>이렇게 Container 가 개발자를 대신하여 메서드가 호출될 때와 메서드가 필요한 자원을 전달하는 설계 구조를 Inversion of Control (IOC) 이라 합니다.<br>IOC 는 메서드가 필요로 하는 자원을 코드가 실행되는 타임에 전달하는데, 이를 Dependency Injection (DI) 이라 합니다. 예를 들어 Container가 알아서 greeting 메서드가 필요로 하는 name 매개변수를 전달하는 과정과 run 메서드가 필요로 하는 RestTemplate 매개변수를 전달하는 과정 모두 Dependency Injection (DI) 입니다.<br>출처: <a href="https://ibocon.tistory.com/122">https://ibocon.tistory.com/122</a></p></blockquote><p><br><br><br></p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ul><li>자바 웹 애플리케이션을 생성하기위한 오픈소스</li><li>스프링은 경량 프레임워크이면서 경량 컨테이너이다.<ul><li>컨테이너란 무엇일까? ex) 톰캣</li><li>EJB(Enterprise Java Beans)프레임워크 : 굉장히 무거움. 스프링 이전에 사용됨.</li></ul></li></ul><p><br><br><br></p><h3 id="스프링의-특징"><a href="#스프링의-특징" class="headerlink" title="스프링의 특징"></a>스프링의 특징</h3><table><thead><tr><th align="center">스프링의 특징</th><th align="left">추가설명</th></tr></thead><tbody><tr><td align="center"><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/#제어의-역행-IoC-Inversion-of-Control">제어의 역행(IoC, Inversion of Control)</a></td><td align="left">서블릿/빈 개발자가 코드로 작성X, 프레임워크로 수행</td></tr><tr><td align="center"><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-DI-Dependency-Injection">의존성 주입(DI, Dependency Injection)</a></td><td align="left">클래스를 사용한 객체를 개발자가 코드로 생성X, 프레임워크가 생성해서 사용</td></tr><tr><td align="center">관점 지향 (AOP, Aspect-Oriented Programming)</td><td align="left">핵심기능(주요기능) 제외한 부수적인 기능을 프레임워크가 생성해서 제공</td></tr><tr><td align="center">영속성-(DB)</td><td align="left">-</td></tr><tr><td align="center">라이브러리 연동 제공</td><td align="left">-</td></tr><tr><td align="center">POJO(Plain Old Java Object)방식 프레임워크</td><td align="left"><img src="https://yunjigo92.github.io/img/study/POJO.png" alt="https://yunjigo92.github.io/2020/02/18/java_pojo.html"></td></tr></tbody></table><p><br><br><br></p><h2 id="스프링의-주요-기능"><a href="#스프링의-주요-기능" class="headerlink" title="스프링의 주요 기능"></a>스프링의 주요 기능</h2><table><thead><tr><th align="center">스프링의 주요 기능</th><th align="left">설명</th></tr></thead><tbody><tr><td align="center">SPRING Core</td><td align="left">다른 기능과 설정값을 분리하기위한 IoC 기능을 제공한다.</td></tr><tr><td align="center">SPRING Context</td><td align="left">스프링의 기본 기능으로 각각의 애플리케이션을 작동하는 Bean(=객체)에 대한 접근을 처리한다.</td></tr><tr><td align="center">SPRING DAO</td><td align="left">모델2보다 향상된 JDBC기능 활용할 수 있다.</td></tr><tr><td align="center">SPRING ORM</td><td align="left">MyBatis(마이바티스)와 같은 영속성 프레임워크 연동기능을 제공한다.</td></tr><tr><td align="center">SPRING AOP</td><td align="left">관점지향 프로그래밍를 제공한다.</td></tr><tr><td align="center">SPRING Web</td><td align="left">웹 개발에 필요한 기능을 제공한다.</td></tr><tr><td align="center">SPRING WebMVC</td><td align="left">스프링에서 MVC구현에 관한 기능을 제공한다.</td></tr></tbody></table><p><br><br><br></p><h2 id="Tomcat은-컨테이너다"><a href="#Tomcat은-컨테이너다" class="headerlink" title="Tomcat은 컨테이너다?"></a>Tomcat은 컨테이너다?</h2><ul><li>톰캣은 서블릿컨테이너다.</li><li>서블릿 생성,초기화,서비스 실행, 서비스 소멸등 모든 서블릿에 관한 권한을 가지고 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005springi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]사용자로부터 정수 10개를 입력받은 후 3의 배수만 골라서 출력하기</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jsp/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jsp/</guid>
      <pubDate>Sun, 04 Oct 2020 19:56:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;정수 10개를 입력받아 배열에 저장한 후, 배열을 검색하여 3의 배수만 골라서 출력하시오. 3의 배수가 없을 경우 “해당사항 없음” 메세지를 출력 하시오.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 10개를 입력받아 배열에 저장한 후, 배열을 검색하여 3의 배수만 골라서 출력하시오. 3의 배수가 없을 경우 “해당사항 없음” 메세지를 출력 하시오.</p><a id="more"></a><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정수형 배열 선언</span></span><br><span class="line"><span class="keyword">int</span> inputTen[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스캐너로 총 10개의 정수를 사용자로부터 입력 받기</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"10개의 정수를 입력하세요"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputTen.length; i++) &#123;</span><br><span class="line">inputTen[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에서 3의 배수만 골라서 ArrayList에 담기</span></span><br><span class="line">ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; inputTen.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(inputTen[i]%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">result.add(inputTen[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3의 배수가 있을 경우 ArrayList전체 출력하고 없을 경우 해당사항 없음 메세지 출력</span></span><br><span class="line"><span class="keyword">if</span>(result.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">for</span>(Integer i : result)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"해당사항 없음"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br></pre></td></tr></table></figure><ul><li>배열을 두 개를 생성하면 메모리 낭비가 생긴다. 변수가 가능하다면 객체대신 변수를 사용하는 것이 메모리효율에 좋다.<ul><li>변수인 int는 4바이트인데 객체는 최소 4바이트 이상이니까.</li></ul></li><li>따라서 이 문제에선 변수를 쓰는 것이 속도도 빠르다. 왜냐면 메모리를 만드는 시간이 드니까</li></ul><p><br><br><br></p><h2 id="강사님코드"><a href="#강사님코드" class="headerlink" title="강사님코드"></a>강사님코드</h2><ul><li>10개 check하는 변수를 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정수형 배열 선언</span></span><br><span class="line"><span class="keyword">int</span> inputTen[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스캐너로 총 10개의 정수를 사용자로부터 입력 받기</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"10개의 정수를 입력하세요"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputTen.length; i++) &#123;</span><br><span class="line">inputTen[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3의 배수만 출력</span></span><br><span class="line"><span class="keyword">int</span> ck = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inputTen.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(inputTen[i]%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"3의 배수 :"</span>+inputTen[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ck++;</span><br><span class="line"><span class="keyword">if</span>(ck ==<span class="number">10</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"해당사항 없음"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jsp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] Redirect방식과 Forwarding방식 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspRedirectVSForwarding/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspRedirectVSForwarding/</guid>
      <pubDate>Sun, 04 Oct 2020 18:12:45 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Redirect-VS-Forwarding&quot;&gt;&lt;a href=&quot;#Redirect-VS-Forwarding&quot; class=&quot;headerlink&quot; title=&quot;Redirect VS Forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/08/31/200831jspi2/#src%ED%8F%B4%EB%8D%94%EC%95%84%EB%9E%98%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80-BoardFrontController-java%EC%83%9D%EC%84%B1&quot;&gt;Redirect VS Forwarding&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;sendRedirect방식&lt;ul&gt;
&lt;li&gt;페이지 이동 O 주소 변경 O (가상주소끼리의 이동)&lt;/li&gt;
&lt;li&gt;session,application 영역의 데이터 전달 가능</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Redirect-VS-Forwarding"><a href="#Redirect-VS-Forwarding" class="headerlink" title="Redirect VS Forwarding"></a><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/#src%ED%8F%B4%EB%8D%94%EC%95%84%EB%9E%98%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80-BoardFrontController-java%EC%83%9D%EC%84%B1">Redirect VS Forwarding</a></h2><ul><li>sendRedirect방식<ul><li>페이지 이동 O 주소 변경 O (가상주소끼리의 이동)</li><li>session,application 영역의 데이터 전달 가능<a id="more"></a></li><li>사용처: 주소와 화면의 전환이 동시에 일어날때 (가상주소 .bo -&gt; 가상주소로 .bo)</li></ul></li><li>Forwarding방식<ul><li>페이지 이동 O 주소 변경 X (jsp 뷰 페이지로 이동) </li><li>request,response,session,application 영역의 데이터 전달가능</li><li>사용처: 주소는 그대로인데 화면이 바뀔때 (가상주소 .bo에서 request객체정보를 가지고 이동하면서 .jsp를 보여줌)</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspRedirectVSForwarding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA] 전위연산(a++)과 후위연산(++a) 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspPrefixVSPostfix/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspPrefixVSPostfix/</guid>
      <pubDate>Sun, 04 Oct 2020 17:37:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix&quot;&gt;&lt;a href=&quot;#전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix&quot; class=&quot;headerlink&quot; title=&quot;전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/08/200609jspi/#%EC%A0%84%EC%9C%84%EC%97%B0%EC%82%B0-VS-%ED%9B%84%EC%9C%84%EC%97%B0%EC%82%B0&quot;&gt;전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;전위 증감 연산자(++a,–a) : 연산 후 대입&lt;/li&gt;
&lt;li&gt;후위 증감 연산자(a++,a–) : 대입 후 연산</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix"><a href="#전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix" class="headerlink" title="전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)"></a><a href="https://sowon-dev.github.io/2020/06/08/200609jspi/#%EC%A0%84%EC%9C%84%EC%97%B0%EC%82%B0-VS-%ED%9B%84%EC%9C%84%EC%97%B0%EC%82%B0">전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)</a></h2><ul><li>전위 증감 연산자(++a,–a) : 연산 후 대입</li><li>후위 증감 연산자(a++,a–) : 대입 후 연산<a id="more"></a></li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>아래 문제를 통해 차이점을 알아보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> c = ++a &gt; b++ || a++ &gt;= ++b;</span><br><span class="line">System.out.println(a+<span class="string">","</span>+b);</span><br><span class="line">System.out.println(<span class="string">"변수 c의 값 :"</span>+c);</span><br></pre></td></tr></table></figure><h2 id="답"><a href="#답" class="headerlink" title="답"></a>답</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>, <span class="number">11</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li><code>++a &gt; b++</code>의 값은 11 &gt; 10 이라서 true</li><li><code>a++ &gt;= ++b</code>의 값은 11 &gt;= 12 라서 false</li><li>그렇다면 출력할때 왜 12,12가 아닌 11,11이 나올까?<ul><li>컴파일러는 앞부분이 true인 경우 굳이 <code>||</code> 연산자 뒤를 연산 할 필요가 없다.</li><li>따라서 12,12가 아닌 11,11이고 이것이 논리연산자의 특징이다.</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://dojang.io/mod/page/view.php?id=96">추가학습 : 코딩 도장</a></li></ul><iframe width="100%" height="470" src="https://www.youtube.com/embed/dMw49y6S_K4?list=PLa9dKeCAyr7jsbboqbsSnsTIVds0Dl3Ec" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspPrefixVSPostfix/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] get방식과 post방식 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspGetVSPost/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspGetVSPost/</guid>
      <pubDate>Sun, 04 Oct 2020 17:33:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;get-방식-VS-post-방식&quot;&gt;&lt;a href=&quot;#get-방식-VS-post-방식&quot; class=&quot;headerlink&quot; title=&quot;get 방식 VS post 방식&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/16/200617jspi2/#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%EB%B0%A9%EC%8B%9D-%EB%91%90%EA%B0%80%EC%A7%80-get%EB%B0%A9%EC%8B%9D%EA%B3%BC-post%EB%B0%A9%EC%8B%9D&quot;&gt;get 방식 VS post 방식&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;get &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전달되는 데이터를 주소줄(URL)에 적어서 전달&lt;/li&gt;
&lt;li&gt;파라미터의 길이 제한 : 256byte</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="get-방식-VS-post-방식"><a href="#get-방식-VS-post-방식" class="headerlink" title="get 방식 VS post 방식"></a><a href="https://sowon-dev.github.io/2020/06/16/200617jspi2/#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%EB%B0%A9%EC%8B%9D-%EB%91%90%EA%B0%80%EC%A7%80-get%EB%B0%A9%EC%8B%9D%EA%B3%BC-post%EB%B0%A9%EC%8B%9D">get 방식 VS post 방식</a></h2><ul><li><p>get </p><ul><li>전달되는 데이터를 주소줄(URL)에 적어서 전달</li><li>파라미터의 길이 제한 : 256byte<a id="more"></a></li><li>처리 속도가 빠름</li><li>보안성이 나쁨</li></ul></li><li><p>post</p><ul><li>전달되는 데이터를 본문(Body)에 담아서 전달=&gt;주소줄X</li><li>파라미터의 길이 제한 : 없음.</li><li>처리 속도가 느림</li><li>보안성이 좋음</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspGetVSPost/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] 프로세스(Process)와 스레드(Thread)의 차이, 웹서버(WEB SERVER)와 웹어플리케이션서버(WAS)의 차이</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspProcessVSThreadNWebServerVSWAS/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspProcessVSThreadNWebServerVSWAS/</guid>
      <pubDate>Sun, 04 Oct 2020 17:20:56 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;프로세스-VS-스레드&quot;&gt;&lt;a href=&quot;#프로세스-VS-스레드&quot; class=&quot;headerlink&quot; title=&quot;프로세스 VS 스레드&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/08/20/200820javai/#%EA%B0%9C%EB%85%90-%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC&quot;&gt;프로세스 VS 스레드&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;프로세스 : 주기억장치에 로드된 상태의 프로그램(실행되고 있는 프로그램)&lt;ul&gt;
&lt;li&gt;작업관리자의 백그라운드프로세스가 많을수록 컴터속도가 느려짐</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="프로세스-VS-스레드"><a href="#프로세스-VS-스레드" class="headerlink" title="프로세스 VS 스레드"></a><a href="https://sowon-dev.github.io/2020/08/20/200820javai/#%EA%B0%9C%EB%85%90-%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC">프로세스 VS 스레드</a></h2><ul><li>프로세스 : 주기억장치에 로드된 상태의 프로그램(실행되고 있는 프로그램)<ul><li>작업관리자의 백그라운드프로세스가 많을수록 컴터속도가 느려짐<a id="more"></a></li><li>설치된 애플리케이션을 실행하게되면 운영체제(OS)로부더 메모리의 일정영역을 할당받고 CPU와 HDD를 이용해서 동작하는 것</li></ul></li><li>스레드(Thread) : 프로세스 동작의 최소 단위. 모든 프로세스는 하나 이상의 스레드로 구성</li></ul><p><br><br><br></p><h2 id="웹서버-WEB-SERVER-VS-웹어플리케이션서버-WAS-Web-Application-Server"><a href="#웹서버-WEB-SERVER-VS-웹어플리케이션서버-WAS-Web-Application-Server" class="headerlink" title="웹서버(WEB SERVER) VS 웹어플리케이션서버(WAS, Web Application Server)"></a>웹서버(WEB SERVER) VS 웹어플리케이션서버(WAS, Web Application Server)</h2><ul><li>웹서버 : DB사용 불가능<ul><li>클라이언트측 정적데이터</li><li>웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(.html .jpeg .css 등)를 제공하는 컴퓨터 프로그램</li><li>Web Server의 예 : Apache Server, Nginx, IIS(Windows 전용 Web 서버) 등</li></ul></li><li>WAS : DB사용 가능<ul><li>서버측 동적데이터 사용</li><li>DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server</li><li>WAS의 예 : Ex) Tomcat, JBoss, Jeus, Web Sphere 등</li></ul></li><li>참고 : <a href="https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html">https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspProcessVSThreadNWebServerVSWAS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] 세션(Session)와 쿠키(Cookie)의 차이</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspSessionVSCookie/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspSessionVSCookie/</guid>
      <pubDate>Sun, 04 Oct 2020 15:02:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;세션-vs-쿠키&quot;&gt;&lt;a href=&quot;#세션-vs-쿠키&quot; class=&quot;headerlink&quot; title=&quot;세션 vs 쿠키&quot;&gt;&lt;/a&gt;세션 vs 쿠키&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;공통점 : 데이터 저장&lt;/li&gt;
&lt;li&gt;차이점</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="세션-vs-쿠키"><a href="#세션-vs-쿠키" class="headerlink" title="세션 vs 쿠키"></a>세션 vs 쿠키</h2><ul><li>공통점 : 데이터 저장</li><li>차이점  <a id="more"></a><ul><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi/">세션</a> : 정보를 서버에 저장<ul><li>서버가 종료되면 사라짐</li><li>브라우저별로 하나씩 생성</li><li>정확한 데이터를 사용</li></ul></li><li><a href="https://sowon-dev.github.io/2020/07/01/200701jspi/">쿠키</a> : 정보를 클라이언트에 저장(사용자PC의 하드디스크에 저장)<ul><li>서버가 종료되면 안 살아짐</li><li>쿠기 사용기간이후 사라짐</li><li>쿠기 삭제할 수 있음</li><li>사용자의 PC가 바이러스로 인해서 파일이 손상될 가능성이 큼</li></ul></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspSessionVSCookie/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Amazon 개발자가 말해주는 해외취업 웨비나 후기</title>
      <link>https://sowon-dev.github.io/2020/10/03/201004amazon/</link>
      <guid>https://sowon-dev.github.io/2020/10/03/201004amazon/</guid>
      <pubDate>Sat, 03 Oct 2020 22:02:23 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Amazon개발자가-말해주는-해외취업&quot;&gt;&lt;a href=&quot;#Amazon개발자가-말해주는-해외취업&quot; class=&quot;headerlink&quot; title=&quot;Amazon개발자가 말해주는 해외취업&quot;&gt;&lt;/a&gt;Amazon개발자가 말해주는 해외취업&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;내용 : 아마존 현직 개발자가 알려주는 해외 취업, 그리고 아마존이 일하는 방식.&lt;br&gt;강사 : 민창현&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Amazon개발자가-말해주는-해외취업"><a href="#Amazon개발자가-말해주는-해외취업" class="headerlink" title="Amazon개발자가 말해주는 해외취업"></a>Amazon개발자가 말해주는 해외취업</h2><blockquote><p>내용 : 아마존 현직 개발자가 알려주는 해외 취업, 그리고 아마존이 일하는 방식.<br>강사 : 민창현</p></blockquote><a id="more"></a><div id="fb-root"></div><script async defer crossorigin="anonymous" src="https://connect.facebook.net/ko_KR/sdk.js#xfbml=1&version=v8.0" nonce="6bbmUCtO"></script><div class="fb-post" data-href="https://www.facebook.com/hojun.lee.521/posts/3270478516403695" data-show-text="true" data-width=""><blockquote cite="https://www.facebook.com/hojun.lee.521/posts/3270478516403695" class="fb-xfbml-parse-ignore"><p>아마존에서 근무를 하고 있으신 창현님께서 아마존의 일하는 방식과 해외 취업에 대해 설명해주신다고 해서 행사를 하나 열었습니다.</p>게시: <a href="#" role="button">Hojun  Lee</a>&nbsp;<a href="https://www.facebook.com/hojun.lee.521/posts/3270478516403695">2020년 9월 28일 월요일</a></blockquote></div><p><br><br><br></p><h2 id="서류"><a href="#서류" class="headerlink" title="서류"></a>서류</h2><ul><li>링크드인</li><li><strong>내부 직원 리퍼럴 통해서 지원</strong>👍</li><li>회사 직접 지원</li></ul><p><br><br><br></p><h3 id="왜-서류-통과가-안되었을까"><a href="#왜-서류-통과가-안되었을까" class="headerlink" title="왜 서류 통과가 안되었을까?"></a>왜 서류 통과가 안되었을까?</h3><ul><li>외국인을 뽑기 싫어서(비자문제, 비용문제)</li><li>지원자가 너무 많아서 내부 직원 리퍼럴로 1차 스크리닝<ul><li>🌟TIP 인맥을 찾거나 무작정 연락해서 리퍼럴 부탁하기</li><li>인맥 추천할때 진짜 지인인지 어디서 만난 지인인지 구분하는 카테고리가 있기때문에 리퍼럴하는 것이 부담스럽지않다. 따라서 어떤 행사에서 만난 사람이라도 리퍼럴 부탁해 볼 것!</li></ul></li></ul><p><br><br><br></p><h2 id="면접"><a href="#면접" class="headerlink" title="면접"></a>면접</h2><ol><li>전화면접 보통 1시간내외 <ul><li>하루 일정 중 몇시간 코딩하는지 나머지 시간은 뭐하는지</li><li>🌟TIP 중간중간에 내가 제대로 질문을 이해하고 답하고 있는지 면접관과 함께 체크하기 Does it make sense to you?</li></ul></li><li>실시간 코딩<ul><li>비교적 간단한 알고리즘 문제</li></ul></li><li>On-site interview 또는 online interview<ul><li>4번&#126;5번 정도 1:1로 면접 진행 (1시간내외)</li><li>알고리즘 2 &#126; 3회면접, 시스템디자인 1 &#126; 2회, 인성면접 1회등</li><li>아마존의 경우 LP면접이 매우 중요.</li><li>On-site interview의 경우, 화이트보드세션</li><li>online interview의 경우, 온라인 화이트보드 툴으로 시스템다이어그램 그려서 work flow설명하거나 실시간 코딩협업 툴 등 사용해서 설명해야함</li></ul></li></ol><p><br><br><br></p><h2 id="Hiring-Event"><a href="#Hiring-Event" class="headerlink" title="Hiring Event"></a>Hiring Event</h2><ul><li>아마존에서 주로 많이 시행하는 대규모 채용 이벤트</li><li>주로 경력 개발자를 채용하기 위한 이벤트<ul><li>신입의 경우 보통 현지 대학 졸업자들을 대상으로 진행</li></ul></li><li>비교적 빠른 채용 프로세스(보통 1&#126;2달만에 채용됨)</li><li>프로세스 : 서류 -&gt; 온라인 코딩 테스트 -&gt; 전화 면접 -&gt; On-site interview</li><li>경쟁률은 1:8정도임</li></ul><p><br><br><br></p><h2 id="다들-개발-엄청-잘-하나요"><a href="#다들-개발-엄청-잘-하나요" class="headerlink" title="다들 개발 엄청 잘 하나요?"></a>다들 개발 엄청 잘 하나요?</h2><blockquote><p>내가 못해서 떨어진 것이 아니라 내가 운이 없어서, 지금 뽑는 팀에 부합하지 않아서 떨어진 것일 뿐입니다. 절대 겁먹지마세요<br><strong>지원해서</strong> 면접 본 사람 중에 잘 맞는 사람을 뽑는 것입니다.</p></blockquote><p>지원하지않으면 luck안에 발도 들이지 못한다. 경력을 쌓아야겠다</p><p><br><br><br></p><h2 id="다들-영어-엄청-잘하나요"><a href="#다들-영어-엄청-잘하나요" class="headerlink" title="다들 영어 엄청 잘하나요?"></a>다들 영어 엄청 잘하나요?</h2><blockquote><p>영어실력에 대한 판단은 면접관이 하는 것이니 미리 걱정하지마세요. 사실 합격하면 그때가 문제입니다.<br>출퇴근시간을 이용하여 스탠드업 미팅을 혼자 영어로 꾸준히 연습해보세요.<br>개발자가 아닌 사람에게 본인의 업무를 영어로 이야기를 해보세요. 자신이 개발한 기능 예를 들어 Merge sort를 영어로 설명하는 것을 연습해보세요<br>내 프로젝트를 정리해보세요. 면접에서는 자신의 프로젝트에서 개선할 점이라든지 다시 돌아가면 어떻게 하겠다는 등에 관한 내용을 물어보기도 한답니다.</p></blockquote><p><br><br><br></p><h2 id="코딩테스트"><a href="#코딩테스트" class="headerlink" title="코딩테스트"></a>코딩테스트</h2><ul><li>Leetcode 100개이상 풀기</li><li>Dynamic programming은 잘 안 물어본다.</li><li>Tree, Stack, Limked List부터 구현해보기<ul><li>🌟TIP LRU cache는 빈출문제이니 꼭 마스터하기</li></ul></li><li>STL의 API를 못 외워도 좋지만 API를 정의할 수 있어야한다.<ul><li>🌟TIP 존재하는 API인지 아닌지 상관없이 스스로 이런 INPUT을 가진 API입니다라고 가정을 세워서 코딩테스트를 진행하기</li></ul></li></ul><blockquote><p>코딩테스트하는 동안 내가 지금 뭘 하는 지 먼저 말하고 의도적으로 코딩 중에 말하면서 푸세요. 면접관과 계속 대화를 해야 면접관이 도와줄 수 있습니다.<br>모르겠으면 빠르게 힌트를 요구하세요. 면접관과 대화를 통해서 코딩테스트 문제를 풀어내가는 과정이 중요합니다.<br>답을 알더라도 내가 생각하는 것이 맞는 지 물어봐서 확신을 얻어내세요.<br>마음대로 가정하지 말고 입력과 출력을 확실히 확인하세요. 예를 들어 데이터타입이 String, float등 다양하게 들어올 수 있는데 무조건 INT이다라고 생각하는 등. 면접관에게 처리할 데이터의 양을 무조건 물어보고 검증하세요.<br>머리나 말로 코드를 설명하지말고 주석으로 디버깅 과정을 보여주세요<br>면접툴을 미리 사용해볼 수 있으면 꼭 사용해보세요. 화이트보드에 직접 코드를 적는 경험을 꼭 연습해보세요.</p></blockquote><p><br><br><br></p><h2 id="시스템디자인-면접인-경우"><a href="#시스템디자인-면접인-경우" class="headerlink" title="시스템디자인 면접인 경우"></a>시스템디자인 면접인 경우</h2><blockquote><p>자신이 지금 기획자와 회의에 들어와서 기획안을 한문장 듣고 시스템을 상상해서 설명한다고 생각하세요.<br>면접관에게 반복적으로 질문하면서 입력과 출력을 적어보고 문제를 제대로 이해했는지 질문하세요. 그리고 답변을 마칠때 꼭 <strong>“이정도면 말씀하신 내용을 다 만족할까요? 혹시 추가적으로 고려해야 할 사항이 있을가요?”</strong>라고 물어보면서 마무리하세요. 이런 <strong>피드백 로그</strong>를 만드는 것이 굉장히 중요합니다.<br>동그라미하나라도 그리세요. 그리고 이것이 서비스입니다라고 시작해도 될 정도로 무조건 답변할 수 있는 질문이니 포기하지마세요</p></blockquote><p><br><br><br></p><h2 id="많이-쓰는-미국-비자"><a href="#많이-쓰는-미국-비자" class="headerlink" title="많이 쓰는 미국 비자"></a>많이 쓰는 미국 비자</h2><ul><li>H1B : 일반 취업 비자, 1년에 1번 석박사의 경우 2번 가능<ul><li>석박사 아니면 받기 엄청 어려움. 취업확정이 난 상태에서 지원할 수 있음.</li><li>이직 가능</li></ul></li><li>L1B : 해외 주재원 비자<ul><li>동일 회사 해외 지사에서 1년 이상 근무시 지원가능. 따라서 이직 불가.</li><li>미국비자를 받을 수 있는 가장 최선의 방법</li><li>🌟TIP 가장 추천하는 방법</li></ul></li><li>OPT : 미국내 대학(원) 졸업시 발급하는 임시 취업 비자</li><li>Green card : 영주권</li></ul><blockquote><p>만약 미국 비자가 없다면 캐나다, 유럽, 싱가폴, 일본으로 가세요… 1년&#126;2년있다가 internal transfer로 옮기면 더 쉽다.<br>테그직종에서 캐나다 영주권은 미국 영주권보다 쉽게 나오기도 하니 미국 영주권이 목표가 아니라면 다른 나라도 알아봐도 좋습니다.<br>회사 짤리면 비자가 취소되는 경우가 대부분입니다. </p></blockquote><p><br><br><br></p><h2 id="급여수준과-보상"><a href="#급여수준과-보상" class="headerlink" title="급여수준과 보상"></a>급여수준과 보상</h2><ul><li>TC의 구성요소<ul><li>기본급</li><li>사이닝 보너스</li><li>RSU : 주식</li><li>캐시 보너스</li></ul></li><li>보통 5&#126;10년차 한국 개발자가 미국에 왔을 때 대기업 기준 TC 18&#126;20만불 정도로 시작(아마존 기준)</li></ul><blockquote><p>부자가 될 줄 알았지만… 주거비와 생활비용이 은근 비싸서 그냥 중산층정도입니다.<br>3년동안 야근은 한 달정도하고 주말에 일한 건 5번 이하인 것 같아요.<br>최초 계약시점이후로 TC가 잘 안 올라가기때문에 승진이나 이직을 고려해야합니다. 입사시 무조건 카운터 오퍼가 있어야 연봉협상이 가능합니다.</p></blockquote><ul><li>카운트 오퍼 : 다른 회사에서 이정도 연봉으로 받았다는 걸 알리고 자신의 연봉을 올리는 것</li></ul><p><br><br><br></p><h2 id="한국에서-어느정도-경력을-쌓아야할까요"><a href="#한국에서-어느정도-경력을-쌓아야할까요" class="headerlink" title="한국에서 어느정도 경력을 쌓아야할까요?"></a>한국에서 어느정도 경력을 쌓아야할까요?</h2><blockquote><p>한국에서 3년차 이상정도면 그 이후부터는 주니어를 벗어나려고 노력하면서 해외취업 도전하시는 것이 좋을 것같습니다.<br>프로젝트를 처음부터 끝까지 디자인할 수 있을 것 같을때 도전해보실만 합니다.<br>아마존 하이어링이벤트가 최고의 기회라고 생각합니다. 면접비용, 이사비용 다 서포팅해줍니다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Lectures-Seminars/">Lectures &amp; Seminars</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Review/">Review</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/03/201004amazon/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]제어의 역행(IoC)과 의존성 주입(DI)</title>
      <link>https://sowon-dev.github.io/2020/10/03/201003spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/03/201003spring-1/</guid>
      <pubDate>Sat, 03 Oct 2020 03:07:07 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;제어의-역행-IoC-Inversion-of-Control&quot;&gt;&lt;a href=&quot;#제어의-역행-IoC-Inversion-of-Control&quot; class=&quot;headerlink&quot; title=&quot;제어의 역행(IoC, Inversion of Control)&quot;&gt;&lt;/a&gt;제어의 역행(IoC, Inversion of Control)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;객체, 메서드 호출시 처리하지않고 외부(spring)에서 처리한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;블럭 끼워넣기&lt;/code&gt; 개발이라고도 칭함</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="제어의-역행-IoC-Inversion-of-Control"><a href="#제어의-역행-IoC-Inversion-of-Control" class="headerlink" title="제어의 역행(IoC, Inversion of Control)"></a>제어의 역행(IoC, Inversion of Control)</h2><ul><li>객체, 메서드 호출시 처리하지않고 외부(spring)에서 처리한다.</li><li><code>블럭 끼워넣기</code> 개발이라고도 칭함<a id="more"></a></li></ul><p><br><br><br></p><h2 id="의존성-주입-DI-Dependency-Injection"><a href="#의존성-주입-DI-Dependency-Injection" class="headerlink" title="의존성 주입(DI, Dependency Injection)"></a>의존성 주입(DI, Dependency Injection)</h2><ul><li>제어의 역행이 발생할 때, 스프링 내부에 있는 객체가 해당 클래스를 사용할 때 필요한 관계를 관리하는 동작 또는 기법</li><li>여기서 의존성이란 객체가 혼자서는 처리할 수 없음을 뜻한다.<ul><li>따라서 객체를 직접 생성해서 구현한다 ex) jsp model2에서의 DAO객체생성</li><li>관계를 약화시키면서 간접 구현 즉 호출해야한다.</li></ul></li><li>따라서 의존성 주입이란 객체를 직접 생성/제어하는 것이 아니라, 제어의 역행을 사용해서 특정 객체를 필요한 객체의 외부에 가져다가 연결하는 것을 뜻한다.</li><li>객체가 필요한 어떤 객체를 생성자 혹은 setter를 통해 주입하는 것을 말한다.</li><li>예를 들어 사람이란 객체가 있다. 머리, 몸통, 팔, 다리부분으로 구성되어있는 객체이다. 여기서 머리만 바꿔끼우면(= 주입) 사람A에서 사람B가 될 수 있다.</li></ul><p><br><br><br></p><h2 id="의존성-주입-방법"><a href="#의존성-주입-방법" class="headerlink" title="의존성 주입 방법"></a>의존성 주입 방법</h2><ul><li>Spring은 @Autowired 애노테이션을 이용한 다양한 의존성 주입 방법을 제공한다.</li><li>@Autowired 애노테이션은 Spring에게 의존성을 주입하라는 지시자 역할로 쓰이는데 생성자, 필드, 세터에 붙일 수 있다.</li><li><a href="https://atoz-develop.tistory.com/entry/Spring-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85DI-Dependency-Injection%EC%9D%98-%EC%84%B8%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95">의존성 주입(DI, Dependency Injection)의 세가지 방법 코드 예시</a></li></ul><p><img src="https://image.slidesharecdn.com/di-100310021301-phpapp02/95/dependency-injection-12-728.jpg?cb=1268266485" alt="https://www.slideshare.net/madvirus/dependency-injection-3383719"></p><p><br><br><br></p><h3 id="Setter메서드-이용한-예시"><a href="#Setter메서드-이용한-예시" class="headerlink" title="Setter메서드 이용한 예시"></a>Setter메서드 이용한 예시</h3><ol><li><p><code>.xml</code>파일에 spring beans DTD 연결</p></li><li><p><code>.xml파일의 &lt;bean&gt;태그</code>로 객체생성하기 (new 키워드랑 동일한 결과)</p><ul><li>bean태그에서 사용할 수 있는 속성들</li><li>id : “빈 객체의 고유한 이름, 외부에서 접근하는 이름”</li><li>name : “객체의 별칭”</li><li>class : “생성할 클래스위치”</li><li>property : “set() 사용해서 값을 주입”<ul><li>name속성 : bean태그의 class속성 위치에 있는 클래스의 멤버변수 중에 set 원하는 것을 지정 </li><li>value담는 방식은 두가지 1. <code>&lt;value&gt;</code>태그사용 2.<code>value=&quot;&quot;</code>속성사용</li></ul></li><li>constructor-arg : “생성자 사용해서 값 주입”</li><li><code>person.xml</code> 코드<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bean == 객체(스프링이 제공하는 객체) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 객체생성 (new 키워드랑 동일한 결과) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personBean"</span> <span class="attr">class</span>=<span class="string">"com.itwill.spring.SubPerson"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--속성 name은 class에 있는 멤버변수 명중에 선택하는 것임 </span></span><br><span class="line"><span class="comment">value담는 방식은 두가지 1. 태그사용 2. 속성사용</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>아이린<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"25"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>IPerson.java</code> 인터페이스생성</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPerson</span> </span>&#123;</span><br><span class="line"><span class="comment">//사람객체를 생성하기위한 틀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//인사 구현</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>SubPerson.java</code> 파일 생성</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubPerson</span> <span class="keyword">implements</span> <span class="title">IPerson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//사람의 정보를 저장하면서 기능 구현 가능</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">"님("</span>+age+<span class="string">"세), 안녕하세요!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SubPerson정보 [이름="</span> + name + <span class="string">", 나이="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>PersonTest.java</code>파일에서 객체 사용하기<ul><li>BeanFactory는 외부의 파일을 읽어와서 처리함</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.자바에서 객체생성하여 사용하기</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.setName(<span class="string">"홍길동"</span>);</span><br><span class="line">p1.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(p1);</span><br><span class="line">System.out.println(p1.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//인터페이스로 만든 SubPerson사용하고싶다면? </span></span><br><span class="line"><span class="comment">//의존의 관계가 강한결합 -&gt; 인터페이스를 만들었으니 xml에서 약한 결합으로 바꿔줄수있다.</span></span><br><span class="line">SubPerson sp = <span class="keyword">new</span> SubPerson();</span><br><span class="line">sp.setName(<span class="string">"소미"</span>);</span><br><span class="line">sp.setAge(<span class="number">22</span>);</span><br><span class="line">sp.sayHello();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.스프링을 사용해서 객체 생성하고 사용하기(xml)</span></span><br><span class="line">BeanFactory fac = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileSystemResource(<span class="string">"person.xml"</span>)); <span class="comment">//xml파일명 기입</span></span><br><span class="line"><span class="comment">//의존주입</span></span><br><span class="line">IPerson ip = (IPerson) fac.getBean(<span class="string">"personBean"</span>); <span class="comment">//xml파일의 bean의 id값을 기입</span></span><br><span class="line">ip.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">사용자정보 [이름=홍길동, 나이=<span class="number">20</span>]</span><br><span class="line">사용자정보 [이름=홍길동, 나이=<span class="number">20</span>]</span><br><span class="line">소미님(<span class="number">22</span>세), 안녕하세요!</span><br><span class="line">log4j:<span class="function">WARN No appenders could be found <span class="keyword">for</span> <span class="title">logger</span> <span class="params">(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)</span>.</span></span><br><span class="line"><span class="function">log4j:WARN Please initialize the log4j system properly.</span></span><br><span class="line"><span class="function">log4j:WARN See http:<span class="comment">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span></span><br><span class="line"><span class="function">아이린님<span class="params">(<span class="number">25</span>세)</span>, 안녕하세요!</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="생성자를-이용한-예시"><a href="#생성자를-이용한-예시" class="headerlink" title="생성자를 이용한 예시"></a>생성자를 이용한 예시</h3><ol><li><code>.xml</code>파일에 spring beans DTD 연결</li><li><code>.xml파일의 &lt;bean&gt;태그</code>로 객체생성하기 (new 키워드랑 동일한 결과)<ul><li>constructor-arg : “생성자 사용해서 값 주입”</li><li>원하는 파라미터 갯수만큼 <code>&lt;constructor-arg&gt;</code>태그생성<ul><li>태그 생성시 순서 : 파라미터 순서그대로 대입됨</li></ul></li><li><code>student.xml</code> 코드</li><li>value담는 방식은 두가지 1. <code>&lt;value&gt;</code>태그사용 2.<code>value=&quot;&quot;</code>속성사용<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentBean"</span> <span class="attr">class</span>=<span class="string">"com.itwill.spring.ItwillStudent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"홍길동"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"classNum"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>7<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 생성자이용하여 DI  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conBean1"</span> <span class="attr">class</span>=<span class="string">"com.itwill.spring.ItwillStudent"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>사용자3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conBean2"</span> <span class="attr">class</span>=<span class="string">"com.itwill.spring.ItwillStudent"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"사용자4"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li><code>Student.java</code> 인터페이스 생성</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//인사 구현</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>ItwillStudent.java</code> 생성</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItwillStudent</span> <span class="keyword">implements</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> classNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//생성자 만들기</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItwillStudent</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItwillStudent</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItwillStudent</span><span class="params">(String name,<span class="keyword">int</span> classNum)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.classNum = classNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get메서드는 필요가 없다. set()은 필수</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassNum</span><span class="params">(<span class="keyword">int</span> classNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classNum = classNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"이름: "</span> + name + <span class="string">", 강의장: "</span> + classNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"toString [이름: "</span> + name + <span class="string">", 강의장: "</span> + classNum + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>StudentTest.java</code> 코드</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//기존 자바사용해서 객체 구현 및 사용</span></span><br><span class="line">ItwillStudent kim = <span class="keyword">new</span> ItwillStudent();</span><br><span class="line">kim.setName(<span class="string">"킴스"</span>);</span><br><span class="line">kim.setClassNum(<span class="number">8</span>);</span><br><span class="line">kim.showInfo();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----생성자 사용하여 객체생성"</span>);</span><br><span class="line"><span class="comment">//생성자를 사용한 객체생성</span></span><br><span class="line">ItwillStudent user1 = <span class="keyword">new</span> ItwillStudent(<span class="string">"사용자1"</span>);</span><br><span class="line">user1.showInfo();</span><br><span class="line">Student user2 = <span class="keyword">new</span> ItwillStudent(<span class="string">"사용자2"</span>, <span class="number">7</span>);</span><br><span class="line">user2.showInfo();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----생성자 사용하여 DI"</span>);</span><br><span class="line"><span class="comment">//생성자를 사용한 의존주입</span></span><br><span class="line">ItwillStudent user3 = (ItwillStudent) fac.getBean(<span class="string">"conBean1"</span>);</span><br><span class="line">user3.showInfo();</span><br><span class="line">ItwillStudent user4 = (ItwillStudent) fac.getBean(<span class="string">"conBean2"</span>);</span><br><span class="line">user4.showInfo();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="강한-결합-VS-약한-결합"><a href="#강한-결합-VS-약한-결합" class="headerlink" title="강한 결합 VS 약한 결합"></a>강한 결합 VS 약한 결합</h2><ul><li>객체의 의존 관계에서 강한 결합이란, 말그대로 어떠한 객체가 다른 객체에 강한 의존성을 가지고 있는 것이다.</li><li>강한 결합을 가지면 코드 변경이 어려워지기때문에 약한 결합을 만들어주어 코드 변경을 용이하게 해야한다.</li><li>인터페이스와 서브클래스 관계를 사용하여 약한 결합 생성할 수 있다.</li><li><a href="https://juwonkim.tistory.com/109">참고링크 : 사람이 치킨을 먹는 모습을 클래스 예시를 통한 강한 결합과 약한 결합 차이</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/03/201003spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링 부트 기본 개념</title>
      <link>https://sowon-dev.github.io/2020/10/03/201003spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/03/201003spring/</guid>
      <pubDate>Sat, 03 Oct 2020 00:05:14 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Spring-Framework&quot;&gt;&lt;a href=&quot;#Spring-Framework&quot; class=&quot;headerlink&quot; title=&quot;Spring Framework&quot;&gt;&lt;/a&gt;Spring Framework&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><a id="more"></a><blockquote><p>스프링 프레임워크는 자바 생태계에서 가장 대중적인 응용프로그램 개발 프레임워크입니다. 중요한 특징 두가지는 </p><ul><li>의존성 주입(DI, Dependency Injection)</li><li>제어의 역전(IOC, Inversion Of Control)<br>이들로 인해서 결합도를 낮추는 방식으로 어플리케이션을 개발할 수 있습니다. 이러한 개발방식으로 개발한 응용프로그램은 단위테스트가 용이하기 때문에 퀄리티 높은 프로그램을 개발할 수 있습니다.<br>스프링으로 개발하다보면 Transaction Manager, Hibernate Datasource, Entity Manager, Session Factory와 같은 설정을 하는데에 어려움이 많이 있었습니다. 최소한의 기능으로 Spring MVC를 사용하여 기본 프로젝트를 셋팅하는데 개발자에게 너무 많은 시간이 걸렸습니다. 이러한 어려움을 해결하기 위해 나온게  Spring Boot입니다.<br>출처 : <a href="https://sas-study.tistory.com/274">https://sas-study.tistory.com/274</a></li></ul></blockquote><p><br><br><br></p><h2 id="스프링-부트-스타터-사이트"><a href="#스프링-부트-스타터-사이트" class="headerlink" title="스프링 부트 스타터 사이트"></a>스프링 부트 스타터 사이트</h2><p><a href="https://start.spring.io/">스프링 부트 스타터 사이트</a>로 이동해서 스프링 프로젝트 생성해보자.<br>실무에서도 많이 사용한다.</p><h3 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h3><ul><li>프로젝트 선택<ul><li>Project: Gradle Project</li><li>Spring Boot: 2.3.x<ul><li>최신버전으로 진행하기</li><li>(SNAPSHOT)은 개발진행중인 베타버전을 뜻 함. (SNAPSHOT)없는 버전으로 선택하기</li></ul></li><li>Language: Java</li><li>Packaging: Jar</li><li>Java: 11</li></ul></li><li>Project Metadata<ul><li>groupId: hello</li><li>artifactId: hello-spring</li></ul></li><li>Dependencies: Spring Web, Thymeleaf</li></ul><p><br><br><br></p><h2 id="Controller-Service-Repository"><a href="#Controller-Service-Repository" class="headerlink" title="Controller, Service, Repository"></a>Controller, Service, Repository</h2><ul><li>Controller : 컨트롤러를 통해서 외부요청을 받고</li><li>Service : 서비스에서 비즈니스 로직을 만들고</li><li>Repository : 레포지토리에서 데이터를 저장한다.</li></ul><p><img src="https://1.bp.blogspot.com/-rETQcIDxSk8/XYRNiAc886I/AAAAAAAAA-I/EQv8YL_7BmAlHe29teIvZKsjO7PdAzGowCLcBGAsYHQ/s640/layers.png" alt="http://randikatech.blogspot.com/2019/09/get-your-hands-dirty-with-micro-services.html"></p><p><img src="https://chathurangat.files.wordpress.com/2017/09/spring-ioc-di-1-e1505581215909.png" alt="https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/"></p><p><br><br><br></p><h2 id="IntelliJ-Gradle-대신에-자바-직접-실행"><a href="#IntelliJ-Gradle-대신에-자바-직접-실행" class="headerlink" title="IntelliJ Gradle 대신에 자바 직접 실행"></a>IntelliJ Gradle 대신에 자바 직접 실행</h2><p>나는 윈도우 사용자이므로 <code>File &gt; Setting &gt; Gradle</code> 검색을 통해 설정을 변경하였다.</p><blockquote><p>최근 IntelliJ 버전은 Gradle을 통해서 실행 하는 것이 기본 설정이다. 이렇게 하면 실행속도가 느리다. 다<br>음과 같이 변경하면 자바로 바로 실행해서 실행속도가 더 빠르다.<br>Preferences Build, Execution, Deployment Build Tools Gradle</p><ul><li>Build and run using: Gradle IntelliJ IDEA</li><li>Run tests using: Gradle IntelliJ IDEA</li></ul></blockquote><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>본 포스팅은 인프런강의 <a href="https://inf.run/yHWY">스프링 입문 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술</a>에서 공부한 내용을 바탕으로 직접 구글링한 내용을 더해 작성하였다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/03/201003spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[국비교육 IT팀프로젝트]1.팀플주제구상(feat.입문자를 위한 팀협업도구추천)</title>
      <link>https://sowon-dev.github.io/2020/10/02/201002team/</link>
      <guid>https://sowon-dev.github.io/2020/10/02/201002team/</guid>
      <pubDate>Fri, 02 Oct 2020 00:26:31 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;팀프로젝트&quot;&gt;&lt;a href=&quot;#팀프로젝트&quot; class=&quot;headerlink&quot; title=&quot;팀프로젝트&quot;&gt;&lt;/a&gt;팀프로젝트&lt;/h2&gt;&lt;p&gt;학원에서 다음주부터 팀프로젝트를 진행한다고 한다. 팀프로젝트는 개인프로젝트와 달리 굉장히 신경써야 할 부분이 많다.&lt;br&gt;그걸 어떻게 아느냐고?&lt;br&gt;나는 경영학도로서 대학 4년을 내내 수강했던 거의 모든 강의에서 팀 프로젝트 했기때문에 이런 사람, 저런 사람 그리고 &lt;a href=&quot;https://www.korean.go.kr/front/onlineQna/onlineQnaView.do?mn_id=216&amp;qna_seq=153673&quot;&gt;볼 꼴, 못 볼 꼴&lt;/a&gt;을 다봤다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="팀프로젝트"><a href="#팀프로젝트" class="headerlink" title="팀프로젝트"></a>팀프로젝트</h2><p>학원에서 다음주부터 팀프로젝트를 진행한다고 한다. 팀프로젝트는 개인프로젝트와 달리 굉장히 신경써야 할 부분이 많다.<br>그걸 어떻게 아느냐고?<br>나는 경영학도로서 대학 4년을 내내 수강했던 거의 모든 강의에서 팀 프로젝트 했기때문에 이런 사람, 저런 사람 그리고 <a href="https://www.korean.go.kr/front/onlineQna/onlineQnaView.do?mn_id=216&qna_seq=153673">볼 꼴, 못 볼 꼴</a>을 다봤다. </p><a id="more"></a><p>따라서 팀프로젝트에는 자신있다!<br>지치질 않을 자신!<br>좋든 안 좋든 이 모든 경험이 직장생활에서 좋은 거름이 되어줄 것이라 믿어 의심치않는다.<br>전 직장에서도 그 거름으로 탄탄히 성장했기 때문이다.<br>이번에도 잘해보자!</p><p><br><br><br></p><h2 id="조편성"><a href="#조편성" class="headerlink" title="조편성"></a>조편성</h2><p>조 구성은 학원에서 진행해준다고 한다.<br>내가 직접 하고 싶었는데 수준에 맞춰(?) 고루 팀원을 구성한다고 한다.<br>학원 수강기간내내 찜해둔 몇몇 친구들과 함께 하고싶었는데… 쳇-<br>나처럼 열정가득한 사람들과 함께 했으면 좋겠다.<br>팀프로젝트가 개인프로젝트로 변질되기도 하는데 이번에는 팀원 다 잘 참여하여 모두 좋은 결과를 가져갔으면 좋겠다.<br>팀플을 하면 갠플과 다른 배울 점이 있으니까!</p><p><br><br><br></p><h2 id="팀프로젝트주제"><a href="#팀프로젝트주제" class="headerlink" title="팀프로젝트주제"></a>팀프로젝트주제</h2><p>아직 팀도 구성이 안되었지만 나는 팀플주제를 고민하고있다.<br>준비없는 첫 회의는 폭망의 지름길이다.<br>나라도 주제를 몇가지 준비해서 침묵을 깨고 성공적인 팀플을 해보려고한다.<br>내 목표는 첫 회의때 주제선정완료와 업무배분까지 끝내고 싶다. 간절🙏</p><p>팀프로젝트 주제로는 레퍼런스가 많은 주제가 좋다.<br>왜냐하면 찾아볼 수 있는 레퍼런스가 많아야 팀원들이 포기하지않고 끝까지 함께 나아갈 수 있기때문이다.</p><ul><li>주제<ol><li>패션 쇼핑몰</li><li>인강사이트(결제포함)</li><li>예매사이트(영화, 숙박)</li></ol></li></ul><p><br><br><br></p><h2 id="팀협업도구"><a href="#팀협업도구" class="headerlink" title="팀협업도구"></a>팀협업도구</h2><p>팀 협업도구를 꽤 오랫동안 찾아보았다.<br>Trello, 잔디, 지라, 깃헙 등등 다양한 팀협업도구들이 존재했다.<br>난 실무에서 사용하는 협업툴을 미리 써보고싶다.<br>지난번 <a href="https://sowon-dev.github.io/2020/09/21/200921opemsource/#%EC%A7%80%EB%9D%BC">프론트앤드 직무멘토링때 들었던 지라</a>를 사용해보고싶어졌다.<br>혼자서 조금 테스트 해봤는데 이전에 개인프로젝트할때 적용해보았던 <a href="https://sowon-dev.github.io/2020/08/26/200826girlsInTech/#%F0%9F%8D%80-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%98%91%EC%97%85%EB%8F%84%EA%B5%AC">Azure DevOps</a>와 비슷했다.<br>이러한 협업툴이 필요한 이유는 한 눈에 내가 뭘 해야하고 뭘 했는지 탁탁 보이기때문이다.<br>개인프로젝트때에도 큰 효과가 있었는테 팀플이면 그 효과가 더욱더 클 것이다.</p><p>현재 학원에서 깃헙을 아는 사람들도 거의 없어서 (강사님이 깃헙 사용해보았는지 물어봐서 거수를 했는데 나만 손들었다…) 브랜치를 나눠서 내가 체크하고 merge하는 식으로 진행해야 할 것 같다. 꼬이면 답도 없기때문에…</p><ul><li>깃헙 : 백업</li><li><del>지라 : 커뮤니케이션</del></li></ul><p><br><br><br></p><h2 id="커뮤니케이션-툴과-관련하여-멘토님의-조언"><a href="#커뮤니케이션-툴과-관련하여-멘토님의-조언" class="headerlink" title="커뮤니케이션 툴과 관련하여 멘토님의 조언"></a>커뮤니케이션 툴과 관련하여 멘토님의 조언</h2><p>컨트리뷰톤때 만난 멘토님께서 내 블로그글을 보시더니 좋은 팀협업도구와 팀협업에 관해 몇가지 조언을 해주셨다.<br>멘토님은 그저 빛…☀️<br>난 참 운도 좋고 인복이 많은 것 같다.🤗</p><p>나도 팀원들이 깃헙도 처음인데 지라도 쓰자고하면 혼돈일까봐 고민했던 부분인데 어떻게 그 부분을 정확히 캐치해내시고 입문자에게 딱 맞는 간단한 협업툴을 소개해주셨다.<br>천사인게 틀림없어…☀️아멘</p><blockquote><p>레파지토리에 프로젝트라는 곳이 있는데 지라처럼 칸반 형식으로 프로젝트 관리를 할 수 있어요. 여기서 만들고 바로 이슈로 등록도 가능하고요, <a href="https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd/related?hl=ko">젠허브</a>라고 크롬 확장 플러그인으로 제공하는게 있는데 프로젝트보다 조금 더 많은 기능을 제공해요.<br>지라는 너무 오버스펙이 될 수도 있어서 첨언 드린건데 다행이네요<br>생각보다 지라가 쓰기 더 까다로울 수 있어서 좀 더 라이트한 버전의 뭔가를 쓰는게 좋을거 같아요. 트렐로, 노션에이나 깃헙 모두 이슈에 코멘트를 단다던가 할 수 있어요.<br>출처 : 멘토님의 경험</p></blockquote><p>또 멘토님이 팀플에서 활용했던 Commit &amp; PR &amp; Branch Rule를 레퍼런스로 알려주셨다.<br>협업에 대해 자세하게 배울 수 있는 유익한 시간이었다.<br>특히 커밋룰은 간과하기 쉬운데 세부사항을 알 수 있어 정말 좋았다.</p><p><br><br><br></p><h3 id="Github의-Projects-사용기"><a href="#Github의-Projects-사용기" class="headerlink" title="Github의 Projects 사용기"></a>Github의 Projects 사용기</h3><p>저런 형식을 뭐라고 부르는 지 몰랐는데 칸반형식이라고 부르는 구나. 또 하나 배웠다.</p><p><img src="https://kanbanize.com/wp-content/uploads/website-images/kanban-resources/Kanban_board_elements.png" alt="한글인줄알았지만 영어로 Kanban board"></p><p>배운 건 바로 써먹어봐야지!<br>팀원들에게 추천을 하려면 내가 먼저 잘 알아야하므로 알려주신 내용 <a href="https://github.com/sowon-dev/AlgorithmStudy_Java/projects/1">바로 내 레포에 적용</a>해보았다.</p><p><img src="/img/201003githubProjects.PNG" alt="To do list 형식으로 적용한 모습"></p><p>완벽해!<br>Simple is the BEST!!!👍</p><p><br><br><br></p><h2 id="ZenHub-사용기"><a href="#ZenHub-사용기" class="headerlink" title="ZenHub 사용기"></a>ZenHub 사용기</h2><p>말씀해주신 ZenHub도 적용해보았다.<br>ZenHub는 로드맵과 리포트기능이 아주 매력적이다.</p><ul><li>매력포인트<ul><li>리포트기능</li><li>DATE를 설정가능한 로드맵기능</li><li>ZenHub크롬확장자를 다운로드 하지않았다면 Zenhub탭이 다른 사용자에게는 보이지않는다. ZenHub유저끼리는 보인다!</li></ul></li></ul><p><img src="/img/201003zenhub1.PNG" alt="칸반기능"><br><img src="/img/201003zenhub2.PNG" alt="로드맵기능"></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/Team-Project/">Team Project</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/02/201002team/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>오픈소스컨트리뷰톤2020 수상후기</title>
      <link>https://sowon-dev.github.io/2020/10/01/200929opensource/</link>
      <guid>https://sowon-dev.github.io/2020/10/01/200929opensource/</guid>
      <pubDate>Thu, 01 Oct 2020 23:37:06 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;오픈소스컨트리뷰톤2020-멘티-참여후기&quot;&gt;&lt;a href=&quot;#오픈소스컨트리뷰톤2020-멘티-참여후기&quot; class=&quot;headerlink&quot; title=&quot;오픈소스컨트리뷰톤2020 멘티 참여후기&quot;&gt;&lt;/a&gt;오픈소스컨트리뷰톤2020 멘티 참여후기&lt;/h2&gt;&lt;p&gt;내가 참여한 &lt;strong&gt;모던자바스크립트 프로젝트&lt;/strong&gt;가 장려상을 수상했다!👑&lt;br&gt;참여하는 것만으로도 영광이었는데 이렇게 상까지 받게되니 정말 기쁘다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="오픈소스컨트리뷰톤2020-멘티-참여후기"><a href="#오픈소스컨트리뷰톤2020-멘티-참여후기" class="headerlink" title="오픈소스컨트리뷰톤2020 멘티 참여후기"></a>오픈소스컨트리뷰톤2020 멘티 참여후기</h2><p>내가 참여한 <strong>모던자바스크립트 프로젝트</strong>가 장려상을 수상했다!👑<br>참여하는 것만으로도 영광이었는데 이렇게 상까지 받게되니 정말 기쁘다.</p><a id="more"></a><p>그동안 배운 것들은 정리해보았다.</p><ol><li>컨트리뷰톤기간동안 진행된 모든 회의에 참여하여 깃과 깃허브사용법등 깊이있는 버전관리지식과 오픈소스생태계 지식을 얻을 수 있었다.</li><li>다양한 분야의 컨트리뷰터분들이 유용한 현직자 팁을 매회의때마다 공유해주셨다. 책에서는 배울 수 없는 살아있는 지식을 많이 습득할 수 있었다.</li><li>평일 아침마다 진행되는 스터디에 참여하여 자극을 받고 유익했던 스터디내용을 공유할 수 있었다.</li><li>매주 화요일 저녁에 진행되는 스터디에 참여하여 직접 퀴즈를 내봄으로써 모던자바스크립트에 대한 깊이 있는 지식을 쌓는 것은 물론 <a href="https://github.com/sowon-dev/modernJsStudy">저장소를 직접 운영</a>해보았다.</li><li>🌟좋은 사람들을 많이 만났다.🌟</li></ol><p><img src="https://www.oss.kr/storage/app/public/thumbnails/21/39/spill_800x800_ee77335ae2f3ada2ef06ba731852ae2b96cd2f54.jpg" alt="출처 : https://www.oss.kr/contributhon_notice/show/bf01f047-eb8e-429a-a986-3560bf6d691e?page=1"></p><p><br><br><br></p><h2 id="스터디-레포지토리-운영-후기"><a href="#스터디-레포지토리-운영-후기" class="headerlink" title="스터디 레포지토리 운영 후기"></a>스터디 레포지토리 운영 후기</h2><p><a href="https://ko.javascript.info/">모던 자바스크립트 튜토리얼</a>자료가 정말 좋아서 완독을 목표로 오픈소스컨트리뷰톤기간동안 같이 스터디할 분들을 모집했다.<br>Zoom회의를 통해 목표와 공부방법설정을 진행하였다.<br>이걸 기록해놓으면 좋겠다는 생각에 레포지토리를 생성해서 활용하자고 제안하였고 스터디원분들이 다 좋다고 하셔서 말을 꺼낸 내가 운영하게 되었다!<br>한 명과의 레포관리만 해보았지 이렇게 여러명에서 사용하게 될 레포를 관리하는 건 처음이라 신났다.<br>깃허브 레포에서 사용하지못했던 많은 기능이 있었기에 이참에 열심히 활용해봐야겠야겠다고 생각했다.</p><ol><li>레포생성하기</li><li>스터디원 contributors로 추가하기</li><li>첫 회의때 이야기 나누었던 부분을 리드미작성하기<br><img src="/img/201003readme.PNG" alt="리드미"></li><li>위키활용하기<ul><li>위키를 활용하기 위해 어떤 정보를 작성할까 고민했다. 그러다 회의록을 작성하면 좋겠다는 생각이 들었다. 사정이 있어 지난 스터디에 참석 못 한 스터디원들에게도 위키를 통해 정보를 공유하여 다음 스터디참석에 원활하게끔 만들 수 있을 것 같았다.</li><li>어떤 사람이 참석했는지 출석부를 만들면 좋겠다고 생각했는데 우리 스터디 규정중에 퀴즈제출을 활용하면 좋겠다는 생각이 들었다. 더불어 퀴즈를 기준으로 퀴즈 모음을 만들어 한 눈에 퀴즈와 풀이를 볼 수 있게끔 하고싶었다. 그래서 퀴즈리스트를 만들어서 제출자 아이디와 퀴즈, 풀이를 함께 링크를 걸어 한 눈에 파악할 수 있도록하고 출석체크까지 겸 했다.</li></ul></li><li>이슈템플릿 만들기<ul><li>퀴즈나 전반적인 스터디 질문에 대비하여 이슈템플릿도 만들어보았다. 질문은 다 줌미팅에서 해결했기에 결과적으로는 아무도 사용하지 않았지만ㅋㅋㅋ<br><img src="/img/201003issuetemplete.PNG" alt="이슈템플릿"></li></ul></li></ol><p>그렇게 탄생한 <a href="https://github.com/sowon-dev/modernJsStudy">모던JS스터디레포</a>!<br>한 달동안 직접 담당하여 운영해보니 깃헙의 매력에 푹 빠져버렸다.<br>이렇게 숨은 기능이 많을 줄이야!<br>다음에도 꼭 컨트리뷰톤에 참여하고싶다.<br>내가 직접 멘토가 되는 그날이 오기를 소망해본다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4%EC%BB%A8%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%86%A42020/">오픈소스컨트리뷰톤2020</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Review/">Review</category>
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/01/200929opensource/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>인텔리제이 윈도우 단축키 표</title>
      <link>https://sowon-dev.github.io/2020/09/30/201001journal/</link>
      <guid>https://sowon-dev.github.io/2020/09/30/201001journal/</guid>
      <pubDate>Wed, 30 Sep 2020 07:57:03 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;IntelliJ-window-단축키&quot;&gt;&lt;a href=&quot;#IntelliJ-window-단축키&quot; class=&quot;headerlink&quot; title=&quot;IntelliJ window 단축키&quot;&gt;&lt;/a&gt;IntelliJ window 단축키&lt;/h2&gt;&lt;p&gt;이클립스로 개발공부를 해왔지만 스프링을 공부하면서 좋다는 소문만 들었던 인텔리제이 커뮤니티버전을 다운로드받았다.&lt;br&gt;나도 인텔리제이쓴다!!하며 &lt;a href=&quot;http://color-themes.com/?view=index&quot;&gt;color scheme&lt;/a&gt;도 고르고 룰루랄라 시작했는데..&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="IntelliJ-window-단축키"><a href="#IntelliJ-window-단축키" class="headerlink" title="IntelliJ window 단축키"></a>IntelliJ window 단축키</h2><p>이클립스로 개발공부를 해왔지만 스프링을 공부하면서 좋다는 소문만 들었던 인텔리제이 커뮤니티버전을 다운로드받았다.<br>나도 인텔리제이쓴다!!하며 <a href="http://color-themes.com/?view=index">color scheme</a>도 고르고 룰루랄라 시작했는데..</p><a id="more"></a><p><strong>이런!</strong><br>단축키가 달라서 코딩속도가 엄청 느리다…답답해!!!!!!!!<br>스스로 너무 답답해서 인텔리 윈도우용 단축키를 정리해나가고자한다.</p><p><br><br><br></p><h2 id="인텔리제이-단축키-정리표"><a href="#인텔리제이-단축키-정리표" class="headerlink" title="인텔리제이 단축키 정리표"></a>인텔리제이 단축키 정리표</h2><table><thead><tr><th align="center">카테고리</th><th align="center">Action</th><th align="left">단축키</th></tr></thead><tbody><tr><td align="center">이동</td><td align="center">줄이동</td><td align="left">Alt + Shift + ↑↓</td></tr><tr><td align="center"></td><td align="center">한줄 아래로 복붙</td><td align="left">Ctrl + d</td></tr><tr><td align="center"></td><td align="center">코드 한 줄 삭제</td><td align="left">Ctrl + y</td></tr><tr><td align="center"></td><td align="center">파일 가장 위, 아래로 이동</td><td align="left">Ctrl + Home, End</td></tr><tr><td align="center">자동완성</td><td align="center">괄호안에서 <code>;</code>로 코드완성하기</td><td align="left">Ctrl + Shift + Enter</td></tr><tr><td align="center"></td><td align="center">변수 추출하기</td><td align="left">Ctrl + Alt + v</td></tr><tr><td align="center"></td><td align="center">생성자,Getter와Setter,메서드 오버라이딩 자동완성</td><td align="left">Alt + Insert</td></tr><tr><td align="center"></td><td align="center">자바클래스 main메서드 자동생성</td><td align="left">psvm + Tab</td></tr><tr><td align="center"></td><td align="center">System.out.println(); 자동완성</td><td align="left">sout + Tab</td></tr><tr><td align="center"></td><td align="center">System.out.printf(“”); 자동완성</td><td align="left">so + Tab</td></tr><tr><td align="center">수정</td><td align="center">동일한 변수명 한꺼번에 수정</td><td align="left">변수명에서 Shift + F6</td></tr><tr><td align="center">실행</td><td align="center">런</td><td align="left">Ctrl + Shift + F10</td></tr><tr><td align="center"></td><td align="center">이전실행을 재실행</td><td align="left">Shift + F10</td></tr></tbody></table><p><br><br><br></p><h2 id="🔑이동"><a href="#🔑이동" class="headerlink" title="🔑이동"></a>🔑이동</h2><ul><li>줄이동 :  Alt + Shift + ↑↓</li><li>한줄 아래로 복붙 : Ctrl + d</li><li>코드 한줄 삭제 : Ctrl + y</li><li>파일 가장 위, 아래로 이동 : Ctrl + Home, End </li></ul><p><br><br><br></p><h2 id="🔑자동완성"><a href="#🔑자동완성" class="headerlink" title="🔑자동완성"></a>🔑자동완성</h2><ul><li>괄호안에서 <code>;</code>로 코드완성하기 : Ctrl + Shift + Enter</li><li>변수 추출하기 :  Ctrl + Alt + v</li><li>생성자,Getter와Setter,메서드 오버라이딩등 자동생성 : Alt + Insert</li><li>자바클래스 main메서드 자동생성 : psvm + Tab</li><li>System.out.println(); 자동완성 : sout + Tab</li><li>System.out.printf(“”); 자동완성 : so + Tab</li></ul><p><br><br><br></p><h2 id="🔑수정"><a href="#🔑수정" class="headerlink" title="🔑수정"></a>🔑수정</h2><ul><li>동일한 변수명 한꺼번에 수정 : 변수명에서 Shift + F6</li></ul><p><br><br><br></p><h2 id="🔑실행"><a href="#🔑실행" class="headerlink" title="🔑실행"></a>🔑실행</h2><ul><li>런 : Ctrl + Shift + F10</li><li>이전실행을 재실행 : Shift + F10</li></ul><p><br><br><br></p><h2 id="추천-플러그인"><a href="#추천-플러그인" class="headerlink" title="추천 플러그인"></a>추천 플러그인</h2><ul><li>presentaion Assistant : 화면 하단에 단축키 알려준다.</li></ul><p><br><br><br></p><h2 id="IntelliJ-VSCode-Eclipse-Visual-Studio-단축키-비교"><a href="#IntelliJ-VSCode-Eclipse-Visual-Studio-단축키-비교" class="headerlink" title="IntelliJ, VSCode, Eclipse, Visual Studio 단축키 비교"></a>IntelliJ, VSCode, Eclipse, Visual Studio 단축키 비교</h2><ul><li><a href="https://okdevtv.com/mib/intellij/shortcuts">https://okdevtv.com/mib/intellij/shortcuts</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/tags/IntelliJ/">IntelliJ</category>
      
      
      <comments>https://sowon-dev.github.io/2020/09/30/201001journal/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(JAVA 자바)시간 입력받아 그대로 출력하기</title>
      <link>https://sowon-dev.github.io/2020/09/29/200930al-2/</link>
      <guid>https://sowon-dev.github.io/2020/09/29/200930al-2/</guid>
      <pubDate>Tue, 29 Sep 2020 08:06:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-기초-입출력-시간-입력받아-그대로-출력하기&quot;&gt;&lt;a href=&quot;#문제-기초-입출력-시간-입력받아-그대로-출력하기&quot; class=&quot;headerlink&quot; title=&quot;문제 : [기초-입출력] 시간 입력받아 그대로 출력하기&quot;&gt;&lt;/a&gt;문제 : [기초-입출력] 시간 입력받아 그대로 출력하기&lt;/h2&gt;&lt;p&gt;시(hour)와 분(minute)이 “:” 으로 구분된 형식에 맞추어 시간이 입력될 때, 그대로 출력하는 연습을 해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-기초-입출력-시간-입력받아-그대로-출력하기"><a href="#문제-기초-입출력-시간-입력받아-그대로-출력하기" class="headerlink" title="문제 : [기초-입출력] 시간 입력받아 그대로 출력하기"></a>문제 : [기초-입출력] 시간 입력받아 그대로 출력하기</h2><p>시(hour)와 분(minute)이 “:” 으로 구분된 형식에 맞추어 시간이 입력될 때, 그대로 출력하는 연습을 해보자.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력예시</span></span><br><span class="line"><span class="number">3</span>:<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력예시</span></span><br><span class="line"><span class="number">3</span>:<span class="number">16</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드1-nextLine-이용"><a href="#코드1-nextLine-이용" class="headerlink" title="코드1 : nextLine()이용"></a>코드1 : nextLine()이용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String time = scan.nextLine();</span><br><span class="line">scan.close();</span><br><span class="line">System.out.printf(<span class="string">"%s"</span>, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드2-Integer-parseInt-이용"><a href="#코드2-Integer-parseInt-이용" class="headerlink" title="코드2 : Integer.parseInt()이용"></a>코드2 : Integer.parseInt()이용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String str = sc.next();</span><br><span class="line">    sc.close();</span><br><span class="line"></span><br><span class="line">    String[] time = str.split(<span class="string">":"</span>);</span><br><span class="line">    System.out.printf(<span class="string">"%d:%d"</span>, Integer.parseInt(time[<span class="number">0</span>]), Integer.parseInt(time[<span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드3-Integer-valueOf-이용"><a href="#코드3-Integer-valueOf-이용" class="headerlink" title="코드3 : Integer.valueOf()이용"></a>코드3 : Integer.valueOf()이용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String str = sc.next();</span><br><span class="line">    String[] time = str.split(<span class="string">":"</span>);</span><br><span class="line">    sc.close();</span><br><span class="line"></span><br><span class="line">    System.out.printf(<span class="string">"%d:%d"</span>, Integer.valueOf(time[<span class="number">0</span>]),Integer.valueOf(time[<span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="세-코드-비교"><a href="#세-코드-비교" class="headerlink" title="세 코드 비교"></a>세 코드 비교</h2><p>Scanner를 close 유무로 수행시간과 메모리 차이가 발생한다.</p><table><thead><tr><th align="center"></th><th align="center">nextLine()</th><th align="center">Integer.parseInt()</th><th align="center">Integer.valueOf()</th></tr></thead><tbody><tr><td align="center">close 전 수행시간</td><td align="center">109ms</td><td align="center">110ms</td><td align="center">109ms</td></tr><tr><td align="center">close 후 수행시간</td><td align="center">109ms</td><td align="center">114ms</td><td align="center">113ms</td></tr><tr><td align="center">close 전 메모리</td><td align="center">14960kb</td><td align="center">15028kb</td><td align="center">15004kb</td></tr><tr><td align="center">close 후 메모리</td><td align="center">14972kb</td><td align="center">14976kb</td><td align="center">14972kb</td></tr></tbody></table><p><br><br><br></p><h2 id="next-와-nextLine-차이"><a href="#next-와-nextLine-차이" class="headerlink" title="next()와 nextLine()차이"></a>next()와 nextLine()차이</h2><ol><li>next() : 공백을 기준으로 입력.</li><li>nextLine() : 한 라인을 기준으로 입력.<ul><li>따라서 split()하기 좋음.</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력값 가나다 라 마 바 사 일때</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//next() 사용</span></span><br><span class="line">String n = sc.next(); </span><br><span class="line">System.out.println(n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//nextLine() 사용 </span></span><br><span class="line">String nl = sc.nextLine(); </span><br><span class="line">System.out.println(nl);</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">가나다 </span><br><span class="line">가나다 라 마 바 사</span><br></pre></td></tr></table></figure><p><img src="/img/nextNnextLine.PNG" alt="출처: https://www.geeksforgeeks.org/difference-between-next-and-nextline-methods-in-java/"></p><p><br><br><br></p><h2 id="parseInt-valueOf의-차이"><a href="#parseInt-valueOf의-차이" class="headerlink" title="parseInt, valueOf의 차이"></a>parseInt, valueOf의 차이</h2><blockquote><ul><li>parseInt : 리턴타입 기본 자료형</li><li>valueOf : 리턴타입 객체</li><li>valueOf는 결국 parseInt를 호출하는 형태이다. 문자열을 변환할 때 객체로 받아서 사용하느냐, 기본 자료형으로 받아서 사용하느냐의 차이다.<br>출처 : <a href="https://brunch.co.kr/@artiveloper/11">https://brunch.co.kr/@artiveloper/11</a></li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/CodeUp100/">CodeUp100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/09/29/200930al-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(JAVA 자바)실수 1개 입력받아 그대로 출력하기</title>
      <link>https://sowon-dev.github.io/2020/09/29/200930al/</link>
      <guid>https://sowon-dev.github.io/2020/09/29/200930al/</guid>
      <pubDate>Tue, 29 Sep 2020 08:05:01 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-기초-입출력-실수-1개-입력받아-그대로-출력하기&quot;&gt;&lt;a href=&quot;#문제-기초-입출력-실수-1개-입력받아-그대로-출력하기&quot; class=&quot;headerlink&quot; title=&quot;문제 : [기초-입출력] 실수 1개 입력받아 그대로 출력하기&quot;&gt;&lt;/a&gt;문제 : [기초-입출력] 실수 1개 입력받아 그대로 출력하기&lt;/h2&gt;&lt;p&gt;실수형(float)로 변수를 선언하고 그 변수에 실수값을 저장한 후&lt;br&gt;저장되어 있는 실수값을 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-기초-입출력-실수-1개-입력받아-그대로-출력하기"><a href="#문제-기초-입출력-실수-1개-입력받아-그대로-출력하기" class="headerlink" title="문제 : [기초-입출력] 실수 1개 입력받아 그대로 출력하기"></a>문제 : [기초-입출력] 실수 1개 입력받아 그대로 출력하기</h2><p>실수형(float)로 변수를 선언하고 그 변수에 실수값을 저장한 후<br>저장되어 있는 실수값을 출력해보자.</p><a id="more"></a><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    x = sc.nextFloat();</span><br><span class="line">    System.out.print(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//입력값 1.414213일때 출력값</span></span><br><span class="line"><span class="number">1.414213</span></span><br></pre></td></tr></table></figure><p>출력값확인하고 코드소슽 틀렸는데 테스트값이 일치하지않았다. 통과못한 테스트값을 보니 아래 테스트를 통과하지 못했다.<br>아래와 같은 출력값이 나와야하는데 내 코드 결과는 <code>1.56</code>이었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력값 1.560000일때 출력값</span></span><br><span class="line"><span class="number">1.560000</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="재시도하여-성공한-코드"><a href="#재시도하여-성공한-코드" class="headerlink" title="재시도하여 성공한 코드"></a>재시도하여 성공한 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    x = sc.nextFloat();</span><br><span class="line">    sc.close(); <span class="comment">//효율을 위해 꼭 자원해제</span></span><br><span class="line">    System.out.printf(<span class="string">"%f\n"</span>, x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//입력값 1.414213일때 출력값</span></span><br><span class="line"><span class="number">1.414213</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//입력값 1.560일때 출력값</span></span><br><span class="line"><span class="number">1.560000</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>정수나 문자는 전혀 상관없지만 소수점이하 자릿수가 있는 경우에는 소수점이하 자릿수까지 표현가능하다.<br>아래 코드처럼 다양한 소수점을 표현할 수 있다.<br>이때 잘린 소수점이 있다면 <strong>반올림</strong>된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(x);</span><br><span class="line">System.out.printf(<span class="string">"%.1f\n"</span>, x);</span><br><span class="line">System.out.printf(<span class="string">"%.3f\n"</span>, x);</span><br><span class="line">System.out.printf(<span class="string">"%f\n"</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//입력값 1.560일때 출력값</span></span><br><span class="line"><span class="number">1.56</span></span><br><span class="line"><span class="number">1.6</span></span><br><span class="line"><span class="number">1.560</span></span><br><span class="line"><span class="number">1.560000</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/CodeUp100/">CodeUp100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/09/29/200930al/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
