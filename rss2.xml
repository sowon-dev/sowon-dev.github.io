<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 20 Oct 2020 03:12:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[ITWILL : JSP] JSP전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/jspList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/jspList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌷프로그래밍기초&quot;&gt;&lt;a href=&quot;#🌷프로그래밍기초&quot; class=&quot;headerlink&quot; title=&quot;🌷프로그래밍기초&quot;&gt;&lt;/a&gt;🌷프로그래밍기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/05/28/200528jspi/&quot;&gt;프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;🌷JS기초&quot;&gt;&lt;a href=&quot;#🌷JS기초&quot; class=&quot;headerlink&quot; title=&quot;🌷JS기초&quot;&gt;&lt;/a&gt;🌷JS기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200601jspi/&quot;&gt;JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌷프로그래밍기초"><a href="#🌷프로그래밍기초" class="headerlink" title="🌷프로그래밍기초"></a>🌷프로그래밍기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200528jspi/">프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버</a></li></ol><h2 id="🌷JS기초"><a href="#🌷JS기초" class="headerlink" title="🌷JS기초"></a>🌷JS기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200601jspi/">JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/06/02/200602jspi/">JS를 문서에 나타내는 3가지방법, undefined VS null, 백의자리 Math.floor(), 복합대입연산자로table생성, A++과 ++A차이점, ==과===차이점, 논리표</a></li><li><a href="https://sowon-dev.github.io/2020/06/03/200603jspi/">JAVA SE/EE/ME 차이점, JAVA EE 설정. Tomcat 설치및설정, 이클립스 단축키</a></li><li><a href="https://sowon-dev.github.io/2020/06/04/200604jspi/">아이디와 비번입력, 새로고침location.reload(), 주석한번에 단축키, switch문 출력문 한줄리팩토링</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200609jspi/">반복문 for 순서 자세히, 개발자 도구로 디버깅, 기본 반복문암기, for문과 if문의 자리바꿈에 따른 변화, 반복문의 전위연산 VS 후위연산, do while문</a></li><li><a href="https://sowon-dev.github.io/2020/06/11/200611jspi/">무한반복문, 보조제어(break와continue)문, 익명함수, 재귀함수, 지역변수를 전역에서 사용하는 방법, 내장함수</a></li></ol><h2 id="🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM"><a href="#🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM" class="headerlink" title="🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))"></a>🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi/">Object객체 전체개념, tv채널객체함수, new를 쓰고 안쓰고의 차이</a></li><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi2/">Date객체 자세히, 디데이구하는 함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi/">Array객체 (for ~ in구문, join(), reverse(), sort())</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi2/">String객체, 짤라오는 함수 4종류 .substring(), slice(), substr(), charAt(), .indexOf()와 .lastIndexOf()차이, .concat(), .split(), ID자릿수를 제한하는 이메일 유효성검사</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi3/">이벤트리스너와 이벤트핸들러, 브라우저객체모델, window객체전체</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi/">브라우저객체모델안의 Document객체 (bgColor와 fgColor사용,  img태그에 접근하여 속성 사용, 랜덤 img 출력하기)</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi2/">브라우저객체모델안의 location객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi/">브라우저객체모델안의 history객체, screen객체, navigator객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi2/">문서 객체 모델안의 form태그, 페이지이동방식(get과 post), focus() vs blur() vs select()</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200618jspi/">문서 객체 모델안의 if문에 return;의 역할, radio태그, checkbox태그</a></li></ol><h2 id="🌷JS실습"><a href="#🌷JS실습" class="headerlink" title="🌷JS실습"></a>🌷JS실습</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi/">js로 간단한 회원가입페이지 작성하기</a></li></ol><h2 id="🌷JSP기초"><a href="#🌷JSP기초" class="headerlink" title="🌷JSP기초"></a>🌷JSP기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi2/">JSP 첫 프로젝트 톰캣과 연결</a></li><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi/">JSP 주석과 JSP directive, JSP 스크립트 요소</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi/">JAVA DATATYPE, Integer.parseInt(문자열), 동일한 파라미터의 값을 가지는 데이터가 여러개있을 경우 변수로 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi2/">커넥션풀(Connection Pool)</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi/">Wrapper클래스, 오토 박싱과 오토 언박싱, hierarchy확인법</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-2/">자바 클래스(객체) vs 추상클래스 vs 인터페이스</a></li></ol><h2 id="🌷JSP기초-내장객체-중-영역객체"><a href="#🌷JSP기초-내장객체-중-영역객체" class="headerlink" title="🌷JSP기초 : 내장객체 중 영역객체"></a>🌷JSP기초 : 내장객체 중 영역객체</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi2/">내장객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi2/">영역객체scope</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi/">영역객체 안에서 사용하는 속성(Attribute), 링크이동 방법별 전달가능한 영역(scope)</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi2/">JSP 디렉티브(directive) 중 include VS 액션태그 include, jspf확장자 파일</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi/">세션(Session)</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi2/">==과 str.equals(str2) 차이, 객체와 클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200701jspi/">쿠키(Cookie)</a></li></ol><h2 id="🌷MySQL"><a href="#🌷MySQL" class="headerlink" title="🌷MySQL"></a>🌷MySQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200701jspi2/">MYSQL 설치, MYSQL환경변수설정, cmd에서 명령어 잘못입력해서 mysql못빠져나갈때</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi/">MYSQL 접속순서, DB명령어, 테이블명령어, 데이터명령어</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi2/">MySQL 한글깨짐현상 두가지 해결방법 : cmd와 Workbench, 이클립스와 MYSQL연결</a></li></ol><h2 id="🌷JDBC"><a href="#🌷JDBC" class="headerlink" title="🌷JDBC"></a>🌷JDBC</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi/">JDBC활용 - import쓰는 이유, form페이지로 받은 데이터를 DB에 insert하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi2/">JDBC활용 - JAVA에서 DB 정보 지우기 2가지방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi/">JDBC활용 - DB에서 고객정보를 불러와서 HTML테이블에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi2/">JDBC활용 - TIMESTAMP주의점, JDBC에서 데이터처리</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707jspi/">JDBC활용 - 회원정보수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/08/200708jspi/">JDBC활용 - 회원목록출력하는데 관리자는 빼고 출력하기, 자바 에러 두종류</a></li></ol><h2 id="🌷JAVABEAN"><a href="#🌷JAVABEAN" class="headerlink" title="🌷JAVABEAN"></a>🌷JAVABEAN</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi/">Javabean : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi2/">자바빈 실습1 : 회원가입페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi/">자바빈 실습2 : 로그인 및 로그아웃페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi2/">자바빈 실습3 : 회원정보조회 및 수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi/">자바빈 실습4 : web.xml, 회원정보삭제페이지</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi3/">자바빈 실습5 : 관리자만 확인할 수 있는 회원목록페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi2/">자바빈 실습6 : 게시판만들기(글쓰기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/21/200721jspi/">자바빈 실습7 : 게시판만들기(글 총 갯수, 글목록, 페이징처리)</a></li><li><a href="https://sowon-dev.github.io/2020/07/22/200722jspi/">자바빈 실습8 : 게시판만들기(글내용보기, 글수정하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi/">자바빈 실습9 : 게시판만들기(글삭제하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi2/">자바빈 실습10 : 게시판만들기(답글쓰기)</a></li></ol><h2 id="🌷파일업로드와-다운로드-기능-구현"><a href="#🌷파일업로드와-다운로드-기능-구현" class="headerlink" title="🌷파일업로드와 다운로드 기능 구현"></a>🌷파일업로드와 다운로드 기능 구현</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi/">자바빈 실습11 : MultipartRequest클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi2/">자바빈 실습12 : 파일업로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi3/">자바빈 실습13 : 파일다운로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200728jspi/">자바빈 실습14 : ServletContext 사용하여 파일업로드와 다운로드</a></li></ol><h2 id="🌷자료구조"><a href="#🌷자료구조" class="headerlink" title="🌷자료구조"></a>🌷자료구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi2/">자료구조1 : Collections Framwork(Set계열, List계열)</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi/">자료구조2 : Stack클래스, Queue인터페이스, Map인터페이스</a></li></ol><h2 id="🌷model1-홈페이지만들기"><a href="#🌷model1-홈페이지만들기" class="headerlink" title="🌷model1 홈페이지만들기"></a>🌷model1 홈페이지만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/29/200729jspi/">홈페이지만들기1 : 프로젝트 시작 설정 및 자바빈생성과 DB연결</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi/">홈페이지만들기2 : 아이디중복체크 포함한 회원가입기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi2/">홈페이지만들기3 : 로그인/로그아웃 기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200803jspi/">홈페이지만들기4 : 게시판글쓰기구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi/">홈페이지만들기5 : 게시판에 글목록표시구현</a></li></ol><h2 id="🌷JQuery"><a href="#🌷JQuery" class="headerlink" title="🌷JQuery"></a>🌷JQuery</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi2/">JQuery1 : JQuery 사용설정, 선택자, css()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi/">JQuery2 : attr(), html()와 text(), append()와 prepend()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi2/">JQuery3 : setInterval()와 clearInteval(), CDATA VS PCDATA</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi/">JQuery4 : click(), bind(), event.preventDefault(), unbind(), keyup(), 유효성체크(자바스크립트 vs 제이쿼리)</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi2/">JQuery5 : 유효성체크(자바스크립트 vs 제이쿼리), 제이쿼리 기본효과</a></li><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi/">JQuery6 : innerfade 라이브러리, animate(속성, 속도, 콜백함수)</a></li></ol><h2 id="🌷Ajax"><a href="#🌷Ajax" class="headerlink" title="🌷Ajax"></a>🌷Ajax</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi2/">Ajax : Ajax특징, XMLHttpRequest클래스, txt 페이지 처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi/">Ajax : xml처리, json처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi2/">Ajax : DB데이터를 불러와서 json형태로 변경하여 출력하기</a></li></ol><h2 id="🌷JSTL과-EL"><a href="#🌷JSTL과-EL" class="headerlink" title="🌷JSTL과 EL"></a>🌷JSTL과 EL</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi/">JSTL과 EL : JSTL과 EL개념, CORE 라이브러리(out)</a></li><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi2/">JSTL과 EL : CORE 라이브러리(set)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi/">JSTL과 EL : CORE 라이브러리(if, forEach, forTokens, choose)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi2/">JSTL과 EL : fmt 라이브러리(formatDate, formatNumber)</a></li><li><a href="https://sowon-dev.github.io/2020/08/13/200813jspi/">JSTL과 EL : EL태그로 동일한 name의 파라미터를 EL태그로 쉽게 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi/">JSTL과 EL : EL태그 연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi2/">EL과 Servlet : RequestDispatcher.forward 로 페이지 이동 후 데이터별 출력방법</a></li></ol><h2 id="🌷model2-MVC패턴-쇼핑몰만들기"><a href="#🌷model2-MVC패턴-쇼핑몰만들기" class="headerlink" title="🌷model2(MVC패턴) 쇼핑몰만들기"></a>🌷model2(MVC패턴) 쇼핑몰만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi/">Servlet : Servlet용어정리, model1과 model2(MVC구조) 개발방식 비교</a></li></ol><h3 id="쇼핑몰회원관리"><a href="#쇼핑몰회원관리" class="headerlink" title="쇼핑몰회원관리"></a>쇼핑몰회원관리</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi2/">Servlet회원관리1: 기본설정 및 가상주소생성</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi/">Servlet회원관리2: 회원가입</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi2/">Servlet회원관리3: 로그인</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi3/">Servlet회원관리4: 메인페이지와 로그아웃</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi/">Servlet회원관리5: 회원정보조회</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi2/">Servlet회원관리6: 회원탈퇴</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi/">Servlet회원관리7: 회원전체목록조회(관리자기능)</a></li></ol><h3 id="게시판"><a href="#게시판" class="headerlink" title="게시판"></a>게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/">Servlet게시판1: 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi/">Servlet게시판2: 게시판 글쓰기</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi2/">Servlet게시판3: 게시판 리스트·게시글전체목록·페이징처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi/">Servlet게시판4: 글 내용보기</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi2/">Servlet게시판5: 글 수정하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi/">Servlet게시판6: 글 삭제하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi2/">Servlet게시판7: 답글하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi3/">Servlet게시판8: 파일업로드·파일보기</a></li></ol><h3 id="관리자전용-상품목록과-등록게시판"><a href="#관리자전용-상품목록과-등록게시판" class="headerlink" title="관리자전용 상품목록과 등록게시판"></a>관리자전용 상품목록과 등록게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi4/">Servlet관리자전용상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi5/">Servlet관리자전용상품2 : 상품등록</a></li><li><a href="https://sowon-dev.github.io/2020/09/08/200908jspi/">Servlet관리자전용상품3 : 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi/">Servlet관리자전용상품4 : 상품수정·인기상품처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi2/">Servlet관리자전용상품5 : 상품삭제</a></li></ol><h3 id="일반유저용-상품목록"><a href="#일반유저용-상품목록" class="headerlink" title="일반유저용 상품목록"></a>일반유저용 상품목록</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi/">Servlet일반상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi2/">Servlet일반상품2 : 카테고리별 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi/">Servlet일반상품3 : 상품상세정보</a></li></ol><h3 id="장바구니"><a href="#장바구니" class="headerlink" title="장바구니"></a>장바구니</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi2/">Servlet장바구니1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi3basket/">Servlet장바구니2 : 장바구니에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi4/">Servlet장바구니3 : 장바구니리스트, 장바구니에서 상품삭제</a></li></ol><h3 id="구매하기"><a href="#구매하기" class="headerlink" title="구매하기"></a>구매하기</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/16/200916jspi/">Servlet구매하기1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/17/200917jspi/">Servlet구매하기2 : 구매하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi/">Servlet구매하기3 : 주문목록</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi2/">Servlet구매하기4 : 주문상세정보페이지</a></li></ol><h3 id="관리자용-주문리스트"><a href="#관리자용-주문리스트" class="headerlink" title="관리자용 주문리스트"></a>관리자용 주문리스트</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi/">Servlet관리자용주문목록1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-1/">Servlet관리자용주문목록2 : 고객주문목록</a></li><li>🌟<a href="https://sowon-dev.github.io/2020/09/23/200923jspi-3/">Servlet관리자용주문목록3 : 고객주문목록에서 주문 상태 및 운송장정보 변경</a></li><li><a href="https://sowon-dev.github.io/2020/09/24/200924jspi/">Servlet관리자용주문목록4 : 고객주문목록에서 삭제</a></li></ol><h2 id="🌷스프링프레임워크"><a href="#🌷스프링프레임워크" class="headerlink" title="🌷스프링프레임워크"></a>🌷스프링프레임워크</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/04/201005springi/">프레임워크란, Spring 특징과 기능, 컨테이너란</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007spring-1/">스프링(STS)설치 및 기본 설정</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/">STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006springi/">Spring 기본 동작순서, JSP와 SPRING의 차이점</a></li><li><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/">제어의 역행(IoC)과 의존성 주입(DI)</a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006springi-1/">회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007spring/">관점 지향(AOP, Aspect-Oriented Programming) 총정리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008spring/">스프링 MVC패턴 프로젝트, 주요 어노테이션(Annotation)</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/">MAVEN REPOSITORY, My(i)Batis설치</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring/">페이지이동하기, 파라미터가지고 페이지이동하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring-1/">redirect나forward로 페이지이동하기, JSON데이터처리하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201014spring/">주니어레벨의 스프링MVC 개발순서, MyBatis(iBatis) 사용 방법 3가지</a></li><li><a href="https://sowon-dev.github.io/2020/10/15/201015spring/">JDBC로그 라이브러리 설치</a></li><li><a href="https://sowon-dev.github.io/2020/10/15/201015spring-1/">Spring MVC JUNIT TEST Failure와 Error차이</a></li><li><a href="https://sowon-dev.github.io/2020/10/19/201019spring/">스프링 웹계층 : 서비스(비즈니스 로직), 컨트롤러(프레젠테이션)</a></li><li><a href="https://sowon-dev.github.io/2020/10/19/201019spring-1/">한글처리</a></li></ol><h2 id="🌷스프링MVC-쇼핑몰만들기"><a href="#🌷스프링MVC-쇼핑몰만들기" class="headerlink" title="🌷스프링MVC 쇼핑몰만들기"></a>🌷스프링MVC 쇼핑몰만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/19/201019spring-2/">회원가입 및 로그인</a></li><li><a href="https://sowon-dev.github.io/2020/10/20/201020spring/">메인페이지, 로그아웃</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/jspList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Algorithm전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/algorithmList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/algorithmList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌊코드업기초&quot;&gt;&lt;a href=&quot;#🌊코드업기초&quot; class=&quot;headerlink&quot; title=&quot;🌊코드업기초&quot;&gt;&lt;/a&gt;🌊코드업기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-1/&quot;&gt;1011 : 문자 한 개 입력받아 그대로 출력하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al/&quot;&gt;1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-2/&quot;&gt;1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌊코드업기초"><a href="#🌊코드업기초" class="headerlink" title="🌊코드업기초"></a>🌊코드업기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-1/">1011 : 문자 한 개 입력받아 그대로 출력하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al/">1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-2/">1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006al/">1023 : 실수 1개 입력받아 부분별로 출력하기, split대신 StringTokenizer사용하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/">1034 : 8진 정수 1개 입력받아 10진수로 출력하기(설명), Scanner로 2진수, 8진수 16진수 받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008al-c1041/">1041 : 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012al-c1059/">1059 : 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1064/">1064 : 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1066/">1066 : 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</a></li><li><a href="https://sowon-dev.github.io/2020/10/13/201014al-c1071/">1071 : 0 입력될 때까지 무한 출력하기1, goto말고while문사용</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1082/">1082 : 16진수 구구단?</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1084/">1084 : 빛 섞어 색 만들기(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1084/">1093 : 이상한 출석 번호 부르기1(설명)</a></li><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">모든 코드업(codeup)100제 자바(java) 풀이 : 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999  </a></li></ol><p><br><br><br></p><h2 id="🌊백준"><a href="#🌊백준" class="headerlink" title="🌊백준"></a>🌊백준</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/18/201018al-b11005/">11005번 진법 변환2</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/algorithmList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : Android] Android전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/androidList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/androidList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:43:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🍫안드로이드기초&quot;&gt;&lt;a href=&quot;#🍫안드로이드기초&quot; class=&quot;headerlink&quot; title=&quot;🍫안드로이드기초&quot;&gt;&lt;/a&gt;🍫안드로이드기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/09/200909and/&quot;&gt;안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/28/200928and/&quot;&gt;안드로이드 4대 컴포넌트&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🍫안드로이드기초"><a href="#🍫안드로이드기초" class="headerlink" title="🍫안드로이드기초"></a>🍫안드로이드기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200909and/">안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928and/">안드로이드 4대 컴포넌트</a><a id="more"></a></li></ol><h2 id="🍫화면구성"><a href="#🍫화면구성" class="headerlink" title="🍫화면구성"></a>🍫화면구성</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910and/">컴파운드버튼(체크박스,라디오버튼,스위치,토글버튼) 한눈에 비교하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and/">레이아웃종류 및 레이아웃 안에서 자주 사용되는 속성</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-1/">고급위젯: 아날로그시계,디지털시계,크로노미터,타임피커,데이트피커,캘린더뷰,자동완성텍스트뷰와 멀티자동완성텍스트뷰</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-2/">옵션메뉴, 컨텍스트메뉴, 토스트</a></li></ol><h2 id="🍫기능"><a href="#🍫기능" class="headerlink" title="🍫기능"></a>🍫기능</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/24/200924and/">안드로이드 파일처리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201007and/">이미지파일 넣기</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/androidList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : DB] DB전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/DBList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/DBList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌱리눅스와-SQL&quot;&gt;&lt;a href=&quot;#🌱리눅스와-SQL&quot; class=&quot;headerlink&quot; title=&quot;🌱리눅스와 SQL&quot;&gt;&lt;/a&gt;🌱리눅스와 SQL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200602dbi/&quot;&gt;간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/15/200616dbi/&quot;&gt;virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/18/200619dbi/&quot;&gt;CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌱리눅스와-SQL"><a href="#🌱리눅스와-SQL" class="headerlink" title="🌱리눅스와 SQL"></a>🌱리눅스와 SQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200602dbi/">간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200616dbi/">virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200619dbi/">CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi/">SQL DEVELOPER사용방법</a></li></ol><h2 id="🌱DB와-SQL개념"><a href="#🌱DB와-SQL개념" class="headerlink" title="🌱DB와 SQL개념"></a>🌱DB와 SQL개념</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200529dbi/">DB기초이론, DBMS</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200602dbi2/">데이터베이스기초활용</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200605dbi/">DDL vs DML vs DCL</a></li><li><a href="https://sowon-dev.github.io/2020/06/07/200608dbi/">제약조건의 컬럼레벨과 테이블레벨문법, 제약조건 5가지, 버퍼에 있는 자주 사용할 쿼리구문을 저장하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200610dbi/">select as from where, order by, 동일유저 동시접속 가능, 트랜잭션 commit과 rollback</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200717dbi/">트랜잭션(Transaction), 치환변수, save명령어, 리소스부족에러발생시</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200804dbi/">Data Dictionary</a></li></ol><h2 id="🌱Select-구문"><a href="#🌱Select-구문" class="headerlink" title="🌱Select 구문"></a>🌱Select 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200623dbi/">Select 구문을 사용한 데이터 검색, null VS 0 VS 공백, Distinct</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi/">테이블 전체목록조회, 테이블구조조회, WHERE(조건문)절</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi2/">Order by 정렬</a></li></ol><h2 id="🌱단일행함수"><a href="#🌱단일행함수" class="headerlink" title="🌱단일행함수"></a>🌱단일행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi/">단일행함수 : 문자함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi2/">단일행함수 : 숫자함수, 날짜함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi3/">단일행함수 : 변환함수, 일반함수</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200811dbi/">단일행함수 : 조건부 표현식</a></li></ol><h2 id="🌱여러행함수"><a href="#🌱여러행함수" class="headerlink" title="🌱여러행함수"></a>🌱여러행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi4/">여러행함수 : 그룹함수</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707dbi/">여러행함수 : Group by절, Having절</a></li></ol><h2 id="🌱중요-구문"><a href="#🌱중요-구문" class="headerlink" title="🌱중요 구문"></a>🌱중요 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/">JOIN</a></li><li><a href="https://sowon-dev.github.io/2020/07/13/200714dbi/">Subquery1: Subquery개념, 중첩Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/23/200824dbi/">Subquery2: Inlineview, Scalar Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery3: exists연산자, not exists연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery4: with절</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi3/">SQL 기억해야 할 쿼리</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200820dbi/">Top-N분석</a></li></ol><h2 id="🌱데이터조작어-DML-데이터정의어-DDL"><a href="#🌱데이터조작어-DML-데이터정의어-DDL" class="headerlink" title="🌱데이터조작어 (DML) / 데이터정의어 (DDL)"></a>🌱데이터조작어 (DML) / 데이터정의어 (DDL)</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/14/200714dbi2/">데이터조작어DML : insert/update/delete구문</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200721dbi/">데이터정의어DDL : table 생성 table 복사, varchar2와 varchar와 char비교</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200724dbi/">데이터정의어DDL : 테이블수정(컬럼수정, 제약조건수정, 컬럼명수정, 제약조건명수정), 테이블명변경, 테이블삭제, 테이블절단, truncate과 delete과 drop차이</a></li></ol><h2 id="🌱SQL의-OBJECT-종류"><a href="#🌱SQL의-OBJECT-종류" class="headerlink" title="🌱SQL의 OBJECT 종류"></a>🌱SQL의 OBJECT 종류</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200728dbi/">SQL의 OBJECT종류 : view</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi/">SQL의 OBJECT종류 : 시퀀스(Sequence)</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi2/">SQL의 OBJECT종류 : 인덱스(Index), 시노님(Synonym)</a></li></ol><h2 id="🌱DB구조"><a href="#🌱DB구조" class="headerlink" title="🌱DB구조"></a>🌱DB구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/26/200826dbi/">Oracle DB구조1 : Database</a></li><li><a href="https://sowon-dev.github.io/2020/08/28/200828dbi/">Oracle DB구조2 : Instance의 SGA메모리구조</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831dbi/">Oracle DB구조3 : Instance의 Background process</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901dbi2/">Oracle DB구조4 : 구조 완벽정리, 상활별 오라클 DB 순서</a></li></ol><h2 id="🌱DB구현-및-관리"><a href="#🌱DB구현-및-관리" class="headerlink" title="🌱DB구현 및 관리"></a>🌱DB구현 및 관리</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200911dbi/">Oracle DB생성방법 2가지, Oracle DB Tool, Parameterfile 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/14/200914dbi/">오라클의 Database 켜고 끄기</a></li><li><a href="https://sowon-dev.github.io/2020/09/18/200918dbi/">오라클의 Datafile 관리하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/20/200921dbi/">DB유저관리 : user 생성, 권한부여</a></li><li><a href="https://sowon-dev.github.io/2020/09/21/200922dbi/">데이터충돌, DeadLock</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi2/">DB fail 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/27/200928dbi/">Controlfile다중화, Redoligfile다중화, 데이터베이스로그모드</a></li><li><a href="https://sowon-dev.github.io/2020/10/16/201016dbi/">DB BACKUP</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/DBList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[국비교육 자바JAVA 팀프로젝트]3. 깃허브와 구글드라이브로 팀프로젝트하기2, springMVC프로젝트기획하기</title>
      <link>https://sowon-dev.github.io/2020/10/21/201021team/</link>
      <guid>https://sowon-dev.github.io/2020/10/21/201021team/</guid>
      <pubDate>Wed, 21 Oct 2020 05:28:30 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;깃허브와-구글드라이브로-팀프로젝트하기&quot;&gt;&lt;a href=&quot;#깃허브와-구글드라이브로-팀프로젝트하기&quot; class=&quot;headerlink&quot; title=&quot;깃허브와 구글드라이브로 팀프로젝트하기&quot;&gt;&lt;/a&gt;깃허브와 구글드라이브로 팀프로젝트하기&lt;/h2&gt;&lt;p&gt;깃허브를 적극 활용하여 팀프로젝트에 열심히 적목시키고 있다. 나는 참 인복이 좋아서 좋은 팀원들을 만났다.&lt;br&gt;다들 적극적으로 협업도구를 이용하고 있다. 가장 많이 사용하는 건 카카오톡이 아니라 의외로 깃헙이다.&lt;br&gt;산발적인 정보들과 아이디어들을 깃헙 위키에 모아놓으니까 팀원들도 알아서 위키를 가장 많이 찾는 것 같아 참 뿌듯하다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="깃허브와-구글드라이브로-팀프로젝트하기"><a href="#깃허브와-구글드라이브로-팀프로젝트하기" class="headerlink" title="깃허브와 구글드라이브로 팀프로젝트하기"></a>깃허브와 구글드라이브로 팀프로젝트하기</h2><p>깃허브를 적극 활용하여 팀프로젝트에 열심히 적목시키고 있다. 나는 참 인복이 좋아서 좋은 팀원들을 만났다.<br>다들 적극적으로 협업도구를 이용하고 있다. 가장 많이 사용하는 건 카카오톡이 아니라 의외로 깃헙이다.<br>산발적인 정보들과 아이디어들을 깃헙 위키에 모아놓으니까 팀원들도 알아서 위키를 가장 많이 찾는 것 같아 참 뿌듯하다.</p><a id="more"></a><p>카카오톡은 투표용도로 주로 사용한다. 회의일정이라든지 의견이 나뉘는 결정사항이 있을때 투표를 통해 다수결의 제안을 받아들이고 협력하고 있다.<br>자신의 의견이 확고한 경우 찾아온 ref를 공유하고 팀원들을 설득하여 서로 성장하는 방향으로 회의를 진행하고 있다.<br>팀원들이 좋은 회의 분위기를 만들어줘서 서로 자신의 의견도 자유롭게 얘기하는 모습이 참 좋다.<br>팀프로젝트가 잘 진행될 것 같은 좋은 예감이 든다.</p><ul><li>주로 사용하는 도구<ol><li>깃헙 레포 위키<ul><li>모든 공지사항</li><li>프로젝트 일정확인</li><li>회의록을 작성하여 회의 내용 기록</li></ul></li><li>구글드라이브 공유폴더<ul><li>DB테이블이나 스토리보드등을 공유하고 댓글과 글작성으로 바로바로 소통하며 업무 진행</li></ul></li><li>카카오톡 오픈채팅방<ul><li>익명투표</li></ul></li></ol></li></ul><p><br><br><br></p><h2 id="프로젝트-일정"><a href="#프로젝트-일정" class="headerlink" title="프로젝트 일정"></a>프로젝트 일정</h2><p>처음의 목표와 크게 달라지지않았지만 조금 일정이 바뀌고 뒤로 밀려졌다.<br>포스팅을 작성하고 있는 지금 도메인별 기능 분배까지 완료한 상태이다.</p><ol><li>킥오프 회의 =&gt; 10/14 수</li><li>팀플 주제 선정 =&gt; 10/15 목</li><li>강사님 컨펌 =&gt; 10/15 목</li><li>피드백반영 회의 =&gt; 10/15 목</li><li>최종 주제 선정 =&gt; 10/15 목</li><li>CSS 템플릿 투표로 결정 =&gt; 10/16 금</li><li>게시판레이아웃, 기능정리, 각자 DB테이블짜기 =&gt; 10/17 ~ 10/18 (주말동안)</li><li>DB테이블생성 =&gt; 10/19 ~ 10/21 수</li><li>도메인별 기능 분배 =&gt; 10/21 수</li><li>각 팀별 기능구현(수시로 기능 통합) =&gt; 10/21 수 ~ 11/8 일 (3주)</li><li>최종 테스트 후 버그 수정 &amp; 발표PPT제작 =&gt; 11/9 월 ~ 11/15 일 </li><li>발표 =&gt; 11/17 화</li></ol><p><br><br><br></p><h2 id="팀장의-시행착오"><a href="#팀장의-시행착오" class="headerlink" title="팀장의 시행착오"></a>팀장의 시행착오</h2><p>팀원들과 윈윈하는 프로젝트를 만들기위해서 참 많은 생각과 노력을 하고 있다.<br>나는 내가 만약 팀장급이 된다면 <strong>똑똑하게</strong> 회의를 할 것이라고 다짐해왔다.<br>정말 비효율적인 회의를 싹 다 버리고 싶었다.<br>서로의 시간을 버리는 회의를 하고 싶지 않았다.<br>혹자는 머리를 맞대고 얘기하다보면 좋은 결과물이 나올 수 있다고얘기하지만 그건 절대 아니다.<br>각자의 의견이 있는 상태에서 이야기를 나눠야 좋은 결과물이 나오는 거지 프로젝트가 어떻게 흘러가는지도 모르고 이번 회의의 목표도 모르는 상태에서 회의를 한다는 건 아무 생각없이 앉아있는 것과 다를 바가 없다.<br>내가 생각하는 회의란 이미 자신의 생각이 있는 상태(스스로 정보찾기가 완료된 상태)에서 서로의 생각을 공유하며 시야를 확장하며 결정사항들을 완료하는 시간이다.</p><p>이를 위해 여러 시행착오가 있었다.</p><ol><li>첫 시행착오 : CSS 템블릿 찾아오기<ul><li>과정 : 팀원 전체에게 각자 CSS 템플릿을 찾아보자고했다.</li><li>아쉬운 점 : 8개 템플릿의 소스코드를 검토하는 데만 상당한 시간이 소요되었다. </li><li>배운 점 : 페어를 정해서 CSS템플릿 찾아오기를 했다면 페어끼리 서로 의견을 합치게되고 좋은 의견이 있는 4개의 템플릿후보만 검토하면 되었을 것이다. 앞으로는 페어끼리 서로의 의견을 먼저 합친 후에 팀 전체회의를 진행해야겠다. 그렇게되면 8개가 아닌 4가지 안건 중에 결정하는 회의가 되니 효율적인 회의를 할 수 있다. </li></ul></li><li>두번째 시행착오 : 페어팀끼리 프로젝트에서 해보고싶은 기능과 필요한 기능을 정해오기<ul><li>과정 : 지난 과오를 깨닫고 이번에는 페어팀끼리 프로젝트에서 해보고싶은 기능과 필요한 기능을 ref와 함께 찾아보자고 했다. 그리고 전체회의 전 다른 페어팀의 결과물을 읽어보고 회의에 참석해달라고 요청했다.</li><li>아쉬운 점 : 각자 PPT결과물을 가지고 발표하는 시간을 가졌는데 굉장히 많은 시간이 소요되었다. 모든 페어팀발표가 끝나기 전에 다른 방법의 회의를 진행했다.    </li><li>해결과정 : 팀장인 내가 내 시간을 따로 들여서 서로 이견이 있는 기능 7가지를 추려서 해당 7가지 기능을 결정하는 데 나머지 시간을 사용했다. 추가로 해보고싶은 기능들은 다수결을 통해 정했다. 준비해온 페어팀들을 위해 각자 발표할 시간을 주었어야 했을까 의문이 남는다. </li></ul></li><li>세번째 시행착오 : 기능배분이 먼저인지 DB생성이 먼저인지<ul><li>과정 : 기능배분 후 각 기능을 담당한 페어끼리 DB생성과 뷰까지 함께 진행하면 된다고 생각했다. 하지만 그건 오산이었다…</li><li>해결방법 : 강사님들에게 조언을 구한 뒤 DB전체 테이블 작성이 우선순위인 걸 깨닫고 다같이 추가 회의를 진행했다.</li><li>배운 점 : 혼자할 때는 뭘 먼저 시작해도 항상 해결할 수 있었는데 8명이 같이 하는 프로젝트이다보니 서로 헷갈리지않게 뭐든 순서에 따라 명확하게 처리해야한다. 기능배분이 아니라 DB설계가 먼저이다. 어차피 기능구현에 시간이 많이 걸리므로 기능 배분먼저 하고 싶었던 나의 마음은 큰 욕심이었다. 또 하나 배웠다.</li></ul></li></ol><p>앞으로도 수많은 시행착오가 있을 것이지만 그 속에서 웃음을 잃지않고 많은 것을 배우고 싶다.<br>어차피 할 거 재미있게 해야지!</p><p><br><br><br></p><h2 id="주제-재선정"><a href="#주제-재선정" class="headerlink" title="주제 재선정"></a>주제 재선정</h2><p>그 사이에 토론을 통해 주제를 재선정했다.<br>기존에는 중고쇼핑몰플랫폼을 하려고 했으나 더 많은 기능을 개발할 수 있는 <strong>중고경매플랫폼</strong>으로 변경했다.<br>그러면서 서로 가지고 있는 경매에 대한 생각이 달라서 그 부분을 한방향으로 모으느라 애를 먹었다.<br>지속적으로 의사소통하면서 이견이 생기지않게 조율해야겠다.</p><p><br><br><br></p><h2 id="파트장-정하기"><a href="#파트장-정하기" class="headerlink" title="파트장 정하기"></a>파트장 정하기</h2><p>강사님이 파트장이 있으면 원할한 팀프로젝트 진행이 가능하다고 하셨다.<br>이에 내가 생각하는 파트장의 역할과 권한을 추가 기재하여 총 세 파트의 파트장을 정하였다.<br>하고싶은 사람이나 추천하고싶은 사람 이야기가 오고갔으나 아무도 나서지않아서…. 결국 익명투표를 진행했다.<br>다들 잘 모른다면서 하기싫은 눈치였다. 우리 모두 다른 분야에서 국비지원을 통해 자바개발자로 취업하려고 모였으니 모두에게 처음인건 당연한건데도 말이다.<br>개인프로젝트발표가 끝난 뒤라 개인프로젝트결과물을 보고 나는 소신투표했다!ㅋㅋㅋㅋ<br>나는 컨트롤러파트장을 맡게되었다.<br>팀장으로서 혼자서 고민했던 부분을 이제 파트장들과 함께 고민하게 되어 든든하다.</p><ul><li>컨트롤러파트장 : 나!</li><li>뷰파트장</li><li>DB파트장</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 위키에 공유한 파트장 역할과 권한</span><br><span class="line"></span><br><span class="line">파트장 역할 : 각자 구현된 기능들을 원활하게 통합하도록 전체 프로젝트의 흐름과 코드흐름을 조망하고 통제할 수 있습니다.</span><br><span class="line">파트장 권한 : 팀원들은 변수명이나 이전 소스코드를 변경시 파트장과 꼭 의논 후 진행해야합니다.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="기능분배"><a href="#기능분배" class="headerlink" title="기능분배"></a>기능분배</h2><p>가장 골머리를 썩이고 있는 것은 바로 기능 분배였다. 다들 자기가 개발하고싶은 기능을 분배받으면 가장 좋겠지만 그 실상은 꽤나 복잡하다.</p><ul><li>서로 하고싶은 기능이 같은 경우 그리고 서로 기피하는 기능은 도대체 누가 할 것이냐<br>이거 하나로 감정이 확 상할 수 있기때문에 신중해야하는 문제이다.<br>나는 모두가 윈윈하는 프로젝트를 만들고 싶었으므로 정말 많이 고민했다가 강사님께 조언을 부탁드렸다.<br>강사님이 들어보시더니 도메인별로 하는 것이 좋겠다고 하셨다.<br>일단 프로젝트 일정이 촉박한 편이니 우선순위 기능부터 구현하라고 하셨다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;개별 개발가능한 도메인별 기능분배&gt;</span><br><span class="line"></span><br><span class="line">(1순위)플젝설정+회원가입, 로그인 &#x3D;&gt; 1페어</span><br><span class="line">내경매게시판 경매등록&#x2F;수정게시판 &#x3D;&gt; 1페어</span><br><span class="line">고객센터게시판 &#x3D;&gt; 1페어</span><br><span class="line">결제게시판 &#x3D;&gt; 1페어</span><br><span class="line"></span><br><span class="line">--- 그 다음 </span><br><span class="line">마이페이지(회원정보수정&#x2F;탈퇴&#x2F;관심상품) </span><br><span class="line">기타 기능 등등</span><br></pre></td></tr></table></figure><p>이렇게 의견을 모은 뒤 누가 어떤 기능을 담당할 것인지 의견을 말해보았다.<br>다들 경매게시판을 하고 싶어했다. 물론 나포함 ㅋㅋㅋㅋㅋ 경매기능이 우리 프로젝트의 핵심기능이니까.<br><code>파트장</code>은 되기 싫지만 핵심기능은 만들고싶다는 사람들의 심리.</p><p>꽤 긴 회의를 통해 결국 사다리타기를 하였고ㅋㅋㅋㅋ 누군가의 환호 또 누군가의 한심이 뒤섞인 회의를 끝으로 각자 기능 개발에 착수시작할 수 있었다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/Team-Project/">Team Project</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/21/201021team/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DB 복구</title>
      <link>https://sowon-dev.github.io/2020/10/19/201020dbi/</link>
      <guid>https://sowon-dev.github.io/2020/10/19/201020dbi/</guid>
      <pubDate>Mon, 19 Oct 2020 21:10:48 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;controlfile-손실-시-복구&quot;&gt;&lt;a href=&quot;#controlfile-손실-시-복구&quot; class=&quot;headerlink&quot; title=&quot;controlfile 손실 시 복구&quot;&gt;&lt;/a&gt;controlfile 손실 시 복구&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/27/200928dbi/#Controlfile%EB%8B%A4%EC%A4%91%ED%99%94&quot;&gt;Controlfile다중화&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;다중화되어있는 컨트롤파일의 Member 중 하나라도 이상이 있으면 DB작동이 멈춘다.&lt;/li&gt;
&lt;li&gt;반드시 DB를 종료한 상태에서 남아 있는 Member를 사용해서 복원해야한다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="controlfile-손실-시-복구"><a href="#controlfile-손실-시-복구" class="headerlink" title="controlfile 손실 시 복구"></a>controlfile 손실 시 복구</h2><ul><li><a href="https://sowon-dev.github.io/2020/09/27/200928dbi/#Controlfile%EB%8B%A4%EC%A4%91%ED%99%94">Controlfile다중화</a></li><li>다중화되어있는 컨트롤파일의 Member 중 하나라도 이상이 있으면 DB작동이 멈춘다.</li><li>반드시 DB를 종료한 상태에서 남아 있는 Member를 사용해서 복원해야한다.  <a id="more"></a><ul><li>절대 백업파일을 사용하지않는다.</li><li>백업파일을 사용해서 백업하는 경우는 오로지 다중화된 controlfile의 <strong>Member 모두</strong>가 손실된 경우. </li></ul></li></ul><p><br><br><br></p><h3 id="복구순서"><a href="#복구순서" class="headerlink" title="복구순서"></a>복구순서</h3><p>상황 : Controlfile이 다중화되어 있는데 특정 member가 손실된 경우</p><ol><li>DB켜는 중 오류를 발견</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; startup </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;출력 &#x3D;&gt; nomount는 되지만 mount시 오류발생</span><br></pre></td></tr></table></figure><ol start="2"><li>DB종료</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; shut immediate</span><br></pre></td></tr></table></figure><ol start="3"><li>남아있는 member를 사용해서 손실된 member복구 </li></ol><ul><li>어떤 member가 손상되었는지 log정보 확인하거나 파일위치를 호가인하여 어떤 member가 손실되었는지 확인한다. <ul><li>파일이 있는데 손상되어있는 경우는 드물다.</li><li>보통은 손실되는 경우가 많다.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 손상되거나 손실된 컨트롤파일 찾기 &#x3D;&gt; fast_recovery_area에 있는 컨트롤파일이 사라졌다.</span><br><span class="line">SQL&gt; show parameter control_files</span><br><span class="line">SQL&gt; !</span><br><span class="line">[oracle@localhost ~]$ cd </span><br><span class="line">[oracle@localhost ~]$ cd &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;ORCL&#x2F;controlfile&#x2F;</span><br><span class="line">[oracle@localhost controlfile]$ ls</span><br><span class="line">o1_mf_fwvn95xm_.ctl</span><br><span class="line">[oracle@localhost controlfile]$ cd</span><br><span class="line">[oracle@localhost ~]$ cd &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;fast_recovery_area&#x2F;orcl&#x2F;ORCL&#x2F;controlfile&#x2F;</span><br><span class="line">[oracle@localhost controlfile]$ ls</span><br><span class="line">[oracle@localhost controlfile]$ cd &#x2F;home&#x2F;oracle&#x2F;</span><br><span class="line">[oracle@localhost ~]$ ls</span><br><span class="line">200820quizMySol.sql  checkTablespaceNname.sql  consNcol.sql    hr1.sql  ingMe.sql     new_dept.sql     공개      바탕화면  서식</span><br><span class="line">afiedt.buf           cons1.sql                 control103.ctl  hr2.sql  labs_12c      ora12c           다운로드  비디오    음악</span><br><span class="line">backup               cons2.sql                 hr.sql          hr3.sql  load_emp.sql  search_cons.sql  문서      사진</span><br><span class="line">[oracle@localhost ~]$ ^C</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 컨트롤파일 복구</span><br><span class="line">[oracle@localhost controlfile]$ cp o1_mf_fwvn95xm_.ctl &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;fast_recovery_area&#x2F;orcl&#x2F;ORCL&#x2F;controlfile&#x2F;o1_mf_fwvn96cd_.ctl</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 컨트롤파일 잘 복사되었는지 확인</span><br><span class="line">[oracle@localhost controlfile]$ cd &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;fast_recovery_area&#x2F;orcl&#x2F;ORCL&#x2F;controlfile&#x2F;</span><br><span class="line">[oracle@localhost controlfile]$ ls</span><br><span class="line">o1_mf_fwvn96cd_.ctl</span><br></pre></td></tr></table></figure><ol start="4"><li>DB 재시작</li></ol><ul><li>아까는 mount되지않았던 DB가 정상적으로 start되는 것을 확인할 수 있다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; startup</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/19/201020dbi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING] 메인페이지, 로그아웃</title>
      <link>https://sowon-dev.github.io/2020/10/19/201020spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/19/201020spring/</guid>
      <pubDate>Mon, 19 Oct 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;MemberController-java-추가-코드-작성&quot;&gt;&lt;a href=&quot;#MemberController-java-추가-코드-작성&quot; class=&quot;headerlink&quot; title=&quot;MemberController.java 추가 코드 작성&quot;&gt;&lt;/a&gt;&lt;code&gt;MemberController.java&lt;/code&gt; 추가 코드 작성&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;retrun시 redirect로 페이지이동할때 파라미터를 VO객체 가지고 가는 방법&lt;ul&gt;
&lt;li&gt;Model객체로 파라미터를 전달할 수 없기 때문에 RedirectAttributes 객체를 사용해야한다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/10/12/201013spring-1/#RedirectAttributes%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-1%ED%9A%8C%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0&quot;&gt;RedirectAttributes의 addFlashAttribute과 addAttribute의 차이&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=allkanet72&amp;logNo=220964699929&amp;proxyReferer=https:%2F%2Fwww.google.com%2F&quot;&gt;RedirectAttributes POST방식 데이터 넘기기일까? 총정리&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="MemberController-java-추가-코드-작성"><a href="#MemberController-java-추가-코드-작성" class="headerlink" title="MemberController.java 추가 코드 작성"></a><code>MemberController.java</code> 추가 코드 작성</h2><ul><li>retrun시 redirect로 페이지이동할때 파라미터를 VO객체 가지고 가는 방법<ul><li>Model객체로 파라미터를 전달할 수 없기 때문에 RedirectAttributes 객체를 사용해야한다.</li><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring-1/#RedirectAttributes%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-1%ED%9A%8C%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0">RedirectAttributes의 addFlashAttribute과 addAttribute의 차이</a></li><li><a href="https://m.blog.naver.com/PostView.nhn?blogId=allkanet72&logNo=220964699929&proxyReferer=https:%2F%2Fwww.google.com%2F">RedirectAttributes POST방식 데이터 넘기기일까? 총정리</a><a id="more"></a></li></ul></li><li><code>rttr.addAttribute(&quot;mvo&quot;, returnVO);</code>사용 못하는 이유<ul><li>컴파일 에러 발생 <code>Failed to convert value of type &#39;com.itwillbs.domain.MemberVO&#39; to required type &#39;java.lang.String&#39;</code></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 로그인 기능 */</span></span><br><span class="line"><span class="comment">// http://localhost:8088/member/login</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">l.info(<span class="string">"C: 로그인 입력페이지 GET"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/member/loginForm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//public String loginPOST(@ModelAttribute("userid") String id, @ModelAttribute("userpw") String pw) throws Exception&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginPOST</span><span class="params">(MemberVO vo, HttpSession session, RedirectAttributes rttr)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">l.info(<span class="string">"C: 로그인 처리페이지 POST"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.한글처리 =&gt; web.xml에서 완료</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.전달받은 파라미터 저장 =&gt; loginPOST()메서드의 파라미터값으로 저장함.</span></span><br><span class="line">l.info(<span class="string">"C: "</span>+ vo.getUserid() + vo.getUserpw());</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.서비스객체생성 =&gt; 22번째 코드로 의존주입완료</span></span><br><span class="line"><span class="comment">//4.서비스 로그인 체크 동작(HttpSession)</span></span><br><span class="line">MemberVO returnVO = service.loginMember(vo);</span><br><span class="line">l.info(<span class="string">"C: 리턴VO결과(서비스에서 예외처리를 진행했으므로 null이 출력되면 코드에 문제있다는 의미) "</span>+returnVO);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.메인페이지로 이동(주소줄과 view페이지 동시에 main으로 변경되어야함)</span></span><br><span class="line"><span class="comment">// 해당 정보 있는 경우 : =&gt; main페이지로 이동</span></span><br><span class="line"><span class="comment">//if(returnVO.getUserid() != null) &#123;</span></span><br><span class="line"><span class="comment">//에러가 발생하는 이유:</span></span><br><span class="line"><span class="keyword">if</span>(returnVO != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//5.세션값생성</span></span><br><span class="line">session.setAttribute(<span class="string">"id"</span>, returnVO.getUserid());</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//map.put("username", returnVO.getUsername());</span></span><br><span class="line"><span class="comment">//map.put("useremail", returnVO.getUseremail());</span></span><br><span class="line"><span class="comment">//rttr.addAttribute("mvo", map);</span></span><br><span class="line"></span><br><span class="line">rttr.addFlashAttribute(<span class="string">"mvo"</span>, returnVO);</span><br><span class="line"><span class="comment">//l.info("C: 모델에 뭐 들어있니?"+model);</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/member/main"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 해당 정보 없는 경우 : =&gt; login페이지로 이동</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/member/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//end of loginPOST()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 메인페이지 */</span></span><br><span class="line"><span class="comment">// http://localhost:8088/member/main</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/main"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//model.addAttribute("mvo", model);</span></span><br><span class="line">l.info(<span class="string">"C: 메인 출력페이지 GET"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 로그아웃 */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/logout"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logoutGET</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">l.info(<span class="string">"C: 로그아웃 GET"</span>);</span><br><span class="line">session.invalidate();</span><br><span class="line"><span class="comment">// return "redirect:/member/main"; 얼럿창출력안하고싶을때 사용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><br><br><br></p><h2 id="main-jsp-뷰페이지생성"><a href="#main-jsp-뷰페이지생성" class="headerlink" title="main.jsp 뷰페이지생성"></a><code>main.jsp</code> 뷰페이지생성</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>member/main.jsp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">id</span> = <span class="string">(String)</span> <span class="attr">session.getAttribute</span>("<span class="attr">id</span>");</span></span><br><span class="line"><span class="tag"><span class="attr">if</span>(<span class="attr">id</span> == <span class="string">null)</span> <span class="attr">response.sendRedirect</span>("/<span class="attr">member</span>/<span class="attr">login</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">jsp표현식 세션 : <span class="tag">&lt;<span class="name">%=</span> <span class="attr">id</span> %&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">el표현식 세션: $&#123;id &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">그냥 : $&#123;username &#125; , $&#123;useremail &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">mvo그냥 : $&#123;mvo.username &#125; , $&#123;mvo.useremail &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"location.href='/member/logout'"</span> <span class="attr">value</span>=<span class="string">"로그아웃"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="logout-jsp-뷰페이지생성"><a href="#logout-jsp-뷰페이지생성" class="headerlink" title="logout.jsp 뷰페이지생성"></a><code>logout.jsp</code> 뷰페이지생성</h2><ul><li>로그아웃 뷰페이지를 만들기 원치않으면 로그인페이지에서 값을 하나 전달받아서 그 값이 있을 경우 얼럿창을 출력하게끔 <code>login.jsp</code>에서 처리할 수 있다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>member/main.jsp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">id</span> = <span class="string">(String)</span> <span class="attr">session.getAttribute</span>("<span class="attr">id</span>");</span></span><br><span class="line"><span class="tag"><span class="attr">if</span>(<span class="attr">id</span> == <span class="string">null)</span> <span class="attr">response.sendRedirect</span>("/<span class="attr">member</span>/<span class="attr">login</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">jsp표현식 세션 : <span class="tag">&lt;<span class="name">%=</span> <span class="attr">id</span> %&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">el표현식 세션: $&#123;id &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">그냥 : $&#123;username &#125; , $&#123;useremail &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">mvo그냥 : $&#123;mvo.username &#125; , $&#123;mvo.useremail &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"location.href='/member/logout'"</span> <span class="attr">value</span>=<span class="string">"로그아웃"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/19/201020spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING] 한글처리</title>
      <link>https://sowon-dev.github.io/2020/10/18/201019spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/18/201019spring-1/</guid>
      <pubDate>Sun, 18 Oct 2020 22:39:51 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;web-xml에서-한글처리-코드-추가&quot;&gt;&lt;a href=&quot;#web-xml에서-한글처리-코드-추가&quot; class=&quot;headerlink&quot; title=&quot;web.xml에서 한글처리 코드 추가&quot;&gt;&lt;/a&gt;&lt;code&gt;web.xml&lt;/code&gt;에서 한글처리 코드 추가&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web-app&lt;/code&gt;태그 사이에 입력한다</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="web-xml에서-한글처리-코드-추가"><a href="#web-xml에서-한글처리-코드-추가" class="headerlink" title="web.xml에서 한글처리 코드 추가"></a><code>web.xml</code>에서 한글처리 코드 추가</h2><ul><li><code>web-app</code>태그 사이에 입력한다<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 한글처리 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">UTF</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/18/201019spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링 웹계층 : 서비스(비즈니스 로직), 컨트롤러(프레젠테이션)</title>
      <link>https://sowon-dev.github.io/2020/10/18/201019spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/18/201019spring/</guid>
      <pubDate>Sun, 18 Oct 2020 19:55:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;스프링-웹계층&quot;&gt;&lt;a href=&quot;#스프링-웹계층&quot; class=&quot;headerlink&quot; title=&quot;스프링 웹계층&quot;&gt;&lt;/a&gt;스프링 웹계층&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbRKzjn%2FbtqHoqiwtuG%2Fkm0VKjT5YI65M6kjyiQVV1%2Fimg.png&quot; alt=&quot;https://devlog-wjdrbs96.tistory.com/m/209&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;서비스-계층-비즈니스-계층&quot;&gt;&lt;a href=&quot;#서비스-계층-비즈니스-계층&quot; class=&quot;headerlink&quot; title=&quot;서비스 계층(비즈니스 계층)&quot;&gt;&lt;/a&gt;서비스 계층(비즈니스 계층)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;사용자의 요구사항을 일치시켜서 구현하는 계층&lt;/li&gt;
&lt;li&gt;DAO와 Controller 사이를 연결&lt;/li&gt;
&lt;li&gt;고객마다 다르게 처리해야하는 부분을 처리</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="스프링-웹계층"><a href="#스프링-웹계층" class="headerlink" title="스프링 웹계층"></a>스프링 웹계층</h2><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbRKzjn%2FbtqHoqiwtuG%2Fkm0VKjT5YI65M6kjyiQVV1%2Fimg.png" alt="https://devlog-wjdrbs96.tistory.com/m/209"></p><h2 id="서비스-계층-비즈니스-계층"><a href="#서비스-계층-비즈니스-계층" class="headerlink" title="서비스 계층(비즈니스 계층)"></a>서비스 계층(비즈니스 계층)</h2><ul><li>사용자의 요구사항을 일치시켜서 구현하는 계층</li><li>DAO와 Controller 사이를 연결</li><li>고객마다 다르게 처리해야하는 부분을 처리<a id="more"></a></li><li>DB와 무관하게 처리할 수 있는 영역</li><li>컨트롤러(외부호출)의 영속계층(persistence)종속을 막아준다.</li><li>컨트롤러가 트렌젝션, 예외처리등을 모두 처리해야하지만 종속적인 상황을 벗어나면 컨트롤러는 컨트롤러의 역할만 할 수 있다.</li><li><code>@Service</code> 의미 : 해당 클래스를 서비스 객체로 처리(스프링에서 인식할 수 있게 만듦)</li></ul><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RahUjo1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uqvr69zi0mlvh2eh8459.jpg" alt="https://dev.to/urunov/truly-there-is-no-difference-in-implementation-integrating-spring-with-jersey-and-integrating-jersey-with-spring-m2k"></p><p><br><br><br></p><h2 id="프리젠테이션-계층-컨트롤러"><a href="#프리젠테이션-계층-컨트롤러" class="headerlink" title="프리젠테이션 계층(컨트롤러)"></a>프리젠테이션 계층(컨트롤러)</h2><ul><li>컨트롤러 + 뷰</li><li>기능<ul><li>공통적인 URI경로, 각 기능별 URI 지정</li><li>결과처리, 페이지 이동, 예외처리</li></ul></li><li>컨트롤러는 모듈로서 특정 메뉴, 기능묶음 단위로 생성한다.</li><li>URI를 어떤 방식으로 처리할 것인지에 대한 설계가 필요하다.<ul><li>GET방식 <ul><li>외부에서 접근해오는 페이지 (주로 입력페이지)</li><li>정보를 조회하는 페이지</li></ul></li><li>POST방식<ul><li>데이터를 처리해야하는 페이지</li></ul></li></ul></li></ul><p><br><br><br></p><h2 id="MemberService-java-인터페이스-생성"><a href="#MemberService-java-인터페이스-생성" class="headerlink" title="MemberService.java 인터페이스 생성"></a><code>MemberService.java</code> 인터페이스 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.domain.MemberVO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 회원 가입 (일반회원가입테이블에 sns계정 컬럼 추가하기)</span></span><br><span class="line"><span class="comment">// 일반적으로는 DAO랑 같은 메소드명을 사용하여 일관성을 유지한다</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMember</span><span class="params">(MemberVO vo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberServiceImpl-java-클래스-생성"><a href="#MemberServiceImpl-java-클래스-생성" class="headerlink" title="MemberServiceImpl.java 클래스 생성"></a><code>MemberServiceImpl.java</code> 클래스 생성</h2><ul><li>MemberService 인터페이스를 구현</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.domain.MemberVO;</span><br><span class="line"><span class="keyword">import</span> com.itwillbs.persistence.MemberDAO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberServiceImpl</span> <span class="keyword">implements</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DB와 연결 (의존주입)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> MemberDAO mdao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMember</span><span class="params">(MemberVO vo)</span> </span>&#123;</span><br><span class="line"><span class="comment">//컨트롤러 -&gt; 서비스 호출 -&gt; DAO 호출 -&gt; Mapper -&gt; DB</span></span><br><span class="line">System.out.print(<span class="string">"S : 회원가입동작"</span>);</span><br><span class="line"><span class="keyword">if</span>(vo == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//처리</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mdao.insertMember(vo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="root-context-xml-코드추가"><a href="#root-context-xml-코드추가" class="headerlink" title="root-context.xml 코드추가"></a><code>root-context.xml</code> 코드추가</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 서비스패키지(com.itwillbs.service)와 연결  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itwillbs.service"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberServiceTest-java-테스트-클래스-생성"><a href="#MemberServiceTest-java-테스트-클래스-생성" class="headerlink" title="MemberServiceTest.java 테스트 클래스 생성"></a><code>MemberServiceTest.java</code> 테스트 클래스 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.domain.MemberVO;</span><br><span class="line"><span class="keyword">import</span> com.itwillbs.service.MemberService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>( <span class="title">locations</span> </span>= &#123;<span class="string">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberServiceTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//서비스객체를 직접 생성하지 않고 의존 주입</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> MemberService service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertServiceTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">MemberVO vo = <span class="keyword">new</span> MemberVO(<span class="string">"uesrGang"</span>, <span class="string">"4321"</span>, <span class="string">"강조지"</span>, <span class="string">"jorge@com"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">service.insertMember(vo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/18/201019spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1093 : [기초-1차원배열] 이상한 출석 번호 부르기1(설명)</title>
      <link>https://sowon-dev.github.io/2020/10/18/201019al-c1093/</link>
      <guid>https://sowon-dev.github.io/2020/10/18/201019al-c1093/</guid>
      <pubDate>Sun, 18 Oct 2020 17:55:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1093-기초-1차원배열-이상한-출석-번호-부르기1-설명&quot;&gt;&lt;a href=&quot;#문제-1093-기초-1차원배열-이상한-출석-번호-부르기1-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1093 : [기초-1차원배열] 이상한 출석 번호 부르기1(설명)&quot;&gt;&lt;/a&gt;문제 1093 : [기초-1차원배열] 이상한 출석 번호 부르기1(설명)&lt;/h2&gt;&lt;p&gt;정보 선생님은 수업을 시작하기 전에 이상한 출석을 부른다.&lt;br&gt;선생님은 출석부를 보고 번호를 부르는데,&lt;br&gt;학생들의 얼굴과 이름을 빨리 익히기 위해 번호를 무작위(랜덤)으로 부른다.&lt;br&gt;그리고 얼굴과 이름이 잘 기억되지 않는 학생들은 번호를 여러 번 불러&lt;br&gt;이름과 얼굴을 빨리 익히려고 하는 것이다.&lt;br&gt;출석 번호를 n번 무작위로 불렀을 때, 각 번호(1 ~ 23)가 불린 횟수를 각각 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1093-기초-1차원배열-이상한-출석-번호-부르기1-설명"><a href="#문제-1093-기초-1차원배열-이상한-출석-번호-부르기1-설명" class="headerlink" title="문제 1093 : [기초-1차원배열] 이상한 출석 번호 부르기1(설명)"></a>문제 1093 : [기초-1차원배열] 이상한 출석 번호 부르기1(설명)</h2><p>정보 선생님은 수업을 시작하기 전에 이상한 출석을 부른다.<br>선생님은 출석부를 보고 번호를 부르는데,<br>학생들의 얼굴과 이름을 빨리 익히기 위해 번호를 무작위(랜덤)으로 부른다.<br>그리고 얼굴과 이름이 잘 기억되지 않는 학생들은 번호를 여러 번 불러<br>이름과 얼굴을 빨리 익히려고 하는 것이다.<br>출석 번호를 n번 무작위로 불렀을 때, 각 번호(1 ~ 23)가 불린 횟수를 각각 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>첫 번째 줄에 출석 번호를 부른 횟수인 정수 n이 입력된다. (1부터 10000까지)<br>두 번째 줄에는 무작위로 부른 n개의 번호(1부터 23까지)가 공백을 두고 순서대로 입력된다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">1 3 2 2 5 6 7 4 5 9</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>1번부터 번호가 불린 횟수를 순서대로 공백으로 구분하여 한 줄로 출력한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 1 1 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> codeup100;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> count = sc.nextInt(); <span class="comment">//출석 번호를 부른 횟수</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] students = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">23</span>];</span><br><span class="line"><span class="keyword">int</span> numbers = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">numbers = sc.nextInt(); <span class="comment">//무작위로 부른 n개의 번호(1 ~ 23)</span></span><br><span class="line">students[numbers - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d "</span>, students[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>스캐너를 처음부터 다 입력 받으려고 하지말고 for문안에서 받고 규칙 <code>students[numbers - 1]</code>을 이해하는 것이 핵심이다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/18/201019al-c1093/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING] 회원가입 및 로그인기능 구현</title>
      <link>https://sowon-dev.github.io/2020/10/18/201019spring-2/</link>
      <guid>https://sowon-dev.github.io/2020/10/18/201019spring-2/</guid>
      <pubDate>Sun, 18 Oct 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;MemberController-java-컨트롤러-생성&quot;&gt;&lt;a href=&quot;#MemberController-java-컨트롤러-생성&quot; class=&quot;headerlink&quot; title=&quot;MemberController.java 컨트롤러 생성&quot;&gt;&lt;/a&gt;&lt;code&gt;MemberController.java&lt;/code&gt; 컨트롤러 생성&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;회원가입 기능과 로그인 기능 입력&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:8088/member/insert&lt;/code&gt;에서 뷰페이지를 볼 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/10/19/201019spring-1/&quot;&gt;한글처리하는 방법&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="MemberController-java-컨트롤러-생성"><a href="#MemberController-java-컨트롤러-생성" class="headerlink" title="MemberController.java 컨트롤러 생성"></a><code>MemberController.java</code> 컨트롤러 생성</h2><ul><li>회원가입 기능과 로그인 기능 입력</li><li><code>http://localhost:8088/member/insert</code>에서 뷰페이지를 볼 수 있다.</li><li><a href="https://sowon-dev.github.io/2020/10/19/201019spring-1/">한글처리하는 방법</a><a id="more"></a></li><li>redirect의 의미 : 주소줄에 페이지 전환을 의미</li><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring/#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EA%B0%80%EC%A7%80%EA%B3%A0-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0">파라미터를 가지고 다니는 방법 두가지</a><ul><li>첫번째방법 : <code>MemberVO vo</code></li><li>두번째 방법 : <code>@ModelAttribute(&quot;userid&quot;) String id</code> , 주 사용처 : 페이징처리시 페이지넘버</li><li>보통 하나의 파라미터가 있다면 아래 방법을 사용하고 두개이상의 파라미터를 가져가려면 VO객체를 가지고 이동한다.</li><li>만약 하나의 파라미터가 VO객체 안에 있는 파라미터라면 VO객체로 들고 다니면 된다.</li></ul></li><li>제어<ul><li>컨트롤러 : 페이지이동에 대한 제어</li><li>서비스 : 페이지이동외의 나머지 제어</li></ul></li><li>메인페이지로 이동시 해당 정보 있는 경우 : =&gt; main페이지로 이동<ul><li><code>if(returnVO.getUserid() != null) return &quot;redirect:/main&quot;;</code></li><li>에러발생 equest processing failed; nested exception is java.lang.NullPointerException: Cannot invoke “com.itwillbs.domain.MemberVO.getUserid()” because “returnVO” is null</li><li>따라서 <code>if(returnVO.getUserid() != null) return &quot;redirect:/main&quot;;</code> 대신 <code>if(returnVO != null) return &quot;redirect:/main&quot;;</code> 사용한다.</li></ul></li><li>HttpSession : 세션값생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.domain.MemberVO;</span><br><span class="line"><span class="keyword">import</span> com.itwillbs.service.MemberService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/member/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> </span>&#123;</span><br><span class="line"><span class="comment">//3-1. 서비스 처리 객체를 주입(DI)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> MemberService service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger l = LoggerFactory.getLogger(MemberController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 회원가입 처리하는 동작 */</span></span><br><span class="line"><span class="comment">//insert라는 하나의 주소로 get과 post방식 즉 입력과 출력 둘 다 처리 가능</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/insert</span></span><br><span class="line"><span class="comment">// http://localhost:8088/test/member/insert</span></span><br><span class="line"><span class="comment">// http://localhost:8088/member/insert</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/insert"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="comment">//value="/member/insert"에서 member를 빼도 됨</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">l.info(<span class="string">"C: 회원가입 입력페이지 GET"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/member/insertMember"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/insert"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//value="/member/insertPro"에서 member를 빼도 됨</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertPOST</span><span class="params">(MemberVO vo)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 한글처리 : request객체가 없다 =&gt; web.xml에서 filter태그로 인코딩해야한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 전달된 파라미터 받기</span></span><br><span class="line"><span class="comment">//request.getParameter라는 내장객체가 없다. 따라서 메서드의 매개변수를 통해 가져올 수 있다.</span></span><br><span class="line"><span class="comment">//l.info("C: "+ request.getParameter()); 에러발생</span></span><br><span class="line">l.info(<span class="string">"C: "</span>+ vo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 서비스객체 생성(직접생성안하고 의존주입)</span></span><br><span class="line"><span class="comment">//3-2. 서비스객체호출</span></span><br><span class="line">service.insertMember(vo);</span><br><span class="line">l.info(<span class="string">"C: 회원가입 처리페이지 POST"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 로그인페이지로 이동(주소줄과 view페이지 동시에 insert-&gt;login 변경되어야함)</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/member/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 로그인 기능 */</span></span><br><span class="line"><span class="comment">// http://localhost:8088/member/login</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">l.info(<span class="string">"C: 로그인 입력페이지 GET"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/member/loginForm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//public String loginPOST(@ModelAttribute("userid") String id, @ModelAttribute("userpw") String pw) throws Exception&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginPOST</span><span class="params">(MemberVO vo, HttpSession session, RedirectAttributes rttr)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">l.info(<span class="string">"C: 로그인 처리페이지 POST"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.한글처리 =&gt; web.xml에서 완료</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.전달받은 파라미터 저장 =&gt; loginPOST()메서드의 파라미터값으로 저장함.</span></span><br><span class="line">l.info(<span class="string">"C: "</span>+ vo.getUserid() + vo.getUserpw());</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.서비스객체생성 =&gt; 22번째 코드로 의존주입완료</span></span><br><span class="line"><span class="comment">//4.서비스 로그인 체크 동작(HttpSession)</span></span><br><span class="line">MemberVO returnVO = service.loginMember(vo);</span><br><span class="line">l.info(<span class="string">"C: 리턴VO결과(서비스에서 예외처리를 진행했으므로 null이 출력되면 코드에 문제있다는 의미) "</span>+returnVO);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.메인페이지로 이동(주소줄과 view페이지 동시에 main으로 변경되어야함)</span></span><br><span class="line"><span class="comment">// 해당 정보 있는 경우 : =&gt; main페이지로 이동</span></span><br><span class="line"><span class="comment">//if(returnVO.getUserid() != null) &#123;</span></span><br><span class="line"><span class="comment">//에러가 발생하는 이유:</span></span><br><span class="line"><span class="keyword">if</span>(returnVO != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//5.세션값생성</span></span><br><span class="line">session.setAttribute(<span class="string">"id"</span>, returnVO.getUserid());</span><br><span class="line"></span><br><span class="line"><span class="comment">//RedirectAttributes의 addAttribute메서드 사용해보려고 했으나 실패. 에러 발생</span></span><br><span class="line"><span class="comment">//Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//map.put("username", returnVO.getUsername());</span></span><br><span class="line"><span class="comment">//map.put("useremail", returnVO.getUseremail());</span></span><br><span class="line"><span class="comment">//rttr.addAttribute("mvo", map);</span></span><br><span class="line"></span><br><span class="line">rttr.addFlashAttribute(<span class="string">"mvo"</span>, returnVO);</span><br><span class="line"><span class="comment">//l.info("C: 모델에 뭐 들어있니?"+model);</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/member/main"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 해당 정보 없는 경우 : =&gt; login페이지로 이동</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/member/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//end of loginPOST()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="insertMember-jsp-회원가입-입력받는-페이지-생성"><a href="#insertMember-jsp-회원가입-입력받는-페이지-생성" class="headerlink" title="insertMember.jsp 회원가입 입력받는 페이지 생성"></a><code>insertMember.jsp</code> 회원가입 입력받는 페이지 생성</h2><ul><li>회원가입 입력페이지 구현</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">insertMember.jsp 입니다</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>views의 폴더명은 컨트롤러의 모듈명과 동일<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 회원가입 페이지 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span> ITWILL 회원가입 <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/member/insert"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    ID : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userid"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    PW : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"userpw"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    NAME : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    EMAIL : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"useremail"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"회원가입"</span>&gt;</span>          </span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="주소줄에서-test빼기"><a href="#주소줄에서-test빼기" class="headerlink" title="주소줄에서 test빼기"></a>주소줄에서 test빼기</h2><p>아래 방법으로 서버 주소줄에서 test를 뺄 수 있다.</p><ul><li>servers탭 &gt; server인 Tomcat 더블클릭 &gt; Modules클릭 &gt; Add Web Module클릭 &gt; Path: <code>/test</code> 를 <code>/</code>로 변경 &gt; ok클릭 &gt; 저장 후 서버 재시작</li><li>이제 <code>http://localhost:8088/test/member/insert</code>가 아닌 <code>http://localhost:8088/member/insert</code>로 접속가능하다</li></ul><p><img src="/img/201019spring.PNG" alt=""></p><p><br><br><br></p><h2 id="loginForm-jsp-로그인-입력받는-페이지-생성"><a href="#loginForm-jsp-로그인-입력받는-페이지-생성" class="headerlink" title="loginForm.jsp 로그인 입력받는 페이지 생성"></a><code>loginForm.jsp</code> 로그인 입력받는 페이지 생성</h2><ul><li>로그인 입력 페이지 구현</li><li>action태그의 속성값(주소)이 없어도 동일하게 동작한다.<ul><li>그 이유는 action태그에 주소가 없으면 자기 자신을 호출한다.</li><li>GET방식으로 한번 호출 뒤 다시 자기자신을 호출하니까 POST방식이 호출되므로 주소가 있든 없든 동일한 결과를 볼 수 있다.</li><li>주소는 동일하지만 찾아갈 메서드가 GET에서 POST로 달라진다.</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">loginFrom.jsp</span><br><span class="line">&lt;h1&gt;views의 폴더명은 컨트롤러의 모듈명과 동일&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt; 로그인 &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">  &lt;legend&gt; ITWILL 로그인 &lt;/legend&gt;</span><br><span class="line">  &lt;!-- &lt;form action=<span class="string">"/member/login"</span> method=<span class="string">"post"</span>&gt; --&gt;</span><br><span class="line">  &lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    ID : &lt;input type=<span class="string">"text"</span> name=<span class="string">"userid"</span>&gt; &lt;br&gt;</span><br><span class="line">    PW : &lt;input type=<span class="string">"password"</span> name=<span class="string">"userpw"</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"로그인"</span>&gt;          </span><br><span class="line">    &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"location.href='/member/insert'"</span> value=<span class="string">"회원가입"</span>&gt;          </span><br><span class="line">  &lt;/form&gt;  </span><br><span class="line">&lt;/fieldset&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberService-java-인터페이스-생성"><a href="#MemberService-java-인터페이스-생성" class="headerlink" title="MemberService.java 인터페이스 생성"></a><code>MemberService.java</code> 인터페이스 생성</h2><ul><li>일반적으로는 DAO랑 같은 메소드명을 사용하여 일관성을 유지한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.domain.MemberVO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 회원 가입 (일반회원가입테이블에 sns계정 컬럼 추가하기)</span></span><br><span class="line"><span class="comment">// 일반적으로는 DAO랑 같은 메소드명을 사용하여 일관성을 유지한다</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMember</span><span class="params">(MemberVO vo)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로그인기능 DAO랑 같은 이름으로 하지않은이유? 이름이 달라도 메서드생성가능하다는 걸 보여주기 위해서.</span></span><br><span class="line"><span class="comment">// public MemberVO readMemberWithIDPW(String userid,String userpw) throws Exception;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 로그인기능</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemberVO <span class="title">loginMember</span><span class="params">(MemberVO vo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberServiceImpl-java-인터페이스-오버라이딩-메서드-구현"><a href="#MemberServiceImpl-java-인터페이스-오버라이딩-메서드-구현" class="headerlink" title="MemberServiceImpl.java 인터페이스 오버라이딩 메서드 구현"></a><code>MemberServiceImpl.java</code> 인터페이스 오버라이딩 메서드 구현</h2><ul><li>예외처리를 VO객체로 할 수 있다.<ul><li>catch구문안에 <code>returnVO = null;</code>을 넣어 실행하다 문제가 생겼을때 해당 데이터를 보내지않겠다는 의미로 예외처리를 할 수 있다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> com.itwillbs.domain.MemberVO;</span><br><span class="line"><span class="keyword">import</span> com.itwillbs.persistence.MemberDAO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberServiceImpl</span> <span class="keyword">implements</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DB와 연결 (의존주입)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> MemberDAO mdao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//회원가입</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMember</span><span class="params">(MemberVO vo)</span> </span>&#123;</span><br><span class="line"><span class="comment">//컨트롤러 -&gt; 서비스 호출 -&gt; DAO 호출 -&gt; Mapper -&gt; DB</span></span><br><span class="line">System.out.println(<span class="string">"S : 회원가입동작"</span>);</span><br><span class="line"><span class="keyword">if</span>(vo == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//처리</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mdao.insertMember(vo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//로그인기능</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemberVO <span class="title">loginMember</span><span class="params">(MemberVO vo)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"S : 컨트롤러에서 호출받으면 필요한 정보를 받아서 DAO로 전달"</span>);</span><br><span class="line">MemberVO returnVO = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">returnVO = mdao.readMemberWithIDPW(vo.getUserid(), vo.getUserpw());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">returnVO = <span class="keyword">null</span>; <span class="comment">//실행하다 문제가 생겼을때 해당 데이터를 보내지않겠다는 의미 = 예외처리</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> returnVO; <span class="comment">//null이 반환되면 앞의 코드가 문제가 있다는 것을 바로 알수있다.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/18/201019spring-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]11005번 진법 변환2</title>
      <link>https://sowon-dev.github.io/2020/10/18/201018al-b11005/</link>
      <guid>https://sowon-dev.github.io/2020/10/18/201018al-b11005/</guid>
      <pubDate>Sun, 18 Oct 2020 02:01:38 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-11005번-진법-변환-2&quot;&gt;&lt;a href=&quot;#문제-11005번-진법-변환-2&quot; class=&quot;headerlink&quot; title=&quot;문제 11005번 진법 변환 2&quot;&gt;&lt;/a&gt;문제 11005번 진법 변환 2&lt;/h2&gt;&lt;p&gt;10진법 수 N이 주어진다. 이 수를 B진법으로 바꿔 출력하는 프로그램을 작성하시오.&lt;br&gt;10진법을 넘어가는 진법은 숫자로 표시할 수 없는 자리가 있다. 이런 경우에는 다음과 같이 알파벳 대문자를 사용한다.&lt;br&gt;A: 10, B: 11, …, F: 15, …, Y: 34, Z: 35&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-11005번-진법-변환-2"><a href="#문제-11005번-진법-변환-2" class="headerlink" title="문제 11005번 진법 변환 2"></a>문제 11005번 진법 변환 2</h2><p>10진법 수 N이 주어진다. 이 수를 B진법으로 바꿔 출력하는 프로그램을 작성하시오.<br>10진법을 넘어가는 진법은 숫자로 표시할 수 없는 자리가 있다. 이런 경우에는 다음과 같이 알파벳 대문자를 사용한다.<br>A: 10, B: 11, …, F: 15, …, Y: 34, Z: 35</p><a id="more"></a><ul><li>입력예시<br>첫째 줄에 N과 B가 주어진다. (2 ≤ B ≤ 36) N은 10억보다 작거나 같은 자연수이다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">60466175 36</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>첫째 줄에 10진법 수 N을 B진법으로 출력한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZZZZZ</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> backjoon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://www.acmicpc.net/problem/11005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mento11005</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] input = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(input[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> b = Integer.parseInt(input[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % b &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                list.add((<span class="keyword">char</span>) (n % b + <span class="string">'0'</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 나머지가 10이상이면 A(10) B(11) C(12) ... Z(35)</span></span><br><span class="line">                list.add((<span class="keyword">char</span>) (n % b - <span class="number">10</span> + <span class="string">'A'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            n /= b; <span class="comment">// b로 계속 나누기</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//출력</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            System.out.print(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//end of main()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><ul><li>숫자를 char로 나타내고 싶을때는 <code>(char)</code>로 형변환<ul><li>형변환시 괄호가 중요하다</li></ul></li><li>char를 아스키코드로 나타내고 싶을때는 숫자를 더하기</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//괄호의 중요성</span></span><br><span class="line">System.out.println((<span class="keyword">char</span>) <span class="number">9</span>+<span class="string">'0'</span>); <span class="comment">//57</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">9</span>+<span class="string">'0'</span>)); <span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//10보다 작은 수 테스트</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">8</span>+<span class="string">'0'</span>)); <span class="comment">//8</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">7</span>+<span class="string">'0'</span>)); <span class="comment">//7</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">6</span>+<span class="string">'0'</span>)); <span class="comment">//6</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">5</span>+<span class="string">'0'</span>)); <span class="comment">//5</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">4</span>+<span class="string">'0'</span>)); <span class="comment">//4</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">3</span>+<span class="string">'0'</span>)); <span class="comment">//3</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">2</span>+<span class="string">'0'</span>)); <span class="comment">//2</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>) (<span class="number">1</span>+<span class="string">'0'</span>)+<span class="string">"\n"</span>); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//숫자를 char로 나타내고 싶을때는 (char) 형변환</span></span><br><span class="line">System.out.println((<span class="keyword">char</span>) <span class="number">65</span>); <span class="comment">//A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char를 아스키코드로 나타내고 싶을때는 숫자를 더할 것</span></span><br><span class="line">System.out.println(<span class="string">'A'</span>+<span class="number">1</span>); <span class="comment">//66</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//위의 두 방법 합쳐서도 가능</span></span><br><span class="line">System.out.println((<span class="keyword">char</span>) (<span class="string">'A'</span>+<span class="number">1</span>)); <span class="comment">//B</span></span><br></pre></td></tr></table></figure><p><img src="https://dojang.io/pluginfile.php/807/mod_page/content/16/unit85-1.png" alt="https://dojang.io/mod/page/view.php?id=743"></p><ul><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1082/">16진수 변환 도식화</a></li></ul><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile25.uf.tistory.com%2Fimage%2F27163F3A58876F6B11138C" alt="https://jsieun73.tistory.com/108"></p><p><br><br><br></p><h2 id="멘토님코드"><a href="#멘토님코드" class="headerlink" title="멘토님코드"></a>멘토님코드</h2><p>메소드로 뺄 생각은 안해봤는데 훨씬 흐름을 이해하기 쉬운 것 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Main().solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        String[] input = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> base10 = Integer.parseInt(input[<span class="number">0</span>], <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> base = Integer.parseInt(input[<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        String result = changeBaseN(base10, base);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">changeBaseN</span><span class="params">(<span class="keyword">int</span> base10, <span class="keyword">int</span> base)</span> </span>&#123;</span><br><span class="line">        String[] nBase = makeNBase(base);</span><br><span class="line"></span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (base10 &gt;= base) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = base10 % base;</span><br><span class="line">            base10 = base10 / base;</span><br><span class="line">            result = nBase[num] + result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = nBase[base10] + result;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] makeNBase(<span class="keyword">int</span> base) &#123;</span><br><span class="line">        String[] nBase = <span class="keyword">new</span> String[base];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; base; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                nBase[i] = i + <span class="string">""</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nBase[i] = (<span class="keyword">char</span>)(<span class="string">'A'</span> + (i - <span class="number">10</span>)) + <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nBase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/18/201018al-b11005/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DB BACKUP</title>
      <link>https://sowon-dev.github.io/2020/10/15/201016dbi/</link>
      <guid>https://sowon-dev.github.io/2020/10/15/201016dbi/</guid>
      <pubDate>Thu, 15 Oct 2020 20:12:39 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;DB-BACKUP-DB복구-도구&quot;&gt;&lt;a href=&quot;#DB-BACKUP-DB복구-도구&quot; class=&quot;headerlink&quot; title=&quot;DB BACKUP(DB복구) 도구&quot;&gt;&lt;/a&gt;DB BACKUP(DB복구) 도구&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;USER 관리방식의 backup : 운영체제 명령어(CP)를 사용한 백업과 복구&lt;/li&gt;
&lt;li&gt;RMAN 관리방식의 backup : RMAN(알맨)프로그램과 RMAN명령어를 사용한 백업과 복구&lt;ul&gt;
&lt;li&gt;RMAN = recovery manager의 약자&lt;/li&gt;
&lt;li&gt;오라클이 제공해주는 전문 리커버리 툴</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="DB-BACKUP-DB복구-도구"><a href="#DB-BACKUP-DB복구-도구" class="headerlink" title="DB BACKUP(DB복구) 도구"></a>DB BACKUP(DB복구) 도구</h2><ul><li>USER 관리방식의 backup : 운영체제 명령어(CP)를 사용한 백업과 복구</li><li>RMAN 관리방식의 backup : RMAN(알맨)프로그램과 RMAN명령어를 사용한 백업과 복구<ul><li>RMAN = recovery manager의 약자</li><li>오라클이 제공해주는 전문 리커버리 툴<a id="more"></a></li></ul></li></ul><p><br><br><br></p><h2 id="백업-이하-bk-전략"><a href="#백업-이하-bk-전략" class="headerlink" title="백업(이하 bk) 전략"></a>백업(이하 bk) 전략</h2><ul><li>전체 DB bk : 모든 Datafile과 하나이상의 Controlfile을 포함한 백업</li><li>부분 DB bk : 특정 Datafile만, Controlfile만 백업</li></ul><p><br><br><br></p><h2 id="백업-모드"><a href="#백업-모드" class="headerlink" title="백업 모드"></a>백업 모드</h2><ul><li>Offline bk(=cold bk) : DB가 꺼진 상태(shut, nomount, mount)에서의 백업 </li><li>Online bk(=hot bk) : DB가 켜진 상태(open)에서의 백업</li></ul><p><br><br><br></p><h2 id="백업-유형-Datafile만-해당됨"><a href="#백업-유형-Datafile만-해당됨" class="headerlink" title="백업 유형(Datafile만 해당됨)"></a>백업 유형(Datafile만 해당됨)</h2><ul><li>Full bk : Datafile의 모든 block을 포함한 백업</li><li>Incremental bk : 마지막 백업 이후 변경된 block만을 포함한 백업</li></ul><p><br><br><br></p><h2 id="백업-파일-유형"><a href="#백업-파일-유형" class="headerlink" title="백업 파일 유형"></a>백업 파일 유형</h2><ul><li>image copy : 복사본 형태의 백업 파일 유형 (원본:백업본 = 1:1)<ul><li>확장자명 <code>.dbf</code></li></ul></li><li>backupset : 파일들의 모음(묶음)형태의 백업 파일 유형 (원본:백업본 = n:1)<ul><li>확장자명 <code>.bkp</code></li></ul></li></ul><p><br><br><br></p><h2 id="DB백업-순서"><a href="#DB백업-순서" class="headerlink" title="DB백업 순서"></a>DB백업 순서</h2><ul><li>위의 4가지방식을 결정한 뒤 DB백업을 진행해야한다.</li><li>실습 : USER 관리방식의 backup + 전체 DB bk + Offline bk(=cold bk) + Full bk + image copy</li></ul><ol><li>현재 가지고 있는 datafile과 controlfile 정보조회<ul><li>현재 내가 가지고 있는 datafile 8개, controlfile 3개 </li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select name from v<span class="variable">$datafile</span>;</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/o1_mf_system_fwvn49fw_.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/o1_mf_users_hp871s7n_.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/o1_mf_sysaux_fwvn5f1l_.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/o1_mf_undotbs1_fwvn66mp_.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/o1_mf_example_hp86s7s0_.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/o1_mf_users_fwvn681o_.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/appuser01.dbf</span><br><span class="line">/u01/app/oracle/oradata/ORCL/datafile/appuser02.dbf</span><br><span class="line"></span><br><span class="line">8 rows selected.</span><br><span class="line"></span><br><span class="line">SQL&gt; select name from v<span class="variable">$controlfile</span>;</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">/u01/app/oracle/oradata/ORCL/controlfile/o1_mf_fwvn95xm_.ctl</span><br><span class="line">/u01/app/oracle/fast_recovery_area/orcl/ORCL/controlfile/o1_mf_fwvn96cd_.ctl</span><br><span class="line">/home/oracle/control103.ctl</span><br></pre></td></tr></table></figure><ol start="2"><li>백업을 위해 DB를 <strong>정상적으로</strong> 종료한다.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; shut immediate</span><br><span class="line">SQL&gt; !</span><br></pre></td></tr></table></figure><ol start="3"><li>백업파일을 저장할 폴더를 생성한다.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[oracle@localhost oracle]$ mkdir backup</span><br></pre></td></tr></table></figure><ol start="4"><li>controlfile백업하기</li></ol><ul><li>백업할 컨트롤파일이 있는 곳으로 이동 후 copy명령어를 입력한다</li><li>원본경로 안에서 cp명령어를 날릴경우 원본경로는 생략가능하다</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//현재 컨트롤파일확인</span><br><span class="line">[oracle@localhost oracle]$ <span class="built_in">cd</span> /u01/app/oracle/oradata/ORCL/controlfile</span><br><span class="line">[oracle@localhost oracle]$ ls</span><br><span class="line">o1_mf_fwvn95xm_.ctl</span><br><span class="line"></span><br><span class="line">$&gt; cp 원본경로/이름 복사경로/이름</span><br><span class="line"></span><br><span class="line">//컨트롤파일백업</span><br><span class="line">[oracle@localhost oracle]$ cp cp o1_mf_fwvn95xm_.ctl /home/oracle/backup/conbk.ctl</span><br><span class="line"></span><br><span class="line">//백업잘되었는지 확인</span><br><span class="line">[oracle@localhost oracle]$ <span class="built_in">cd</span> /home/oracle/backup</span><br><span class="line">[oracle@localhost backup]$ ls</span><br><span class="line">conbk.ctl</span><br></pre></td></tr></table></figure><ol start="5"><li>datafile백업하기</li></ol><ul><li>.(점)의 의미 : 원본파일명 그대로 복사하겠다는 의미.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//현재 데이터파일 확인</span><br><span class="line">[oracle@localhost backup]$ <span class="built_in">cd</span> /u01/app/oracle/oradata/ORCL/datafile/</span><br><span class="line">[oracle@localhost datafile]$ ls</span><br><span class="line">appuser01.dbf                o1_mf_sysaux_fwvn5f1l_.dbf  o1_mf_undotbs1_fwvn66mp_.dbf  redo1c.log  redo4c.log</span><br><span class="line">appuser02.dbf                o1_mf_system_fwvn49fw_.dbf  o1_mf_users_fwvn681o_.dbf     redo2c.log</span><br><span class="line">o1_mf_example_hp86s7s0_.dbf  o1_mf_temp_fwvnbgvk_.tmp    o1_mf_users_hp871s7n_.dbf     redo3c.log</span><br><span class="line"></span><br><span class="line">//데이터파일 전체 백업</span><br><span class="line">[oracle@localhost datafile]$ cp *.dbf /home/oracle/backup/.</span><br><span class="line"></span><br><span class="line">//백업완료되었는지 확인</span><br><span class="line">[oracle@localhost datafile]$ <span class="built_in">cd</span> /home/oracle/backup</span><br><span class="line">[oracle@localhost backup]$ ls</span><br><span class="line">appuser01.dbf  conbk.ctl                    o1_mf_sysaux_fwvn5f1l_.dbf  o1_mf_undotbs1_fwvn66mp_.dbf  o1_mf_users_hp871s7n_.dbf</span><br><span class="line">appuser02.dbf  o1_mf_example_hp86s7s0_.dbf  o1_mf_system_fwvn49fw_.dbf  o1_mf_users_fwvn681o_.dbf</span><br></pre></td></tr></table></figure><ol start="6"><li>다시 DB로 복귀하기</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[oracle@localhost backup]$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/15/201016dbi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]Spring MVC JUNIT TEST Failure와 Error차이</title>
      <link>https://sowon-dev.github.io/2020/10/14/201015spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/14/201015spring-1/</guid>
      <pubDate>Wed, 14 Oct 2020 21:57:06 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Spring-MVC-JUNIT-TEST결과&quot;&gt;&lt;a href=&quot;#Spring-MVC-JUNIT-TEST결과&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC JUNIT TEST결과&quot;&gt;&lt;/a&gt;Spring MVC JUNIT TEST결과&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Failure : 테스트의 기대값과 결과값이 틀린경우 발생한다.&lt;ul&gt;
&lt;li&gt;개발자가 기대값을 지정하고 그것과 다른 결과값이 나올 경우 발생한다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Spring-MVC-JUNIT-TEST결과"><a href="#Spring-MVC-JUNIT-TEST결과" class="headerlink" title="Spring MVC JUNIT TEST결과"></a>Spring MVC JUNIT TEST결과</h2><ul><li>Failure : 테스트의 기대값과 결과값이 틀린경우 발생한다.<ul><li>개발자가 기대값을 지정하고 그것과 다른 결과값이 나올 경우 발생한다.<a id="more"></a></li></ul></li><li>Error : 테스트 수행시 오류발생, NullPointerException과 같은 RuntimeError일 경우 발생한다.<ul><li>주로 xml파일에 오타등의 에러가 발생하면 Error가 발생한다.</li><li>xml 파일은 태그 안에 코드를 작성하므로 오타가 발생하는 지 안 하는지 바로 빨간줄체크가 되지 않는다(런타임에러체크). 따라서 이걸 junit이 해결해준다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/14/201015spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]JDBC로그 라이브러리 설치</title>
      <link>https://sowon-dev.github.io/2020/10/14/201015spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/14/201015spring/</guid>
      <pubDate>Wed, 14 Oct 2020 20:40:41 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Log4Jdbc-Log4j2-JDBC-4-»-1-16-설치&quot;&gt;&lt;a href=&quot;#Log4Jdbc-Log4j2-JDBC-4-»-1-16-설치&quot; class=&quot;headerlink&quot; title=&quot;Log4Jdbc Log4j2 JDBC 4 » 1.16 설치&quot;&gt;&lt;/a&gt;Log4Jdbc Log4j2 JDBC 4 » 1.16 설치&lt;/h2&gt;&lt;p&gt;해당 라이브러리는 jdbc와 관련된 로그를 콘솔에 출력할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Log4Jdbc-Log4j2-JDBC-4-»-1-16-설치"><a href="#Log4Jdbc-Log4j2-JDBC-4-»-1-16-설치" class="headerlink" title="Log4Jdbc Log4j2 JDBC 4 » 1.16 설치"></a>Log4Jdbc Log4j2 JDBC 4 » 1.16 설치</h2><p>해당 라이브러리는 jdbc와 관련된 로그를 콘솔에 출력할 수 있다.</p><a id="more"></a><ul><li><a href="https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4/1.16">Log4Jdbc Log4j2 JDBC 4 » 1.16</a> 복사하여 <code>pom.xml</code>에 붙여넣기</li><li><code>root-context.xml</code>에서 아래 두 값을 변경해준다.<ul><li><code>driverClassName</code>의 value를 <code>net.sf.log4jdbc.sql.jdbcapi.DriverSpy</code>로 변경</li><li><code>url</code>의 value를 <code>jdbc:log4jdbc:mysql://localhost:3306/springdb?useSSL=false</code>로 변경</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- DriverManagerDataSource 객체 --&gt;</span><br><span class="line">&lt;!-- DataSource 정보를 가지고 있는 DriverManagerDataSource 객체를 생성 &gt; --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">&lt;!--   &lt;property name=<span class="string">"driverClassName"</span> </span><br><span class="line"> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">   &lt;property name=<span class="string">"url"</span> </span><br><span class="line"> value=<span class="string">"jdbc:mysql://localhost:3306/springdb?useSSL=false"</span>/&gt;--&gt;</span><br><span class="line">   &lt;property name=<span class="string">"driverClassName"</span> </span><br><span class="line"> value=<span class="string">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span>/&gt;</span><br><span class="line">   &lt;property name=<span class="string">"url"</span> </span><br><span class="line"> value=<span class="string">"jdbc:log4jdbc:mysql://localhost:3306/springdb?useSSL=false"</span>/&gt;</span><br><span class="line">   &lt;property name=<span class="string">"username"</span>&gt;</span><br><span class="line">  &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;   </span><br><span class="line">   &lt;property name=<span class="string">"password"</span>&gt;</span><br><span class="line">   &lt;value&gt;1234&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;       </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- DataSource 객체 end --&gt;</span><br></pre></td></tr></table></figure><ul><li><code>log4jdbc.log4j2.properties</code>파일과 <code>logback.xml</code>파일을 <code>src/main/resources</code>에 넣어준다</li><li>test실행시키면 앞으로 코드를 작성할때 log정보를 자세하게 확인할 수 있다. 원하는 출력값은 제일마지막줄의 윗줄에 나타난다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">INFO : jdbc.connection - 1. Connection opened</span><br><span class="line">INFO : jdbc.audit - 1. Connection.new Connection returned </span><br><span class="line">INFO : jdbc.audit - 1. Connection.getAutoCommit() returned true</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.new PreparedStatement returned </span><br><span class="line">INFO : jdbc.audit - 1. Connection.prepareStatement(select now()) returned net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy@7004e3d</span><br><span class="line">INFO : jdbc.sqlonly - select now() </span><br><span class="line"></span><br><span class="line">INFO : jdbc.sqltiming - select now() </span><br><span class="line"> &#123;executed in 0 msec&#125;</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.execute() returned true</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.new ResultSet returned </span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getResultSet() returned net.sf.log4jdbc.sql.jdbcapi.ResultSetSpy@4b1abd11</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.getMetaData() returned com.mysql.jdbc.ResultSetMetaData@40021799 - Field level information: </span><br><span class="line">com.mysql.jdbc.Field@4a1c0752[catalog&#x3D;,tableName&#x3D;,originalTableName&#x3D;,columnName&#x3D;now(),originalColumnName&#x3D;,mysqlType&#x3D;12(FIELD_TYPE_DATETIME),flags&#x3D; BINARY, charsetIndex&#x3D;63, charsetName&#x3D;US-ASCII]</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.getType() returned 1003</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.next() returned true</span><br><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.apache.ibatis.reflection.Reflector (file:&#x2F;C:&#x2F;Users&#x2F;ITWILL&#x2F;.m2&#x2F;repository&#x2F;org&#x2F;mybatis&#x2F;mybatis&#x2F;3.4.1&#x2F;mybatis-3.4.1.jar) to method java.lang.String.value()</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of org.apache.ibatis.reflection.Reflector</span><br><span class="line">WARNING: Use --illegal-access&#x3D;warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.getString(now()) returned 2020-10-15 15:24:24.0</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.wasNull() returned false</span><br><span class="line">INFO : jdbc.resultsettable - </span><br><span class="line">|----------------------|</span><br><span class="line">|now()                 |</span><br><span class="line">|----------------------|</span><br><span class="line">|2020-10-15 15:24:24.0 |</span><br><span class="line">|----------------------|</span><br><span class="line"></span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.next() returned false</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.close() returned void</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getConnection() returned net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@4f20a5e0</span><br><span class="line">INFO : jdbc.audit - 1. Connection.getMetaData() returned com.mysql.jdbc.JDBC4DatabaseMetaData@54da32dc</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getMoreResults() returned false</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getUpdateCount() returned -1</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.close() returned </span><br><span class="line">INFO : jdbc.connection - 1. Connection closed</span><br><span class="line">INFO : jdbc.audit - 1. Connection.close() returned </span><br><span class="line">2020-10-15 15:24:24.0</span><br><span class="line">INFO : org.springframework.context.support.GenericApplicationContext - Closing org.springframework.context.support.GenericApplicationContext@5f16132a: startup date [Thu Oct 15 15:24:24 KST 2020]; root of context hierarchy</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/14/201015spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1084 : [기초-종합] 빛 섞어 색 만들기(설명)</title>
      <link>https://sowon-dev.github.io/2020/10/14/201015al-c1084/</link>
      <guid>https://sowon-dev.github.io/2020/10/14/201015al-c1084/</guid>
      <pubDate>Wed, 14 Oct 2020 18:34:38 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1084-기초-종합-빛-섞어-색-만들기-설명&quot;&gt;&lt;a href=&quot;#문제-1084-기초-종합-빛-섞어-색-만들기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1084 : [기초-종합] 빛 섞어 색 만들기(설명)&quot;&gt;&lt;/a&gt;문제 1084 : [기초-종합] 빛 섞어 색 만들기(설명)&lt;/h2&gt;&lt;p&gt;빨강(red), 초록(green), 파랑(blue) 빛을 섞어 여러 가지 빛의 색을 만들어 내려고 한다.&lt;br&gt;빨강(r), 초록(g), 파랑(b) 각각의 빛의 개수가 주어질 때,&lt;br&gt;(빛의 강약에 따라 0 부터 n-1 까지 n가지의 빛 색깔을 만들 수 있다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1084-기초-종합-빛-섞어-색-만들기-설명"><a href="#문제-1084-기초-종합-빛-섞어-색-만들기-설명" class="headerlink" title="문제 1084 : [기초-종합] 빛 섞어 색 만들기(설명)"></a>문제 1084 : [기초-종합] 빛 섞어 색 만들기(설명)</h2><p>빨강(red), 초록(green), 파랑(blue) 빛을 섞어 여러 가지 빛의 색을 만들어 내려고 한다.<br>빨강(r), 초록(g), 파랑(b) 각각의 빛의 개수가 주어질 때,<br>(빛의 강약에 따라 0 부터 n-1 까지 n가지의 빛 색깔을 만들 수 있다.)</p><a id="more"></a><p>주어진 rgb 빛들을 다르게 섞어 만들 수 있는 모든 경우의 조합(r g b)과 총 가짓 수를 계산해보자.</p><ul><li>입력예시<br>빨녹파(r, g, b) 각 빛의 강약에 따른 가짓수(0부터 128까지))가 공백을 사이에 두고 입력된다.<br>예를 들어, 3 3 3 은 각 색깔 빛에 대해서 그 강약에 따라 0부터 2까지 3가지의 색이 있음을 의미한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 2</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>만들 수 있는 rgb 색의 정보를 오름차순(계단을 올라가는 순, 12345… abcde…, 가나다라마…)으로 줄을 바꿔 모두 출력하고, 마지막에 그 개수를 출력한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 0 1</span><br><span class="line">0 1 0</span><br><span class="line">0 1 1</span><br><span class="line">1 0 0</span><br><span class="line">1 0 1</span><br><span class="line">1 1 0</span><br><span class="line">1 1 1</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><p>출력값은 완벽하나 시간초과 결과가 나타났다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> codeUp100;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String[] color = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rPick = Integer.parseInt(color[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> gPick = Integer.parseInt(color[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> bPick = Integer.parseInt(color[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;rPick; r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> g=<span class="number">0</span>; g&lt;gPick; g++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;bPick; b++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d %d %d\n"</span>, r,g,b);</span><br><span class="line">count ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시간초과를 해결하기 위해서는 BufferReader 와 BufferWriter 클래스를 사용하여 입력, 출력받아야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));        </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String[] n = br.readLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.valueOf(n[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Integer.valueOf(n[<span class="number">1</span>]); j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Integer.valueOf(n[<span class="number">2</span>]); k++) &#123;</span><br><span class="line">bw.write(i + <span class="string">" "</span> + j + <span class="string">" "</span> + k + <span class="string">"\n"</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bw.write(String.valueOf(count));</span><br><span class="line">bw.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>BufferReader 와 BufferWriter 클래스를 사용하여 입력, 출력받으면 시간초과 해결할 수 있다.<br><code>System.out.println();</code>이 굉장히 느리다는 것을 알게되었다.</p><ul><li>BufferedWriter를 이용해 <code>bf.write(i + &quot;\n&quot;);</code> 출력속도는 0.9581</li><li>StringBuilder를 이용해 문자열 하나로 만든 다음, <code>System.out.println(sb);</code> 출력속도는 1.1881</li><li><a href="https://velog.io/@msriver/%EC%9E%90%EB%B0%94-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B4%80%EB%A0%A8-%EC%A0%95%EB%A6%AC%EC%BD%94%EB%93%9C%EC%97%85-1084">참고링크: 자바 입출력 관련 정리(코드업 1084번, java)</a> </li></ul><p><br><br><br></p><h2 id="추가-코드"><a href="#추가-코드" class="headerlink" title="추가 코드"></a>추가 코드</h2><p>내 멘토님이 내 코드를 보시고 코드리뷰를 해주셨다.<br>코드리뷰까지 받다니 난 참 럭키다.<br>코드리뷰를 받으니까 재미있다! 항상 내 코드가 최선이 아니라는 생각에 더 나은 코드를 배우고싶었기때문이다.<br>이 재미가 바로 성장하는 즐거움일까? 행-복!<br>이번에 멘토님이 알려주신건 <a href="https://johngrib.github.io/wiki/big-O-notation/#big-o-%EC%98%88%EC%A0%9C">빅오표기법</a>이었다. 신기했지만 동시에 어려웠다. 수련이 더 필요하다…<br>멘토님이 중첩for문을 보곤 단일 for문을 알려주셨다.<br>사실 나도 단일 for문쓰고싶었는데 내 마음을 어떻게 아셨지?ㅋㅋㅋㅋㅋㅋ<br>천재인듯.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//단일for문</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String color[] = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> r = Integer.parseInt(color[<span class="number">0</span>], <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> g = Integer.parseInt(color[<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> b = Integer.parseInt(color[<span class="number">2</span>], <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> loop = r * g * b;</span><br><span class="line"><span class="keyword">int</span> rLoop = g * b;</span><br><span class="line"><span class="keyword">int</span> gLoop = b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out)))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;loop; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> colorR = i / rLoop;</span><br><span class="line"><span class="keyword">int</span> colorG = (i%rLoop) / gLoop;</span><br><span class="line"><span class="keyword">int</span> colorB = i % b;</span><br><span class="line"></span><br><span class="line">bw.write(colorR +<span class="string">" "</span> + colorG + <span class="string">" "</span> + colorB+<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">bw.write(loop+<span class="string">""</span>);</span><br><span class="line">bw.flush();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException ie)&#123;</span><br><span class="line">ie.printStackTrace();</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="다른-문제-풀이가-보고싶다면"><a href="#다른-문제-풀이가-보고싶다면" class="headerlink" title="다른 문제 풀이가 보고싶다면?"></a>다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">모든 코드업100제 자바java 풀이 1089 </a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/14/201015al-c1084/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1082 : [기초-종합] 16진수 구구단?</title>
      <link>https://sowon-dev.github.io/2020/10/14/201015al-c1082/</link>
      <guid>https://sowon-dev.github.io/2020/10/14/201015al-c1082/</guid>
      <pubDate>Wed, 14 Oct 2020 16:25:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1082-기초-종합-16진수-구구단&quot;&gt;&lt;a href=&quot;#문제-1082-기초-종합-16진수-구구단&quot; class=&quot;headerlink&quot; title=&quot;문제 1082 : [기초-종합] 16진수 구구단?&quot;&gt;&lt;/a&gt;문제 1082 : [기초-종합] 16진수 구구단?&lt;/h2&gt;&lt;p&gt;16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운 영일(01)이는 16진수끼리 곱하는 16진수 구구단?에 대해서 궁금해졌다.&lt;br&gt;A, B, C, D, E, F 중 하나가 입력될 때, 1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.&lt;br&gt;(단, A 부터 F 까지만 입력된다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1082-기초-종합-16진수-구구단"><a href="#문제-1082-기초-종합-16진수-구구단" class="headerlink" title="문제 1082 : [기초-종합] 16진수 구구단?"></a>문제 1082 : [기초-종합] 16진수 구구단?</h2><p>16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운 영일(01)이는 16진수끼리 곱하는 16진수 구구단?에 대해서 궁금해졌다.<br>A, B, C, D, E, F 중 하나가 입력될 때, 1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.<br>(단, A 부터 F 까지만 입력된다.)</p><a id="more"></a><ul><li>입력예시<br>16진수로 한 자리 수가 입력된다.(단, A 부터 F 까지만 입력된다.)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>입력된 16진수에 1부터 F까지 순서대로 곱한, 16진수 구구단을 줄을 바꿔 출력한다.<br>계산 결과도 16진수로 출력해야 한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">B*1&#x3D;B</span><br><span class="line">B*2&#x3D;16</span><br><span class="line">B*3&#x3D;21</span><br><span class="line">B*4&#x3D;2C</span><br><span class="line">B*5&#x3D;37</span><br><span class="line">B*6&#x3D;42</span><br><span class="line">B*7&#x3D;4D</span><br><span class="line">B*8&#x3D;58</span><br><span class="line">B*9&#x3D;63</span><br><span class="line">B*A&#x3D;6E</span><br><span class="line">B*B&#x3D;79</span><br><span class="line">B*C&#x3D;84</span><br><span class="line">B*D&#x3D;8F</span><br><span class="line">B*E&#x3D;9A</span><br><span class="line">B*F&#x3D;A5</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String input = sc.nextLine();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String에서 16진수로 변경</span></span><br><span class="line"><span class="keyword">int</span> b = Integer.valueOf(input, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line">String s, ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">s = Integer.toHexString(i).toUpperCase();</span><br><span class="line">ans = Integer.toHexString(b * i).toUpperCase();</span><br><span class="line">System.out.println(input + <span class="string">"*"</span> + s + <span class="string">"="</span> + ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>10진수를 16진수로 변환하는 방법을 도식화해서 나타낸 것이다.</p><p><img src="https://dojang.io/pluginfile.php/807/mod_page/content/16/unit85-1.png" alt="https://dojang.io/mod/page/view.php?id=743"></p><p>16진수는 1부터 16까지이므로 for문의 조건은 <code>F</code>가 아니라 <code>16</code>으로 설정해야한다.</p><ul><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/#%EB%B0%B0%EC%9A%B4-%EC%A7%80%EC%8B%9D">진법변환 정리</a></li></ul><p><br><br><br></p><h2 id="다른-문제-풀이가-보고싶다면"><a href="#다른-문제-풀이가-보고싶다면" class="headerlink" title="다른 문제 풀이가 보고싶다면?"></a>다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">모든 코드업100제 자바java 풀이 1089 </a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/14/201015al-c1082/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]주니어레벨의 스프링MVC 개발순서, MyBatis(iBatis) 사용 방법 3가지</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014spring/</guid>
      <pubDate>Tue, 13 Oct 2020 20:01:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;주니어레벨의-스프링MVC-개발순서&quot;&gt;&lt;a href=&quot;#주니어레벨의-스프링MVC-개발순서&quot; class=&quot;headerlink&quot; title=&quot;주니어레벨의 스프링MVC 개발순서&quot;&gt;&lt;/a&gt;주니어레벨의 스프링MVC 개발순서&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DB -&amp;gt; MyBatis -&amp;gt; DAO -&amp;gt; Service -&amp;gt; Controller -&amp;gt; View</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="주니어레벨의-스프링MVC-개발순서"><a href="#주니어레벨의-스프링MVC-개발순서" class="headerlink" title="주니어레벨의 스프링MVC 개발순서"></a>주니어레벨의 스프링MVC 개발순서</h2><ul><li>DB -&gt; MyBatis -&gt; DAO -&gt; Service -&gt; Controller -&gt; View<a id="more"></a></li></ul><p><br><br><br></p><h2 id="MyBatis-iBatis-사용-방법-3가지"><a href="#MyBatis-iBatis-사용-방법-3가지" class="headerlink" title="MyBatis(iBatis) 사용 방법 3가지"></a>MyBatis(iBatis) 사용 방법 3가지</h2><ol><li>XML 코드를 사용해서 SQL구문, DAO파일에서 XML코드를 호출해서 사용<ul><li>장점: SQL구문이 xml 파일로 분리, 쿼리 수정 유지보수에 유리</li><li>단점: 개발할 코드의 분량이 많아짐, 복잡도 증가</li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/#My-i-Batis%EB%9E%80">추가로 MyBatis(iBatis)란 개념 및 설치</a></li></ul></li><li>애노테이션과 인터페이스를 사용해서 SQL구문 처리<ul><li>장점: 별도의 DAO없이 개발 가능 (생산성 증가)</li><li>단점: 쿼리 수정이 필요한경우, 매번 컴파일 해야함.</li></ul></li><li>인터페이스(애노테이션)와 XML을 같이 사용해서 SQL구문 처리 <ul><li>장점: 간단한 SQL 인터페이스로, 복잡한 SQL은 XML 파일을 사용하여 유연한 대처</li><li>단점: 개발자 마다 개발 방식의 차이가 발생 가능성 증가</li></ul></li></ol><p><br><br><br></p><h2 id="MyBatis-iBatis-사용-순서"><a href="#MyBatis-iBatis-사용-순서" class="headerlink" title="MyBatis(iBatis) 사용 순서"></a>MyBatis(iBatis) 사용 순서</h2><p>포스팅에서는 위의 3가지 방식 중에 1번 방법을 사용해 볼 것이다.</p><ol><li>필요한 라이브러리 준비</li><li>DB생성 및 테이블 생성</li><li>도메인객체설계(DTO, VO), 클래스 생성</li><li>DAO <strong>인터페이스</strong> 생성</li><li>인터페이스에 사용할 기능들을 작성(명세)</li><li>XML Mapper 생성, SQL구문 작성<ul><li>XML파일로 만들어진 Mapper의 위치설정</li><li>XML파일안에 Mapper - DTD 지정</li><li>SQL 구문 작성후 사용</li></ul></li><li>MyBatis에서 XML Mapper를 인식하도록 설정</li><li>DAO 객체 구현</li><li>스프링을 활용한 DAO테스트(Junit)</li></ol><p><br><br><br></p><h3 id="DB-생성-및-테이블-생성"><a href="#DB-생성-및-테이블-생성" class="headerlink" title="DB 생성 및 테이블 생성"></a>DB 생성 및 테이블 생성</h3><p>아래와 같이 테이블을 생성해준다.</p><p><img src="/img/201014springDBt.PNG" alt=""></p><p><br><br><br></p><h3 id="도메인객체인-MemberVO-java-생성"><a href="#도메인객체인-MemberVO-java-생성" class="headerlink" title="도메인객체인 MemberVO.java 생성"></a>도메인객체인 <code>MemberVO.java</code> 생성</h3><p>Domain(도메인)이란? 물리적인 환경으로 분리가 가능한 단위</p><ul><li>개발(프로젝트)에서 가장 중요한 용어(단어)이고 주로 명사이다.<ul><li>예를 들어 회원, 상품, 글, 주문, 배송, 댓글 … (1차 도메인)</li><li>회원-가입, 탈퇴, 수정 … (2차 도메인)</li></ul></li><li>즉 DB테이블로 구분할 수 있는 단위</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberVO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String userid;</span><br><span class="line"><span class="keyword">private</span> String userpw;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String useremail;</span><br><span class="line"><span class="keyword">private</span> Timestamp regdate;</span><br><span class="line"><span class="keyword">private</span> Timestamp updatedate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//생성자 2개 : 기본생성자, 멤버변수를 인자로 전부를 가진 생성자</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberVO</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberVO</span><span class="params">(String userid, String userpw, String username, String useremail, Timestamp regdate,</span></span></span><br><span class="line"><span class="function"><span class="params">Timestamp updatedate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.userid = userid;</span><br><span class="line"><span class="keyword">this</span>.userpw = userpw;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.useremail = useremail;</span><br><span class="line"><span class="keyword">this</span>.regdate = regdate;</span><br><span class="line"><span class="keyword">this</span>.updatedate = updatedate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get() set()메서드 생성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserid</span><span class="params">(String userid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userid = userid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(중략)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"MemberVO [userid="</span> + userid + <span class="string">", userpw="</span> + userpw + <span class="string">", username="</span> + username + <span class="string">", useremail="</span></span><br><span class="line">+ useremail + <span class="string">", regdate="</span> + regdate + <span class="string">", updatedate="</span> + updatedate + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="MemberDAO-java-인터페이스-생성"><a href="#MemberDAO-java-인터페이스-생성" class="headerlink" title="MemberDAO.java 인터페이스 생성"></a><code>MemberDAO.java</code> 인터페이스 생성</h3><ul><li>해당 도메인에 관련된 기능 선언</li><li>기능을 구현하는 것이 아니라 기능을 선언만 한다. 구현은 DAO 구현클래스에서 진행한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberDAO</span> </span>&#123;</span><br><span class="line"><span class="comment">//해당 도메인에 관련된 기능 선언</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="XML-Mapper-생성-SQL구문-작성-memberMapper-xml-인터페이스-생성"><a href="#XML-Mapper-생성-SQL구문-작성-memberMapper-xml-인터페이스-생성" class="headerlink" title="XML Mapper 생성, SQL구문 작성 : memberMapper.xml 인터페이스 생성"></a>XML Mapper 생성, SQL구문 작성 : <code>memberMapper.xml</code> 인터페이스 생성</h3><ul><li>src &gt; main &gt; resource &gt; mappers폴더생성 후 <code>memberMapper.xml</code>파일 생성 </li><li><a href="https://mybatis.org/mybatis-3/ko/getting-started.html">MyBatis 홈페이지 매핑된 SQL 구문 살펴보기</a>에서 DOCTYPE 코드 복붙하기</li><li>XML파일로 만들어진 Mapper의 위치설정은 <code>root-context.xml</code>에 함</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD지정  --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- SQL 구문 작성후 사용  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itwillbs.mappers.memberMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTime"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">select now()</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DAO패키지(com.itwillbs.persistence)와 연결  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itwillbs.persistence"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="MyBatis에서-XML-Mapper를-인식하도록-설정"><a href="#MyBatis에서-XML-Mapper를-인식하도록-설정" class="headerlink" title="MyBatis에서 XML Mapper를 인식하도록 설정"></a>MyBatis에서 XML Mapper를 인식하도록 설정</h3><ul><li><code>root-context.xml</code>파일에 위에서 만든 mapper파일을 연결시켜준다.</li><li>SqlSessionTemplate 객체 : DB연결, 사용후에는 자원해제 (close()) 처리해주는 객체<ul><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/#MyBatis-%EC%84%A4%EC%B9%98">mybatis-spring 라이브러리</a>에 포함되어있다.</li><li>SqlSession 인터페이스를 구현한 객체이다.<ul><li>SqlSession인터페이스는 기본적인 트랜잭션, 쓰레드 처리의 안정성 보장, 디비 연결/해체처리</li></ul></li></ul></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/#MyBatis%EB%A1%9C-DB%EC%97%B0%EA%B2%B0">SqlSessionFactory 객체</a>와 SqlSessionTemplate객체의 차이점<ul><li>SqlSessionFactory객체는 Connection + MyBatis 객체연결 역할, DB해제는 못하고 Connection해제만 가능</li><li>SqlSessionTemplate객체는 DB연결/해제(pstmt, resultset포함 해제가능) 역할</li></ul></li><li>크기가 작은 객체들을 먼저 생성하고 크기가 큰 객체들을 나중에 생성한다. 생성한 큰 객체들안에 작은 객체들을 주입한다.<ul><li>처음부터 큰 객체를 만들면 되는데 왜 작은 객체부터 만드는걸까?</li><li>코드의 유지보수성때문에.</li><li>작은 기능을 사용할때는 작은 클래스를 사용할 수 있도록 모듈화하는 것이다.</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SqlSessionFactory 객체 (Connection + MyBatis 객체연결 역할, DB해제는 못하고 Connection해제만 가능)--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 위에서 생성된 객체를 주입하기 위해서는 value가 아니라 ref를 통해서 주입해야한다 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/Mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Mapper와 연결  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/**/*Mapper.xml"</span> /&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory 객체 end--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SqlSesstionTemplate 객체 (DB연결/해제(pstmt, resultset포함 해제가능) 역할)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span> <span class="attr">destroy-method</span>=<span class="string">"clearCache"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 바로 위에 있는 sqlSessionFactory객체를 생상자 의존주입  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SqlSesstionTemplate 객체 end--&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="DAO-객체-구현-MemberDAOImpl-java-객체-생성"><a href="#DAO-객체-구현-MemberDAOImpl-java-객체-생성" class="headerlink" title="DAO 객체 구현 : MemberDAOImpl.java 객체 생성"></a>DAO 객체 구현 : <code>MemberDAOImpl.java</code> 객체 생성</h3><ul><li>테스트를 위해서 <code>@Repository</code> 사용<ul><li>DAO객체를 스프링으로 인식할 수 있도록 처리</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDAOImpl</span> <span class="keyword">implements</span> <span class="title">MemberDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DB연결 (xml에서 만들어진 객체를 가져다 사용하고자함 = 의존 주입)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> SqlSession sqlSession; <span class="comment">//mapper위치까지 접근 가능 but mapper가 여러개일수있음 =&gt; mapper구분필요</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper구분하는 값 namespace</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String namespace = <span class="string">"com.itwillbs.mappers.memberMapper"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String result = sqlSession.selectOne(namespace+<span class="string">".getTime"</span>); <span class="comment">//괄호안에 쿼리구문 넣으면 됨</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="스프링을-활용한-DAO테스트-Junit-MemberDAOTest-java-생성"><a href="#스프링을-활용한-DAO테스트-Junit-MemberDAOTest-java-생성" class="headerlink" title="스프링을 활용한 DAO테스트(Junit) : MemberDAOTest.java 생성"></a>스프링을 활용한 DAO테스트(Junit) : <code>MemberDAOTest.java</code> 생성</h3><ul><li>@RunWith + @ContextConfiguration =&gt; 스프링으로 테스트하겠다는 의미</li><li>@RunWith + @ContextConfiguration + @WebAppConfiguration =&gt; 스프링MVC로 테스트하겠다는 의미</li><li><code>root-context.xml</code>에 DAO객체를 연결해줘야 테스트 가능하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.persistence.MemberDAO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>= &#123;<span class="string">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDAOTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DB처리객체 생성 -&gt;MemberDAO 인터페이스라서 객체 생성할 수없다 -&gt; 의존 주입 @Inject 추가</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> MemberDAO mdao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDAO</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"테스트 : DAO객체생성 "</span>+ mdao);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTime</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//DAO getTime() 메서드 사용가능한지 테스트</span></span><br><span class="line">System.out.println(mdao.getTime());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014al-c1072/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014al-c1072/</guid>
      <pubDate>Tue, 13 Oct 2020 18:22:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기&quot;&gt;&lt;a href=&quot;#문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기&quot; class=&quot;headerlink&quot; title=&quot;문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기&quot;&gt;&lt;/a&gt;문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기&lt;/h2&gt;&lt;p&gt;n개의 정수가 순서대로 입력된다.(-2147483648 부터 +2147483647까지, 단 n의 최대 개수는 알 수 없다.)&lt;br&gt;n개의 입력된 정수를 순서대로 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기"><a href="#문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기" class="headerlink" title="문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기"></a>문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기</h2><p>n개의 정수가 순서대로 입력된다.(-2147483648 부터 +2147483647까지, 단 n의 최대 개수는 알 수 없다.)<br>n개의 입력된 정수를 순서대로 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>첫 줄에 정수의 개수 n이 입력되고,<br>두 번째 줄에 n개의 정수가 공백을 두고 입력된다. (-2147483648 부터 +2147483647까지, 단 n의 최대 개수는 알 수 없다.)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>n개의 정수를 한 개씩 줄을 바꿔 출력한다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>입력을 두 번 받으면 되는 문제였다.<br>난 어떻게든 한 번 입력받고 처리할려고했으니 잘 될 턱이 있나…</p><p><br><br><br></p><h2 id="다른-문제-풀이가-보고싶다면"><a href="#다른-문제-풀이가-보고싶다면" class="headerlink" title="다른 문제 풀이가 보고싶다면?"></a>다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">모든 코드업100제 자바java 풀이 1089 </a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014al-c1072/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014al-c1071/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014al-c1071/</guid>
      <pubDate>Tue, 13 Oct 2020 17:41:13 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명&quot;&gt;&lt;a href=&quot;#문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)&quot;&gt;&lt;/a&gt;문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)&lt;/h2&gt;&lt;p&gt;정수가 순서대로 입력된다. (-2147483648 부터 +2147483647까지, 단 개수는 알 수 없다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명"><a href="#문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명" class="headerlink" title="문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)"></a>문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)</h2><p>정수가 순서대로 입력된다. (-2147483648 부터 +2147483647까지, 단 개수는 알 수 없다.)</p><a id="more"></a><p>0이 아니면 입력된 정수를 출력하고, 0이 입력되면 출력을 중단해보자.<br>while( ), for( ), do while( ) 등의 반복문을 사용할 수 없다.</p><p>참고<br>goto 명령문을 사용하면 간단한 반복 실행을 만들 수 있다.<br>반복 실행 부분을 빠져나오기 위해(즉 무한 반복을 방지하기 위해)<br>반복 실행 되는 도중에 조건을 검사해야 한다.</p><p>goto 이름:<br>이 명령은 이름: 이 작성된 곳으로 프로그램의 실행 흐름을 바꾸어 준다.</p><p>“이름:” 과 같이 콜론(:)이 붙어있는 부분을 이름표(label, 레이블)라고 한다.<br>레이블은 특별한 선언 없이 사용할 수 있으며 언더바(_)나 영문자로 시작하면 된다.<br>레이블은 한 단어처럼 공백없이 모두 붙여 써야 한다.</p><p>switch( ) … case … : … break; 에서<br>case … : 도 일종의 레이블이라고 생각할 수 있다.</p><p>goto 레이블:<br>명령을 사용하면 반복되는 부분을 여러 개 자유롭게 만들 수 있다.</p><p>goto 명령은 반복 실행을 만들어낼 수 있는 가장 간단한 명령이지만,<br>복잡하게(스파게티 코드) 사용하는 경우, 이해가 어렵고 오류가 생기기 쉽다.</p><ul><li>입력예시<br>정수가 순서대로 입력된다. (-2147483648부터 +2147483647까지, 단 개수는 알 수 없다.)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 4 2 3 0 1 5 6 9 10 8</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>입력된 정수를 줄을 바꿔 하나씩 출력하는데, 0이 입력되면 종료한다.<br>(0은 출력하지 않는다.)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      nums = sc.nextInt();</span><br><span class="line">      <span class="keyword">if</span>(nums == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">      System.out.println(nums);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>첫번째</p><blockquote><p>C언어나 C++과는 달리 자바에는 goto 문이 없습니다. 따라서 이렇게 반복문을 가리키는 이름(label)은 break 문이나 continue 문에만 사용될 수 있습니다.<br>출처 : <a href="http://tcpschool.com/java/java_control_etc">http://tcpschool.com/java/java_control_etc</a></p></blockquote><p>두번째</p><ul><li>갯수를 모르면 for반복문이 아니라 while반복문을 사용해야한다. 그리고 while반복문사용시 무한루프로 빠질 수 있으므로 나가는 조건을 꼭 확인한다.</li></ul><p><br><br><br></p><h2 id="다른-문제-풀이가-보고싶다면"><a href="#다른-문제-풀이가-보고싶다면" class="headerlink" title="다른 문제 풀이가 보고싶다면?"></a>다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">모든 코드업100제 자바java 풀이 1089 </a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014al-c1071/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
