<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Mon, 07 Jun 2021 14:38:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Algorithm전체목록List</title>
      <link>https://sowon-dev.github.io/2021/12/29/algorithmList/</link>
      <guid>https://sowon-dev.github.io/2021/12/29/algorithmList/</guid>
      <pubDate>Wed, 29 Dec 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌊코드업&quot;&gt;&lt;a href=&quot;#🌊코드업&quot; class=&quot;headerlink&quot; title=&quot;🌊코드업&quot;&gt;&lt;/a&gt;🌊&lt;a href=&quot;https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100&quot;&gt;코드업&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-1/&quot;&gt;1011 : 문자 한 개 입력받아 그대로 출력하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al/&quot;&gt;1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/12/27/201227al-c1014/&quot;&gt;1014 : 문자 2개 입력받아 순서 바꿔 출력하기, Scanner vs BufferedReader 차이&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-2/&quot;&gt;1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌊코드업"><a href="#🌊코드업" class="headerlink" title="🌊코드업"></a>🌊<a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">코드업</a></h2><ol><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-1/">1011 : 문자 한 개 입력받아 그대로 출력하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al/">1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기</a></li><li><a href="https://sowon-dev.github.io/2020/12/27/201227al-c1014/">1014 : 문자 2개 입력받아 순서 바꿔 출력하기, Scanner vs BufferedReader 차이</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-2/">1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006al/">1023 : 실수 1개 입력받아 부분별로 출력하기, split대신 StringTokenizer사용하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/">1034 : 8진 정수 1개 입력받아 10진수로 출력하기(설명), Scanner로 2진수, 8진수 16진수 받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008al-c1041/">1041 : 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012al-c1059/">1059 : 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1064/">1064 : 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1066/">1066 : 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</a></li><li><a href="https://sowon-dev.github.io/2020/10/13/201014al-c1071/">1071 : 0 입력될 때까지 무한 출력하기1, goto말고while문사용</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1082/">1082 : 16진수 구구단?</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1084/">1084 : 빛 섞어 색 만들기(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/10/18/201019al-c1093/">1093 : 이상한 출석 번호 부르기1(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/11/20/201121al-c1097/">1097 : 바둑알 십자 뒤집기(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/11/20/201121al-c1099/">1099 : 성실한 개미(설명)</a></li></ol><p><br><br><br></p><h2 id="🌊leetcode-Easy레벨-전체"><a href="#🌊leetcode-Easy레벨-전체" class="headerlink" title="🌊leetcode Easy레벨 전체"></a>🌊<a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/leetcodeEasyLevel">leetcode Easy레벨 전체</a></h2><ol><li><a href="https://sowon-dev.github.io/2020/12/06/201206al-l0013/">13. Roman to Integer</a></li><li><a href="https://sowon-dev.github.io/2020/12/06/201206al-l0014/">14. Longest Common Prefix</a></li><li><a href="https://sowon-dev.github.io/2021/01/09/210110replacevsreplaceall/">125. Valid Palindrome</a></li><li><a href="https://sowon-dev.github.io/2021/01/11/210111al-l0136/">136. Single Number</a></li><li><a href="https://sowon-dev.github.io/2021/01/18/210118al-l0172/">172. Factorial Trailing Zeroes</a></li><li><a href="https://sowon-dev.github.io/2021/01/21/210122al-l0190/">190. Reverse Bits</a></li></ol><p><br><br><br></p><h2 id="🌊Hackker-Rank-Easy레벨"><a href="#🌊Hackker-Rank-Easy레벨" class="headerlink" title="🌊Hackker Rank Easy레벨"></a>🌊<a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/hackerrank">Hackker Rank Easy레벨</a></h2><ol><li><a href="https://sowon-dev.github.io/2021/02/14/210214al-hackerrank-between-two-sets/">Between Two Sets</a></li><li><a href="https://sowon-dev.github.io/2021/02/17/210217al-hackerrank-Picking-Numbers/">Picking Numbers</a></li><li><a href="https://sowon-dev.github.io/2021/02/18/210218al-hakkerrank-Sherlock-and-Squares/">Sherlock and Squares</a></li><li><a href="https://sowon-dev.github.io/2021/02/27/210228al-hackerrank-Two-Characters/">Two Characters</a></li><li><a href="https://sowon-dev.github.io/2021/03/01/210302al-hackerrank-Separate-the-Numbers/#more">Separate the Numbers</a></li><li><a href="https://sowon-dev.github.io/2021/03/07/210307al-hackerrank-MissingNumbers/">Missing Numbers</a></li><li><a href="https://sowon-dev.github.io/2021/03/07/210307al-hackkerrank-bigsorting/">Big Sorting</a></li><li><a href="https://sowon-dev.github.io/2021/03/13/210314al-HackerRank-Grid-Challenge/">Grid Challenge</a></li><li><a href="https://sowon-dev.github.io/2021/03/13/210314al-HackerRank-Luck-Balance/">Luck Balance</a></li><li><a href="https://sowon-dev.github.io/2021/03/13/210314al-HackerRank-Maximum-Perimeter-Triangle/">Maximum Perimeter Triangle</a></li></ol><p><br><br><br></p><h2 id="🌊백준"><a href="#🌊백준" class="headerlink" title="🌊백준"></a>🌊백준</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/18/201018al-b11005/">11005번 진법 변환2</a></li><li><a href="https://sowon-dev.github.io/2021/04/04/210404al-backjoon-2562/">2562번 최댓값</a></li><li><a href="https://sowon-dev.github.io/2021/04/04/210404al-backjoon-10818/">10818번 최소, 최대</a></li><li><a href="https://sowon-dev.github.io/2021/04/04/210404al-backjoon-1110/">1110번 더하기 사이클</a></li><li><a href="https://sowon-dev.github.io/2021/04/13/210411al-backjon-4344/">4344번 평균은 넘겠지</a></li><li><a href="https://sowon-dev.github.io/2021/04/13/210411al-backjon-3052/">3052번 나머지</a></li><li><a href="https://sowon-dev.github.io/2021/04/18/210418al-backjoon-1065/">1065번 한수</a></li><li><a href="https://sowon-dev.github.io/2021/04/18/210419al-backjoon-11720/">11720번 숫자의 합</a></li><li><a href="https://sowon-dev.github.io/2021/04/28/210429al-backjoon-2908/">2908번 상수</a></li><li><a href="https://sowon-dev.github.io/2021/05/08/210508al-backjoon-2869/">2869번 달팽이는 올라가고 싶다</a></li><li><a href="https://sowon-dev.github.io/2021/06/05/210606al-backjoon-2751/">2751번 수 정렬하기2</a></li></ol><p><br><br><br></p><h2 id="🌊프로그래머스"><a href="#🌊프로그래머스" class="headerlink" title="🌊프로그래머스"></a>🌊프로그래머스</h2><ol><li><a href="https://sowon-dev.github.io/2021/02/27/210228al-programmers-The-Number-of-pandy-in-String/">문자열 내 p와 y의 개수</a></li><li><a href="https://sowon-dev.github.io/2021/03/07/210307al-programmers-thesmallestnum/">제일 작은 수 제거하기</a></li></ol><p><br><br><br><br><span style="color:white;display:none;"><br>모든 코드업(codeup)(CodeUp)100제 자바(java)(JAVA) 풀이 : 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999<br></span></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2021/12/29/algorithmList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>안드로이드 스튜디오 AVD에 APK연결하기</title>
      <link>https://sowon-dev.github.io/2021/06/29/210630avd/</link>
      <guid>https://sowon-dev.github.io/2021/06/29/210630avd/</guid>
      <pubDate>Tue, 29 Jun 2021 23:28:14 GMT</pubDate>
      
      <description>&lt;p&gt;앱을 개발 후 테스트를 위해서 안드로이드 스튜디오 AVD를 이용해 테스트 해보기로 했다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>앱을 개발 후 테스트를 위해서 안드로이드 스튜디오 AVD를 이용해 테스트 해보기로 했다. </p><a id="more"></a><h2 id="안드로이드-스튜디오-다운로드"><a href="#안드로이드-스튜디오-다운로드" class="headerlink" title="안드로이드 스튜디오 다운로드"></a>안드로이드 스튜디오 다운로드</h2><p><a href="https://developer.android.com/studio?hl=ko">안드로이드 스튜디오</a>를 다운로드 한다.</p><p><br><br><br></p><h2 id="AVD-Manger-클릭"><a href="#AVD-Manger-클릭" class="headerlink" title="AVD Manger 클릭"></a>AVD Manger 클릭</h2><ol><li><code>Create Virtual Device</code>를 클릭하여 원하는 Phone을 선택한다. 기본은 Pixel 2.</li><li>Next클릭 후 만든 앱의 일치하는 API Level과 일치하는 Release를 다운로드한다.<ul><li>예) 29버전이면 API Level이 29인 Q를 다운로드 한다.</li></ul></li><li>다운로드 완료된 Release name을 클릭하고 Next를 클릭한다.</li><li>원하는 Verify 설정을 진행하면 끝!<ul><li>원하는 설정이 없는 경우 기본 그대로 진행하면 된다.</li></ul></li></ol><p><br><br><br></p><h2 id="cmd에서-apk-다운로드-진행"><a href="#cmd에서-apk-다운로드-진행" class="headerlink" title="cmd에서 apk 다운로드 진행"></a>cmd에서 apk 다운로드 진행</h2><ol><li>AVD를 켜놓는다.</li><li>cmd를 연다.</li><li>안드로이드 스튜디오 sdk를 다운로드한 경로로 이동한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 예시</span><br><span class="line">cd  C:\Users\사용자명\AppData\Local\Android\Sdk\platform-tools</span><br></pre></td></tr></table></figure><ol start="4"><li>apk의 경로를 복사한 뒤 아래 명령어 뒤에 입력한다.<ul><li>install  : adb install 앱이름.apk</li><li>uninstall : adb uninstall 앱이름.apk</li><li>reinstall : adb install -r 앱이름.apk</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; apk 경로 예시</span><br><span class="line">C:\Users\사용자명\Downloads\앱이름.apk</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; install 명령어</span><br><span class="line">adb install C:\Users\사용자명\Downloads\앱이름.apk</span><br></pre></td></tr></table></figure><ol start="5"><li>정상적으로 설치되면 아래처럼 출력된다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Performing Streamed Install</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><ol start="6"><li>1분정도 기다리면 자동적으로 내가 만든 앱이 뜬다!</li></ol><p><img src="/img/210630app.PNG" alt=""></p><p><br><br><br></p><h2 id="AVD-안드로이드-가상-디바이스-GUI로-간단하게-apk-설치-및-제거"><a href="#AVD-안드로이드-가상-디바이스-GUI로-간단하게-apk-설치-및-제거" class="headerlink" title="AVD 안드로이드 가상 디바이스 GUI로 간단하게 apk 설치 및 제거"></a>AVD 안드로이드 가상 디바이스 GUI로 간단하게 apk 설치 및 제거</h2><ol><li>apk파일 설치<br>위처럼 cmd에서 install, uninstall 명령어 칠 필요없이 안드로이드 가상 디바이스 (이하 AVD)로 apk파일을 드래그 앤 드롭하면 설치가 된다!</li></ol><p><img src="/img/210702dragNdrop.PNG" alt="드래그 앤 드롭기능으로 apk파일이 AVD에 설치중인 모습"></p><ol start="2"><li>apk파일 삭제<br>AVD에서 삭제를 원하는 앱을 꾸욱 누르면 <code>APP INFO</code>가 상단에 뜬다.<br>이를 클릭한 다음 중앙의 <code>Uninstall</code>을 클릭해주면 정상적으로 삭제된다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/APK/">APK</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/29/210630avd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>신입개발자 6개월 회고</title>
      <link>https://sowon-dev.github.io/2021/06/27/210627Memoir6months/</link>
      <guid>https://sowon-dev.github.io/2021/06/27/210627Memoir6months/</guid>
      <pubDate>Sun, 27 Jun 2021 01:09:06 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;내가-백엔드-개발을-6개월-동안-하면서-배운-것들&quot;&gt;&lt;a href=&quot;#내가-백엔드-개발을-6개월-동안-하면서-배운-것들&quot; class=&quot;headerlink&quot; title=&quot;내가 백엔드 개발을 6개월 동안 하면서 배운 것들&quot;&gt;&lt;/a&gt;내가 백엔드 개발을 6개월 동안 하면서 배운 것들&lt;/h2&gt;&lt;p&gt;회사에 입사를 한지도 6개월이 넘었다. 사실은 12월에 입사를 했기때문에 7개월차이다.&lt;br&gt;하지만 스스로 6개월이라고 정의하고 6개월차 회고를 쓰는 이유는 12월은 정말 아무것도 못 하고 눈만 뜨고 있었기때문이다.&lt;br&gt;정말 바쁘다바빠- 적응하고 코드이해하고 하느라 정신없는 한달이었다.&lt;/p&gt;
&lt;p&gt;정말 바빴는데 매달 어떤 일이 있었을까? 한 줄로 정리해보고싶어졌다.&lt;br&gt;더불어 내가 얼마나 성장했는 지 정리해보려고한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="내가-백엔드-개발을-6개월-동안-하면서-배운-것들"><a href="#내가-백엔드-개발을-6개월-동안-하면서-배운-것들" class="headerlink" title="내가 백엔드 개발을 6개월 동안 하면서 배운 것들"></a>내가 백엔드 개발을 6개월 동안 하면서 배운 것들</h2><p>회사에 입사를 한지도 6개월이 넘었다. 사실은 12월에 입사를 했기때문에 7개월차이다.<br>하지만 스스로 6개월이라고 정의하고 6개월차 회고를 쓰는 이유는 12월은 정말 아무것도 못 하고 눈만 뜨고 있었기때문이다.<br>정말 바쁘다바빠- 적응하고 코드이해하고 하느라 정신없는 한달이었다.</p><p>정말 바빴는데 매달 어떤 일이 있었을까? 한 줄로 정리해보고싶어졌다.<br>더불어 내가 얼마나 성장했는 지 정리해보려고한다.</p><a id="more"></a><h2 id="🗓️-6개월-동안-무엇을-했을까"><a href="#🗓️-6개월-동안-무엇을-했을까" class="headerlink" title="🗓️ 6개월 동안 무엇을 했을까?"></a>🗓️ 6개월 동안 무엇을 했을까?</h2><ul><li>12월: 시스템개발팀으로 입사 + 눈만 뜨고 있었음.</li><li>1월: 학사시스템 프로젝트 참여 + 배포</li><li>2월: 학사시스템 프로젝트 유지보수 + 교육</li><li>3월: 연구개발팀으로 발령 + 신규프로젝트 대기하면서 리액트스터디</li><li>4월: 리액트스터디</li><li>5월: 다른 신규 프로젝트 백엔드개발자로 참여</li><li>6월: 다른 신규 프로젝트 백엔드개발자로 참여</li></ul><p><br><br></p><h3 id="학사프로젝트"><a href="#학사프로젝트" class="headerlink" title="학사프로젝트"></a>학사프로젝트</h3><p>12월, 1월은 나에게 참 정신없는 달이었다.<br>입사와 동시에 프로젝트 막바지였던 학사시스템 프로젝트에 투입되었다.<br>막바지라는 의미는 거의 다 끝났다는 의미임과 동시에 해결할 것이 엄청나게 많이 남아있어 막판 스퍼트를 해야함을 의미했다.<br>입사하자마자 한달내내 야근을 했다. 집에 도착하면 밤 11시여서 씻고 자고 눈뜨면 바로 출근하는 정말 힘든 한달을 보냈다.<br>IT업계는 야근이 많다던데 진짜 이정도일 줄이야…<br>신입이었던 나는 주로 어드민페이지 수정와 이미지게시판 구현, 팝업기능 구현, 슬라이드기능 구현, SNS API로 실시간 글 호출기능구현과 그밖의 자잘한 오류들을 해결했다. </p><p><br><br></p><h3 id="리액트스터디"><a href="#리액트스터디" class="headerlink" title="리액트스터디"></a>리액트스터디</h3><p>수습기간을 거쳐 정직원이 된 후 연구개발팀으로 팀이동을 했다.<br>나는 백엔드개발자로 입사했지만 신규 프로젝트에서는 리액트 개발을 담당하게 되었다.<br>어떻게?<br>그냥 하라고 하면 하는 거다. 그것이 직장생활…😎<br>자바와 JSP를 주력으로 다뤄본 나에게 리액트를 배워볼 수 있는 좋은 기회라는 생각이 들었다.<br>신규 프로젝트가 기획되는 동안 주어진 업무에 최선을 다하기위해 열심히 리액트 공부를 하며 회의때 쏟아지는 용어들을 공부했다.</p><p><br><br></p><h3 id="새로운-프로젝트-백엔드-개발"><a href="#새로운-프로젝트-백엔드-개발" class="headerlink" title="새로운 프로젝트 백엔드 개발"></a>새로운 프로젝트 백엔드 개발</h3><p>위에서 말한 신규 프로젝트 작업이 생각보다 늦어지면서 다른 새로운 프로젝트를 맡게되었다.<br>생체정보를 활용한 웹/앱 서비스를 만드는 프로젝트이다.(이하 막프)<br>지금도 진행되고 있는 막프는 6월까지해서 개발을 끝내는 것이 스프린트의 목표인데 연계되어있는 디바이스업체와 AI연구소와의 조율때문에 시간이 더 걸릴 것 같다.  </p><p><br><br><br></p><h2 id="😘-6개월동안-성장한-것"><a href="#😘-6개월동안-성장한-것" class="headerlink" title="😘 6개월동안 성장한 것"></a>😘 6개월동안 성장한 것</h2><h3 id="1-서버와-클라이언트사이에서-HTTP통신에-대한-확실한-이해"><a href="#1-서버와-클라이언트사이에서-HTTP통신에-대한-확실한-이해" class="headerlink" title="1 서버와 클라이언트사이에서 HTTP통신에 대한 확실한 이해"></a><strong>1 서버와 클라이언트사이에서 HTTP통신에 대한 확실한 이해</strong></h3><p>현재 진행중인 막프덕분에 프론트엔드와 백엔드의 상호작용 흐름을 확실하게 이해할 수 있게 되었다.<br><a href="https://www.postman.com/">POSTMAN</a>을 이해하고 쓸 수 있다.<br>특히 Path Variable, Query Parameter, ResquestBody를 필요한 상황에 따라 정확히 구분하여 사용할 수 있다.</p><p><br><br></p><h3 id="2-RestAPI-이해도-향상"><a href="#2-RestAPI-이해도-향상" class="headerlink" title="2 RestAPI 이해도 향상"></a><strong>2 RestAPI 이해도 향상</strong></h3><p>예전엔 그냥 구글링해서 따라했다면 이젠 RestAPI를 정확히 인지하고 어떻게 사용하면 좋을지 고민하는 단계까지 왔다.<br>앞으로 적절한 디자인패턴을 적용하고 RestAPI 규칙을 완전히 따르는 카카오나 MS, 공공API와 같은 RestAPI 만들어보고 싶다.</p><ul><li>관련 포스팅 : <a href="https://sowon-dev.github.io/2021/05/25/210526RESTfulAPI-Odata/">REST API 컨트롤러 Mapping을 어떻게 하지?</a></li></ul><p><br><br></p><h3 id="3-개발과-문서화를-쉽게-할-수-있도록-도와주는-라이브러리들과-친밀도-향상"><a href="#3-개발과-문서화를-쉽게-할-수-있도록-도와주는-라이브러리들과-친밀도-향상" class="headerlink" title="3 개발과 문서화를 쉽게 할 수 있도록 도와주는 라이브러리들과 친밀도 향상"></a><strong>3 개발과 문서화를 쉽게 할 수 있도록 도와주는 라이브러리들과 친밀도 향상</strong></h3><p>LOG4J와 <a href="https://swagger.io/">SWAGGER</a>를 자유자재로 사용할 수 있다.<br>Logback로 SQL 쿼리문을 콘솔에 출력하여 개발 효율성이 한증 증가했다.</p><p><br><br></p><h3 id="4-커스텀-예외-클래스로-예외처리-가능"><a href="#4-커스텀-예외-클래스로-예외처리-가능" class="headerlink" title="4 커스텀 예외 클래스로 예외처리 가능"></a><strong>4 커스텀 예외 클래스로 예외처리 가능</strong></h3><p>단순한 예외처리뿐만아니라 커스텀예외클래스를 생성하여 예외처리를 할 수 있다.<br>NPE 처리는 여전히 어렵지만 if(object != null)이 아닌 StringUtils, isEmpty() 또는 equals()를 사용하고 toString() 대신 String.valueOf()를 사용하여 예방할 수 있다.<br>또한 아예 쿼리를 이용해서 NPE를 예방할 수 있다.</p><ul><li>관련포스팅: <a href="https://sowon-dev.github.io/2021/06/13/210614sqlNull/">SQL에서 컬럼값이 NULL처리는 어떻게 하면 좋을까?</a></li></ul><p><br><br></p><h3 id="5-Springboot-security와-JWT-경험"><a href="#5-Springboot-security와-JWT-경험" class="headerlink" title="5 Springboot security와 JWT 경험"></a><strong>5 Springboot security와 JWT 경험</strong></h3><p>이번 막프에서 나를 가장 많이 애먹인 부분이다.<br>팀장님의 도움없이는 이렇게까지 절대 이해하지 못했을것이다. 이자리를 빌어 다시한번 감사드린다고 말하고싶다.<br>팀장님 진짜 감사합니다!<br>Springboot security는 여전히 어려운 부분이 많지만 기본 개념을 이해하고 사용하는 데는 문제가 없으며 Session이 아닌 JWT를 통해 인증기능을 구현할 수 있다. </p><p><br><br></p><h3 id="6-공통코드테이블-구현-가능"><a href="#6-공통코드테이블-구현-가능" class="headerlink" title="6 공통코드테이블 구현 가능"></a><strong>6 공통코드테이블 구현 가능</strong></h3><p>테이블의 관계를 파악하고 공통코드테이블을 구현할 수 있다.</p><p><br><br></p><h3 id="7-JOIN과-동적쿼리-실력-향상"><a href="#7-JOIN과-동적쿼리-실력-향상" class="headerlink" title="7 JOIN과 동적쿼리 실력 향상"></a><strong>7 JOIN과 동적쿼리 실력 향상</strong></h3><p>INNER JOIN과 OUTER JOIN을 구분하여 사용할 수 있다.<br>Mybatis의 동적쿼리인 selectKey는 물론 ${}와 #{}를 구분하여 사용할 수 있다.</p><ul><li>관련포스팅: <a href="https://sowon-dev.github.io/2021/06/13/210614leftouter/">selet 컬럼명을 조건에 따라 다르게 출력할 수 있을까?</a></li><li>관련포스팅: <a href="https://sowon-dev.github.io/2021/06/23/210624MybatisColumnChange/">update할때 컬럼명 바꿀 수 없을까?</a></li><li>관련포스팅: <a href="https://sowon-dev.github.io/2021/06/03/210604MyBatis-selectKey/">select한 값을 바로 insert할 수 있을까?</a></li></ul><p><br><br></p><h3 id="8-리액트-이해도-향상"><a href="#8-리액트-이해도-향상" class="headerlink" title="8 리액트 이해도 향상"></a><strong>8 리액트 이해도 향상</strong></h3><p>아직 부족하지만 그래도 CRA를 이용해 리액트 프로젝트를 만들고 리액트hook과 <a href="https://material-ui.com/">Material-ui</a>를 활용하여 간단한 게시판 구현을 할 수 있다.</p><p><br><br><br></p><h2 id="🖐️-6개월-동안에-업무외로-내가-실천한-것들과-그-성과"><a href="#🖐️-6개월-동안에-업무외로-내가-실천한-것들과-그-성과" class="headerlink" title="🖐️ 6개월 동안에 업무외로 내가 실천한 것들과 그 성과"></a>🖐️ 6개월 동안에 업무외로 내가 실천한 것들과 그 성과</h2><p>취업하고서도 1일 1커밋을 목표로 매일 알고리즘 한 문제씩 풀려고 노력했다.<br>그결과 아래처럼 멋진 잔디를 가질 수 있게 되었다.<br>앞으로도 취미처럼 1일1커밋을 실천해나갈것이다.</p><p><br><br></p><h3 id="1일1커밋"><a href="#1일1커밋" class="headerlink" title="1일1커밋"></a><strong>1일1커밋</strong></h3><p>코딩을 취미화 그리고 습관화하기 위해 취업후에도 1일 1커밋을 계속 실천하고 있다.<br>커밋은 알고리즘 한문제씩 풀거나 오늘 배웠던 TWIL이나 개발정보정리글 위주로 했다.<br>노력한 끝에 아래와 같이 멋진 잔디밭을 가질 수 있게 되었다.</p><p><img src="/img/210627jandi.JPG" alt=""></p><p><br><br></p><h3 id="알고리즘스터디"><a href="#알고리즘스터디" class="headerlink" title="알고리즘스터디"></a><strong>알고리즘스터디</strong></h3><p>취준때부터 친한 개발자언니와 100문제 알고리즘 스터디를 만들어 진행하다가 취업후에도 멈추지않고 계속도전하였다. 그 결과 17주안에 100문제 풀기에 성공했다.<br>스터디가 끝난 이후에도 혼자서 지속적으로하여 현재 50문제를 추가로 더 풀었고<br>앞으로도 매일 한문제씩 쭉 도전할 예정이다.<br>    - <a href="https://github.com/beyondAwesomeDev/Rhythming-Algorithm">Rhythming-Algorithm 스터디 깃헙레포</a><br>    - <a href="https://github.com/sowon-dev/AlgorithmStudy_Java">나혼자하는 알고리즘 깃헙레포</a></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/27/210627Memoir6months/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MyBatis] update할때 컬럼명 바꿀 수 없을까?</title>
      <link>https://sowon-dev.github.io/2021/06/23/210624MybatisColumnChange/</link>
      <guid>https://sowon-dev.github.io/2021/06/23/210624MybatisColumnChange/</guid>
      <pubDate>Wed, 23 Jun 2021 19:14:50 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;😫-너무-비효율적이야&quot;&gt;&lt;a href=&quot;#😫-너무-비효율적이야&quot; class=&quot;headerlink&quot; title=&quot;😫 너무 비효율적이야!&quot;&gt;&lt;/a&gt;😫 너무 비효율적이야!&lt;/h2&gt;&lt;p&gt;동일한 테이블에서 컬럼명에 따라 값이 달라지는 update 구문을 만들고 싶었다.&lt;br&gt;물론 컬럼명마다 update구문을 만들 수 있지만 동일테이블인데 그건 너무 비효율적이다.&lt;br&gt;그래서 단순하게 아래 쿼리를 작성한 뒤 String값 2개 name과 &lt;code&gt;수정할이름&lt;/code&gt;을 넘겨주었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="😫-너무-비효율적이야"><a href="#😫-너무-비효율적이야" class="headerlink" title="😫 너무 비효율적이야!"></a>😫 너무 비효율적이야!</h2><p>동일한 테이블에서 컬럼명에 따라 값이 달라지는 update 구문을 만들고 싶었다.<br>물론 컬럼명마다 update구문을 만들 수 있지만 동일테이블인데 그건 너무 비효율적이다.<br>그래서 단순하게 아래 쿼리를 작성한 뒤 String값 2개 name과 <code>수정할이름</code>을 넘겨주었다.</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserOneByOne"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">update user</span><br><span class="line">set #&#123;column_name&#125; = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그 결과는 아래처럼 오류가 발생했다. name을 컬럼이 아닌 String으로 받아들여졌기때문에 생긴 오류였다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLSyntaxErrorException: (conn=9442) You have an error in your SQL syntax; </span><br><span class="line">check the manual that corresponds to your MariaDB server version for the right syntax to use near ''name' = '수정할이름'</span><br></pre></td></tr></table></figure><p>이를 어떻게 해결할 수 있을까?</p><p><br><br><br></p><h2 id="😎Mybatis-컬럼명-동적쿼리"><a href="#😎Mybatis-컬럼명-동적쿼리" class="headerlink" title="😎Mybatis 컬럼명 동적쿼리"></a>😎Mybatis 컬럼명 동적쿼리</h2><p>이를 조금 고급스럽게 표현하면 Mybatis 동적쿼리라고 부른다.<br><code>#</code>에서 <code>$</code>로 바꿔줬을뿐인데 정상작동한다! </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateUserOneByOne"</span> parameterType=<span class="string">"String"</span>&gt;</span><br><span class="line">update user</span><br><span class="line">set $&#123;column_name&#125; = #&#123;value&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ol><li><code>${}</code>: 파라미터값 그대로 입력</li><li><code>#{}</code>: 파라미터값이 ‘ ‘으로 감싸져서 문자열로 입력</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MyBatis/">MyBatis</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/23/210624MybatisColumnChange/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL] SQL에서 컬럼값이 NULL처리는 어떻게 하면 좋을까?</title>
      <link>https://sowon-dev.github.io/2021/06/13/210614sqlNull/</link>
      <guid>https://sowon-dev.github.io/2021/06/13/210614sqlNull/</guid>
      <pubDate>Sun, 13 Jun 2021 20:47:04 GMT</pubDate>
      
      <description>&lt;p&gt;SQL에서 컬럼값이 NULL이 출력되었을 경우 default값이나 원하는 값으로 치환해주고싶을때가 있다.&lt;br&gt;이럴때 어떻게 하면 좋을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SQL에서 컬럼값이 NULL이 출력되었을 경우 default값이나 원하는 값으로 치환해주고싶을때가 있다.<br>이럴때 어떻게 하면 좋을까?</p><a id="more"></a><ul><li>컬럼값이 Null인 경우를 처리해주는 함수들<ol><li>MySQL: IFNULL, CASE</li><li>Orcale: NVL()</li><li>모든 DBMS : COALESCE</li></ol></li></ul><p><br><br><br></p><h3 id="ISNULL"><a href="#ISNULL" class="headerlink" title="ISNULL()"></a>ISNULL()</h3><ul><li>기본</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 기본</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(컬럼명, <span class="string">"Null일 경우 대체 값"</span>) <span class="keyword">FROM</span> 테이블명;</span><br></pre></td></tr></table></figure><ul><li>예시: 학부모연락처가 NULL인 경우 “학부모없음”을 출력, NULL이 아닌 경우 학부모tel을 출력</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(학부모tel, <span class="string">"학부모연락처없음"</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="CASE문"><a href="#CASE문" class="headerlink" title="CASE문"></a>CASE문</h3><ul><li>기본</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 기본</span><br><span class="line">CASE </span><br><span class="line">    WHEN 조건식1 THEN 식1</span><br><span class="line">    WHEN 조건식2 THEN 식2</span><br><span class="line">    ...</span><br><span class="line">    ELSE 조건에 맞는경우가 없는 경우 실행할 식</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li>예시</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"> <span class="keyword">CASE</span></span><br><span class="line">   <span class="keyword">WHEN</span> 학부모tel <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"학부모연락처없음"</span></span><br><span class="line">   <span class="keyword">ELSE</span> 학부모tel</span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE()"></a>COALESCE()</h2><ul><li>기본<br>컬럼1이 null인경우 컬럼2를 출력하고 컬럼2도 null인 경우 컬럼3을 출력한다.<br>컬럼3도 null이면 컬럼4를 출력하고, 마지막 컬럼까지 null인 경우 그냥 null을 출력한다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COALESCE</span>(컬럼<span class="number">1</span>, 컬럼<span class="number">2</span>, 컬럼<span class="number">3</span>, 컬럼<span class="number">4</span>, ...)</span><br><span class="line"><span class="keyword">FROM</span> 테이블명</span><br></pre></td></tr></table></figure><ul><li>예시<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COALESCE</span>(학부모tel, 학부모tel2, <span class="string">"비상연락처도없음"</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQL/">MySQL</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/13/210614sqlNull/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL] selet 컬럼명을 조건에 따라 다르게 출력할 수 있을까?</title>
      <link>https://sowon-dev.github.io/2021/06/13/210614leftouter/</link>
      <guid>https://sowon-dev.github.io/2021/06/13/210614leftouter/</guid>
      <pubDate>Sun, 13 Jun 2021 19:57:15 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 쿼리를 작성하다가 궁금증이 생겼다.&lt;br&gt;예를 들어 학교 교직원 및 학생 정보를 user테이블에 다 있다고 생각해보자.&lt;br&gt;relation테이블을 이용하여 학생의 담임교사와 학부모정보를 출력하고 싶었다.&lt;br&gt;user테이블에서 자기 자신을 계속 join하는 상황에서 상황별 학생정보를 출력하려면 어떻게 해야할까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 쿼리를 작성하다가 궁금증이 생겼다.<br>예를 들어 학교 교직원 및 학생 정보를 user테이블에 다 있다고 생각해보자.<br>relation테이블을 이용하여 학생의 담임교사와 학부모정보를 출력하고 싶었다.<br>user테이블에서 자기 자신을 계속 join하는 상황에서 상황별 학생정보를 출력하려면 어떻게 해야할까?</p><a id="more"></a><h2 id="첫-시도와-문제점-☝️"><a href="#첫-시도와-문제점-☝️" class="headerlink" title="첫 시도와 문제점 ☝️"></a>첫 시도와 문제점 ☝️</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 모든 정보가 다 있는 경우</span><br><span class="line"><span class="keyword">select</span> u1.name, u1.tel, <span class="comment">--학생정보 </span></span><br><span class="line">   u2.name, u2.tel, <span class="comment">--학부모정보</span></span><br><span class="line">   u3.name, u3.tel <span class="comment">--담임교사정보</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u1</span><br><span class="line"><span class="keyword">join</span> user_relation ur</span><br><span class="line"><span class="keyword">on</span> u1.tel = ur.학생tel</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">user</span> u2</span><br><span class="line"><span class="keyword">ON</span> ur.학부모tel = u2.tel</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">user</span> u3</span><br><span class="line"><span class="keyword">ON</span> ur.교사tel = u3.tel</span><br><span class="line"><span class="keyword">WHERE</span> u1.tel = <span class="comment">#&#123;학생tel&#125;</span></span><br></pre></td></tr></table></figure><p>위 쿼리의 문제점은 크게 2가지이다.</p><ol><li>학부모정보가 없는 경우 학생정보가 아예 출력 안됨.</li><li>담임교사 정보가 없는 경우 학생정보가 아예 출력 안됨.</li></ol><p>학무보정보나 담임교사정보가 없는 상황에서도 학생정보를 출력하고 싶다면 어떻게 해야할까?</p><p><br><br><br></p><h2 id="모든-쿼리를-다-만들면-어때-🤔"><a href="#모든-쿼리를-다-만들면-어때-🤔" class="headerlink" title="모든 쿼리를 다 만들면 어때? 🤔"></a>모든 쿼리를 다 만들면 어때? 🤔</h2><p>먼저 if나 case절을 생각했는데 아무래도 select값이 변경되어야하기때문에 사용하기가 힘들었다.<br>그렇다면 모든 경우의 수별로 쿼리를 다 만들어보는 방법이 있다.<br>예를 들면 아래와 같다.</p><ol><li>모든 정보가 다 있는 경우</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 모든 정보가 다 있는 경우</span><br><span class="line"><span class="keyword">select</span> u1.name, u1.tel, <span class="comment">--학생정보 </span></span><br><span class="line">   u2.name, u2.tel, <span class="comment">--학부모정보</span></span><br><span class="line">   u3.name, u3.tel <span class="comment">--담임교사정보</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u1</span><br><span class="line"><span class="keyword">join</span> user_relation ur</span><br><span class="line"><span class="keyword">on</span> u1.tel = ur.학생tel</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">user</span> u2</span><br><span class="line"><span class="keyword">ON</span> ur.학부모tel = u2.tel</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">user</span> u3</span><br><span class="line"><span class="keyword">ON</span> ur.교사tel = u3.tel</span><br><span class="line"><span class="keyword">WHERE</span> u1.tel = <span class="comment">#&#123;학생tel&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>담임정보가 없는 경우</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 담임정보가 없는 경우</span><br><span class="line"><span class="keyword">select</span> u1.name, u1.tel, <span class="comment">--학생정보 </span></span><br><span class="line">   u2.name, u2.tel, <span class="comment">--학부모정보</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u1</span><br><span class="line"><span class="keyword">join</span> user_relation ur</span><br><span class="line"><span class="keyword">on</span> u1.tel = ur.학생tel</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">user</span> u2</span><br><span class="line"><span class="keyword">ON</span> ur.학부모tel = u2.tel</span><br><span class="line"><span class="keyword">WHERE</span> u1.tel = <span class="comment">#&#123;학생tel&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>학부모정보가 없는 경우</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 학부모정보가 없는 경우</span><br><span class="line"><span class="keyword">select</span> u1.name, u1.tel, <span class="comment">--학생정보 </span></span><br><span class="line">   u3.name, u3.tel <span class="comment">--담임교사정보</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u1</span><br><span class="line"><span class="keyword">join</span> user_relation ur</span><br><span class="line"><span class="keyword">on</span> u1.tel = ur.학생tel</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">user</span> u3</span><br><span class="line"><span class="keyword">ON</span> ur.교사tel = u3.tel</span><br><span class="line"><span class="keyword">WHERE</span> u1.tel = <span class="comment">#&#123;학생tel&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>담임정보도 없고 학부모정도 없는 경우</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 담임정보도 없고 학부모정도 없는 경우</span><br><span class="line"><span class="keyword">select</span> u1.name, u1.tel</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u1</span><br><span class="line"><span class="keyword">WHERE</span> u1.tel = <span class="comment">#&#123;학생tel&#125;</span></span><br></pre></td></tr></table></figure><p>보시다시피 너무 비효율적이다.<br>한 쿼리로 해결하는 방법이 없을까? 구글링하다가 도저히 모르겠어서 팀장님께 조심스럽게 물어봤는데 바로 해결방법을 알려주셨다!</p><p><br><br><br></p><h2 id="한-쿼리로-해결-😎"><a href="#한-쿼리로-해결-😎" class="headerlink" title="한 쿼리로 해결 😎"></a>한 쿼리로 해결 😎</h2><p>해결책은 바로 left outer join이었다!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u1.name, u1.tel, <span class="comment">--학생정보 </span></span><br><span class="line">   u2.name, u2.tel, <span class="comment">--학부모정보</span></span><br><span class="line">   u3.name, u3.tel <span class="comment">--담임교사정보</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> user_relation ur</span><br><span class="line"><span class="keyword">on</span> u1.tel = ur.학생tel</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> <span class="keyword">user</span> u2</span><br><span class="line"><span class="keyword">ON</span> ur.학부모tel = u2.tel</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> <span class="keyword">user</span> u3</span><br><span class="line"><span class="keyword">ON</span> ur.교사tel = u3.tel</span><br><span class="line"><span class="keyword">WHERE</span> u1.tel = <span class="comment">#&#123;학생tel&#125;</span></span><br></pre></td></tr></table></figure><p>위에서 내가 작성한 join 앞에 아무것도 적지않았으므로 기본적으로 inner조인이 된다. 즉 교집합만 보여주는 쿼리가 된다.<br>outer조인에는 크게 3가지가 있고 그 중 left outer join을 실무에서 가장 많이 사용한다고 한다.<br>아무리 쉬워보이는 거라도 용기내서 물어보길 잘했다! 덕분에 확실히 개념이 잡혔다. 룰루!</p><p><br><br><br></p><h2 id="outer-join이란"><a href="#outer-join이란" class="headerlink" title="outer join이란?"></a>outer join이란?</h2><p>아래 그림을 보면 이해하기가 쉽다.</p><ul><li>join = inner join : 교집합</li><li>outer join 종류<ul><li>left outer join : 실무에서 가장 많이 사용</li><li>right outer join</li><li>full outer join</li></ul></li></ul><p><img src="https://blog.kakaocdn.net/dn/3qpye/btq14YgdCQB/18ZMl4d3sROOblZn4i6kYk/img.jpg" alt="https://blog.edit.kr/m/entry/Oracle-%EC%BF%BC%EB%A6%AC%EC%A4%91%EC%97%90-%EC%9D%98-%EC%9D%98%EB%AF%B8?category=290081"></p><p><br><br><br></p><h2 id="SQL-NULL-처리하기"><a href="#SQL-NULL-처리하기" class="headerlink" title="SQL NULL 처리하기"></a>SQL NULL 처리하기</h2><p>팀장님께서 추가로 null값이 들때 default값을 설정할 수 있는 COALESCE()도 함께 알려주셨다.</p><ul><li><a href="">바로가기: SQL에서 컬럼값이 NULL처리는 어떻게 하면 좋을까?</a></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/">더 많은 join</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQL/">MySQL</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/13/210614leftouter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Git]git add의 차이</title>
      <link>https://sowon-dev.github.io/2021/06/08/210609Gitadddiff/</link>
      <guid>https://sowon-dev.github.io/2021/06/08/210609Gitadddiff/</guid>
      <pubDate>Tue, 08 Jun 2021 22:09:39 GMT</pubDate>
      
      <description>&lt;p&gt;GIT명령어 비슷한 것들도 많고 여간 헷갈리는 것이 아니다. 헷갈리는 김에 정리해보았다.&lt;/p&gt;
&lt;h2 id=&quot;git-add-와-git-add-차이&quot;&gt;&lt;a href=&quot;#git-add-와-git-add-차이&quot; class=&quot;headerlink&quot; title=&quot;git add . 와 git add * 차이&quot;&gt;&lt;/a&gt;&lt;code&gt;git add .&lt;/code&gt; 와 &lt;code&gt;git add *&lt;/code&gt; 차이&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>GIT명령어 비슷한 것들도 많고 여간 헷갈리는 것이 아니다. 헷갈리는 김에 정리해보았다.</p><h2 id="git-add-와-git-add-차이"><a href="#git-add-와-git-add-차이" class="headerlink" title="git add . 와 git add * 차이"></a><code>git add .</code> 와 <code>git add *</code> 차이</h2><a id="more"></a><ul><li><code>git add .</code>: .gitignore에 기재된 것 고려하여 모두 추가</li><li><code>git add *</code>: .gitignore에 기재된 것 상관없이 모두 추가</li></ul><p>따라서 그냥  <code>git add .</code>를 사용하자</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Version-control/">Version control</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/git/">git</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/08/210609Gitadddiff/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]백준 2751 수 정렬하기2 풀이</title>
      <link>https://sowon-dev.github.io/2021/06/05/210606al-backjoon-2751/</link>
      <guid>https://sowon-dev.github.io/2021/06/05/210606al-backjoon-2751/</guid>
      <pubDate>Sat, 05 Jun 2021 07:00:10 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.&lt;br&gt;첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 숫자가 주어진다. 이 수는 절댓값이 1,000,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.<br>첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 숫자가 주어진다. 이 수는 절댓값이 1,000,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.</p><a id="more"></a><ul><li>입출력예시</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="처음시도한-코드"><a href="#처음시도한-코드" class="headerlink" title="처음시도한 코드"></a>처음시도한 코드</h2><p>시간초과로 실패<br>Arrays.sort()는 dual-pivot Quicksort 알고리즘사용한다. 평균 시간복잡도가 O(nlogn) 으로 좋은 알고리즘이지만 최악 시간복잡도는 O(n2) 이기때문에 퀵정렬이라고해서 다 좋은 것은 아니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">int</span> N = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에 숫자 넣기</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">  arr[i] = Integer.parseInt(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 오름차순 정렬</span></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">  System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="성공한-코드"><a href="#성공한-코드" class="headerlink" title="성공한 코드"></a>성공한 코드</h2><ul><li>memory 160156 runtime 1396</li></ul><p>Collections.sort()는 Arrays.sort()와 달리 Timesort정렬을 사용한다. Timesort정렬는 삽입정렬과 반복합병 알고리즘 2개를 함께 사용하여 최악 시간복잡도 O(nlogn)을 보장한다.<br>참고로 System.out.println()만으로 출력하면 시간초과 발생하므로 꼭 StringBuilder 사용해줘야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> N = Integer.parseInt(br.readLine());</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 리스트에 숫자넣기</span></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">      list.add(Integer.parseInt(br.readLine()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 오름차순 정렬</span></span><br><span class="line">    Collections.sort(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 출력</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> value : list) &#123;</span><br><span class="line">      sb.append(value).append(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><table><thead><tr><th align="center">메서드</th><th align="center">알고리즘명</th><th align="center">평균시간복잡도</th><th align="center">최악 시간복잡도</th></tr></thead><tbody><tr><td align="center">Arrays.sort()</td><td align="center">퀵정렬dual-pivot Quicksort</td><td align="center">O(nlogn)</td><td align="center">O(n2)</td></tr><tr><td align="center">Collections.sort()</td><td align="center">Timesort정렬</td><td align="center">O(n)</td><td align="center">O(nlogn)</td></tr></tbody></table><p>아래 블로그에서 항상 도움을 많이 얻고 있다. 자바로 알고리즘 공부하는 사람에게는 바이블적인 블로그가 아닐까싶다.</p><blockquote><p>일단, 최악의 경우에도 O(nlogn) 을 보장하거나 혹은, O(n) 에 가까운 정렬 알고리즘을 사용해야 한다. 이에 대한 해결 방법은 두 가지가 있다.<br>첫 번째는 Collections.sort() 를 쓰는 방법이다. Collections.sort() 은 Timsort이다. Timsort 의 경우 합병 및 삽입정렬 알고리즘을 사용한다.<br>이렇게 두 가지가 섞여있는 정렬 알고리즘을 hybrid sorting algorithm 이라고 하는데, 합병정렬(Merge Sort)의 경우 최선, 최악 모두 O(nlogn)  을 보장하고. 삽입정렬(Insertion sort)의 경우 최선의 경우는 O(n) , 최악의 경우는 O(n2) 이다.<br>그리고 두 정렬 모두 안정 정렬(stable sort)이기 때문에 Timsort를 hybrid stable sorting algorithm이라고도 한다.<br>즉, 합병정렬의 최악의 경우와 삽입정렬의 최선의 경우를 짬뽕한 알고리즘이 Timsort 라는 것이다. 실제로 파이썬이나 기타 정렬 알고리즘에서 가장 많이 쓰이는 알고리즘이기도 하다.<br>시간복잡도 O(n) ~ O(nlogn) 을 보장한다는 장점이 있다.<br>출처: <a href="https://st-lab.tistory.com/106">https://st-lab.tistory.com/106</a></p></blockquote><p><br><br><br></p><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>최근 st-lab 티스토리를 운영하고 있는 블로거 ST님에게서 연락을 받았다.<br>제목은 <code>포스팅 내용 변경건</code>.<br>내가 잘 못 포스팅한 게 있었나? 내 포스팅이 마음에 안들어서 내려달라고 연락하신걸까? 네이버블로거들 사이에서보단 뭐 기업과 블로거의 법적대응 뭐 이런건가. 그런 영화같은 일이 소시민인 나에게…?<br>오만가지 생각을 하며 열어 본 이메일에는 나는 박수를 칠 수 밖에 없었다.</p><p>세상에 이렇게 멋있는 사람이 있나 싶어서.</p><p>이메일의 주 내용은 원글에 수정사항이 있는데 자칫 오해할 수 있는 내용이 있어 수정했으며 내용을 참고하신 분들에게 잘못된 내용을 전달될 수 있을까봐 해당 내용을 확인 후 반영해달라는 것이었다.<br>세상에 이렇게 멋진 사람이 있다니.<br>그의 책임감에 감탄했다.<br>그는 지식공유자를 넘어 신뢰감있는 전문가였다.<br>ST님같은 전문가가 되고 싶다.</p><p>(원문 수정내용을 반영 완료)</p><p><br><br><br></p><h2 id="백준의-다른-문제-풀이가-보고싶다면"><a href="#백준의-다른-문제-풀이가-보고싶다면" class="headerlink" title="백준의 다른 문제 풀이가 보고싶다면?"></a>백준의 다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/backjoon">백준 java 풀이 모음</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/05/210606al-backjoon-2751/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MyBatis] select한 값을 바로 insert할 수 있을까?</title>
      <link>https://sowon-dev.github.io/2021/06/03/210604MyBatis-selectKey/</link>
      <guid>https://sowon-dev.github.io/2021/06/03/210604MyBatis-selectKey/</guid>
      <pubDate>Thu, 03 Jun 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;DB Mapper를 코딩하면서 일회성으로 쓸 쿼리를 계속 만들어야하는가에 대한 의문이 생겼다.&lt;br&gt;예를 들어 아래와 같은 UserDTO가 있다고하자.&lt;br&gt;user테이블에 idx, name, dept_code만 넣고 싶다. dept_code는 department테이블에서 user_id로 알아낼 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>DB Mapper를 코딩하면서 일회성으로 쓸 쿼리를 계속 만들어야하는가에 대한 의문이 생겼다.<br>예를 들어 아래와 같은 UserDTO가 있다고하자.<br>user테이블에 idx, name, dept_code만 넣고 싶다. dept_code는 department테이블에서 user_id로 알아낼 수 있다.</p><a id="more"></a><p>그렇다면 가장 쉽게 생각나는 방법은 dept_code를 찾는 쿼리와 insert하는 쿼리로 2가지 쿼리 만드는 방법이다.<br>하지만 dept_code를 찾는 쿼리는 insert하는 쿼리하기위해 한번만 사용되는 일회성 쿼리라면 굳이 쿼리를 나눠서 작성할 필요가 있을까?<br>여기서 내 궁금증은 커져만 갔고 한 개의 쿼리를 만들고 싶다는 마음이 강해졌다.</p><p><br><br><br></p><h2 id="공통코드"><a href="#공통코드" class="headerlink" title="공통코드"></a>공통코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="meta">@Size</span>(min=<span class="number">13</span>, max=<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">private</span> String user_id;</span><br><span class="line"><span class="keyword">private</span> String dept_code;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h2><p>UserDTO를 선언하고 findDeptCode 쿼리 실행하여 나온 result값을 dept_code에 넣어주고 난 뒤 insertUser쿼리를 실행하면 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dept_code를 찾는 쿼리  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDeptCode"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">SELECT dept_code from department</span><br><span class="line">WHERE user_id = #&#123;user_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- insert 쿼리  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"UserDTO"</span>&gt;</span></span><br><span class="line">insert into user</span><br><span class="line">(idx, name, dept_code)</span><br><span class="line">values ( #&#123;idx&#125;, #&#123;name&#125;, #&#123;dept_code&#125; )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>직관적인 쿼리들이지만 나는 하나의 쿼리로 만들고 싶었다.<br>한 기능에서만 딱 한 번 그리고 세트로 실행되는데 여러 개 쿼리를 나눈 것이 비효율적이라고 느껴졌기때문이다.<br>findDeptCode 쿼리와 insertUser 쿼리는 세트이기때문에 유지보수를 위해서도 한 쿼리로 관리하고 싶었다.</p><p>다른 방법이 없을까 구글링하던 끝에 주임님께 조심스럽게 내 생각을 전해보았다.<br>주임님은 바로 이해하시고는 selectkey를 알려주셨다.<br>주임님은 겸손하면서 다정하게 잘 알려주신다.<br>다 가졌어.<br>겸손까지…<br>그저 완벽.</p><p><br><br><br></p><h2 id="selectkey사용한-코드"><a href="#selectkey사용한-코드" class="headerlink" title="selectkey사용한 코드"></a>selectkey사용한 코드</h2><p>짜잔! 한 쿼리로 다 관리할 수 있다. 이를 조금 고급스럽게 표현하면 Mybatis 동적쿼리라고 부른다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"UserDTO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">id</span>=<span class="string">"findDeptCode"</span> <span class="attr">resultType</span>=<span class="string">"String"</span> <span class="attr">keyProperty</span>=<span class="string">"dept_code"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">SELECT dept_code from department</span><br><span class="line">WHERE user_id = #&#123;user_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span> </span><br><span class="line">insert into user</span><br><span class="line">(idx, name, dept_code)</span><br><span class="line">values ( #&#123;idx&#125;, #&#123;name&#125;, #&#123;dept_code&#125; )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="selectkey-사용법"><a href="#selectkey-사용법" class="headerlink" title="selectkey 사용법"></a>selectkey 사용법</h2><ul><li><code>keyProperty</code> : 컬럼명이므로 DTO에 있는 동일한 명을 입력하면 된다.</li><li><code>order=&quot;BEFORE&quot;</code> : insert전에 selectKey문이 실행된다.</li><li><code>order=&quot;AFTER&quot;</code> : insert후에 selectKey문이 실행된다.</li></ul><p><br><br><br></p><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>주임님 덕분에 오늘 난 한 걸음 더 성장했다!<br>될지 안 될지 알 수 없는 상황에서 구글링해도 안 나오니까 그냥 안 되나보다하고 포기하지않고 끝까지 물어보길 잘했다.<br>아 스트레스도 많이 받지만 이럴땐 정말 재밌다 코딩<br>하나하나 알게 되는 기쁨이 이루 말할수없다.<br>앞으로도 이렇게 성장해나가야지!<br>그나저나 주임님 정말 천재!!</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://yookeun.github.io/java/2014/07/11/mybatis-selectkey/">https://yookeun.github.io/java/2014/07/11/mybatis-selectkey/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MyBatis/">MyBatis</category>
      
      
      <comments>https://sowon-dev.github.io/2021/06/03/210604MyBatis-selectKey/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>REST API 컨트롤러 Mapping을 어떻게 하지?</title>
      <link>https://sowon-dev.github.io/2021/05/25/210526RESTfulAPI-Odata/</link>
      <guid>https://sowon-dev.github.io/2021/05/25/210526RESTfulAPI-Odata/</guid>
      <pubDate>Tue, 25 May 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링부트로 RestAPI를 구현하고 있다. Mapping 어노테이션에서 URI를 지정시 어떤 규칙으로 적용해야할까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링부트로 RestAPI를 구현하고 있다. Mapping 어노테이션에서 URI를 지정시 어떤 규칙으로 적용해야할까?</p><a id="more"></a><h2 id="web-api규칙"><a href="#web-api규칙" class="headerlink" title="web api규칙"></a>web api규칙</h2><p>이를 잘 정리해 둔 블로그가 있다. 이 블로그를 통해 감을 잡을 수 있었다.</p><ul><li><a href="https://www.mimul.com/blog/web-api-design-from-apigee/?fbclid=IwAR1Q5QmdYTLpgc9c5w9IKQM2i49JBsNuEwyJHntYjWytEYQK89m2fJUMPAE">https://www.mimul.com/blog/web-api-design-from-apigee/?fbclid=IwAR1Q5QmdYTLpgc9c5w9IKQM2i49JBsNuEwyJHntYjWytEYQK89m2fJUMPAE</a></li></ul><p>모든 내용들이 다 좋았지만 그 중에서도 직관적으로 바로 이해가는 세가지는 아래와 같다.</p><ol><li>Nouns are good; verbs are bad.</li><li>Plural nouns and concrete names. 복수명사를 사용하고 구체적인 이름을 사용하기.</li><li>Simplify associations - sweep complexity under the ‘?’. 자원간의 관계, 매개 변수 및 속성과 같은 복잡한 것은 HTTP 물음표 뒤에 가지고 가자.</li></ol><p>위 규칙은 <a href="https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf">Web API Design - Crafting Interfaces that Developers Love</a>과 위 블로그에서 발췌했다.</p><p><br><br><br></p><h2 id="OData-Open-Data-Protocol"><a href="#OData-Open-Data-Protocol" class="headerlink" title="OData (Open Data Protocol)"></a>OData (Open Data Protocol)</h2><p>번역하면 공공 데이터 규약 즉, 데이터를 주고 받는데 있어 지켜야하는 규약을 의미한다.<br>OPEN API들은 보통 이 규약을 준수한다.</p><ul><li><a href="https://docs.microsoft.com/en-us/graph/use-the-api?view=graph-rest-1.0">https://docs.microsoft.com/en-us/graph/use-the-api?view=graph-rest-1.0</a></li></ul><p>마이크로소프트사의 페이지를 가보면 Access data and methods, Paging등에 관한 API예시가 있다.<br>이를 참조하여  오픈 API 틀을 잡는데 도움이 된다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.odata.org/getting-started/basic-tutorial/">https://www.odata.org/getting-started/basic-tutorial/</a></li><li><a href="https://www.ibm.com/docs/ko/license-metric-tool?topic=api-rest-resources-http-methods">https://www.ibm.com/docs/ko/license-metric-tool?topic=api-rest-resources-http-methods</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/SpringBoot/">SpringBoot</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/25/210526RESTfulAPI-Odata/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[이클립스/STS] // TODO 주석말고 다른 거, 뭐 없을까?</title>
      <link>https://sowon-dev.github.io/2021/05/12/210513Eclipse-tasks/</link>
      <guid>https://sowon-dev.github.io/2021/05/12/210513Eclipse-tasks/</guid>
      <pubDate>Wed, 12 May 2021 16:22:55 GMT</pubDate>
      
      <description>&lt;p&gt;기능구현을 하다보면 시간에 쫓기거나 우선순위때문에 잠깐 미뤄둬야 할 일들이 있다.&lt;br&gt;모든 걸 다 기억해놓을 수도 없고, 그냥 주석을 쓰면 눈에 잘 띄지않는다.&lt;br&gt;이때 도움이 되는 것이 Task tag 기능이다.&lt;br&gt;이클립스나 STS에 자체적으로 있는 기능으로 하단에 Tasks 탭을 확인할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>기능구현을 하다보면 시간에 쫓기거나 우선순위때문에 잠깐 미뤄둬야 할 일들이 있다.<br>모든 걸 다 기억해놓을 수도 없고, 그냥 주석을 쓰면 눈에 잘 띄지않는다.<br>이때 도움이 되는 것이 Task tag 기능이다.<br>이클립스나 STS에 자체적으로 있는 기능으로 하단에 Tasks 탭을 확인할 수 있다.</p><a id="more"></a><p>Task tag로 메모해놓으면 바로 확인할 수 있고 클릭시 해당 소스코드로 바로 이동하여 정말 편하다.</p><p><img src="https://mcuoneclipse.files.wordpress.com/2016/05/markers-ini-source-view.png" alt="https://dzone.com/articles/to-do-lists-with-eclipse-tasks-view"></p><p>또한 해당 소스코드 왼쪽편에 노트와 연필모양으로 표시까지 해준다</p><p><br><br><br></p><h2 id="Tasks-탭-열기"><a href="#Tasks-탭-열기" class="headerlink" title="Tasks 탭 열기"></a>Tasks 탭 열기</h2><p>Tasks탭이 하단에 없는 경우 아래 경로를 통해서 볼 수 있다.</p><ul><li>이클립스나 STS -&gt; Window -&gt; Show View -&gt; Tasks</li></ul><p><br><br><br></p><h2 id="Task-tag-종류"><a href="#Task-tag-종류" class="headerlink" title="Task tag 종류"></a>Task tag 종류</h2><p>기본적으로 3종류가 있다.</p><ul><li>TODO : 좀더 최적화시키고 리팩토링시킬 수 있을만한 구석이 있을때. 미래에 뭔가 의미있는 작업을 더 해야 할 필요성을 느낄때.</li><li>FIXME : 문제가 있는것이 확실하지만, 그걸 지금 당장 그것을 수정할 필요는 없을 때.</li><li>XXX : 해당 부분에 대해서는 더 생각해볼 필요성이 있을 때. 또는 해당 부분에 질문이 생길 때. 또는 코드에서 문제가 일어날만한 부분을 강조 표기할때. 완벽하게 정확히 구현되지 않은 부분이 있을 때. 나중에 고쳐야만하는 부분일 때. 주로 팀보단 자신을 위한 용도로 사용.</li></ul><p>예시</p><ul><li>TODO: How about auto-correcting small spelling errors?</li><li>FIXME: This won’t work if the file is missing.</li><li>XXX: This method badly needs refactoring: should switch by core type.</li></ul><h2 id="커스텀-tag-추가하기"><a href="#커스텀-tag-추가하기" class="headerlink" title="커스텀 tag 추가하기"></a>커스텀 tag 추가하기</h2><p>기존 3종태그뿐만아니라 나만의 커스텀태그를 추가할 수 있다.</p><ul><li>Window -&gt; Preferences -&gt; Java -&gt; Compiler -&gt; Task Tags</li></ul><p>New와 Edit, Remove를 이용하여 태스크 태그를 추가, 수정,삭제할 수 있고 각 우선순위도 상/중/하로 설정할 수 있다.</p><p><img src="https://mcuoneclipse.files.wordpress.com/2016/05/task-tag-settings.png" alt="https://dzone.com/articles/to-do-lists-with-eclipse-tasks-view"></p><p><br><br><br></p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li><a href="https://dzone.com/articles/to-do-lists-with-eclipse-tasks-view">https://dzone.com/articles/to-do-lists-with-eclipse-tasks-view</a></li><li><a href="http://egloos.zum.com/rucaus/v/2455594">http://egloos.zum.com/rucaus/v/2455594</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Eclipse/">Eclipse</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/12/210513Eclipse-tasks/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링부트]Springboot + Spring Security + JWT 기본 dependencies 추천</title>
      <link>https://sowon-dev.github.io/2021/05/09/210510springboot-pom/</link>
      <guid>https://sowon-dev.github.io/2021/05/09/210510springboot-pom/</guid>
      <pubDate>Sun, 09 May 2021 23:19:02 GMT</pubDate>
      
      <description>&lt;p&gt;스프링부트 + 스프링시큐리티 + JWT + MyBatis + MariaDB로 진행하는 API프로젝트에서 참고하면 좋은 프로젝트 구조와 &lt;code&gt;pom.xml&lt;/code&gt;을 공유하고자한다.&lt;br&gt;프로젝트 구조와 사용하는 의존성에는 완벽이란 없다. 자신의 프로젝트에 맞게 알아서 골라서 사용하면 된다.&lt;/p&gt;
&lt;h2 id=&quot;프로젝트구조&quot;&gt;&lt;a href=&quot;#프로젝트구조&quot; class=&quot;headerlink&quot; title=&quot;프로젝트구조&quot;&gt;&lt;/a&gt;프로젝트구조&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링부트 + 스프링시큐리티 + JWT + MyBatis + MariaDB로 진행하는 API프로젝트에서 참고하면 좋은 프로젝트 구조와 <code>pom.xml</code>을 공유하고자한다.<br>프로젝트 구조와 사용하는 의존성에는 완벽이란 없다. 자신의 프로젝트에 맞게 알아서 골라서 사용하면 된다.</p><h2 id="프로젝트구조"><a href="#프로젝트구조" class="headerlink" title="프로젝트구조"></a>프로젝트구조</h2><a id="more"></a><p><img src="" alt=""></p><p>src/main/java</p><ul><li>config: 시큐리티설정파일, DB연결설정파일</li><li>controller</li><li>dao</li><li>dto</li><li>exception</li><li>payload: 성공이나 실패등이 일어났을때 내가 챙겨 보고 싶은 message를 뜻한다. <a href="https://minieetea.com/2017/03/archives/5001">추천 참고링크 - JSON과 Payload</a></li><li>security</li><li>service</li><li>mapper: mapper interface파일</li></ul><p>src/main/resources</p><ul><li>mappers: mapper xml파일</li></ul><p><br><br></p><h2 id="pom-xml-의-dependencies"><a href="#pom-xml-의-dependencies" class="headerlink" title="pom.xml 의 dependencies"></a>pom.xml 의 dependencies</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- add --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">의존성 명칭</th><th align="center">기능</th><th align="center">주요 사용</th><th align="center">추천 참고링크</th></tr></thead><tbody><tr><td align="center">spring-boot-starter-actuator</td><td align="center">Spring Boot Application의 상태 관리</td><td align="center">CORS설정</td><td align="center"><a href="https://supawer0728.github.io/2018/05/12/spring-actuator/">링크</a></td></tr><tr><td align="center">spring-boot-devtools</td><td align="center">스프링 부트에서 제공하는 개발 편의를 위한 모듈</td><td align="center">자동재시작, liveLoad</td><td align="center"></td></tr><tr><td align="center">commons-lang3</td><td align="center">문자열 효율적인 처리</td><td align="center"></td><td align="center"><a href="https://m.blog.naver.com/PostView.nhn?blogId=racoon_z&logNo=220770377702&proxyReferer=https:%2F%2Fwww.google.com%2F">링크</a></td></tr><tr><td align="center">spring-boot-starter-validation</td><td align="center">효과적인 유효성 검사</td><td align="center">@NotNull @NotBlank @NotEmpty @AssertTrue @Min @Max</td><td align="center"><a href="https://gaemi606.tistory.com/entry/Spring-Boot-ResponseBody-%EA%B0%81-%ED%95%AD%EB%AA%A9%EC%97%90-%ED%81%AC%EA%B8%B0-%ED%95%84%EC%88%98-%EA%B0%92-%EC%84%A4%EC%A0%95-spring-boot-starter-validation">링크</a></td></tr></tbody></table><p><br><br><br></p><h4 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h4><p>난 인복이 좀 타고난 편이다. 주변에 좋은 지인들이 참 많고, 일터에서도 좋은 사람들을 더 많이 만났다. 참 감사한 삶이다.<br>이번 팀장님도 역시나 최고다…👍<br>이번에 내가 맡은 프로젝트는 내가 처음 해보는 것 투성이었다.<br>내가 해본게 몇개있겠냐만은 정말 어려운 개념들이라 주말을 불사하고 이해하려고 노력했다.<br>시간이 갈수록 조급해지고 얼마나 답답하던지…</p><p>프로젝트 셋팅을 하는 입장에서 프로젝트 구조와 의존성 추가하는 부분이 가장 어려웠다.<br>특히 어디에 어떤 폴더를 생성하고 그 폴더에는 무슨 파일을 넣으면 좋을지 난감했다.<br>팀장님이 내 마음을 어떻게 아시고 갑자기 자리로 부르셨다.<br>그리고 내 프로젝트 상황에 맞게 프로젝트구조부터 코드리팩토링할 수 있도록 하나부터 열까지 설명해주셨다.<br>물론 설명을 알아듣진 못했지만… 못 알아들은 부분들은 열심히 필기했다.<br>길을 알려주셨으니 이제 열심히 걸어가기만 하면 된다.</p><p>이 자리를 빌어(?) 배움의 길잡이를 해주신 팀장님 다시한번 감사드립니다! 최고최고👍</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/SpringBoot/">SpringBoot</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/09/210510springboot-pom/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[GIT]기존 프로젝트를 github에 연결하기</title>
      <link>https://sowon-dev.github.io/2021/05/09/210510git-connectProject/</link>
      <guid>https://sowon-dev.github.io/2021/05/09/210510git-connectProject/</guid>
      <pubDate>Sun, 09 May 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트를 한창 만들다가 또는 다 만든 뒤 해당 프로젝트를 깃허브에 올리고 싶을 때 어떻게 해야할까?&lt;br&gt;git bash를 이용한 방법을 알아보자.&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-폴더-내-git-init-생성&quot;&gt;&lt;a href=&quot;#프로젝트-폴더-내-git-init-생성&quot; class=&quot;headerlink&quot; title=&quot;프로젝트 폴더 내 git init 생성&quot;&gt;&lt;/a&gt;프로젝트 폴더 내 git init 생성&lt;/h2&gt;&lt;p&gt;기존 프로젝트가 있는 폴더 열기 -&amp;gt;  마우스 우클릭 -&amp;gt; &lt;code&gt;git bash here&lt;/code&gt; 클릭하기&lt;br&gt;그럼 git bash창이 열리고 아래 명령어를 통해 git 초기화를 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트를 한창 만들다가 또는 다 만든 뒤 해당 프로젝트를 깃허브에 올리고 싶을 때 어떻게 해야할까?<br>git bash를 이용한 방법을 알아보자.</p><h2 id="프로젝트-폴더-내-git-init-생성"><a href="#프로젝트-폴더-내-git-init-생성" class="headerlink" title="프로젝트 폴더 내 git init 생성"></a>프로젝트 폴더 내 git init 생성</h2><p>기존 프로젝트가 있는 폴더 열기 -&gt;  마우스 우클릭 -&gt; <code>git bash here</code> 클릭하기<br>그럼 git bash창이 열리고 아래 명령어를 통해 git 초기화를 한다.</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>git bash창에서 주소줄 옆에 <code>(master)</code>가 생겼다면 잘 생성된 것이다. </p><p><br><br></p><h2 id="GITHUB-repository-연결"><a href="#GITHUB-repository-연결" class="headerlink" title="GITHUB repository 연결"></a>GITHUB repository 연결</h2><p>깃허브에 가서 레포지토리를 생성한 뒤 초록색 <code>code</code> 버튼을 클릭하여 깃헙 레포지토리URL을 복사한다.<br>그 다음 git bash창에서 아래 명령어를 통해 깃헙 레포지토리와 연결한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 복사해온깃헙레포url</span><br></pre></td></tr></table></figure><p>잘 연결되었는지 확인하고 싶다면 아래 명령어를 입력한다.<br>참고로 <code>-v</code>는 version의 약어이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>git bash창에서 아래 명령어를 통해 깃헙 레포지토리를 먼저 PULL 받는다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="checkout-main-선택사항"><a href="#checkout-main-선택사항" class="headerlink" title="checkout main (선택사항)"></a>checkout main (선택사항)</h2><p>깃헙정책 변경으로 기본 브랜치 이름이 master에서 main으로 변경되었다.<br>나는 master가 아닌 main 브랜치로 push를 하고자 브랜치 체크아웃을 진행했다.<br>원하는 브랜치 명을 만들어서 push해도 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br></pre></td></tr></table></figure><p>잘 되었다면 git bash창의 주소줄 맨 오른쪽이 <code>(master)</code>에서 <code>(main)</code>으로 변경된다.</p><p><br><br></p><h2 id="git-ignore-먼저-commit-후-push하기"><a href="#git-ignore-먼저-commit-후-push하기" class="headerlink" title="git ignore 먼저 commit 후 push하기"></a>git ignore 먼저 commit 후 push하기</h2><p>프로젝트 폴더를 보면 자동으로 <code>.gitignore</code>이 생성되어있다.<br><a href="https://www.toptal.com/developers/gitignore">https://www.toptal.com/developers/gitignore</a> 를 통해 ignore 사항들을 추가한 뒤 전체 코드를 복사한다.<br>기존 <code>.gitignore</code>에 복사한 코드를 붙여준다.<br>그 뒤 아래 3가지 명령어를 차례대로 입력한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .gitignore</span><br><span class="line">git commit -m <span class="string">"git ingore 추가"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>깃허브 레포지토리에서 <code>.gitignore</code>이 보인다면 정상적으로 푸쉬한 것이다.</p><p><br><br></p><h2 id="기존-프로젝트를-스테이지에-올리고-commit-후-push하기"><a href="#기존-프로젝트를-스테이지에-올리고-commit-후-push하기" class="headerlink" title="기존 프로젝트를 스테이지에 올리고 commit 후 push하기"></a>기존 프로젝트를 스테이지에 올리고 commit 후 push하기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"소스코드 추가"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>깃허브 레포지토리에서 올린 소스코드들이 보인다면 깃허브에 프로젝트 올리기 완료!</p><p><br><br></p><h2 id="git-add-와-git-add-차이"><a href="#git-add-와-git-add-차이" class="headerlink" title="git add . 와 git add * 차이"></a><code>git add .</code> 와 <code>git add *</code> 차이</h2><ul><li><code>git add .</code>: .gitignore에 기재된 것 고려하여 모두 추가</li><li><code>git add *</code>: .gitignore에 기재된 것 상관없이 모두 추가</li></ul><p>따라서 <code>git add .</code>를 사용하자</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Version-control/">Version control</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/git/">git</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/09/210510git-connectProject/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]백준 2869 달팽이는 올라가고 싶다 풀이</title>
      <link>https://sowon-dev.github.io/2021/05/08/210508al-backjoon-2869/</link>
      <guid>https://sowon-dev.github.io/2021/05/08/210508al-backjoon-2869/</guid>
      <pubDate>Sat, 08 May 2021 00:16:55 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.&lt;br&gt;달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.&lt;br&gt;달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.<br>달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.<br>달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.</p><a id="more"></a><ul><li>입출력예시1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>입출력예시2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="처음-시도한-코드"><a href="#처음-시도한-코드" class="headerlink" title="처음 시도한 코드"></a>처음 시도한 코드</h2><ul><li>시간초과로 실패</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String[] input = br.readLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> A = Integer.parseInt(input[<span class="number">0</span>]); <span class="comment">// 낮에 올라가는 높이</span></span><br><span class="line"><span class="keyword">int</span> B = Integer.parseInt(input[<span class="number">1</span>]); <span class="comment">// 밤에 미끄러지는 높이</span></span><br><span class="line"><span class="keyword">int</span> V = Integer.parseInt(input[<span class="number">2</span>]); <span class="comment">// 정상 높이</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> oneDay = A - B; <span class="comment">// 하루동안 올라갈 수 있는 높이</span></span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 누적 높이</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (sum &lt; V) &#123;</span><br><span class="line">sum += oneDay;</span><br><span class="line"><span class="keyword">if</span> (sum == V) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">day++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(day);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="두번째로-시도한-코드"><a href="#두번째로-시도한-코드" class="headerlink" title="두번째로 시도한 코드"></a>두번째로 시도한 코드</h2><p>BufferedReader를 쓴 뒤로 시간초과에 잘 걸리지 않았었는데 당황스러웠다.<br>그래서 <code>String[]</code>대신 <code>StringTokenizer</code>를, <code>System.out.println()</code>대신 <code>BufferedWriter</code>를 사용해봤다.</p><ul><li>시간초과로 실패</li></ul><p>하지만 또 시간초과로 실패했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> A = Integer.parseInt(st.nextToken()); <span class="comment">// 낮에 올라가는 높이</span></span><br><span class="line"><span class="keyword">int</span> B = Integer.parseInt(st.nextToken()); <span class="comment">// 밤에 미끄러지는 높이</span></span><br><span class="line"><span class="keyword">int</span> V = Integer.parseInt(st.nextToken()); <span class="comment">// 정상 높이</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> oneDay = A - B; <span class="comment">// 하루동안 올라갈 수 있는 높이</span></span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 누적 높이</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (sum &lt; V) &#123;</span><br><span class="line">sum += oneDay;</span><br><span class="line"><span class="keyword">if</span> (sum == V) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">day++;</span><br><span class="line">&#125;</span><br><span class="line">        bw.write(String.valueOf(day));</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="성공한-코드"><a href="#성공한-코드" class="headerlink" title="성공한 코드"></a>성공한 코드</h2><p>런타임을 확실히 줄여 줄 무언가가 필요했다.<br>시간초과의 원인은 <code>String[]</code>아니고 <code>System.out.println()</code>도 아닌 바로 반복문이었다.<br>반복문을 제거하고 하니 <code>System.out.println()</code>을 써도 바로 통과되었다.</p><ul><li>memory 11500 runtime 76</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> A = Integer.parseInt(st.nextToken()); <span class="comment">// 낮에 올라가는 높이</span></span><br><span class="line"><span class="keyword">int</span> B = Integer.parseInt(st.nextToken()); <span class="comment">// 밤에 미끄러지는 높이</span></span><br><span class="line"><span class="keyword">int</span> V = Integer.parseInt(st.nextToken()); <span class="comment">// 정상 높이</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> day = (V - B) / (A - B);</span><br><span class="line"><span class="keyword">if</span>((V - B) % (A - B) != <span class="number">0</span>)&#123;</span><br><span class="line">day++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(day);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="백준의-다른-문제-풀이가-보고싶다면"><a href="#백준의-다른-문제-풀이가-보고싶다면" class="headerlink" title="백준의 다른 문제 풀이가 보고싶다면?"></a>백준의 다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/backjoon">백준 java 풀이 모음</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/08/210508al-backjoon-2869/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MyBatis]springboot aliases-package 오류 해결방법(UnsatisfiedDependencyException해결)</title>
      <link>https://sowon-dev.github.io/2021/05/06/210507Mybatis-alias-error/</link>
      <guid>https://sowon-dev.github.io/2021/05/06/210507Mybatis-alias-error/</guid>
      <pubDate>Thu, 06 May 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Mapper.xml에서 resultType을 전체 패키지명이 아닌 간단하게 파일명으로 쓰고 싶었다.&lt;br&gt;참고로 스프링부트 프로젝트 구조는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src/main/java 하위에 controller, service, mapper, dto 폴더가 있고 그 하위에 java파일이 있다.&lt;/li&gt;
&lt;li&gt;src/main/resources 하위에 mappers 폴더가 있고 그 하위에 xml파일이 있다.</description>
      
      
      
      <content:encoded><![CDATA[<p>Mapper.xml에서 resultType을 전체 패키지명이 아닌 간단하게 파일명으로 쓰고 싶었다.<br>참고로 스프링부트 프로젝트 구조는 아래와 같다.</p><ul><li>src/main/java 하위에 controller, service, mapper, dto 폴더가 있고 그 하위에 java파일이 있다.</li><li>src/main/resources 하위에 mappers 폴더가 있고 그 하위에 xml파일이 있다.<a id="more"></a></li></ul><h2 id="시도"><a href="#시도" class="headerlink" title="시도"></a>시도</h2><p>구글링을 해보니 대부분 <code>application.properties</code>파일에서 설정하길래 나도 따라해봤다.</p><ul><li><code>application.properties</code> 파일</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mybatis 매핑 type을 짧게 쓰기 위한 설정</span><br><span class="line">mybatis.type-aliases-package=com.test.dto</span><br><span class="line">mybatis.mapper-locations=mappers/*Mapper.xml</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br></pre></td></tr></table></figure><p>그 결과 컨트롤러와 서비스등에서 UnsatisfiedDependencyException 에러가 발생했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;결과 콘솔</span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;userController&#39;: Unsatisfied dependency expressed through field &#39;service&#39;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>매퍼파일에서 패키지명 전체를 입력할 수 있지만, 약어로 쓰고싶은 마음에 끝까지 해결방법을 파고들었고 드디어 방법을 알아냈다.(😆해피)<br>myBatis SqlSessionFactory를 설정하는 파일에서 <code>setTypeAliasesPackage()</code>로 진행하면 해결된다!</p><p>나의 경우 SpringBootApplication에서 바로 SqlSessionFactory를 연결해줬으므로 <code>setTypeAliasesPackage(&quot;com.test.dto&quot;)</code>을 아래와 같이 코드를 기입했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(TestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyBatis를 App전체에서 활용할 수 있도록 Application Class에서 초기화</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">      sessionFactory.setDataSource(dataSource);</span><br><span class="line">      </span><br><span class="line">      Resource[] res = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mappers/*Mapper.xml"</span>);</span><br><span class="line">      sessionFactory.setMapperLocations(res);</span><br><span class="line">      sessionFactory.setTypeAliasesPackage(<span class="string">"com.test.dto"</span>); <span class="comment">//여기 추가</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트도 정상적으로 된다!<br>드디어 해결🧐</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/06/210507Mybatis-alias-error/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL]날짜 데이터타입에서 Timestamp를 쓰는 경우</title>
      <link>https://sowon-dev.github.io/2021/05/02/210504Datetypediff/</link>
      <guid>https://sowon-dev.github.io/2021/05/02/210504Datetypediff/</guid>
      <pubDate>Sun, 02 May 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;DB를 설계하면서 등록일자, 삭제날짜등의 날짜 데이터타입을 지정해야했다.&lt;br&gt;날짜 데이터타입으로는 크게 Date, Datetime, Time, Timestamp 4가지가 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>DB를 설계하면서 등록일자, 삭제날짜등의 날짜 데이터타입을 지정해야했다.<br>날짜 데이터타입으로는 크게 Date, Datetime, Time, Timestamp 4가지가 있다.</p><a id="more"></a><h2 id="Date-vs-Time"><a href="#Date-vs-Time" class="headerlink" title="Date vs Time"></a>Date vs Time</h2><table><thead><tr><th align="center"></th><th align="center">Date</th><th align="center">Time</th></tr></thead><tbody><tr><td align="center">설명</td><td align="center">날짜만 출력</td><td align="center">시간만 출력</td></tr><tr><td align="center">예시</td><td align="center">YYYY-MM-DD</td><td align="center">HH:MM:SS</td></tr><tr><td align="center">범위</td><td align="center">from 1000-01-01 to 9999-12-31</td><td align="center">from -838:59:59 to 838:59:59</td></tr></tbody></table><p>내가 필요한 데이터타입은 날짜뿐만 아니라 시간도 함께 필요하기때문에 Datetime, Timestamp 둘 중에서 무엇을 써야 좋을 지 고민했다.</p><p><br><br><br></p><h2 id="Datetime-vs-Timestamp"><a href="#Datetime-vs-Timestamp" class="headerlink" title="Datetime vs Timestamp"></a>Datetime vs Timestamp</h2><p>이 둘의 가장 큰 차이점은 time zone의 영향을 받는지 안 받는지이다.<br>Timestamp는 서버 타임존에 영향을 받기 때문에 시스템 타임존이 변경되면 저장된 데이터도 변경된다.</p><table><thead><tr><th align="center"></th><th align="center">DATETIME</th><th align="center">TIMESTAMP</th></tr></thead><tbody><tr><td align="center">설명</td><td align="center">날짜와 시간 둘다 출력</td><td align="center">날짜와 시간 둘다 출력</td></tr><tr><td align="center">예시</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">YYYY-MM-DD HH:MM:SS</td></tr><tr><td align="center">범위</td><td align="center">from 1000-01-01 00:00:00 <br>to 9999-12-31 23:59:59</td><td align="center">from 1970-01-01 00:00:01 UTC <br>to 2038-01-19 03:14:07 UTC</td></tr><tr><td align="center">현재시간 호출</td><td align="center">now()</td><td align="center">default로 current_timestamp를 사용하여 자동 입력</td></tr><tr><td align="center">데이터 타입</td><td align="center">문자형</td><td align="center">숫자형</td></tr><tr><td align="center">용량단위</td><td align="center">8byte</td><td align="center">4byte</td></tr></tbody></table><p><br><br><br></p><h2 id="🤔-그럼-항상-Datetime만-사용하면-되는거-아닐까"><a href="#🤔-그럼-항상-Datetime만-사용하면-되는거-아닐까" class="headerlink" title="🤔 그럼 항상 Datetime만 사용하면 되는거 아닐까?"></a>🤔 그럼 항상 Datetime만 사용하면 되는거 아닐까?</h2><p>정답은 NO이다.<br>글로벌 서비스를 하면 DB 서버가 해당 지역 타임존을 따를 수 있다.<br>따라서 적절하게 선택하여 사용해야한다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQL/">MySQL</category>
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/02/210504Datetypediff/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MariaDB/MySQL]SQL Query</title>
      <link>https://sowon-dev.github.io/2021/05/02/210503MariaDB-SQLQuery/</link>
      <guid>https://sowon-dev.github.io/2021/05/02/210503MariaDB-SQLQuery/</guid>
      <pubDate>Sun, 02 May 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;📣-테이블&quot;&gt;&lt;a href=&quot;#📣-테이블&quot; class=&quot;headerlink&quot; title=&quot;📣 테이블&quot;&gt;&lt;/a&gt;📣 테이블&lt;/h1&gt;&lt;h2 id=&quot;테이블-생성&quot;&gt;&lt;a href=&quot;#테이블-생성&quot; class=&quot;headerlink&quot; title=&quot;테이블 생성&quot;&gt;&lt;/a&gt;테이블 생성&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create table [테이블명] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(id int, name varchar(20), isDeleted boolean not null default 0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="📣-테이블"><a href="#📣-테이블" class="headerlink" title="📣 테이블"></a>📣 테이블</h1><h2 id="테이블-생성"><a href="#테이블-생성" class="headerlink" title="테이블 생성"></a>테이블 생성</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table [테이블명] </span><br><span class="line">(id int, name varchar(20), isDeleted boolean not null default 0);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="테이블명-수정"><a href="#테이블명-수정" class="headerlink" title="테이블명 수정"></a>테이블명 수정</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] <span class="keyword">rename</span> [변경할_테이블명];</span><br></pre></td></tr></table></figure><h2 id="테이블삭제"><a href="#테이블삭제" class="headerlink" title="테이블삭제"></a>테이블삭제</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [테이블명];</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="📣-컬럼"><a href="#📣-컬럼" class="headerlink" title="📣 컬럼"></a>📣 컬럼</h1><h2 id="테이블에-컬럼추가"><a href="#테이블에-컬럼추가" class="headerlink" title="테이블에 컬럼추가"></a>테이블에 컬럼추가</h2><p>여러 개 추가시 컴마로 구분하기</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] </span><br><span class="line"><span class="keyword">add</span> [컬럼명] <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'N/A'</span>,</span><br><span class="line"><span class="keyword">add</span> [컬럼명] <span class="built_in">boolean</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="컬럼명-및-컬럼타입-변경"><a href="#컬럼명-및-컬럼타입-변경" class="headerlink" title="컬럼명 및 컬럼타입 변경"></a>컬럼명 및 컬럼타입 변경</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] </span><br><span class="line"><span class="keyword">change</span> [컬럼명] [변경할_컬럼명] <span class="built_in">int</span>;</span><br></pre></td></tr></table></figure><h2 id="컬럼삭제"><a href="#컬럼삭제" class="headerlink" title="컬럼삭제"></a>컬럼삭제</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] <span class="keyword">drop</span> [컬럼명];</span><br></pre></td></tr></table></figure><h2 id="컬럼순서변경"><a href="#컬럼순서변경" class="headerlink" title="컬럼순서변경"></a>컬럼순서변경</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명]</span><br><span class="line"><span class="keyword">modify</span> [컬럼명] <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">after</span> [앞에_위치시키고싶은_컬럼명]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="📣-제약조건"><a href="#📣-제약조건" class="headerlink" title="📣 제약조건"></a>📣 제약조건</h1><h2 id="제약조건확인"><a href="#제약조건확인" class="headerlink" title="제약조건확인"></a>제약조건확인</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.table_constraints </span><br><span class="line"><span class="keyword">where</span> TABLE_SCHEMA = [스키마명];</span><br></pre></td></tr></table></figure><h2 id="제약조건-추가-PK"><a href="#제약조건-추가-PK" class="headerlink" title="제약조건 추가(PK)"></a>제약조건 추가(PK)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] </span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> primary <span class="keyword">key</span> [컬럼명];</span><br></pre></td></tr></table></figure><h2 id="제약조건-추가-FK"><a href="#제약조건-추가-FK" class="headerlink" title="제약조건 추가(FK)"></a>제약조건 추가(FK)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] </span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> [제약조건이름] <span class="keyword">foreign</span> <span class="keyword">key</span> [컬럼명] </span><br><span class="line"><span class="keyword">references</span> [부모테이블명] [pk컬럼명] <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span> / <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure><h2 id="제약조건-삭제"><a href="#제약조건-삭제" class="headerlink" title="제약조건 삭제"></a>제약조건 삭제</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [테이블명] <span class="keyword">drop</span> <span class="keyword">constraint</span> [제약조건명];</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="📣-데이터"><a href="#📣-데이터" class="headerlink" title="📣 데이터"></a>📣 데이터</h1><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><ul><li>필드순서와 데이터값의 순서가 일치할때<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 테이블이름</span><br><span class="line"><span class="keyword">VALUES</span> (데이터값<span class="number">1</span>, 데이터값<span class="number">2</span>, 데이터값<span class="number">3</span>, ...)</span><br></pre></td></tr></table></figure></li></ul><ul><li>필드순서와 데이터값의 순서가 불일치할때<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [테이블이름] (필드이름<span class="number">1</span>, 필드이름<span class="number">2</span>, 필드이름<span class="number">3</span>, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (데이터값<span class="number">1</span>, 데이터값<span class="number">2</span>, 데이터값<span class="number">3</span>, ...)</span><br></pre></td></tr></table></figure></li></ul><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [테이블이름]</span><br><span class="line"><span class="keyword">SET</span> [필드이름<span class="number">1</span>]=[데이터값<span class="number">1</span>], [필드이름<span class="number">2</span>]=[데이터값<span class="number">2</span>], ...</span><br><span class="line"><span class="keyword">WHERE</span> [필드이름=데이터값];</span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> [테이블이름]</span><br><span class="line"><span class="keyword">WHERE</span> [필드이름]=[데이터값];</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQL/">MySQL</category>
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2021/05/02/210503MariaDB-SQLQuery/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]백준 2908 상수 풀이(memory와 runtime비교)</title>
      <link>https://sowon-dev.github.io/2021/04/28/210429al-backjoon-2908/</link>
      <guid>https://sowon-dev.github.io/2021/04/28/210429al-backjoon-2908/</guid>
      <pubDate>Wed, 28 Apr 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;상근이의 동생 상수는 수학을 정말 못한다. 상수는 숫자를 읽는데 문제가 있다. 이렇게 수학을 못하는 상수를 위해서 상근이는 수의 크기를 비교하는 문제를 내주었다. 상근이는 세 자리 수 두 개를 칠판에 써주었다. 그 다음에 크기가 큰 수를 말해보라고 했다.&lt;br&gt;상수는 수를 다른 사람과 다르게 거꾸로 읽는다. 예를 들어, 734와 893을 칠판에 적었다면, 상수는 이 수를 437과 398로 읽는다. 따라서, 상수는 두 수중 큰 수인 437을 큰 수라고 말할 것이다.&lt;br&gt;두 수가 주어졌을 때, 상수의 대답을 출력하는 프로그램을 작성하시오.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>상근이의 동생 상수는 수학을 정말 못한다. 상수는 숫자를 읽는데 문제가 있다. 이렇게 수학을 못하는 상수를 위해서 상근이는 수의 크기를 비교하는 문제를 내주었다. 상근이는 세 자리 수 두 개를 칠판에 써주었다. 그 다음에 크기가 큰 수를 말해보라고 했다.<br>상수는 수를 다른 사람과 다르게 거꾸로 읽는다. 예를 들어, 734와 893을 칠판에 적었다면, 상수는 이 수를 437과 398로 읽는다. 따라서, 상수는 두 수중 큰 수인 437을 큰 수라고 말할 것이다.<br>두 수가 주어졌을 때, 상수의 대답을 출력하는 프로그램을 작성하시오.</p><a id="more"></a><ul><li><p><a href="https://www.acmicpc.net/problem/2908">https://www.acmicpc.net/problem/2908</a></p></li><li><p>입출력예시</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">734</span> <span class="number">893</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">437</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><ul><li>memory 11488 runtime 76</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    String[] nums = br.readLine().split(<span class="string">" "</span>);</span><br><span class="line">    String[] convertNum = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">""</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 숫자 거꾸로 만들기</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">char</span>[] originNum = nums[i].toCharArray();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">        convertNum[i] += originNum[j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 최대값구하기 -&gt; 4가지방식을 사용할 수 있다.</span></span><br><span class="line">    <span class="keyword">int</span> max = Integer.parseInt(convertNum[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(max &lt; Integer.parseInt(convertNum[<span class="number">1</span>]))&#123;</span><br><span class="line">      max = Integer.parseInt(convertNum[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="최대값-구하는-방법에-따른-성능-비교"><a href="#최대값-구하는-방법에-따른-성능-비교" class="headerlink" title="최대값 구하는 방법에 따른 성능 비교"></a>최대값 구하는 방법에 따른 성능 비교</h2><p>최대값은 정말 다양한 방식으로 구할 수 있다.<br>메모리와 런타임에 얼마나 영향을 미치는 지 궁금하여 최대값부분만 4가지 방법으로 바꿔서 각각 성능을 비교해보았다.</p><br>### 코드1: 변수1개+if문사용<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최대값구하기</span></span><br><span class="line"><span class="keyword">int</span> max = Integer.parseInt(convertNum[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(max &lt; Integer.parseInt(convertNum[<span class="number">1</span>]))&#123;</span><br><span class="line">  max = Integer.parseInt(convertNum[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><br>### 코드2: 모두 변수로 처리<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최대값구하기</span></span><br><span class="line"><span class="keyword">int</span> num1 = Integer.parseInt(convertNum[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> num2 = Integer.parseInt(convertNum[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(num1 &gt; num2)&#123;</span><br><span class="line">  System.out.println(num1);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  System.out.println(num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>### 코드3: 모두 변수 + 삼항연산자<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최대값구하기</span></span><br><span class="line"><span class="keyword">int</span> num1 = Integer.parseInt(convertNum[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> num2 = Integer.parseInt(convertNum[<span class="number">1</span>]);</span><br><span class="line">System.out.println(num1 &gt; num2 ? num1 : num2);</span><br></pre></td></tr></table></figure><br>### 코드4: 변수사용없이 Math.max()사용<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최대값구하기</span></span><br><span class="line">System.out.println(Math.max(Integer.parseInt(convertNum[<span class="number">0</span>]), Integer.parseInt(convertNum[<span class="number">1</span>])));</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">방법</th><th align="center">memory</th><th align="center">runtime</th></tr></thead><tbody><tr><td align="center">변수1개+if문사용</td><td align="center">11488</td><td align="center">76</td></tr><tr><td align="center">모두 변수로 처리</td><td align="center">11448</td><td align="center">76</td></tr><tr><td align="center">모두 변수 + 삼항연산자</td><td align="center">11540</td><td align="center">76</td></tr><tr><td align="center">변수사용없이 Math.max()사용</td><td align="center">11468</td><td align="center">80</td></tr></tbody></table><p>나머지 방법들은 다 비슷비슷한데 삼항연산자는 메모리를 많이 사용한다는 것을 알 수 있었다. 앞으로 자재해야겠다.<br>한 번만 쓰는 변수는 만들지 않으려고 하는 편인데 변수 처리하니까 오히려 메모리가 조금 개선됨을 알 수 있다.</p><p><br><br><br></p><h2 id="백준의-다른-문제-풀이가-보고싶다면"><a href="#백준의-다른-문제-풀이가-보고싶다면" class="headerlink" title="백준의 다른 문제 풀이가 보고싶다면?"></a>백준의 다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/backjoon">백준 java 풀이 모음</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/28/210429al-backjoon-2908/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MariaDB로 웹과 앱 둘 다 사용가능할까</title>
      <link>https://sowon-dev.github.io/2021/04/26/210427appDB/</link>
      <guid>https://sowon-dev.github.io/2021/04/26/210427appDB/</guid>
      <pubDate>Mon, 26 Apr 2021 23:55:22 GMT</pubDate>
      
      <description>&lt;p&gt;최근 회사에서 팀과제를 받았다. 보통 회사에서 개인과제를 주기마련인데 우리 회사는 통도 크게(?) 팀과제를 주었다.&lt;br&gt;팀원은 신입개발자3명과 디자이너1명이다.&lt;br&gt;팀과제인만큼 규모도 크고 모르는 거 투성이에다가 6월이라는 기간까지 주어져서 마음이 매우 조급했다.&lt;br&gt;기술문서를 읽어봐도 구글링해봐도 감도 안 오고, 모르는 단어 옆에 또 모르는 단어가 있을때 얼마나 스스로가 한심하던지…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>최근 회사에서 팀과제를 받았다. 보통 회사에서 개인과제를 주기마련인데 우리 회사는 통도 크게(?) 팀과제를 주었다.<br>팀원은 신입개발자3명과 디자이너1명이다.<br>팀과제인만큼 규모도 크고 모르는 거 투성이에다가 6월이라는 기간까지 주어져서 마음이 매우 조급했다.<br>기술문서를 읽어봐도 구글링해봐도 감도 안 오고, 모르는 단어 옆에 또 모르는 단어가 있을때 얼마나 스스로가 한심하던지…</p><a id="more"></a><p>나는 아직 한참 부족하구나싶으면서도 어떻게하면 더 빨리 그리고 잘 이해할 수 있을 까를 고민했다.<br>성장은 어떻게 이루어지는 것일까?<br><code>개발자</code>, <code>성장</code>이라는 검색어로 꽤 많은 유튜브와 블로거들의 글을 읽고 또 읽었다.<br>다양한 방법과 경험들이 오갔지만 그들의 경험속에 공통점 한 가지를 발견할 수 있었다.<br>바로 <code>질문하라</code>는 것이다.</p><p>대충 이렇게 쓰는 구나하며 어영부영 넘어가지말고 끝까지 파고 들고 그래도 정 모르겠으면 꼭 선임에게 물어보라고했다.<br>그리고 머리를 치게 만드는 띵언을 들었다.</p><ul><li>“It’s better to look stupid now than remaining stupid forever”</li></ul><p>동기부여가 팍팍되는 명언이었다.<br>혼자 끙끙 거리지말고 도저히 모르겠으면 기초라도 그냥 물어보자 마음먹었다.</p><p><br><br><br></p><h2 id="💬오늘의-대화"><a href="#💬오늘의-대화" class="headerlink" title="💬오늘의 대화"></a>💬오늘의 대화</h2><table><thead><tr><th align="center">팀장님</th><th align="center">나</th></tr></thead><tbody><tr><td align="center"></td><td align="center">팀장님 바쁘시죠…현재 리액트네이티브앱과 웹에서 함께 사용할 수 있는 DB가 필요한데요. 마리아DB로 잡고 스키마짜고있는데 구글링해보니 앱은 Realm, SQLLITE, firebase같은 DB를 사용해야한다고해서요. 마리아DB는 사용할 수 없는건가요?</td></tr><tr><td align="center">음 시나리오에 따라 달리 사용하는 거예요. API만들거니까 마리아DB를 사용해도 됩니다.</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">웹은 DB → API → 웹으로 데이터를 주고받는 건 아는데 앱도 동일 할 수 있나요?</td></tr><tr><td align="center">그럼요 DB → API → 웹/앱 가능합니다.</td><td align="center"></td></tr></tbody></table><p><br><br><br></p><h2 id="✍️배움포인트"><a href="#✍️배움포인트" class="headerlink" title="✍️배움포인트"></a>✍️배움포인트</h2><p>완전 기초라도 도저히 감이 안 잡히면 물어보자!<br>하루종일 구글링했던 얽히고 설킨 토막 지식들이 팀장님과의 1분대화로 한 방에 촤르륵 순서대로 정리되었다.<br>역시 물어보길 잘했어.</p><table><thead><tr><th align="center">리액트네이티브</th><th align="center"></th><th align="center">FE: 리액트</th></tr></thead><tbody><tr><td align="center">↘↖</td><td align="center">스프링부트 RESTAPI</td><td align="center">↗↙</td></tr><tr><td align="center"></td><td align="center">↕</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">MariaDB</td><td align="center"></td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/26/210427appDB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Hexo]헥소블로그 구글애드센스설정(초간단)</title>
      <link>https://sowon-dev.github.io/2021/04/25/210426hexoblog-googleAdSense/</link>
      <guid>https://sowon-dev.github.io/2021/04/25/210426hexoblog-googleAdSense/</guid>
      <pubDate>Sun, 25 Apr 2021 17:08:55 GMT</pubDate>
      
      <description>&lt;p&gt;Hexo 블로그에 구글애드센스를 설정해보자. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Hexo 블로그에 구글애드센스를 설정해보자. </p><a id="more"></a><h1 id="구글애드센스-가입"><a href="#구글애드센스-가입" class="headerlink" title="구글애드센스 가입"></a>구글애드센스 가입</h1><p><a href="https://www.google.co.kr/intl/ko_kr/adsense/start/?utm_campaign=1001272-adsense-acquisition-kr-ko-hybrid-bkws">구글애드센스</a>에서 시작하기 버튼을 클릭한 뒤 아래 정보를 입력한다.</p><ul><li>웹사이트: 자신의 헥소 블로그 주소 </li><li>이메일주소: 자신의 구글 이메일주소</li></ul><p>저장하고 계속하기를 클릭하면 구글 애드센스 코드를 입력하라는 안내메세지가 나온다.<br>여기서 클라이언트ID를 복사한다.<br>참고로 client_id는 ‘ca-알파벳세글자-숫자여러개’로 구성된다.</p><p><br><br><br></p><h1 id="헥소블로그에-구글애드센스-아이디-넣기"><a href="#헥소블로그에-구글애드센스-아이디-넣기" class="headerlink" title="헥소블로그에 구글애드센스 아이디 넣기"></a>헥소블로그에 구글애드센스 아이디 넣기</h1><p>블로그 프로젝트에서 <code>_config.yml</code>를 연다. 혹시나 <code>_config.yml</code>이 두 개인 경우 사용하는 테마내의 <code>_config.yml</code>를 열어주면 된다.<br>헷갈릴 경우 <code>_config.yml</code> 둘 다 연뒤 <code>AdSense</code> 키워드로 검색해서 검색결과가 있는 <code>_config.yml</code>를 찾으면 된다.<br>복사해둔 클라이언트ID를 작은 따옴표 안에 붙여넣고 DEPLOY해준다.<br>구글봇이 내 블로그가 구글애드센스에 적합한지 체크를 한 뒤 구글애드센스를 이용할 수 있다. 이 과정은 최대 2주일정도 소요된다고한다.<br>나는 5일정도 걸렸다. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Google AdSense unit configurations</span><br><span class="line">-</span><br><span class="line"># Where should the widget be placed, left sidebar or right sidebar</span><br><span class="line">position: left</span><br><span class="line">type: adsense</span><br><span class="line"># AdSense client ID</span><br><span class="line">client_id: '웹게시자 ID입력' </span><br><span class="line"># AdSense AD unit ID</span><br><span class="line">slot_id: '고객 ID입력'</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="slot-id넣기"><a href="#slot-id넣기" class="headerlink" title="slot_id넣기"></a>slot_id넣기</h1><p>구글 애드센스가 정상적으로 등록되었다면 <a href="https://www.google.co.kr/intl/ko_kr/adsense/start/?utm_campaign=1001272-adsense-acquisition-kr-ko-hybrid-bkws">구글 애드센스</a>에서 로그인하면 대시보드를 볼 수 있다.<br>여기서 [계정] - [계정정보]를 클릭하면 웹게시자ID와 고객 ID를 확인할 수 있다.<br>이때 고객 ID를 복사 한뒤 사용하는 테마내의 <code>_config.yml</code>를 열고 slot_id의 작은 따옴표 안에 붙여넣는다.<br>slot_id는 오로지 숫자여러개로 구성되어있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Google AdSense unit configurations</span><br><span class="line">-</span><br><span class="line"># Where should the widget be placed, left sidebar or right sidebar</span><br><span class="line">position: left</span><br><span class="line">type: adsense</span><br><span class="line"># AdSense client ID</span><br><span class="line">client_id: '웹게시자 ID입력'</span><br><span class="line"># AdSense AD unit ID</span><br><span class="line">slot_id: '고객 ID입력'</span><br></pre></td></tr></table></figure><p>이렇게 설정하면 끝!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Hexo/">Hexo</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/25/210426hexoblog-googleAdSense/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
