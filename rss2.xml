<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Thu, 23 Sep 2021 14:08:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[JPA/MariaDB]Entity에 복합키와 FK 제약조건 넣기</title>
      <link>https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/</link>
      <guid>https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/</guid>
      <pubDate>Wed, 15 Sep 2021 21:58:53 GMT</pubDate>
      
      <description>&lt;p&gt;JPA에서 복합키에서 식별관계를 매핑 즉, 복합키를 설정한 뒤 복합키 중 하나는 FK조건을 걸어보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA에서 복합키에서 식별관계를 매핑 즉, 복합키를 설정한 뒤 복합키 중 하나는 FK조건을 걸어보자.</p><a id="more"></a><p>만들고 싶은 테이블은 아래와 같이 3개이다<br><img src="/img/210915commoncodegrup3.PNG" alt=""></p><h2 id="1-reviewEntity-생성"><a href="#1-reviewEntity-생성" class="headerlink" title="1 reviewEntity 생성"></a>1 reviewEntity 생성</h2><p>먼저 중심이 되는 review테이블을 생성한다.<br>날짜는 다른 곳에서 자주 사용하므로 TimeEntity를 따로 생성했다.</p><ul><li>ReviewEntity.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"review"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="comment">// XXX 자바빈즈 패턴</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED) <span class="meta">@AllArgsConstructor</span> <span class="comment">// XXX 생성자 패컨</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewEntity</span> <span class="keyword">extends</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">// 게시글 번호</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"shots"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> shots;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"shot_date"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalDate shotDate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"vaccine_type_code"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String vaccineTypeCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"content"</span>) <span class="comment">// 접종후기</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TimeEntity.java<br>@MappedSuperclass는 테이블로 매핑하지 않고 자식 entity에게 매핑정보를 상속하는 에노테이션이다.<br>@EntityListeners(AuditingEntityListener.class)은 JPA에게 해당 Entity는 auditing기능을 사용한다고 알리는 에노테이션이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_at"</span>, updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createAt; <span class="comment">//게시글 작성일</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_at"</span>)</span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateAt; <span class="comment">//게시글 수정일</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="2-SymptomEntity-생성"><a href="#2-SymptomEntity-생성" class="headerlink" title="2 SymptomEntity 생성"></a>2 SymptomEntity 생성</h2><ul><li>SymptomEntity.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"symptom"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED) <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@IdClass</span>(SymptomId<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SymptomEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// XXX 연관관계의 주인은 FK(외래키)가 명시된 Entity클래스로 설정</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"review_id"</span>)</span><br><span class="line"><span class="keyword">private</span> ReviewEntity reviewId; <span class="comment">//게시글 번호</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"symptom_code"</span>)</span><br><span class="line"><span class="keyword">private</span> String symptomCode; <span class="comment">//증상코드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h3 id="1-외래키"><a href="#1-외래키" class="headerlink" title="1 외래키"></a>1 외래키</h3><p>reviewEntity와 SymptomEntity는 1대다의 관계이다.<br>FK로 연관관계를 맺을때는 누가 주인이 될지를 고민해봐야한다.<br>해당 고민을 도와줄 포스팅은 <a href="https://siyoon210.tistory.com/27">siyoon210님 - JPA Entity간의 연관관계(방향) 설정하기</a>를 참조하면 된다.</p><p>나는 FK가 걸리는 테이블을 주인으로 삼았다. 그래야 연관관계의 주인이 되어 오류없이 수정 및 삭제가 가능하기 때문이다. </p><ol><li>@ManyToOne: symptom클래스와 review클래스는 다 대 1의 관계에 해당하는 어노테이션을 달아주었다.</li><li>@JoinColumn(name=”review_id”): FK로 매핑을 해주는 어노테이션이다. name속성의 구성은 <code>테이블명_컬럼명</code>이다. 즉, 여기선 review테이블의 id를 FK로 삼겠다는 의미이다.</li></ol><p><br><br><br></p><h3 id="2-복합키"><a href="#2-복합키" class="headerlink" title="2 복합키"></a>2 복합키</h3><ol><li>@IdClass(SymptomId.class): 복합키를 설정하는 어노테이션이다. 복합키를 매핑하기 위해 식별자 클래스(여기선 SymptomId.class)를 별도로 만들어야 한다.이는 아래에서 자세히 설명하겠다.</li><li>복합키를 설정하는 곳에 동일하게 @Id를 붙여준다. 나는 모든 필드가 복합키를 주고싶으므로 둘 다 @Id 를 달아줬다.</li></ol><p><br><br><br></p><h2 id="3-SymptomId-생성"><a href="#3-SymptomId-생성" class="headerlink" title="3 SymptomId 생성"></a>3 SymptomId 생성</h2><p>복합키를 매핑하기 위해 식별자 클래스를 별도로 만들어야 한다.</p><ul><li>식별자 클래스의 필수 조건 5가지<ol><li>필드명 일치</li><li>Serializable 인터페이스구현</li><li>equals, hashcode 구현</li><li>기본생성자 필요</li><li>식별자 클래스는 public이어야함</li></ol></li></ul><p>이제 식별자 클래스 코드를 보자.</p><ul><li>SymptomId.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymptomId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long reviewId;</span><br><span class="line"><span class="keyword">private</span> String symptomCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>이 구조를 파악하기위해 꼬박 하루가 걸렸다. 특히 FK키 에러가 발생해서 2시간이나 써버렸다. 해당 내용은 <a href="https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/">[JPA: errno: 150 Foreign key constraint is incorrectly formed 해결방법]</a> 포스팅에 상세히 적어두었다.<br>그냥 바로 DDL구문으로 생성했다면 훨씬 빨랐겠지만 JPA만을 이용하여 생성하려니 여간 답답한게 아니었다. 기본으로 알아야하는 지식들도 많아서 시간이 오래걸렸다.<br>시간이 오래 걸린만큼 기초가 확실해진 느낌이다.<br>가장 큰 힘이 된 것은 바로 구글링도 포스팅도 아닌 바로 책 <a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9788960777330">김영한지음 - 자바 ORM 표준 JPA 프로그래밍</a>이었다.<br>처음에는 무슨소리인지 도저히 모르겠다😵‍💫였는데 이제는 확실히 알겠다.<br>역시 하다보면 된다.<br>이런게 학습의 기쁨일까?! 알고나니 JPA가 더 재밌다😁<br>더이상 복합키와 FK키 두렵지 않다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA/MariaDB]errno: 150 Foreign key constraint is incorrectly formed 해결방법</title>
      <link>https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/</link>
      <guid>https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/</guid>
      <pubDate>Wed, 15 Sep 2021 21:16:32 GMT</pubDate>
      
      <description>&lt;p&gt;MariaDB와 JPA로 복합키이면서 그 중 하나는 FK인 테이블을 만들고 싶었는데 계속해서 FK 에러가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MariaDB와 JPA로 복합키이면서 그 중 하나는 FK인 테이블을 만들고 싶었는데 계속해서 FK 에러가 발생했다.</p><a id="more"></a><p><img src="/img/210915commoncodegrup3.PNG" alt=""></p><p>위 ERD와 같이 symptom테이블을 만들고 싶었다.<br>모든 키가 복합키이면서 review_id키는 FK 제약조건을 걸고싶었다.<br>create해서 테이블은 잘 생성되지만 FK를 걸다가 에러를 발생했다.</p><ul><li>에러코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: <span class="function">alter table symptom add constraint FKct400cemwq2cjh9mdfusfieko foreign <span class="title">key</span> <span class="params">(review_id)</span> references <span class="title">review</span> <span class="params">(id)</span></span></span><br><span class="line"><span class="function">GenerationTarget encountered exception accepting command : Error executing DDL "alter table symptom add constraint FKct400cemwq2cjh9mdfusfieko foreign <span class="title">key</span> <span class="params">(review_id)</span> references <span class="title">review</span> <span class="params">(id)</span>" via JDBC Statement</span></span><br><span class="line"><span class="function">org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "alter table symptom add constraint FKct400cemwq2cjh9mdfusfieko foreign <span class="title">key</span> <span class="params">(review_id)</span> references <span class="title">review</span> <span class="params">(id)</span>" via JDBC Statement</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">(중략)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Caused by: java.sql.SQLTransientConnectionException: <span class="params">(conn=<span class="number">115300</span>)</span> Can't create table `boostshot`.`symptom` <span class="params">(errno: <span class="number">150</span> <span class="string">"Foreign key constraint is incorrectly formed"</span>)</span></span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="에러-150을-해결하는-방법-4가지"><a href="#에러-150을-해결하는-방법-4가지" class="headerlink" title="에러 150을 해결하는 방법 4가지"></a>에러 150을 해결하는 방법 4가지</h2><p>아래 4가지 조건에 부합해야한다.</p><ol><li>데이터 타입이 일치해야 함</li><li>NOT NULL or NULL 여부가 동일해야 함</li><li>참조받는 데이터가 unique key / primary key 이어야함</li><li>두 테이블의 charset 이 같아야함</li></ol><p>참고 포스팅 : <a href="https://box0830.tistory.com/211">박스님 - errno: 150 “Foreign key constraint is incorrectly formed</a></p><p><br><br><br></p><h2 id="기존-테이블"><a href="#기존-테이블" class="headerlink" title="기존 테이블"></a>기존 테이블</h2><p><img src="/img/210916jpafkerror1.PNG" alt=""></p><p>위 4가지 조건에서 1번과 4번조건이 부합하지않는다.</p><ol><li>데이터 타입이 BIGINT와 VARCHAR임</li><li>조합이 UTF-8 한쪽만 설정되어 있음</li></ol><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>복합키를 위해 생성한 클래스에서 데이터 타입이 잘못 지정되어있었다.<br>String타입을 Long타입으로 변경하여 일치 시켜주니 정상 작동했다!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymptomId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 기존 </span></span><br><span class="line"><span class="comment">// private String reviewId; </span></span><br><span class="line"><span class="comment">// 변경: String -&gt; Long</span></span><br><span class="line"><span class="keyword">private</span> Long reviewId;</span><br><span class="line"><span class="keyword">private</span> String symptomCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>정상작동한 테이블 모습</li></ul><p><img src="/img/210916jpafkerror2.PNG" alt=""></p><p>여담이지만 이 별것도 아닌 에러를 가지고 2시간이나쓰고 그것도 모자라서 과장님께 한번만 도와달라고 부탁까지했다.<br>과장님은 단 5분만에 데이터 타입이 다른 것을 찾아주셨다…그저 빛🌞<br>역시 물어보길 잘했다. 완벽하게 이해했기때문에 이 에러는 다시는 만나지 않을 것 같다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>에러부분 말고 전체 코드는 <a href="https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/">JPA: Entity에 복합키와 FK 제약조건 넣기</a> 포스팅에서 확인할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[DB설계]공통코드는 어떻게 만들까?(예시)</title>
      <link>https://sowon-dev.github.io/2021/09/14/210915DB-commonCodeGrup/</link>
      <guid>https://sowon-dev.github.io/2021/09/14/210915DB-commonCodeGrup/</guid>
      <pubDate>Tue, 14 Sep 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;회사에서 스터디를 진행하고있다. 스터디속에 부장님의 특급 강의도 함께 있어서 정말 많이 배우고있다.&lt;br&gt;스터디 넘 재밌다!!!&lt;br&gt;스터디동안에 각자 만들 사이트를 하나씩 정했다. 나는 백신후기웹사이트!!&lt;br&gt;DB설계를 보여드리고 피드백은 받았다.  &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>회사에서 스터디를 진행하고있다. 스터디속에 부장님의 특급 강의도 함께 있어서 정말 많이 배우고있다.<br>스터디 넘 재밌다!!!<br>스터디동안에 각자 만들 사이트를 하나씩 정했다. 나는 백신후기웹사이트!!<br>DB설계를 보여드리고 피드백은 받았다.  </p><a id="more"></a><h2 id="내가-작성한-리뷰테이블"><a href="#내가-작성한-리뷰테이블" class="headerlink" title="내가 작성한 리뷰테이블"></a>내가 작성한 리뷰테이블</h2><p><img src="/img/210915commoncodegrup1.PNG" alt=""></p><p>내가 처음 작성한 리뷰테이블이다.<br>백신종류와 6가지정도 되는 증상이 함께 들어가 있다.</p><ul><li>백신종류</li></ul><table><thead><tr><th align="center">백신종류</th><th align="center">값</th></tr></thead><tbody><tr><td align="center">AZ</td><td align="center">아스트라제네카</td></tr><tr><td align="center">DO</td><td align="center">모더나</td></tr><tr><td align="center">PH</td><td align="center">화이자</td></tr><tr><td align="center">JA</td><td align="center">얀센</td></tr></tbody></table><ul><li>증상(강도보단 유무를 받기로 함)<ol><li>발열유무</li><li>통증(근육통,두통,몸살)유무</li><li>기침유무</li><li>부정출혈유무</li><li>오한유무</li><li>설사유무</li></ol></li></ul><p>이렇게 내가 짠 프로그램을 설명드리니 부장님은 아래와 같은 피드백을 주셨다.</p><blockquote><p>💬 부장님: 공통코드로 만들어보세요</p></blockquote><p><br><br><br></p><h2 id="공통코드"><a href="#공통코드" class="headerlink" title="공통코드?"></a>공통코드?</h2><p>공통코드란 데이터 속성에 사용되는 공통적인 값을 코드로 표현하는 것이다.<br>공통코드를 사용하면 좋은 장점은 무엇일까?</p><ul><li>공통코드 장점<ol><li>데이터 유연성: 현재 4개의 백신종류에서 추가 승인 받은 백신이 생겼다면? 공통코드에서는 코드 하나만 추가하면 끝이기때문에 유연성이 높다. </li><li>데이터 명칭의 일관성: <code>아스트라제네카</code>를 누군가는 <code>아스트라 제네카</code>라고 띄어 쓸 수 도 있다. 코드를 통해 명칭의 일관성을 유지하여 데이터 정합성을 높일 수 있다.</li></ol></li></ul><p><br><br><br></p><h2 id="내가-작성한-공통코드-테이블"><a href="#내가-작성한-공통코드-테이블" class="headerlink" title="내가 작성한 공통코드 테이블"></a>내가 작성한 공통코드 테이블</h2><p><img src="/img/210915commoncodegrup2.PNG" alt=""></p><p>열심히 구글링해서 아래와 같이 공통코드를 구성해보았다. 아래와 같은 궁금증이 생겼다.</p><ul><li>의문점 <ol><li>백신타입을 공통코드로 써야하는 이유가 뭘까? 어차피 한 컬럼에 한 개의 값만 들어가는데..굳이..</li><li>공통코드를 사용한다면 증상이 1개 이상 있는 사람은 어떻게 db에 넣지? -&gt; 리뷰테이블에서 증상부분들을 하나로 합치고 Varchar값으로 콤마로 구분해서 넣을까? -&gt; 그럼 어떻게 보여주지? 보여줄땐 split해서 보여주면 될까?</li></ol></li></ul><p>고민하다가 팀장님께 물어봤는데 바로 해결책을 알려주셨다.<br>팀장님은 역시 천재…빛과 소금😀</p><p><br><br><br></p><h2 id="😎-의문점에-대한-팀장님의-명쾌한-조언"><a href="#😎-의문점에-대한-팀장님의-명쾌한-조언" class="headerlink" title="😎 의문점에 대한 팀장님의 명쾌한 조언"></a>😎 의문점에 대한 팀장님의 명쾌한 조언</h2><blockquote><p>💬 김팀장님:<br>테이블은 성격이 다른 컬럼은 다른 테이블로 나누어야합니다.<br>현재 리뷰테이블은 성격이 다른 컬럼들이 한 곳에 모여있어서 여러 의문점이 생기신 것 같아요.<br>컬럼의 성격에 따라 분류해보세요<br>증상은 성격이 다르니까 다른 테이블로 뺀 뒤 reviewId와 함께 PK를 걸면 좋을거예요. 일대다의 관계.<br>공통코드테이블을 위처럼 작성하면 명칭이 헷갈릴 수 있어요. 코드그룹, 코드, 코드명, 사용여부, 정렬순번을 기본적으로 사용하는 게 어때요?</p></blockquote><p><br><br><br></p><h2 id="공통코드-테이블"><a href="#공통코드-테이블" class="headerlink" title="공통코드 테이블"></a>공통코드 테이블</h2><p>내가 고민했던 모든 것은 테이블을 다시 설계하면 다 해결되는 문제였다!<br>팀장님의 조언을 토대로 테이블을 다시 나누었다.</p><p><img src="/img/210915commoncodegrup3.PNG" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/DB%EC%84%A4%EA%B3%84/">DB설계</category>
      
      
      <comments>https://sowon-dev.github.io/2021/09/14/210915DB-commonCodeGrup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] @Autowired보다 생성자 주입을 사용해야하는 이유</title>
      <link>https://sowon-dev.github.io/2021/09/09/210910Jpa-autowiredVSconstructorInjection/</link>
      <guid>https://sowon-dev.github.io/2021/09/09/210910Jpa-autowiredVSconstructorInjection/</guid>
      <pubDate>Thu, 09 Sep 2021 16:25:47 GMT</pubDate>
      
      <description>&lt;p&gt;MVC패턴 스프링프로젝트에서 Controller에서 Service를 의존성 주입할때 대부분 @Autowired로 필드주입을 한다.&lt;br&gt;하지만 JPA를 사용하는 경우 @Autowired 필드 주입보다는 생성자 주입 사용을 권장한다.&lt;br&gt;그 이유가 무엇인지 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MVC패턴 스프링프로젝트에서 Controller에서 Service를 의존성 주입할때 대부분 @Autowired로 필드주입을 한다.<br>하지만 JPA를 사용하는 경우 @Autowired 필드 주입보다는 생성자 주입 사용을 권장한다.<br>그 이유가 무엇인지 알아보자.</p><a id="more"></a><h2 id="필드-주입-Field-Injection-이란"><a href="#필드-주입-Field-Injection-이란" class="headerlink" title="필드 주입(Field Injection)이란?"></a>필드 주입(Field Injection)이란?</h2><p>사용법이 매우 간단하여 많은 개발자들이 사용한다. 필드에 @Autowired만 붙여주면 끝!<br>해당 필드에 자동으로 의존성이 주입된다.</p><ul><li>ApiController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line">NoticeService noticeService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="생성자-주입-Constructor-Injection-이란"><a href="#생성자-주입-Constructor-Injection-이란" class="headerlink" title="생성자 주입(Constructor Injection)이란?"></a>생성자 주입(Constructor Injection)이란?</h2><p>생성자로 의존성을 주입한다. 방법은 총 두가지이다.</p><h3 id="첫번째-방법-정석"><a href="#첫번째-방법-정석" class="headerlink" title="첫번째 방법: 정석"></a>첫번째 방법: 정석</h3><ul><li>ApiController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line">NoticeRepository noticeRepository;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiController</span><span class="params">(NoticeRepository noticeRepository)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.noticeRepository = noticeRepository;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h3 id="두번째-방법-RequiredArgsConstructor-final사용"><a href="#두번째-방법-RequiredArgsConstructor-final사용" class="headerlink" title="두번째 방법: @RequiredArgsConstructor + final사용"></a>두번째 방법: @RequiredArgsConstructor + final사용</h3><p>위의 방법을 쉽게 할 수 있는 스프링프레임워크의 어노테이션이 있다!<br>바로 @RequiredArgsConstructor를 넣은 뒤 필드를 final로 선언해주면 된다.</p><ul><li>ApiController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NoticeRepository noticeRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="스프링팀에서-쉬운-필드-주입보다-생성자-주입은-권장하는-이유는"><a href="#스프링팀에서-쉬운-필드-주입보다-생성자-주입은-권장하는-이유는" class="headerlink" title="스프링팀에서 쉬운 필드 주입보다 생성자 주입은 권장하는 이유는?"></a>스프링팀에서 쉬운 필드 주입보다 생성자 주입은 권장하는 이유는?</h2><ol><li>순환참조 방지해서 애플리케이션이 뻗어버리는 걸 방지</li><li>final선언이 가능해서 불변성 확보</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/09/09/210910Jpa-autowiredVSconstructorInjection/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[GIT]`git add .` 와 `git add *` 차이</title>
      <link>https://sowon-dev.github.io/2021/09/08/210909GIT-add-VSadd/</link>
      <guid>https://sowon-dev.github.io/2021/09/08/210909GIT-add-VSadd/</guid>
      <pubDate>Wed, 08 Sep 2021 14:14:28 GMT</pubDate>
      
      <description>&lt;p&gt;간단한 내용이지만 적어두지않으면 잊어버리기 쉽다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>간단한 내용이지만 적어두지않으면 잊어버리기 쉽다.</p><a id="more"></a><h2 id="git-add-와-git-add-차이"><a href="#git-add-와-git-add-차이" class="headerlink" title="git add . 와 git add * 차이"></a><code>git add .</code> 와 <code>git add *</code> 차이</h2><ul><li><code>git add .</code>: .gitignore에 기재된 것 고려하여 모두 추가</li><li><code>git add *</code>: .gitignore에 기재된 것 상관없이 모두 추가</li></ul><p>따라서 <code>git add .</code>를 사용하자.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Version-control/">Version control</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/git/">git</category>
      
      
      <comments>https://sowon-dev.github.io/2021/09/08/210909GIT-add-VSadd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[디자인패턴]생성패턴의 종류와 빌더패턴을 사용해야하는 이유</title>
      <link>https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/</link>
      <guid>https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/</guid>
      <pubDate>Mon, 06 Sep 2021 22:37:50 GMT</pubDate>
      
      <description>&lt;p&gt;JPA 테스트코드를 공부하면서 패턴에 대해 궁금해졌다.&lt;br&gt;DTO를 Entity로 변경할 때 주로 3가지 생성 패턴이 쓰인다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA 테스트코드를 공부하면서 패턴에 대해 궁금해졌다.<br>DTO를 Entity로 변경할 때 주로 3가지 생성 패턴이 쓰인다.</p><a id="more"></a><p>각각의 장단점을 함께 살펴보고 JPA에 적합한 패턴이 무엇인지 찾아보자<br>아래 엔티티 예시를 통해 패턴을 적용하는 방법이다.</p><h2 id="ReviewEntity-java"><a href="#ReviewEntity-java" class="headerlink" title="ReviewEntity.java"></a>ReviewEntity.java</h2><p>아래 코드 주석으로 적어놓았다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"review"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="comment">// XXX 자바빈즈 패턴</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED) <span class="meta">@AllArgsConstructor</span> <span class="comment">// XXX 생성자 패컨</span></span><br><span class="line"><span class="meta">@Builder</span>(builderMethodName = <span class="string">"ReviewEntityBuilder"</span>)<span class="comment">// XXX 빌드 패턴</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewEntity</span> <span class="keyword">extends</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"게시글 번호"</span>)</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"이메일"</span>, example = <span class="string">"example@example.com"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"내용"</span>, example = <span class="string">"심장이 떨렸습니다."</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>자바빌드패턴: @Getter @Setter</li><li>생성자패턴: @NoArgsConstructor, @AllArgsConstructor</li><li>빌더패턴: @Builder(builderMethodName = “ReviewEntityBuilder”)</li></ol><p>위 코드에서 빌더 패턴만 사용하기 위해 builder 메서드를 추가하면 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"review"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Builder</span>(builderMethodName = <span class="string">"ReviewEntityBuilder"</span>) <span class="comment">// 빌드 패턴</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewEntity</span> <span class="keyword">extends</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"게시글 번호"</span>)</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"이메일"</span>, example = <span class="string">"example@example.com"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"내용"</span>, example = <span class="string">"심장이 떨렸습니다."</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReviewEntityBuilder <span class="title">builder</span><span class="params">(ReviewDto dto)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReviewEntityBuilder()</span><br><span class="line">    .id(dto.getId())</span><br><span class="line">    .email(dto.getEmail())</span><br><span class="line">    .age(dto.getAge())</span><br><span class="line">    .gender(dto.getGender())</span><br><span class="line">    .vaccineType(dto.getVaccineType())</span><br><span class="line">    .shotDate(dto.getShotDate())</span><br><span class="line">    .shots(dto.getShots())</span><br><span class="line">    .fever(dto.getFever())</span><br><span class="line">    .ache(dto.getAche())</span><br><span class="line">    .sneeze(dto.getSneeze())</span><br><span class="line">    .bleeding(dto.getBleeding())</span><br><span class="line">    .chills(dto.getChills())</span><br><span class="line">    .diarrhea(dto.getDiarrhea())</span><br><span class="line">    .content(dto.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>객체를 생성하는 대부분의 경우에는 빌더 패턴을 적용하는 것이 좋다.<br>생성자패턴보다 가독성을 높이고 휴먼에러를 줄일 수 있으며 인수 확장에 용이하기 때문이다.</p><p>가독성이 좋다고? 코드가 길어지기만 하던데? 하며 의아해할 수 있지만 예시를 보는 순간 한방에 이해할 수 있다.<br>가독성예시를 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 생성자패턴</span><br><span class="line">User user &#x3D; new User(&quot;홍길동&quot;, 22, 1, 5000);</span><br></pre></td></tr></table></figure><p>생성자를 이용하여 객체를 생성한 위의 코드에서는 숫자 22, 1, 3000이 어떤 인자를 나타내는 지 알기 어렵다.<br>만약 빌더패턴을 사용한다면?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 빌더패턴</span><br><span class="line">User user &#x3D; User.builder()</span><br><span class="line">.name(&quot;홍길동&quot;) </span><br><span class="line">.age(22) </span><br><span class="line">.yearOfExperience(1) </span><br><span class="line">.salary(5000)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><p>이렇듯 어떤 인수인지 한 눈에 확인 가능하다.</p><br>빌더 패턴을 사용하면 좋은 경우<ol><li>인자들이 최소 4개이상으로 많은 경우</li><li>선택적 인자들이 많은 경우</li><li>앞으로 추가될 인자들이 많은 경우</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/">디자인패턴</category>
      
      
      <comments>https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] Entity VS DTO</title>
      <link>https://sowon-dev.github.io/2021/09/06/210907Jpa-entityVSDto/</link>
      <guid>https://sowon-dev.github.io/2021/09/06/210907Jpa-entityVSDto/</guid>
      <pubDate>Mon, 06 Sep 2021 22:08:00 GMT</pubDate>
      
      <description>&lt;p&gt;JPA프로젝트를 구글링하다보면 Entity와 DTO를 필드가 똑같은데 나눠서 작성한다.&lt;br&gt;왜 그렇게 해야할까?&lt;br&gt;Entity 클래스를 데이터베이스와 맞닿은 핵심 클래스로 Request/Response 클래스로 사용하면 안되기 때문이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA프로젝트를 구글링하다보면 Entity와 DTO를 필드가 똑같은데 나눠서 작성한다.<br>왜 그렇게 해야할까?<br>Entity 클래스를 데이터베이스와 맞닿은 핵심 클래스로 Request/Response 클래스로 사용하면 안되기 때문이다.</p><a id="more"></a><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>builder메서드를 통해서 DTO를 entity로 변환할 수 있다.<br>참고로 @ApiModelProperty는 swagger와 관련된 어노테이션으로 JPA와 관련이 없으므로 무시해도 된다.</p><ul><li>ReviewEntity.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"board"</span>) <span class="comment">// 자동으로 DB테이블을 생성해준다. JPA사랑해...</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="comment">// XXX 자바빈즈 패턴</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED) <span class="meta">@AllArgsConstructor</span> <span class="comment">// XXX 생성자 패컨</span></span><br><span class="line"><span class="meta">@Builder</span>(builderMethodName = <span class="string">"ReviewEntityBuilder"</span>)<span class="comment">// XXX 빌드 패턴</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewEntity</span> <span class="keyword">extends</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"게시글 번호"</span>)</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"이메일"</span>, example = <span class="string">"example@example.com"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"게시글내용"</span>, example = <span class="string">"심장이 떨렸습니다."</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReviewEntityBuilder <span class="title">builder</span><span class="params">(ReviewDto dto)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReviewEntityBuilder()</span><br><span class="line">    .id(dto.getId())</span><br><span class="line">    .email(dto.getEmail())</span><br><span class="line">    .content(dto.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Dto"><a href="#Dto" class="headerlink" title="Dto"></a>Dto</h2><ul><li>ReviewDto.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="컨트롤러에서는-뭘-받아야할까-DTO-ENTITY"><a href="#컨트롤러에서는-뭘-받아야할까-DTO-ENTITY" class="headerlink" title="컨트롤러에서는 뭘 받아야할까? DTO? ENTITY?"></a>컨트롤러에서는 뭘 받아야할까? DTO? ENTITY?</h2><p>컨트롤러에선 DTO로 받아야하며 서비스단에서 ENTITY로 변환 후 DB에 전달하면 된다.</p><p><img src="https://gmlwjd9405.github.io/images/spring-framework/spring-package-flow.png" alt="https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html"></p><p><br><br><br></p><h2 id="Entity-클래스와-DTO-클래스를-분리하는-이유"><a href="#Entity-클래스와-DTO-클래스를-분리하는-이유" class="headerlink" title="Entity 클래스와 DTO 클래스를 분리하는 이유"></a>Entity 클래스와 DTO 클래스를 분리하는 이유</h2><ul><li>View Layer와 DB Layer의 역할을 철저하게 분리하기 위해</li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html">https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html</a></li><li><a href="https://velog.io/@swchoi0329/Spring-Boot%EC%97%90%EC%84%9C-JPA-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">https://velog.io/@swchoi0329/Spring-Boot%EC%97%90%EC%84%9C-JPA-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/09/06/210907Jpa-entityVSDto/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>불안할때는</title>
      <link>https://sowon-dev.github.io/2021/08/31/210901insecure/</link>
      <guid>https://sowon-dev.github.io/2021/08/31/210901insecure/</guid>
      <pubDate>Tue, 31 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 팀장님이 좋은 말씀을 해주셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 팀장님이 좋은 말씀을 해주셨다.</p><a id="more"></a><p><em>불안할떄는 뭐든 준비를 해놓는게 제일 안심이 될겁니다</em></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/08/31/210901insecure/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ngrok를 아시나요?</title>
      <link>https://sowon-dev.github.io/2021/08/31/210831ngrok/</link>
      <guid>https://sowon-dev.github.io/2021/08/31/210831ngrok/</guid>
      <pubDate>Tue, 31 Aug 2021 04:25:18 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 팀장님이 되게 흥미로운 프로그램을 알려주셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 팀장님이 되게 흥미로운 프로그램을 알려주셨다.</p><a id="more"></a><p>바로<a href="https://ngrok.com/">https://ngrok.com/</a>이다.</p><h2 id="ngrok란"><a href="#ngrok란" class="headerlink" title="ngrok란"></a>ngrok란</h2><p>외부에서 로컬 접근을 가능하게 만들 수 있는 프로그램이다.<br>어떨때 주로 사용할까?<br>내 로컬에서 외부로 리다이렉트받을때 사용할 수 있다.</p><p><br><br><br></p><h2 id="외부에서-로컬-접근을-왜-해"><a href="#외부에서-로컬-접근을-왜-해" class="headerlink" title="외부에서 로컬 접근을 왜 해?"></a>외부에서 로컬 접근을 왜 해?</h2><p>웹훅을 사용하게 된다면 필수로 필요한 기능이다.<br>웹훅이 무엇인지는 아래 한 장의 이미지로 정리할 수 있다.</p><p><img src="https://miro.medium.com/max/1400/1*WStVIykpS0sKLD2IFOxJUA.png" alt="https://simsimjae.medium.com/%EC%9B%B9%ED%9B%85%EC%9D%B4%EB%9E%80-e41cf1ba92f0"></p><p>방화벽넘어 외부에서 로컬에 접속 가능하게 하는 터널프로그램이다.<br>아래 명령어로 간단히 실행할 수 있다!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http 포트번호</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/31/210831ngrok/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>호스팅 용어 차이</title>
      <link>https://sowon-dev.github.io/2021/08/29/210828hosting/</link>
      <guid>https://sowon-dev.github.io/2021/08/29/210828hosting/</guid>
      <pubDate>Sun, 29 Aug 2021 05:54:12 GMT</pubDate>
      
      <description>&lt;p&gt;호스팅을 검색하면 서버호스팅, DB호스팅, 웹호스팅, 클라우드 등등 정말 다양한 호스팅이 나온다.&lt;br&gt;혼란하다 혼란해.&lt;br&gt;정리해보면 생각보다 간단한 개념인데 용어가 많다보니 차근차근 정리해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>호스팅을 검색하면 서버호스팅, DB호스팅, 웹호스팅, 클라우드 등등 정말 다양한 호스팅이 나온다.<br>혼란하다 혼란해.<br>정리해보면 생각보다 간단한 개념인데 용어가 많다보니 차근차근 정리해보았다.</p><a id="more"></a><h2 id="호스팅이란"><a href="#호스팅이란" class="headerlink" title="호스팅이란?"></a>호스팅이란?</h2><table><thead><tr><th align="center">종류</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">웹호스팅</td><td align="center">서버의 일정 공간을 여러 이용자가 나눠서 임대</td></tr><tr><td align="center">서버호스팅</td><td align="center">서버를 단독으로 임대</td></tr><tr><td align="center">쇼핑몽호스팅</td><td align="center">웹호스팅 + 쇼핑몰 솔루션 제공</td></tr><tr><td align="center">메일호스팅</td><td align="center">도메인 메일 서버의 일정 공간을 임대</td></tr><tr><td align="center">DB호스팅</td><td align="center">DB서버 임대</td></tr></tbody></table><h2 id="호스팅과-클라우드-차이점"><a href="#호스팅과-클라우드-차이점" class="headerlink" title="호스팅과 클라우드 차이점?"></a>호스팅과 클라우드 차이점?</h2><p><img src="https://library.gabia.com/wp-content/uploads/2016/03/%EC%A0%95%EB%B3%B4%EC%82%AC%EC%9D%B4%ED%8A%B8-%ED%98%B8%EC%8A%A4%ED%8C%85003.jpg" alt="https://library.gabia.com/contents/infrahosting/1311/"></p><p>클라우드는 유동적인 서버가 필요할 때 사용하는 것이 가장 큰 차이점이다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/08/29/210828hosting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] 기초 Query Method(쿼리메서드)와 Entity(엔티티)</title>
      <link>https://sowon-dev.github.io/2021/08/19/210820spring-jpa/</link>
      <guid>https://sowon-dev.github.io/2021/08/19/210820spring-jpa/</guid>
      <pubDate>Thu, 19 Aug 2021 16:48:21 GMT</pubDate>
      
      <description>&lt;p&gt;JPA(Java Persistnece API)란&lt;br&gt;JPA를 왜 사용할까? SQL 중심적인 개발에서 객체중심으로 개발이 가능하고 CRUD와 같은 간단한 메서드 생산성이 올라간다.&lt;br&gt;&lt;a href=&quot;https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/&quot;&gt;JPA VS JDBC&lt;/a&gt; 포스팅에 DB CONNECT 프로그램에 대해 자세히 정리해놓았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA(Java Persistnece API)란<br>JPA를 왜 사용할까? SQL 중심적인 개발에서 객체중심으로 개발이 가능하고 CRUD와 같은 간단한 메서드 생산성이 올라간다.<br><a href="https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/">JPA VS JDBC</a> 포스팅에 DB CONNECT 프로그램에 대해 자세히 정리해놓았다.</p><a id="more"></a><h2 id="Query-Method-예시"><a href="#Query-Method-예시" class="headerlink" title="Query Method 예시"></a>Query Method 예시</h2><p>Query Method는 예시를 통해 공부하는 것이 좋다.<br>별 어려움없이 Method이름 그대로 결과값이 출력된다.</p><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><p>Entity의 경우 @Data보다 @Getter와 @Setter를 주로 사용한다. 하지만 @Getter만 쓰는 것이 좋다. @Setter를 사용하면 어디서든 값을 변경시킬 수 있기 때문에, Entity의 불변성을 지키기 위해 필요한 필드 변경은 함수를 따로 생성하여 관리해야한다. 이는 <a href="https://devfunny.tistory.com/409">DTO, Entity의 빌더패턴 적용기</a>에서 참고했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime updattedAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="UserRepository-java"><a href="#UserRepository-java" class="headerlink" title="UserRepository.java"></a>UserRepository.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 1 jpa는 optional, set 등 굉장히 많은 return 타입을 제공하고 있다.</span></span><br><span class="line"><span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="comment">//Optional&lt;User&gt; findByName(String name); </span></span><br><span class="line"><span class="comment">//Set&lt;User&gt; findByName(String name);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 nameing규칙 extends로 User를 받았다면 필드 전체를 사용가능</span></span><br><span class="line"><span class="function">User <span class="title">findByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">getByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">readByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">queryByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">searchByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">streamByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findUserByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findSomethingByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 </span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst2ByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTop2ByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findLast1ByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 조건절 and, or </span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByEmailAndName</span><span class="params">(String email, String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByEmailOrName</span><span class="params">(String email, String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 시간 비교</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCreatedAtAfter</span><span class="params">(LocalDateTime yesterday)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByIdAfter</span><span class="params">(Long id)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCreatedAtGreaterThan</span><span class="params">(LocalDateTime yesterday)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCreatedAtGreaterThanEqual</span><span class="params">(LocalDateTime yesterday)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCreatedAtBetween</span><span class="params">(LocalDateTime yesterday, LocalDateTime tomorrow)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByIdBetween</span><span class="params">(Long id1, Long id2)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByIdGreaterThanEqualAndIdLessThanEqual</span><span class="params">(Long id1, Long id2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByIdIsNotNull</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 잘 사용하지 않음 주의) 문자열의 empty가 아닌 collection의 empty를 체크한다</span></span><br><span class="line"><span class="comment">//    List&lt;User&gt; findByAddressIsNotEmpty();   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7 in, not in 실무에서 자주 사용함</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByNameIn</span><span class="params">(List&lt;String&gt; names)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8 LIKE</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByNameStartingWith</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByNameEndingWith</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByNameContains</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTop1ByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTopByNameOrderByIdDesc</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirstByNameOrderByIdDescEmailAsc</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirstByName</span><span class="params">(String name, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="UserRepositoryTest-java"><a href="#UserRepositoryTest-java" class="headerlink" title="UserRepositoryTest.java"></a>UserRepositoryTest.java</h3><p>src/test/java 경로에 UserRepositoryTest.java를 생성한다.<br>jUnit을 통해서 Test를 해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">crud</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. save</span></span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"가나다"</span>, <span class="string">"ganada@fast.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User());</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"마바사"</span>, <span class="string">"mabasa@fast.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"ma"</span>, <span class="string">"ma@slow.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"라"</span>, <span class="string">"ra@slow.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line"></span><br><span class="line">userRepository.findAll().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. matcher</span></span><br><span class="line">ExampleMatcher matcher1 = ExampleMatcher.matching().withIgnorePaths(<span class="string">"name"</span>).withMatcher(<span class="string">"email"</span>, endsWith());</span><br><span class="line">Example&lt;User&gt; example1 = Example.of(<span class="keyword">new</span> User(<span class="string">"ma"</span>, <span class="string">"ma@fast.com"</span>), matcher1);</span><br><span class="line"></span><br><span class="line">userRepository.findAll(example1).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"가나다"</span>, <span class="string">"ganada@fast.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User());</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"마바사"</span>, <span class="string">"mabasa@fast.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"ma"</span>, <span class="string">"ma@slow.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"ma"</span>, <span class="string">"ma@slow.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line">userRepository.save(<span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"라"</span>, <span class="string">"ra@slow.com"</span>, LocalDateTime.now(), LocalDateTime.now()));</span><br><span class="line"></span><br><span class="line">userRepository.findAll().forEach(System.out::println);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">System.out.println(userRepository.findByName(<span class="string">"마바사"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="string">"@ findByEmail : "</span> + userRepository.findByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ getByEmail : "</span> + userRepository.getByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ readByEmail : "</span> + userRepository.readByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ queryByEmail : "</span> + userRepository.queryByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ searchByEmail : "</span> + userRepository.searchByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ streamByEmail : "</span> + userRepository.streamByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ findUserByEmail : "</span> + userRepository.findUserByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line">System.out.println(<span class="string">"@ findSomethingByEmail : "</span> + userRepository.findSomethingByEmail(<span class="string">"ra@slow.com"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">System.out.println(<span class="string">"findTop2ByName : "</span> + userRepository.findTop2ByName(<span class="string">"ma"</span>));</span><br><span class="line">System.out.println(<span class="string">"findFirst2ByName : "</span> + userRepository.findFirst2ByName(<span class="string">"ma"</span>));</span><br><span class="line">System.out.println(<span class="string">"findLast1ByName : "</span> + userRepository.findLast1ByName(<span class="string">"ma"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 조건절 and, or </span></span><br><span class="line">System.out.println(<span class="string">"findByEmailAndName : "</span> + userRepository.findByEmailAndName(<span class="string">"ma@slow.com"</span>, <span class="string">"ma"</span>));</span><br><span class="line">System.out.println(<span class="string">"findByEmailOrName : "</span> + userRepository.findByEmailOrName(<span class="string">"ma@slow.com"</span>, <span class="string">"마바사"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 시간 비교</span></span><br><span class="line">System.out.println(<span class="string">"findByCreatedAtAfter : "</span> + userRepository.findByCreatedAtAfter(LocalDateTime.now().minusDays(<span class="number">1L</span>)));</span><br><span class="line">System.out.println(<span class="string">"findByIdAfter : "</span> + userRepository.findByIdAfter(<span class="number">4L</span>));</span><br><span class="line">System.out.println(<span class="string">"findByCreatedAtGreaterThan : "</span> + userRepository.findByCreatedAtGreaterThan(LocalDateTime.now().minusDays(<span class="number">1L</span>)));</span><br><span class="line">System.out.println(<span class="string">"findByCreatedAtGreaterThanEqual : "</span> + userRepository.findByCreatedAtGreaterThanEqual(LocalDateTime.now().minusDays(<span class="number">1L</span>)));</span><br><span class="line">System.out.println(<span class="string">"findByCreatedAtBetween : "</span> + userRepository.findByCreatedAtBetween(LocalDateTime.now().minusDays(<span class="number">1L</span>), LocalDateTime.now().plusDays(<span class="number">1L</span>)));</span><br><span class="line">System.out.println(<span class="string">"findByIdBetween : "</span> + userRepository.findByIdBetween(<span class="number">1L</span>, <span class="number">3L</span>));</span><br><span class="line">System.out.println(<span class="string">"findByIdGreaterThanEqualAndIdLessThanEqual : "</span> + userRepository.findByIdGreaterThanEqualAndIdLessThanEqual(<span class="number">1L</span>, <span class="number">3L</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line">System.out.println(<span class="string">"findByIdIsNotNull : "</span> + userRepository.findByIdIsNotNull());</span><br><span class="line">    System.out.println(<span class="string">"findByIdIsNotEmpty : "</span> + userRepository.findByAddressIsNotEmpty());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7 in, not in 실무에서 자주 사용함</span></span><br><span class="line">System.out.println(<span class="string">"findByNameIn : "</span> + userRepository.findByNameIn(Lists.newArrayList(<span class="string">"ma"</span>, <span class="string">"가나다"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8 LIKE</span></span><br><span class="line">System.out.println(<span class="string">"findByNameStartingWith: "</span> + userRepository.findByNameStartingWith(<span class="string">"m"</span>));</span><br><span class="line">System.out.println(<span class="string">"findByNameEndingWith : "</span> + userRepository.findByNameEndingWith(<span class="string">"다"</span>));</span><br><span class="line">System.out.println(<span class="string">"findByNameContains : "</span> + userRepository.findByNameContains(<span class="string">"나"</span>));</span><br><span class="line">System.out.println(<span class="string">"findByNameLike : "</span> + userRepository.findByNameLike(<span class="string">"%"</span> + <span class="string">"나"</span> + <span class="string">"%"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h2><ol><li>메소드 Retrurn 타입<br>JPA는 optional, set 등 굉장히 많은 return 타입을 제공하고 있다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리턴타입 3가지</span></span><br><span class="line"><span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>; </span><br><span class="line"><span class="function">Optional&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">Set&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과: 세 가지 모두 동일한 결과</span></span><br><span class="line">[User(id=<span class="number">4</span>, name=ma, email=ma<span class="meta">@slow</span>.com, createdAt=<span class="number">2021</span>-<span class="number">08</span>-<span class="number">20</span>T21:<span class="number">14</span>:<span class="number">05.439217</span>, updattedAt=<span class="number">2021</span>-<span class="number">08</span>-<span class="number">20</span>T21:<span class="number">14</span>:<span class="number">05.439217</span>), User(id=<span class="number">5</span>, name=ma, email=ma<span class="meta">@fast</span>.com, createdAt=<span class="number">2021</span>-<span class="number">08</span>-<span class="number">20</span>T21:<span class="number">14</span>:<span class="number">05.439217</span>, updattedAt=<span class="number">2021</span>-<span class="number">08</span>-<span class="number">20</span>T21:<span class="number">14</span>:<span class="number">05.439217</span>)]</span><br></pre></td></tr></table></figure><ol start="2"><li>메서드 nameing 규칙</li></ol><p><img src="/img/210820jpa1.PNG" alt=""></p><p>위 이미지처럼 다양한 네이밍 규칙이 있고 실무에서 가장 자주 사용하는 규칙은 select코드인 <code>find…By, read…By, get…By, query…By, search…By, stream…By</code>이다.<br>왜이렇게 여러이름일까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">getByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">readByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">queryByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">searchByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">streamByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findUserByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findSomethingByEmail</span><span class="params">(String email)</span></span>; -&gt; 이상없이 동작함!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과값</span></span><br><span class="line">[User(id=<span class="number">4</span>, name=ma, email=ma<span class="meta">@slow</span>.com, createdAt=<span class="number">2021</span>-<span class="number">08</span>-<span class="number">20</span>T21:<span class="number">14</span>:<span class="number">05.439217</span>, updattedAt=<span class="number">2021</span>-<span class="number">08</span>-<span class="number">20</span>T21:<span class="number">14</span>:<span class="number">05.439217</span>)]</span><br></pre></td></tr></table></figure><p>위 코드 전두 동일한 결과값이 나온다. 따라서 코드가독성이 가장 잘 어울리는 이름을 선택해서 사용하면 된다.</p><ol start="3"><li>Query Keywords</li></ol><p><img src="/img/210820jpa2.PNG" alt=""></p><ul><li>날짜와 시간을 비교하는 키워드 </li></ul><table><thead><tr><th align="center">키워드</th><th align="center">설명</th><th align="center">비교</th></tr></thead><tbody><tr><td align="center">AFTER, BEFORE</td><td align="center">날짜와 시간에만 사용하는 조건, EQUALS(=)포함하지 않음</td><td align="center">초과 또는 미만</td></tr><tr><td align="center">GREATER_THAN</td><td align="center">모든 숫자값, 날짜값 사용가능한 AFTER보다 범용적인 조건</td><td align="center">초과</td></tr><tr><td align="center">GREATER_THAN_EQUALS</td><td align="center">GREATER_THAN에서 EQUALS(=)이 포함된 조건</td><td align="center">이상</td></tr><tr><td align="center">BETWEEN</td><td align="center">모든 숫자값, 날짜값 사용가능. EQUALS(=)이 포함된 조건</td><td align="center">이상과 이하</td></tr></tbody></table><ul><li>빈값에 대한 키워드</li></ul><table><thead><tr><th align="center">키워드</th><th align="center">설명</th><th align="center">쿼리</th></tr></thead><tbody><tr><td align="center">IS_NOT_NULL</td><td align="center">NULL이 아닌 것을 출력하는 조건</td><td align="center">WHERE A IS NOT NULL</td></tr><tr><td align="center">IS_NOT_EMPTY</td><td align="center">주의) 문자열의 empty가 아닌 collection의 empty를 체크함. 잘 사용하지 않는 쿼리</td><td align="center">WHERE exists (select id from 테이블 where id = id and address = address)</td></tr></tbody></table><p><br><br><br></p><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><table><thead><tr><th align="center">어노테이션</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">@Id</td><td align="center">Entity는 PK가 필수적으로 필요하다. 이를 나타내주는 어노테이션</td></tr><tr><td align="center">@GeneratedValue</td><td align="center">@Id값을 null로 insert하면 AUTO_INCREMENT함</td></tr><tr><td align="center">@Table</td><td align="center">기본값으로 Entity이름과 동일한 table name을 사용 -&gt; name속성: 원하는 테이블로 매핑가능</td></tr><tr><td align="center">@Colum</td><td align="center">name속성: 원하는 컬럼으로 매핑가능, nullable속성: NULL을 허용할 지 말지 결정, updateable: update구문실행시 해당 필드를 함께 수정할지 결정</td></tr><tr><td align="center">@Transient</td><td align="center">영속성 대상에서 해당 컬럼을 제외한다. 해당 객체와 생명주기를 같이한다. DB에 반영하지않고 필드를 쓰고 싶을때 사용</td></tr><tr><td align="center">@Enumerated</td><td align="center">열거형을 사용할 때는 EnumType.STRING속성을 주로 사용</td></tr><tr><td align="center">@PrePersist</td><td align="center">manager persist 의해 처음 호출될 때 실행, 현재시간을 자동으로 DB에 insert할때 주로 사용</td></tr><tr><td align="center">@PreUpdate</td><td align="center">SQL UPDATE 전에 실행, 현재시간을 자동으로 DB에 update할때 주로 사용</td></tr></tbody></table><p>실무에서 자주 사용하는 어노테이션 3가지</p><ol><li>@Id @GeneratedValue(strategy=GenerationType.AUTO): PK 자동증감</li><li>@Colum(nullable=false): 값에 NULL허용하지 않음</li><li>@Enumerated(EnumType.STRING): 꼭 STRING속성을 설정해주어야 Enum에 값이 추가되었을때 순서변경이 없음 -&gt; 실무에서도 실수를 많이 하는 부분!</li></ol><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ol><li><a href="https://docs.spring.io/spring-data/jpa/docs/2.5.4/reference/html/#populator.namespace-reference">https://docs.spring.io/spring-data/jpa/docs/2.5.4/reference/html/#populator.namespace-reference</a></li></ol><p>참고로 잘 정리해 논 블로그 글을 찾았다.<br>2. <a href="https://velog.io/@leyuri/Spring-boot-JPA-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-Entity-Table-Column-Id-Lombok">leyuri - Spring-boot JPA 어노테이션</a><br>3. <a href="https://lng1982.tistory.com/280">탁구치는 개발자 - @Enumerated</a></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/19/210820spring-jpa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Lombok]@build, @Data 차이</title>
      <link>https://sowon-dev.github.io/2021/08/17/210818Lombok-build/</link>
      <guid>https://sowon-dev.github.io/2021/08/17/210818Lombok-build/</guid>
      <pubDate>Tue, 17 Aug 2021 23:13:17 GMT</pubDate>
      
      <description>&lt;p&gt;자바프로젝트를 사용하면서 없어선 안될 라이브러리가 바로 롬복이다.&lt;br&gt;스프링부트프로젝트로 생성시 롬복 라이브러리를 바로 추가할 수 있다.&lt;br&gt;또는 사이트에서 jar를 다운로드받아 외부라이브러리로 import하여 사용할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바프로젝트를 사용하면서 없어선 안될 라이브러리가 바로 롬복이다.<br>스프링부트프로젝트로 생성시 롬복 라이브러리를 바로 추가할 수 있다.<br>또는 사이트에서 jar를 다운로드받아 외부라이브러리로 import하여 사용할 수 있다.</p><a id="more"></a><ul><li><a href="https://projectlombok.org/">Lombok 사이트</a></li></ul><p>이제 어노테이션별 차이를 살펴보자.</p><h2 id="롬복-어노테이션"><a href="#롬복-어노테이션" class="headerlink" title="롬복 어노테이션"></a>롬복 어노테이션</h2><table><thead><tr><th align="center">구분</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">@Data</td><td align="center">@Getter + @Setter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode 를 한꺼번에 제공</td></tr><tr><td align="center">@Builder</td><td align="center">@AllArgsConstructor와 비슷하게 객체를 생성하고 필드값을 주입해주는데 빌더의 형식을 제공함</td></tr><tr><td align="center">@NoArgsConstructor</td><td align="center">파라미터가 없는 생성자 제공. JPA 사용시 필수</td></tr><tr><td align="center">@AllArgsConstructor</td><td align="center">필드의 모든 변수가 있는 생성자 제공</td></tr></tbody></table><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><ul><li>User.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdAt = LocalDateTime.now();</span><br><span class="line"><span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 클래스를 jUnit으로 테스트해보자.</p><ul><li>UserTest.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// setter 사용</span></span><br><span class="line">User u1 = <span class="keyword">new</span> User();</span><br><span class="line">u1.setName(<span class="string">"마리아"</span>);</span><br><span class="line">u1.setEmail(<span class="string">"maria@example.com"</span>);</span><br><span class="line">u1.setCreatedAt(LocalDateTime.now());</span><br><span class="line">u1.setUpdatedAt(LocalDateTime.now());</span><br><span class="line">System.out.println(<span class="string">"@ test u1: "</span>+u1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @AllArgsConstructor 생성자로 생성</span></span><br><span class="line">User u2 = <span class="keyword">new</span> User(<span class="string">"가나다"</span>, <span class="string">"ganada@example.com"</span>, LocalDateTime.now(), LocalDateTime.now());</span><br><span class="line">System.out.println(<span class="string">"@ test u2: "</span>+u2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @NoArgsConstructor 생성자로 생성</span></span><br><span class="line">User u3 = <span class="keyword">new</span> User();</span><br><span class="line">System.out.println(<span class="string">"@ test u3: "</span>+u3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Builder 로 생성</span></span><br><span class="line">User u4 = User.builder()</span><br><span class="line">.name(<span class="string">"마바사"</span>)</span><br><span class="line">.email(<span class="string">"mabasa"</span>)</span><br><span class="line">.updatedAt(LocalDateTime.now())</span><br><span class="line">.build();</span><br><span class="line">System.out.println(<span class="string">"@ test u4: "</span>+u4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User객체 4개가 생성되었고 그 결과는 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ test u1: User(name&#x3D;마리아, email&#x3D;maria@example.com, createdAt&#x3D;2021-08-18T22:01:39.588614800, updatedAt&#x3D;2021-08-18T22:01:39.588614800)</span><br><span class="line">@ test u2: User(name&#x3D;가나다, email&#x3D;ganada@example.com, createdAt&#x3D;2021-08-18T22:01:39.588614800, updatedAt&#x3D;2021-08-18T22:01:39.588614800)</span><br><span class="line">@ test u3: User(name&#x3D;null, email&#x3D;null, createdAt&#x3D;2021-08-18T22:01:39.588614800, updatedAt&#x3D;null)</span><br><span class="line">@ test u4: User(name&#x3D;마바사, email&#x3D;mabasa, createdAt&#x3D;null, updatedAt&#x3D;2021-08-18T22:01:39.589613600)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>상황에 맞는 롬복을 사용하면 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Lombok/">Lombok</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/17/210818Lombok-build/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>application.properties과 application.yml 차이</title>
      <link>https://sowon-dev.github.io/2021/08/17/210818Spring-applicationyml/</link>
      <guid>https://sowon-dev.github.io/2021/08/17/210818Spring-applicationyml/</guid>
      <pubDate>Tue, 17 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링부트 프로젝트를 설정하다보면 application.properties 또는 application.yml 혹은 둘 다 만날때가 있다.&lt;br&gt;이 둘은 외부 속성을 설정하는 파일이다. 그럼 둘의 차이점은 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링부트 프로젝트를 설정하다보면 application.properties 또는 application.yml 혹은 둘 다 만날때가 있다.<br>이 둘은 외부 속성을 설정하는 파일이다. 그럼 둘의 차이점은 무엇일까?</p><a id="more"></a><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>키-밸류형식을 사용하여 외부 구성의 속성을 설정할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:h2:DB이름</span><br><span class="line">spring.datasource.username=유저이름</span><br><span class="line">spring.datasource.password=비밀번호</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>YAML기반으로 외부 구성의 속성을 설정할 수 있다.<br>반복되는 접두사가 없어 가독성이 좋다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:h2:DB이름</span><br><span class="line">        username: 유저이름</span><br><span class="line">password: 비밀번호</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>application.yml이 계층적으로 잘 표현할 수 있어 편리하다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/SpringBoot/">SpringBoot</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/17/210818Spring-applicationyml/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Springboot]Springfox Boot Starter</title>
      <link>https://sowon-dev.github.io/2021/08/15/210816Spring-springfoxswagger/</link>
      <guid>https://sowon-dev.github.io/2021/08/15/210816Spring-springfoxswagger/</guid>
      <pubDate>Sun, 15 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Swagger는 다양한 라이브러리가 있다. 그 중 Swagger2와 Swagger-ui 조합이 현재 가장 많이 사용된다.&lt;br&gt;오늘 포스팅에서는 스프링부트환경에서 Swagger2 라이브러리보다 쉽게 사용할 수 있는 Springfox Boot Starter를 소개하려고한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Swagger는 다양한 라이브러리가 있다. 그 중 Swagger2와 Swagger-ui 조합이 현재 가장 많이 사용된다.<br>오늘 포스팅에서는 스프링부트환경에서 Swagger2 라이브러리보다 쉽게 사용할 수 있는 Springfox Boot Starter를 소개하려고한다.</p><a id="more"></a><h2 id="Springfox-Boot-Starter-라이브러리"><a href="#Springfox-Boot-Starter-라이브러리" class="headerlink" title="Springfox Boot Starter 라이브러리"></a>Springfox Boot Starter 라이브러리</h2><p><a href="https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter">Maven Repository Springfox Boot Starter</a>에서 메이븐 또는 그레들 중 원하는 소스를 복사한다.</p><ul><li>Gradle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter</span></span><br><span class="line">implementation group: <span class="string">'io.springfox'</span>, name: <span class="string">'springfox-boot-starter'</span>, version: <span class="string">'3.0.0'</span></span><br></pre></td></tr></table></figure><ul><li>실행하기<br>서버를 실행한 뒤 <code>http://localhost:8080/swagger-ui/</code>에서 바로 확인할 수 있다.</li></ul><p><br><br><br></p><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><table><thead><tr><th align="center">종류</th><th align="center">자주 사용하는 속성</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">@Api</td><td align="center">tags</td><td align="center">해당 클래스를 Swagger에 표시함, API 클래스명을 한글로 제공 가능</td></tr><tr><td align="center">@ApiParam</td><td align="center">value</td><td align="center">파라미터 설명(Description)</td></tr><tr><td align="center">@ApiImplicitParams</td><td align="center"></td><td align="center">@ApiImplicitParam와의 조합으로 파라미터 설명(Description)</td></tr><tr><td align="center">@ApiImplicitParam</td><td align="center">name, value, dataTape</td><td align="center">@ApiImplicitParams의 조합으로 파라미터 설명(Description)</td></tr><tr><td align="center">@ApiResponses</td><td align="center">code, message, response</td><td align="center">@ApiResponse 조합으로 API 응답 지정</td></tr><tr><td align="center">@ApiModelProperty</td><td align="center">value, example, required</td><td align="center">모델의 변수 설명</td></tr></tbody></table><p>@ApiResponses로 응답지정시 주의점이 있다.<br>만약 code = 400 응답을 2개만들고 싶다면 어떻게 해야할까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"리턴 성공"</span>, response = UserRes<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">ApiResponse</span>(<span class="title">code</span> </span>= <span class="number">400</span>, message = <span class="string">"사용자 이름이 10자리 이상인 경우"</span>),</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"사용자 나이가 15살 이하인 경우"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위와 같이 동일 코드에 @ApiResponse를 2개이상 작성하면 message는 최상단 1개밖에 보이지 않는다.<br>즉 <code>사용자 이름이 10자리 이상인 경우</code>만 표시된다. 따라서 <code>사용자 나이가 15살 이하인 경우</code>도 표시하고 싶은 경우 아래처럼 message에 기입해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"리턴 성공"</span>, response = UserRes<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">ApiResponse</span>(<span class="title">code</span> </span>= <span class="number">400</span>, message = <span class="string">"1.사용자 이름이 10자리 이상인 경우 \t\n 2.사용자 나이가 15살 이하인 경우"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>이제 전체 코드와 이미지 예시를 보자.</p><ul><li><p>Controller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"사용자 컨트롤러"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"안녕"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/plus/&#123;x&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(@ApiParam(value = <span class="string">"x 값"</span>)</span> @PathVariable <span class="keyword">int</span> x, </span></span><br><span class="line"><span class="function">@<span class="title">ApiParam</span><span class="params">(value = <span class="string">"y 값"</span>)</span> @RequestParam <span class="keyword">int</span> y) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line"><span class="comment">// 필수속성: name, value, dataType</span></span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"x"</span>, value = <span class="string">"x2 값"</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"y"</span>, value = <span class="string">"y2 값"</span>, dataType = <span class="string">"int"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/plus2/&#123;x&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus2</span><span class="params">(@PathVariable <span class="keyword">int</span> x, @RequestParam <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"사용자 이름과 나이를 리턴하는 메서드"</span>)</span><br><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"리턴 성공"</span>, response = UserRes<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">/* 동일코드 @<span class="title">ApiResponse</span>를 작성하는 경우 첫번째 작성한 메시지만 노출된다.</span></span><br><span class="line"><span class="class">//            @<span class="title">ApiResponse</span>(<span class="title">code</span> </span>= <span class="number">400</span>, message = <span class="string">"사용자 이름이 10자리 이상인 경우"</span>),</span><br><span class="line"><span class="comment">//            @ApiResponse(code = 400, message = "사용자 나이가 15살 이하인 경우")</span></span><br><span class="line"> * 따라서 하나의 메시지안에서 구분을 줘야한다.</span><br><span class="line"> * */</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"1.사용자 이름이 10자리 이상인 경우 \t\n 2.사용자 나이가 15살 이하인 경우"</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRes <span class="title">userGet</span><span class="params">(UserReq req)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserRes(req.getName(), req.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"사용자 이름과 나이를 리턴하는 메서드"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRes <span class="title">userPost</span><span class="params">(@RequestBody UserReq req)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserRes(req.getName(), req.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dto.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRes</span> </span>&#123;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"사용자 이름"</span>, example = <span class="string">"가나다"</span>, required = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"사용자 나이"</span>, example = <span class="string">"100"</span>, required = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h3 id="1-컨트롤러-전체-및-사용자-컨트롤러의-메서드"><a href="#1-컨트롤러-전체-및-사용자-컨트롤러의-메서드" class="headerlink" title="1 컨트롤러 전체 및 사용자 컨트롤러의 메서드"></a>1 컨트롤러 전체 및 사용자 컨트롤러의 메서드</h3><p><img src="/img/210817springfoxsbootstarter1.PNG" alt=""></p><p>내가 만든 컨트롤러는 <code>사용자 컨트롤러(Api Controller)</code>인데 <code>basic-error-controller</code>는 도대체 뭘까?<br><code>basic-error-controller</code>는 Springfox Boot Starter라이브러리에서 기본적으로 제공되는 컨트롤러이다.<br><code>사용자 컨트롤러(Api Controller)</code>를 클릭하면 위 코드에서 작성한 GET메서드 4개와 POST메서드 1개를 확인할 수 있다.<br>그리고 @ApiOperation를 이용한 경우 메서드 URI옆에 설명이 기재됨을 확인할 수 있다.</p><p><br><br><br></p><h3 id="2-api-plus-x-메서드-api-plus2-x-메서드"><a href="#2-api-plus-x-메서드-api-plus2-x-메서드" class="headerlink" title="2 /api/plus/{x}메서드, /api/plus2/{x} 메서드"></a>2 <code>/api/plus/{x}</code>메서드, <code>/api/plus2/{x}</code> 메서드</h3><p><img src="/img/210817springfoxsbootstarter2.PNG" alt=""></p><p>GET메서드 <code>/api/plus/{x}</code>와 <code>/api/plus2/{x}</code>는 동일하게 swagger에 표시된다.<br>둘의 차이는 @ApiParam로 스웨거에 표시했는 지 @ApiImplicitParams로 스웨거에 표시했는 지이다.</p><p><br><br><br></p><h3 id="3-api-user-메서드"><a href="#3-api-user-메서드" class="headerlink" title="3 /api/user 메서드"></a>3 <code>/api/user</code> 메서드</h3><p><img src="/img/210817springfoxsbootstarter3.PNG" alt=""></p><p>@ApiModelProperty로 기재한 설명과 example속성에 있는 내용도 잘 표기되어있다.<br>@ApiResponses로 표기한 각 코드마다의 message를 확인할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/15/210816Spring-springfoxswagger/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Junit</title>
      <link>https://sowon-dev.github.io/2021/08/12/210813Spring-junit/</link>
      <guid>https://sowon-dev.github.io/2021/08/12/210813Spring-junit/</guid>
      <pubDate>Thu, 12 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Junit 사용법을 예시와 함께 확인해보자&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Junit 사용법을 예시와 함께 확인해보자</p><a id="more"></a><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><ul><li>java 기반의 단위 테스트를 위한 프레임워크</li><li>어노테이션기반으로 테스트 지원</li><li>Assert를 통해서 예상과 실제를 비교하여 검증</li></ul><p><br><br><br></p><h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><p>Mock이란 실제 사용되어야하는 객체의 대체객체로 실제 객체를 만들어서 하기엔 시간이 부족하고 비용이 높은 경우, 구현이 까다로울 경우에 가짜 객체를 만들어서 사용하는데 그중 하나가 Mock객체이다.</p><ul><li>행위를 검증하기 위해 사용되는 객체</li><li>직접 만들거나 스프링프레임워크를 통해서 간단하게 만들수 있음</li><li>@Mock<ul><li>Mockito 라이브러리에 위치</li><li>주로 @injectMocks 조합으로 사용</li><li>give, when, then으로 Mock객체의 행위 정의함</li></ul></li><li>@MockBean<ul><li>Springboot 테스트 패키지 내에 위치</li><li>테스트를 하려는 객체 내에서 기존에 등록된 Bean이 아닌, MockBean을 주입함.</li><li>주로 @SpringbootTest, @WebMVCTest와 함께 사용</li><li>give, when, then으로 Mock객체의 행위 정의함</li></ul></li></ul><p><br><br><br></p><h2 id="Jacoco"><a href="#Jacoco" class="headerlink" title="Jacoco"></a>Jacoco</h2><p>자바코드의 코드 커버리지를 체크하는 라이브러리로 결과를 html로 확인 가능하다.</p><p>플러그인 id에 <code>jacoco</code>를 추가하기만하면 끝!</p><ul><li>build.gradle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line"></span><br><span class="line">(중략)</span><br><span class="line">id <span class="string">'jacoco'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/12/210813Spring-junit/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]RestTemplate 활용</title>
      <link>https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/</link>
      <guid>https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/</guid>
      <pubDate>Wed, 11 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;클라이언트와 서버끼리 RestTemplate객체를 사용하여 JSON을 주고받을 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>클라이언트와 서버끼리 RestTemplate객체를 사용하여 JSON을 주고받을 수 있다.</p><a id="more"></a><h2 id="클라이언트"><a href="#클라이언트" class="headerlink" title="클라이언트"></a>클라이언트</h2><p>클라이언트에서 GET방식, POST방식으로 서버에 응답을 요청해보자.</p><p><br><br><br></p><h3 id="ClientApiController-java"><a href="#ClientApiController-java" class="headerlink" title="ClientApiController.java"></a>ClientApiController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/client"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplateService service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"get메서드 호출"</span>);</span><br><span class="line"><span class="keyword">return</span> service.hello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"post메서드 호출"</span>);</span><br><span class="line">service.post();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/exchange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"exchange메서드 호출"</span>);</span><br><span class="line"><span class="keyword">return</span> service.exchange();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/genericExchange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Req&lt;UserResponse&gt; <span class="title">genericExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"genericExchange메서드 호출"</span>);</span><br><span class="line"><span class="keyword">return</span> service.genericExchange();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="RestTemplateService-java"><a href="#RestTemplateService-java" class="headerlink" title="RestTemplateService.java"></a>RestTemplateService.java</h3><ul><li>UriComponentsBuilder: 원하는 uri를 만들 수 있는 객체</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//클라이언트이므로 주소를 만들어서 리턴해야한다 -&gt; 이때 URI컴포넌트를 주로 사용함.</span></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server"</span>)</span><br><span class="line"><span class="comment">//쿼리파람을 사용할 수 있다.</span></span><br><span class="line">.queryParam(<span class="string">"name"</span>, <span class="string">"신경숙"</span>)</span><br><span class="line">.queryParam(<span class="string">"age"</span>, <span class="number">22</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line">.toUri();</span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* =====================================================================</span></span><br><span class="line"><span class="comment"> * getForObject()와 getForEntity()의 차이</span></span><br><span class="line"><span class="comment"> * 여기서 get은 가져온다의 get이 아니라 HTTP GET 메서드의 get이다.</span></span><br><span class="line"><span class="comment"> * getForObject(): Object형태</span></span><br><span class="line"><span class="comment"> * getForEntity(): Entity형태로 getStatusCode(), getBody()를 확인할 수 있어 유용</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * =====================================================================</span></span><br><span class="line"><span class="comment"> * 두 방식 다 동일한 결과를 나타냄</span></span><br><span class="line"><span class="comment"> * 1. String으로 테스트</span></span><br><span class="line"><span class="comment"> * 호출: http://localhost:8083/api/client</span></span><br><span class="line"><span class="comment"> * 결과: 안녕 나는 클라이언트야, 내가 사라져볼께 얍! 안녕 나는 서버야</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. UserResponse로 json 받기</span></span><br><span class="line"><span class="comment"> * 호출: http://localhost:8083/api/client</span></span><br><span class="line"><span class="comment"> * 결과: &#123;</span></span><br><span class="line"><span class="comment"> *    "name": "신경숙",</span></span><br><span class="line"><span class="comment"> *    "age": 22</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 상세정보를 알기 위해서 ResponseEntity를 받는 것을 추천</span></span><br><span class="line">RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String result1 = rt.getForObject(uri, String.class);</span></span><br><span class="line">UserResponse result1 = rt.getForObject(uri, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"@ result1: "</span>+result1.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ResponseEntity&lt;String&gt; result2 = rt.getForEntity(uri, String.class);</span></span><br><span class="line">ResponseEntity&lt;UserResponse&gt; result2 = rt.getForEntity(uri, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"@ HTTP CODE확인: "</span>+result2.getStatusCode());</span><br><span class="line">System.out.println(<span class="string">"@ BODY 확인: "</span>+result2.getBody());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result2.getBody();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line"><span class="comment">//위 PathVariable과 expand()안 콤마로 순서대로 매칭</span></span><br><span class="line">.expand(<span class="string">"wony"</span>, <span class="string">"choi"</span>)</span><br><span class="line">.toUri();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line">UserRequest req = <span class="keyword">new</span> UserRequest();</span><br><span class="line">req.setAge(<span class="number">44</span>);</span><br><span class="line">req.setName(<span class="string">"최정원"</span>);</span><br><span class="line"></span><br><span class="line">RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">ResponseEntity&lt;UserResponse&gt; res = rt.postForEntity(uri, req, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"@ HTTP CODE확인: "</span>+res.getStatusCode());</span><br><span class="line">System.out.println(<span class="string">"@ HTTP Header확인: "</span>+res.getHeaders());</span><br><span class="line">System.out.println(<span class="string">"@ BODY 확인: "</span>+res.getBody());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line"><span class="comment">//위 PathVariable과 expand()안 콤마로 순서대로 매칭</span></span><br><span class="line">.expand(<span class="string">"wony"</span>, <span class="string">"choi"</span>)</span><br><span class="line">.toUri();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line">UserRequest userReq = <span class="keyword">new</span> UserRequest();</span><br><span class="line">userReq.setAge(<span class="number">44</span>);</span><br><span class="line">userReq.setName(<span class="string">"최정원"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestEntity로 header에 원하는 데이터를 넣어서 보낼 수 있다.</span></span><br><span class="line">RequestEntity&lt;UserRequest&gt; reqEntity = RequestEntity</span><br><span class="line">.post(uri)</span><br><span class="line">.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">.header(<span class="string">"x-authorization"</span>, <span class="string">"abc"</span>)</span><br><span class="line">.header(<span class="string">"custom-header"</span>, <span class="string">"ABC"</span>)</span><br><span class="line">.body(userReq);</span><br><span class="line"></span><br><span class="line">RestTemplate resTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">ResponseEntity&lt;UserResponse&gt; res = resTemplate.exchange(reqEntity, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">return</span> res.getBody();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 원하는 Req&lt;UserResponse&gt; 타입의 JSON형태 주고 받기</span></span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    "header": &#123;</span></span><br><span class="line"><span class="comment">        "resCode": null</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    "responseBody": &#123;</span></span><br><span class="line"><span class="comment">        "name": "가나다",</span></span><br><span class="line"><span class="comment">        "age": 55</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Req&lt;UserResponse&gt; <span class="title">genericExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line"><span class="comment">//위 PathVariable과 expand()안 콤마로 순서대로 매칭</span></span><br><span class="line">.expand(<span class="string">"wony"</span>, <span class="string">"choi"</span>)</span><br><span class="line">.toUri();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line">UserRequest userReq = <span class="keyword">new</span> UserRequest();</span><br><span class="line">userReq.setAge(<span class="number">55</span>);</span><br><span class="line">userReq.setName(<span class="string">"가나다"</span>);</span><br><span class="line"></span><br><span class="line">Req&lt;UserRequest&gt; req = <span class="keyword">new</span> Req&lt;&gt;();</span><br><span class="line">req.setHeader(<span class="keyword">new</span> Req.Header());</span><br><span class="line">req.setResponseBody(userReq);</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestEntity로 header에 원하는 데이터를 넣어서 보낼 수 있다.</span></span><br><span class="line">RequestEntity&lt;Req&lt;UserRequest&gt;&gt; reqEntity = RequestEntity</span><br><span class="line">.post(uri)</span><br><span class="line">.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">.header(<span class="string">"x-authorization"</span>, <span class="string">"abc"</span>)</span><br><span class="line">.header(<span class="string">"custom-header"</span>, <span class="string">"ABC"</span>)</span><br><span class="line">.body(req);</span><br><span class="line"></span><br><span class="line">RestTemplate resTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"><span class="comment">// 제네릭에는 class를 사용할 수 없다 즉, Req&lt;UserResponse&gt;.class -&gt; 오류발생 -&gt; 따라서 RestTemplate의 ParameterizedTypeReference를 사용해야한다. </span></span><br><span class="line"><span class="comment">// ResponseEntity&lt;Req&lt;UserResponse&gt;&gt; res = resTemplate.exchange(reqEntity, Req&lt;UserResponse&gt;.class);</span></span><br><span class="line">ResponseEntity&lt;Req&lt;UserResponse&gt;&gt; res = resTemplate.exchange(reqEntity, <span class="keyword">new</span> ParameterizedTypeReference&lt;Req&lt;UserResponse&gt;&gt;()&#123;&#125;);</span><br><span class="line"><span class="keyword">return</span> res.getBody();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="UserResponse-java"><a href="#UserResponse-java" class="headerlink" title="UserResponse.java"></a>UserResponse.java</h3><p>응답 DTO이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResponse</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="UserRequest-java"><a href="#UserRequest-java" class="headerlink" title="UserRequest.java"></a>UserRequest.java</h3><p>요청 DTO이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Req-java"><a href="#Req-java" class="headerlink" title="Req.java"></a>Req.java</h3><p>DTO이다. 제네릭타입으로 원하는 JSON형태를 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Req</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Header header;</span><br><span class="line"><span class="keyword">private</span> T responseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String resCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="서버"><a href="#서버" class="headerlink" title="서버"></a>서버</h2><p>클라이언트의 요청에 적절한 응답을 할 수 있다.</p><p><br><br><br></p><h3 id="ServerApiComtroller-java"><a href="#ServerApiComtroller-java" class="headerlink" title="ServerApiComtroller.java"></a>ServerApiComtroller.java</h3><ul><li>순수한 HttpEntity<String>을 파라미터 변수로 받으면 디버깅 등에 유용하다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/server"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApiComtroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(@RequestParam String name, @RequestParam <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">User u = <span class="keyword">new</span> User();</span><br><span class="line">u.setName(name);</span><br><span class="line">u.setAge(age);</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@PostMapping("/user/&#123;userId&#125;/name/&#123;userName&#125;")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">post</span><span class="params">(@RequestBody User user, </span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userId, </span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userName)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"client req: &#123;&#125;"</span>, user);</span><br><span class="line">log.info(<span class="string">"userId: &#123;&#125;, userName: &#123;&#125;"</span>, userId, userName);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@PostMapping("/user/&#123;userId&#125;/name/&#123;userName&#125;")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">exchange</span><span class="params">(@RequestBody User user, </span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userId,</span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userName,</span></span></span><br><span class="line"><span class="function"><span class="params"> @RequestHeader(<span class="string">"x-authorization"</span>)</span> String xAuthorization,</span></span><br><span class="line"><span class="function"> @<span class="title">RequestHeader</span><span class="params">(<span class="string">"custom-header"</span>)</span> String customHeader</span></span><br><span class="line"><span class="function"> ) </span>&#123;</span><br><span class="line">log.info(<span class="string">"client req: &#123;&#125;"</span>, user);</span><br><span class="line">log.info(<span class="string">"userId: &#123;&#125;, userName: &#123;&#125;"</span>, userId, userName);</span><br><span class="line">log.info(<span class="string">"xAuthorization: &#123;&#125;, customHeader: &#123;&#125;"</span>, xAuthorization, customHeader);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 순수한 HttpEntity&lt;String&gt;을 파라미터 변수로 받으면 디버깅 등에 유용하다</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Req&lt;User&gt; <span class="title">genericExchange</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">//HttpEntity&lt;String&gt; entity, </span></span></span><br><span class="line"><span class="function"><span class="params">@RequestBody Req&lt;User&gt; user, </span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestHeader(<span class="string">"x-authorization"</span>)</span> String xAuthorization,</span></span><br><span class="line"><span class="function">@<span class="title">RequestHeader</span><span class="params">(<span class="string">"custom-header"</span>)</span> String customHeader</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line"><span class="comment">//log.info("entity 순수한 : &#123;&#125;", entity);</span></span><br><span class="line">log.info(<span class="string">"HttpEntity&lt;String&gt; 디버깅 등에 유용: &#123;&#125;"</span>, user);</span><br><span class="line">log.info(<span class="string">"userId: &#123;&#125;, userName: &#123;&#125;"</span>, userId, userName);</span><br><span class="line">log.info(<span class="string">"xAuthorization: &#123;&#125;, customHeader: &#123;&#125;"</span>, xAuthorization, customHeader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원하는 json형태로 응답하기</span></span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    "header": &#123;</span></span><br><span class="line"><span class="comment">        "resCode": null</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    "responseBody": &#123;</span></span><br><span class="line"><span class="comment">        "name": "가나다",</span></span><br><span class="line"><span class="comment">        "age": 55</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">Req&lt;User&gt; response = <span class="keyword">new</span> Req&lt;&gt;();</span><br><span class="line">response.setHeader(<span class="keyword">new</span> Req.Header());</span><br><span class="line">response.setResponseBody(user.getResponseBody());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><ul><li>@Data: @ToString, @EqualsAndHashCode, @Getter(모든 필드), @Setter(정적 필드가 아닌 모든 필드), @RequiredArgsConstructor</li><li>@NoArgsConstructor: 파라미터가 없는 기본 생성자 생성</li><li>@AllArgsConstructor: 모든 필드 값을 파라미터로 받는 생성자 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Req-java-1"><a href="#Req-java-1" class="headerlink" title="Req.java"></a>Req.java</h3><p>DTO이다. 제네릭타입으로 원하는 JSON형태를 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Req</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Header header;</span><br><span class="line"><span class="keyword">private</span> T responseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String resCode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Springboot Excel파일 업로드 후 DB에 저장</title>
      <link>https://sowon-dev.github.io/2021/08/09/210810Spring-excel/</link>
      <guid>https://sowon-dev.github.io/2021/08/09/210810Spring-excel/</guid>
      <pubDate>Mon, 09 Aug 2021 20:07:29 GMT</pubDate>
      
      <description>&lt;p&gt;스프링프로젝트에서 엑셀파일을 업로드 한 뒤 각 열을 DB 컬럼과 맞춰서 저장하는 기능을 구현해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링프로젝트에서 엑셀파일을 업로드 한 뒤 각 열을 DB 컬럼과 맞춰서 저장하는 기능을 구현해보자.</p><a id="more"></a><h2 id="엑셀데이터-예시"><a href="#엑셀데이터-예시" class="headerlink" title="엑셀데이터 예시"></a>엑셀데이터 예시</h2><table><thead><tr><th align="center">아이디</th><th align="center">비밀번호</th><th align="center">사용자이름</th></tr></thead><tbody><tr><td align="center">sea</td><td align="center">1234</td><td align="center">김바다</td></tr><tr><td align="center">sun</td><td align="center">5678</td><td align="center">박태양</td></tr><tr><td align="center">wind</td><td align="center">1234</td><td align="center">이바람</td></tr></tbody></table><p>3행 3열로 이루어진 데이터를 DB에 넣어보려고한다.</p><p><br><br><br></p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>먼저 dependency를 추가해야한다. <a href="https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml">메이븐 레포지토리 사이트</a>에서 원하는 버전과 프로젝트를 선택한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="userController-java"><a href="#userController-java" class="headerlink" title="userController.java"></a>userController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/addExcel"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;? extends BasicResponse&gt; addExcel(HttpServletRequest request,</span><br><span class="line">HttpServletResponse response, MultipartFile file) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok().body(service.insertExcel(file));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="userService-java"><a href="#userService-java" class="headerlink" title="userService.java"></a>userService.java</h2><p>확장자 유효성 검사는 1안과 2안이 있는데 2안이 훨씬 좋다.<br>그 이유는 이름만 xls, xlsx로 바꿀 수 있기때문이다 아예 contentType이 XLSX인 것을 확인하는 것이 좋다.</p><ol><li>FilenameUtils.getExtension(file.getOriginalFilename()).toLowerCase()로 한 뒤 xlsx이나 xls이 일치하는 지 확인</li><li>file.getFile().getContentType()을 변수에 담아서 ConstContentType.XLSX과 일치하는 지 확인</li></ol><p><br><br><br>아래는 userService안의 addExcel 메서드 소스 코드이다.<br>BasicResponse클래스는 그냥 response클래스이므로 생략하고 mapper클래스도 생략한다.</p><p>로직 순서이다.</p><ol><li>파라미터에 파일이 있는지 확인 -&gt; 없으면 return 에러</li><li>확장자가 엑셀인지 확인  -&gt; 아니면 return 에러</li><li>엑셀테이터를 가져와서 각 행마다 VO객체에 저장 -&gt; list에 저장</li><li>list를 DB에 insert</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ExcelUtil excelUtil;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BasicResponse <span class="title">addExcel</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">BasicResponse res = <span class="keyword">new</span> BasicResponse();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 파일 존재하지 않는 경우</span></span><br><span class="line"><span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">res.setEmpty();</span><br><span class="line">res.setMessage(<span class="string">"Excel 파일을 선택해주세요."</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 확장자 유효성 검사 -&gt; 엑셀파일만 가능</span></span><br><span class="line"><span class="comment">//1안: tring ext = fileUtil.getExtension(file.getOriginalFilename());</span></span><br><span class="line"><span class="comment">//2안</span></span><br><span class="line">String contentType = file.getFile().getContentType();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1안: if (!ext.equals("xlsx") &amp;&amp; !ext.equals("xls")) &#123;</span></span><br><span class="line"><span class="comment">//2안</span></span><br><span class="line"><span class="keyword">if</span>(!contentType.equals(ConstContentType.XLSX)) &#123;</span><br><span class="line">res.setEmpty();</span><br><span class="line">res.setMessage(<span class="string">"Excel 파일을 선택해주세요."</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; listUser = <span class="keyword">new</span> ArrayList&lt;UserVO&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 엑셀의 셀데이터를 가져와서 VO에 담기</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMap = excelUtil.getListData(file, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : listMap) &#123;</span><br><span class="line">UserVO userInfo = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 셀의 데이터를 VO에 set한다.</span></span><br><span class="line">userInfo.setUserId(map.get(<span class="string">"1"</span>).toString());</span><br><span class="line">userInfo.setPassword(map.get(<span class="string">"2"</span>).toString());</span><br><span class="line">userInfo.setUserName(map.get(<span class="string">"3"</span>).toString());</span><br><span class="line"></span><br><span class="line">listUser.add(userInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리스트에 담은 VO를 DB에 저장</span></span><br><span class="line"><span class="keyword">for</span> (UserVO oneUser : listUser)&#123;</span><br><span class="line">userMapper.insertUser(oneUser);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getListData(file, 1, 3)의 의미<br>엑셀파일의 1번째 행부터 3번째 열까지의 데이터를 listMap에 담는다.<br>0번째 행부터 하지 않는 이유는 보통 0번째행은 머리글행으로 제목이나 구분명칭을 작성하기 때문이다.<br>3인 이유는 엑셀데이터에 3열이 있기때문이다.<br>가지고 있는 엑셀데이터에 따라 변경하면 된다.</li></ul><p><br><br><br></p><h2 id="ExcelUtil-java"><a href="#ExcelUtil-java" class="headerlink" title="ExcelUtil.java"></a>ExcelUtil.java</h2><p>제일 중요한 엑셀유틸객체이다.</p><p>getListData 메서드의 파라미터 정의</p><ul><li>startRowNum : 시트 시작 행 번호이다. 시트 행은 0부터 시작한다.</li><li>columnLength : 시트 열의 총 개수</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 셀의 데이터타입에 맞게 값 가져오기</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCellValue</span><span class="params">(XSSFCell cell)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String value = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cell == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (cell.getCellType()) &#123;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line">value = cell.getStringCellValue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> NUMERIC:</span><br><span class="line">value = (<span class="keyword">int</span>) cell.getNumericCellValue() + <span class="string">""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 엑셀파일의 데이터 목록 가져오기 (파라미터들은 위에서 설명함)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getListData(MultipartFile file, <span class="keyword">int</span> startRowNum, <span class="keyword">int</span> columnLength) &#123;</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; excelList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">OPCPackage opcPackage = OPCPackage.open(file.getInputStream());</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line">XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(opcPackage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 시트</span></span><br><span class="line">XSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rowIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> columnIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 행(0)은 컬럼 명이기 때문에 두번째 행(1) 부터 검색</span></span><br><span class="line"><span class="keyword">for</span> (rowIndex = startRowNum; rowIndex &lt; sheet.getLastRowNum() + <span class="number">1</span>; rowIndex++) &#123;</span><br><span class="line">XSSFRow row = sheet.getRow(rowIndex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 빈 행은 Skip</span></span><br><span class="line"><span class="keyword">if</span> (row.getCell(<span class="number">0</span>) != <span class="keyword">null</span> &amp;&amp; !row.getCell(<span class="number">0</span>).toString().isBlank()) &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cells = columnLength;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (columnIndex = <span class="number">0</span>; columnIndex &lt;= cells; columnIndex++) &#123;</span><br><span class="line">XSSFCell cell = row.getCell(columnIndex);</span><br><span class="line">map.put(String.valueOf(columnIndex), getCellValue(cell));</span><br><span class="line">logger.info(rowIndex + <span class="string">" 행 : "</span> + columnIndex+ <span class="string">" 열 = "</span> + getCellValue(cell));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">excelList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> excelList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="파일-업로드-사이즈-초과-에러"><a href="#파일-업로드-사이즈-초과-에러" class="headerlink" title="파일 업로드 사이즈 초과 에러"></a>파일 업로드 사이즈 초과 에러</h2><p>파일 사이즈를 초과해서 업로드할 수 있으므로 예외처리를 해준다.<br><code>@RestControllerAdvice</code>를 사용한 BadRequestHandler 클래스에서 예외처리를 해주었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadRequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;MaxUploadSizeExceededException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;? <span class="keyword">extends</span> <span class="title">BasicResponse</span>&gt; <span class="title">uploadException</span>(<span class="title">MaxUploadSizeExceededException</span> <span class="title">exc</span>, </span></span><br><span class="line"><span class="class">      <span class="title">HttpServletRequest</span> <span class="title">request</span>,</span></span><br><span class="line"><span class="class">      <span class="title">HttpServletResponse</span> <span class="title">response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(<span class="keyword">new</span> ErrorResponse(String.valueOf(HttpStatus.PAYLOAD_TOO_LARGE.value()), <span class="string">"파일 사이즈를 초과하였습니다. (10MB 이하의 파일을 선택해주세요.)"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/08/09/210810Spring-excel/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>STS git clone 깃허브연동하여 스프링 maven프로젝트 가져오기</title>
      <link>https://sowon-dev.github.io/2021/08/09/210810STSgitClone/</link>
      <guid>https://sowon-dev.github.io/2021/08/09/210810STSgitClone/</guid>
      <pubDate>Mon, 09 Aug 2021 19:23:00 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트 셋팅을 자주하지 않기때문에 헷갈릴 염려가 있어 아예 순서를 적어두려고 한다.&lt;br&gt;github 레포지토리의 springboot maven(메이븐)프로젝트를 가져오는 방법이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트 셋팅을 자주하지 않기때문에 헷갈릴 염려가 있어 아예 순서를 적어두려고 한다.<br>github 레포지토리의 springboot maven(메이븐)프로젝트를 가져오는 방법이다.</p><a id="more"></a><h2 id="1-STS에서-Perpectives를-git으로-변경"><a href="#1-STS에서-Perpectives를-git으로-변경" class="headerlink" title="1 STS에서 Perpectives를 git으로 변경"></a>1 STS에서 Perpectives를 git으로 변경</h2><p><img src="/img/210810STSgitClone1.PNG" alt=""></p><ol><li>STS 또는 이클립스에서 Perspectives의 돋보기 아이콘을 클릭한다.</li><li>git 검색</li><li>Perpectives git 선택</li></ol><p><br><br><br></p><h2 id="2-Clone-a-Git-repository"><a href="#2-Clone-a-Git-repository" class="headerlink" title="2 Clone a Git repository"></a>2 Clone a Git repository</h2><p><img src="/img/210810STSgitClone2.PNG" alt=""></p><ol><li><code>Clone a Git repository</code> 클릭</li><li>깃헙 레포에서 복사한 clone URI를 붙여넣기한다.<br>깃헙에서 초록색 <code>Code</code>버튼을 클릭한 뒤 URI를 복사했다면 붙여넣지 않아도 자동적으로 기입된다.</li><li>NEXT를 클릭한 뒤 Clone을 원하는 브랜치를 선택한다.<br>기본값은 main 또는 master 브랜치가 체크되어 있다.<br>Tag fetching strateguy는 기본값으로 진행하나 필요에 따라 바꾸면 된다.</li><li>LocalDestination의 Directory를 선택한다.<br>저장은 원하는 곳에 설정하면 된다. 나는 보통 D 드라이브로 경로를 설정한다.</li></ol><p>이제 깃헙 연동이 끝났다!<br>잘 가져왔는 지 어떻게 확인할까?<br>아래 이미지에서 체크한 부분을 보자.</p><p><img src="/img/210810STSgitClone3.PNG" alt=""></p><p>STS의 Progress탭을 보면 클론이 진행중인 걸 확인할 수 있다.<br>프로젝트 크기에 따라 시간이 꽤 걸릴 수 있다.</p><p><br><br><br></p><h2 id="3-STS에서-Perpectives를-java로-변경"><a href="#3-STS에서-Perpectives를-java로-변경" class="headerlink" title="3 STS에서 Perpectives를 java로 변경"></a>3 STS에서 Perpectives를 java로 변경</h2><p><img src="/img/210810STSgitClone4.PNG" alt=""></p><ol><li>import projects 클릭</li><li>maven 검색</li><li>Existing Maven Projects선택</li></ol><p><img src="/img/210810STSgitClone5.PNG" alt=""></p><ol start="4"><li><p>Browe 선택 후 위에서 저장된 경로 선택<br>나는 D에 저장햇으므로 D에 있는 파일 경로를 선택했다.</p></li><li><p>pom.xml 선택 확인<br>자동적으로 pom.xml이 검색되고 체크되므로 확인한다.</p></li><li><p>finish 버튼<br>조금만 기다리면 불러오기가 완료된다!<br>끝!</p></li></ol><h2 id="gradle-프로젝트라면"><a href="#gradle-프로젝트라면" class="headerlink" title="gradle 프로젝트라면?"></a>gradle 프로젝트라면?</h2><p>1,2번은 동일하게 진행하면 되고 3번에서 maven이 아니라 gradle폴더를 선택한 후 <code>Existing Gradle Project</code>를 클릭하면 된다!<br>참 쉽죠?!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/09/210810STSgitClone/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Interceptor</title>
      <link>https://sowon-dev.github.io/2021/08/08/210809Spring-interceptor/</link>
      <guid>https://sowon-dev.github.io/2021/08/08/210809Spring-interceptor/</guid>
      <pubDate>Sun, 08 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링에서 인터셉터에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링에서 인터셉터에 대해 알아보자.</p><a id="more"></a><h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><ul><li><a href="https://sowon-dev.github.io/2021/08/06/210807Spring-filter/">Filter</a>와 매우 유사한 형태지만 차이점은 Spring Context에 등록됨.</li><li>Controller 영역 안에 존재</li><li>AOP와 유사한 기능 제공 가능</li><li>주로 <code>인증 단계</code>를 처리하는데 사용 (조직에 따라 Logging용도로 사용)</li><li>인터셉터를 선/후처리함으로써, 서비스 비즈니스 로직과 분리시킴.</li><li><code>@RequiredArgsConstructor</code>: final로 선언된 객체들을 생성자에서 주입받을 수 있도록 해줌</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/08/210809Spring-interceptor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Filter</title>
      <link>https://sowon-dev.github.io/2021/08/06/210807Spring-filter/</link>
      <guid>https://sowon-dev.github.io/2021/08/06/210807Spring-filter/</guid>
      <pubDate>Fri, 06 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링에서 필터에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링에서 필터에 대해 알아보자.</p><a id="more"></a><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li>Filter란 웹 어플리케이션에서 관리되는 영역</li><li>스프링부트 프레임워크에서 요청/응답의 최초와 최종단계에 위치</li><li>필터를 통해 요청/응답 정보 변경 가능</li><li><strong>유일하게 ServletRequest, ServletResponse 객체를 변환할 수 있음</strong></li><li>주로 인증로직과 logging용도로 활용<ul><li>보통 실무에선 logging용도로 사용되고 <a href="https://sowon-dev.github.io/2021/08/09/210809Spring-interceptor/">intercepter</a>가 인증단계로 사용됨</li></ul></li></ul><p><br><br><br>전역 Filter설정방법과 특정 컨트롤러에만 Filter를 설정하는 방법을 예제 코드와 함께 보자.<br>차이점으로는 특정 컨트롤러 필터사용시 아래 두 어노테이션을 사용한다는 점이다.</p><ul><li><code>@ServletComponentScan</code></li><li><code>@WebFilter(&quot;/api2/user/*&quot;)</code></li></ul><p><br><br></p><h2 id="Filter-공통-코드"><a href="#Filter-공통-코드" class="headerlink" title="Filter 공통 코드"></a>Filter 공통 코드</h2><ul><li>User.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="전역-Filter-코드-예제"><a href="#전역-Filter-코드-예제" class="headerlink" title="전역 Filter 코드 예제"></a>전역 Filter 코드 예제</h2><ul><li>FilterApplication.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(FilterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller1.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"user1: &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GlobalFilter1.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//전처리</span></span><br><span class="line">    ContentCachingRequestWrapper req = <span class="keyword">new</span> ContentCachingRequestWrapper((HttpServletRequest) request);</span><br><span class="line">    ContentCachingResponseWrapper res = <span class="keyword">new</span> ContentCachingResponseWrapper((HttpServletResponse) response);</span><br><span class="line"></span><br><span class="line">    chain.doFilter(req, res);</span><br><span class="line">    String url = req.getRequestURI();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//후처리</span></span><br><span class="line">    String reqContent = <span class="keyword">new</span> String(req.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone url: &#123;&#125;, reqBody: &#123;&#125;"</span>, url, reqContent);</span><br><span class="line"></span><br><span class="line">    String resContent = <span class="keyword">new</span> String(res.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone resBody: &#123;&#125;"</span>, resContent);</span><br><span class="line">    <span class="comment">// 필수: 한 번 읽었기때문에 원래대로 copy 돌려놓아야한다.</span></span><br><span class="line">    res.copyBodyToResponse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="특정-컨트롤러-Filter-코드-예제"><a href="#특정-컨트롤러-Filter-코드-예제" class="headerlink" title="특정 컨트롤러 Filter 코드 예제"></a>특정 컨트롤러 Filter 코드 예제</h2><ul><li>FilterApplication.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span> <span class="comment">//2번방법용</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(FilterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller2.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 컨트롤러에만 필터적용</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Api2Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"Api2Controller 컨트롤러에만 GlobalFilter2 필터 적용"</span>);</span><br><span class="line">    log.info(<span class="string">"user2: &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GlobalFilter2.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/api2/user/*"</span>) <span class="comment">//특정 컨트롤러에만 사용 가능하도록 설정</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//전처리</span></span><br><span class="line">    ContentCachingRequestWrapper req = <span class="keyword">new</span> ContentCachingRequestWrapper((HttpServletRequest) request);</span><br><span class="line">    ContentCachingResponseWrapper res = <span class="keyword">new</span> ContentCachingResponseWrapper((HttpServletResponse) response);</span><br><span class="line"></span><br><span class="line">    chain.doFilter(req, res);</span><br><span class="line">    String url = req.getRequestURI();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//후처리</span></span><br><span class="line">    String reqContent = <span class="keyword">new</span> String(req.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone url: &#123;&#125;, reqBody: &#123;&#125;"</span>, url, reqContent);</span><br><span class="line"></span><br><span class="line">    String resContent = <span class="keyword">new</span> String(res.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone resBody: &#123;&#125;"</span>, resContent);</span><br><span class="line">    <span class="comment">// 필수: 한 번 읽었기때문에 원래대로 copy 돌려놓아야한다.</span></span><br><span class="line">    res.copyBodyToResponse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/06/210807Spring-filter/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
