<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Fri, 23 Sep 2022 07:35:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[ASP.NET] 웹폼(WebForm) VS MVC</title>
      <link>https://sowon-dev.github.io/2022/09/20/220921ASPNET-WEBFORM-VS-MVC/</link>
      <guid>https://sowon-dev.github.io/2022/09/20/220921ASPNET-WEBFORM-VS-MVC/</guid>
      <pubDate>Tue, 20 Sep 2022 19:49:51 GMT</pubDate>
      
      <description>&lt;p&gt;이번 프로젝트에서는 웹폼(WebForm)기반으로 개발하게 되었다. MVC 패턴에만 익숙한 내게 웹폼(WebForm)은 생소했다.&lt;br&gt;그래서 웹폼과 MVC이 어떤 차이가 있는지 비교해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번 프로젝트에서는 웹폼(WebForm)기반으로 개발하게 되었다. MVC 패턴에만 익숙한 내게 웹폼(WebForm)은 생소했다.<br>그래서 웹폼과 MVC이 어떤 차이가 있는지 비교해봤다.</p><a id="more"></a><h2 id="WebFrom-VS-MVC"><a href="#WebFrom-VS-MVC" class="headerlink" title="WebFrom VS MVC"></a>WebFrom VS MVC</h2><p><img src="https://pediaa.com/wp-content/uploads/2018/10/Difference-Between-Webform-and-MVC-Comparison-Summary-743x1024.jpg" alt="https://pediaa.com/what-is-the-difference-between-webform-and-mvc/"></p><p>가장 큰 차이점은 웹폼(WebForm)은 전통적인 이벤트 중심 개발모델이고 MVC는 Model, View, Controller 기반의 개발모델이다.</p><ul><li>웹폼 프로세스(로그인예시)<ol><li>사용자가 로그인폼에 로그인정보 입력 후 로그인버튼 클릭</li><li>form데이터들이 POST방식으로 서버에 전송</li><li>ASP.NET 실행 엔진을 통해 파싱(데이터 구문 분석과정) -&gt; 클라이언트에서 로그인버튼이 클릭되었음을 확인</li><li>로그인버튼에 연결된 이벤트 핸들러 메서드를 찾아 호출</li><li>실행결과를 HTML코드로 클라이언트에게 전달</li><li>로그인 완료 또는 실패.</li></ol></li><li>웹폼 장점<ul><li>데이터 Control이 내장되어 있어 강력한 데이터 엑세스로 신속한 개발 가능.</li><li>단일 파일 페이지 모델: 코드와 태그를 한 파일에서 확인할 수 있으며 파일일간의 종속성이 없다.</li></ul></li><li>웹폼 단점<ul><li>개발자 설계 능력에 따라 웹폼 프로젝트 유지보수 강도가 정해진다. </li><li>이벤트 중심으로 전체 흐름을 파악하기 어렵다.</li><li>테스트 자동화가 어렵다. </li><li>SEO에 친화적이지 않다.</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://pediaa.com/what-is-the-difference-between-webform-and-mvc/">What is the Difference Between Webform and MVC</a></li><li><a href="https://askanydifference.com/difference-between-asp-net-mvc-and-web-form-with-table/">Difference Between ASP.NET MVC and Web form</a></li><li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=islove8587&logNo=220489016761">ASP.NET WebForm, MVC</a></li><li><a href="https://only1004.tistory.com/6">asp.net 웹폼에 대하여..</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/NET/">NET</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/C/">C#</category>
      
      
      <comments>https://sowon-dev.github.io/2022/09/20/220921ASPNET-WEBFORM-VS-MVC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트] useEffect에서 props사용하기</title>
      <link>https://sowon-dev.github.io/2022/09/12/220913React-useEffect-props/</link>
      <guid>https://sowon-dev.github.io/2022/09/12/220913React-useEffect-props/</guid>
      <pubDate>Mon, 12 Sep 2022 21:50:43 GMT</pubDate>
      
      <description>&lt;p&gt;부모 컴포넌트에서 위도와 경도를 props로 전달하여 자식컴포넌트에서 카카오맵API를 통해 특정 장소를 호출하고 싶었으나 오류가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>부모 컴포넌트에서 위도와 경도를 props로 전달하여 자식컴포넌트에서 카카오맵API를 통해 특정 장소를 호출하고 싶었으나 오류가 발생했다.</p><a id="more"></a><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><p>useEffect안에서 로직상 상태가 변하지않는 props를 쓰고 싶음</p><p><br><br><br></p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><p>부모컴포넌트인 <code>Detail.js</code>에서 자녀 컴포넌트인 <code>Map.js</code>로 좌표, 위도와 경도를 넘겨주었다.<br>이를 <code>Map.js</code>에서 props로 위도와 경도를 받아서 카카오맵API로 카카오맵을 호출하고자했다.<br>여기서 로직상 props로 받은 위도와 경도는 상태가 변하지 않는다.<br>componentDidUpdate용도로 useEffect를 사용했다.</p><ul><li>Detail.js 코드</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// detail.addrLat는 위도이고 detail.addrLng는 경도이다.</span></span><br><span class="line">&lt;<span class="built_in">Map</span> latitude=&#123;detail.addrLat&#125; longitude=&#123;detail.addrLng&#125; /&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="❗-문제발생"><a href="#❗-문제발생" class="headerlink" title="❗ 문제발생"></a>❗ 문제발생</h2><p>위도와 경도는 업데이트가 되지않는 데이터이기때문에 Hooks버전에서 componentDidMount만 사용하고 무한루프를 예방하기 위해 빈배열로 나뒀다.</p><ul><li>Map.js 코드</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Map</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`콘솔1번 props.latitude: <span class="subst">$&#123;props.latitude&#125;</span>`</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> &#123; kakao &#125; = <span class="built_in">window</span></span><br><span class="line">    <span class="keyword">const</span> lat = props.latitude</span><br><span class="line">    <span class="keyword">const</span> long = props.longitude</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`콘솔2번 props.latitude: <span class="subst">$&#123;props.latitude&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'map'</span>)</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            center: <span class="keyword">new</span> kakao.maps.LatLng(lat, long),</span><br><span class="line">            level: <span class="number">3</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> map = <span class="keyword">new</span> kakao.maps.Map(container, options)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지도에 마커를 생성하고 표시한다</span></span><br><span class="line">        <span class="keyword">var</span> marker = <span class="keyword">new</span> kakao.maps.Marker(&#123;</span><br><span class="line">            position: <span class="keyword">new</span> kakao.maps.LatLng(lat, long), <span class="comment">// 마커의 좌표</span></span><br><span class="line">            map: map, <span class="comment">// 마커를 표시할 지도 객체</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div id=<span class="string">"map"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'750px'</span>, <span class="attr">height</span>: <span class="string">'350px'</span> &#125;&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그랬더니 콘솔결과는 아래와 같았다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">4</span> </span><br><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">4</span></span><br><span class="line">콘솔<span class="number">2</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">10</span> </span><br><span class="line">콘솔<span class="number">2</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">10</span> </span><br><span class="line"></span><br><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="number">35.101425</span> <span class="built_in">Map</span>.js:<span class="number">4</span> </span><br><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="number">35.101425</span> <span class="built_in">Map</span>.js:<span class="number">4</span></span><br></pre></td></tr></table></figure><p>콘솔2번은 useEffect안에서 호출한 건데 props로 받아온 모든 값이 undefined로 되어있어서 카카오맵 API가 제대로 호출되지않았다.</p><p><br><br><br></p><h2 id="💡-해결"><a href="#💡-해결" class="headerlink" title="💡 해결"></a>💡 해결</h2><p><a href="https://www.reddit.com/r/learnreactjs/comments/oc23du/how_to_use_props_in_useeffect/">구글링해본 결과 props를 사용하려면 두번째 인수인 빈 배열에다가 props를 넣으면</a>된다고 한다.<br>물론 두번째 파라미터를 사용하는 경우 useEffect는 componentDidMount + componentDidUpdate역할을 동시에 하게 된다.</p><ul><li>Map.js 코드</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Map</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`콘솔1번 props.latitude: <span class="subst">$&#123;props.latitude&#125;</span>`</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> &#123; kakao &#125; = <span class="built_in">window</span></span><br><span class="line">    <span class="keyword">const</span> lat = props.latitude</span><br><span class="line">    <span class="keyword">const</span> long = props.longitude</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`콘솔2번 props.latitude: <span class="subst">$&#123;props.latitude&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'map'</span>)</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            center: <span class="keyword">new</span> kakao.maps.LatLng(lat, long),</span><br><span class="line">            level: <span class="number">3</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> map = <span class="keyword">new</span> kakao.maps.Map(container, options)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지도에 마커를 생성하고 표시한다</span></span><br><span class="line">        <span class="keyword">var</span> marker = <span class="keyword">new</span> kakao.maps.Marker(&#123;</span><br><span class="line">            position: <span class="keyword">new</span> kakao.maps.LatLng(lat, long), <span class="comment">// 마커의 좌표</span></span><br><span class="line">            map: map, <span class="comment">// 마커를 표시할 지도 객체</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, [props])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div id=<span class="string">"map"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'750px'</span>, <span class="attr">height</span>: <span class="string">'350px'</span> &#125;&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그랬더니 콘솔결과는 아래와 같았다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">4</span> </span><br><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">4</span></span><br><span class="line">콘솔<span class="number">2</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">10</span> </span><br><span class="line">콘솔<span class="number">2</span>번 props.latitude: <span class="literal">undefined</span> <span class="built_in">Map</span>.js:<span class="number">10</span> </span><br><span class="line"></span><br><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="number">35.101425</span> <span class="built_in">Map</span>.js:<span class="number">4</span> </span><br><span class="line">콘솔<span class="number">1</span>번 props.latitude: <span class="number">35.101425</span> <span class="built_in">Map</span>.js:<span class="number">4</span></span><br><span class="line">콘솔<span class="number">2</span>번 props.latitude: <span class="number">35.101425</span> <span class="built_in">Map</span>.js:<span class="number">10</span></span><br></pre></td></tr></table></figure><p>콘솔2번에 제대로 된 값이 들어오면서 카카오맵이 내가 원하는 지도를 호출해줬다!<br>해결~!</p><p>이 과정을 해결하면서 2가지 궁금증이 생겼다.<br>첫번째는 왜 undefined일까? 였고 두번째는 동일한 콘솔로그가 왜 두번씩 호출될까?였다.</p><p><br><br><br></p><h2 id="💬-근데-왜-undefined일까"><a href="#💬-근데-왜-undefined일까" class="headerlink" title="💬 근데 왜 undefined일까?"></a>💬 근데 왜 undefined일까?</h2><p>리액트의 실행순서때문이다.</p><ol><li>Map.js(이하 자식컴포넌트) 호출</li><li>Detail.js(이하 부모컴포넌트) 호출</li><li>자식컴포넌트의 useEffect 실행</li><li>부모컴포넌트의 useEffect 실행 -&gt; axios 완료</li><li>부모컴포넌트 호출</li><li>자식컴포넌트 호출</li></ol><p>처음 자식컴포넌트를 호출되므로 부모한테서 props를 받을 수 없기에 아예 없는 값이다.<br>그리곤 부모컴포넌트에서 useEffect로 axios가 실행되어야지 setState()를 통해서 props를 자식컴포넌트에 전달할 수 있다.<br>근데 axios다녀오기도 전에 자식컴포넌트의 useEffect를 실행해버리니 props값이 undefined일수밖에 없다!</p><p>이 상황을 말씀드리니 팀장님이 한 가지 더 미션을 주셨다.</p><table><thead><tr><th align="center">팀장님</th><th align="center">나</th></tr></thead><tbody><tr><td align="center"></td><td align="center">팀장님, 아까 리액트 질문에서요~ 실행순서 때문에 undefined가 났었고 useEffect 두번째 인자에 props를 주니 해결되었습니다.</td></tr><tr><td align="center">props 받아서 고치는게 맞을것 같네요. 대신에 undefined에 대한 대책이 필요한 것 같아요.</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">오호 대책이요?</td></tr><tr><td align="center">props가 값이 없을 때는 카카오 생성하고 하면 그만큼 비효율적일 것 같아서요</td><td align="center"></td></tr></tbody></table><p>오 역시 팀장님께 말씀드리길 잘했다. 생각도 못한 부분인데 어떻게 하면 해결할수 있을지 고심해봤다.</p><p><br><br><br></p><h2 id="💬-undefined에-대한-대책"><a href="#💬-undefined에-대한-대책" class="headerlink" title="💬 undefined에 대한 대책"></a>💬 undefined에 대한 대책</h2><p>props가 없을땐 자식컴포넌트를 실행시키지 않으면 되니까~ 내 머리속에 떠오른 방법은 크게 두 가지였다.</p><ol><li>자식컴포넌트에서 props가 없을 땐 실행하지않기.</li><li>부모컴포넌트에서 axios다녀온 뒤에, 즉 데이터가 있을때 자식컴포넌트 실행하기 </li></ol><p><br><br><br></p><h3 id="자식컴포넌트에서-useEffect-조건을-걸어볼까"><a href="#자식컴포넌트에서-useEffect-조건을-걸어볼까" class="headerlink" title="자식컴포넌트에서 useEffect 조건을 걸어볼까?"></a>자식컴포넌트에서 useEffect 조건을 걸어볼까?</h3><p>아래와 같은 소스코드에서 props가 없을땐 카카오의 maps객체르 호출하지 않아야겠다고 생각하고 if조건문을 걸어주려고 했다.</p><ul><li>자식컴포넌트 (Map.js) 소스코드<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Map</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; kakao &#125; = <span class="built_in">window</span></span><br><span class="line">    <span class="keyword">const</span> lat = props.latitude</span><br><span class="line">    <span class="keyword">const</span> long = props.longitude</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Map 컴포넌트 실행.'</span>)</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//if (props) &#123;</span></span><br><span class="line">        <span class="keyword">debugger</span></span><br><span class="line">        <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'map'</span>)</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            center: <span class="keyword">new</span> kakao.maps.LatLng(lat, long),</span><br><span class="line">            level: <span class="number">3</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> map = <span class="keyword">new</span> kakao.maps.Map(container, options)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지도에 마커를 생성하고 표시한다</span></span><br><span class="line">        <span class="keyword">var</span> marker = <span class="keyword">new</span> kakao.maps.Marker(&#123;</span><br><span class="line">            position: <span class="keyword">new</span> kakao.maps.LatLng(lat, long), <span class="comment">// 마커의 좌표</span></span><br><span class="line">            map: map, <span class="comment">// 마커를 표시할 지도 객체</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div id=<span class="string">"map"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'750px'</span>, <span class="attr">height</span>: <span class="string">'350px'</span> &#125;&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>하지만!<br>디버깅해보니 디버킹타이밍에선 props가 아예 없는 객체였다! 두둥-<br>1번 방법은 실패!</p><p><br><br><br></p><h3 id="부모컴포넌트에서-props로-줄-데이터가-있을때-자식컴포넌트-호출하기"><a href="#부모컴포넌트에서-props로-줄-데이터가-있을때-자식컴포넌트-호출하기" class="headerlink" title="부모컴포넌트에서 props로 줄 데이터가 있을때 자식컴포넌트 호출하기"></a>부모컴포넌트에서 props로 줄 데이터가 있을때 자식컴포넌트 호출하기</h3><p>props로 넘겨줄 <code>detail.addr1</code> 라는 데이터가 있을때만 자식컴포넌트인 Map을 호출했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;detail.addr1 &amp;&amp; (</span><br><span class="line">&lt;<span class="built_in">Map</span></span><br><span class="line">latitude=&#123;detail.addrLat&#125;</span><br><span class="line">longitude=&#123;detail.addrLng&#125;</span><br><span class="line">/&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>이렇게 undefined일때는 아예 자식컴포넌트를 호출하지 않는 방법으로 문제 해결!!</p><p><br><br><br></p><h2 id="💬-또-다른-궁금증-왜-두번씩-호출될까"><a href="#💬-또-다른-궁금증-왜-두번씩-호출될까" class="headerlink" title="💬 또 다른 궁금증, 왜 두번씩 호출될까?"></a>💬 또 다른 궁금증, 왜 두번씩 호출될까?</h2><p>useEffect안에서 props를 사용하는 과정에서 동일한 콘솔로그가 두 번씩 호출되는 게 궁금해져서 친구 중에 리액트 천재에게 물어봤다.<br>친구가 <code>혹시 index.js에 React.StrictMode 사용했어?</code> 라고 물어봤고 확인해보니 진짜였다!<br>어떻게 안거지? 😱<br>마치 내 코드를 본 것만 같은 정확도였다.</p><p><a href="https://ko.reactjs.org/docs/strict-mode.html">리액트공식문서: Strict 모드</a>에 따르면 Strict 모드는 개발 모드에서만 활성화되기 때문에, 프로덕션 빌드에는 영향을 끼치지 않고 애플리케이션의 잠재적인 문제를 알아내기 위해 사용한다고 한다. </p><ul><li>잠재적인 문제란?<ul><li>안전하지 않은 생명주기를 사용하는 컴포넌트 발견</li><li>레거시 문자열 ref 사용에 대한 경고</li><li>권장되지 않는 findDOMNode 사용에 대한 경고</li><li>예상치 못한 부작용 검사</li><li>레거시 context API 검사</li><li>Ensuring reusable state</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2021/03/22/210323React-componentLifeCycle/">컴포넌트 생명주기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/09/12/220913React-useEffect-props/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Server]아파치 vs 톰캣 같은 거 아냐? 차이점</title>
      <link>https://sowon-dev.github.io/2022/09/05/220906Tomcat-vs-Apatch/</link>
      <guid>https://sowon-dev.github.io/2022/09/05/220906Tomcat-vs-Apatch/</guid>
      <pubDate>Mon, 05 Sep 2022 19:05:43 GMT</pubDate>
      
      <description>&lt;p&gt;과장님과 서버구축 관련 이야기를 나누다 아파치와 톰캣이 차이가 있다는 걸 알게되었다.&lt;br&gt;띠용? 톰캣이 아파치 소프트웨어 재단에서 개발된 것이므로 아파치서버나 톰캣서버나 동일하다고 생각하고 있었다.&lt;br&gt;구글링결과 아파치서버와 톰캣서버는 아주 큰 차이점이 있었고 이를 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>과장님과 서버구축 관련 이야기를 나누다 아파치와 톰캣이 차이가 있다는 걸 알게되었다.<br>띠용? 톰캣이 아파치 소프트웨어 재단에서 개발된 것이므로 아파치서버나 톰캣서버나 동일하다고 생각하고 있었다.<br>구글링결과 아파치서버와 톰캣서버는 아주 큰 차이점이 있었고 이를 공부해봤다.</p><a id="more"></a><h2 id="아피치-톰캣-다-같은-거-아냐"><a href="#아피치-톰캣-다-같은-거-아냐" class="headerlink" title="아피치 톰캣 다 같은 거 아냐?"></a>아피치 톰캣 다 같은 거 아냐?</h2><p>NOPE!<br>아파치(Apach)란 아파치 소프트웨어 재단 이름이다. 실무에서 아파치서버라고 부른다면 아파치 재단의 오픈소스로 만든 Web Server를 칭한다.<br>우리가 헷갈리는 이유 WAS가 웹서버의 기능을 다 수행할 수 있기때문이다.<br>하지만 서버과부하, 보안강화 등의 목적으로 WAS와 Web Server를 분리하는 프로젝트들도 있다.</p><table><thead><tr><th align="center"></th><th align="center">Web Server</th><th align="center">WAS(Web Application Server)</th></tr></thead><tbody><tr><td align="center">정의</td><td align="center">웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(.html .jpeg .css 등)를 제공하는 컴퓨터 프로그램</td><td align="center">DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server</td></tr><tr><td align="center">데이터</td><td align="center">클라이언트측 정적 데이터</td><td align="center">서버측 동적 데이터</td></tr><tr><td align="center">DB데이터 사용</td><td align="center">불가능</td><td align="center">가능</td></tr><tr><td align="center">예시</td><td align="center">Apache Server, Nginx, IIS(Windows 전용 Web 서버)등</td><td align="center">Tomcat, JBoss, Jeus, Web Sphere 등</td></tr></tbody></table><p><br><br><br></p><h2 id="잠시만-IIS도-동적페이지-생성이-가능한데-Web-Server라고"><a href="#잠시만-IIS도-동적페이지-생성이-가능한데-Web-Server라고" class="headerlink" title="잠시만 IIS도 동적페이지 생성이 가능한데 Web Server라고?"></a>잠시만 IIS도 동적페이지 생성이 가능한데 Web Server라고?</h2><p>맞다. IIS는 Web Server와 WAS가 함께 있는 서버이다.<br>ms진영에서는 IIS를 웹서버라고 부르며, 웹서버와 WAS를 딱히 구별하지 않는 듯 하다.<br>IIS는 ms용, WAS는 범용이라 생각하면 되고 서로 바라보는 범위가 약간 다른 셈!</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2020/10/04/201005jspProcessVSThreadNWebServerVSWAS/#%EC%9B%B9%EC%84%9C%EB%B2%84-WEB-SERVER-VS-%EC%9B%B9%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%84%9C%EB%B2%84-WAS-Web-Application-Server">웹서버(WEB SERVER) VS 웹어플리케이션서버(WAS, Web Application Server)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/09/05/220906Tomcat-vs-Apatch/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DB서버를 분리하는 이유가 뭘까</title>
      <link>https://sowon-dev.github.io/2022/09/04/220905Server-separation/</link>
      <guid>https://sowon-dev.github.io/2022/09/04/220905Server-separation/</guid>
      <pubDate>Sun, 04 Sep 2022 22:49:00 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트를 진행하다보면 다양한 서버 구죽 환경을 만난다.&lt;br&gt;단일서버도 있고 DB서버를 분리하여 서버를 구축하기도 한다.&lt;br&gt;실무에선 주로 DB서버를 분리하는 데 단일서버와의 차이점이 궁금했다.&lt;br&gt;어떨때 DB서버를 분리하고 어떨 때는 분리하지 않는걸까? 그로 인한 장단점에는 뭐가 있을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트를 진행하다보면 다양한 서버 구죽 환경을 만난다.<br>단일서버도 있고 DB서버를 분리하여 서버를 구축하기도 한다.<br>실무에선 주로 DB서버를 분리하는 데 단일서버와의 차이점이 궁금했다.<br>어떨때 DB서버를 분리하고 어떨 때는 분리하지 않는걸까? 그로 인한 장단점에는 뭐가 있을까?</p><a id="more"></a><h2 id="DB서버와-WAS를-나누는-이유"><a href="#DB서버와-WAS를-나누는-이유" class="headerlink" title="DB서버와 WAS를 나누는 이유"></a>DB서버와 WAS를 나누는 이유</h2><p>프로젝트 관리정책이나 클라이언트의 요구에 따라 단일 서버를 쓰기도 하고 DB서버를 분리하기도 한다.<br>DB서버를 분리하는 이유는 크게 두 가지를 들 수 있다.</p><ol><li>보안<ul><li>서버를 분리할수록 보안에 유리하다.</li></ul></li><li>성능<ul><li>DB 서버는 메모리를 빡빡하게 쓴다. 리소스를 많이 잡아먹으므로 서버분리를 통해 성능을 높일 수 있다. </li><li>실무에선 WAS에서 처리하는게 많은 경우,DB서버와 분리한다.</li></ul></li></ol><p><br><br><br></p><h2 id="DB서버-분리-단점"><a href="#DB서버-분리-단점" class="headerlink" title="DB서버 분리 단점"></a>DB서버 분리 단점</h2><p>보안과 성능이라는 두가지 장점이 있다면 단점도 분명 있을 것이다.<br>단점도 크게 두가지로 볼 수 잇다.</p><ol><li>서버 비용 증가</li><li>방화벽설정 문제가 발생할 수 있음<ul><li>단점이라기보단 예상할 수 있는 문제에 가깝지만, 실무에서 DB서버를 분리함으로서 방화벽설정에 문제가 있을 수 있다. 예를 들어 관리포인트가 많을 경우 한 쪽서버만 접속되는 문제가 발생할 수 있다.</li></ul></li></ol><p><br><br><br></p><h2 id="소스코드가-있는-프로그램을-부르는-명칭이-따로-있을까"><a href="#소스코드가-있는-프로그램을-부르는-명칭이-따로-있을까" class="headerlink" title="소스코드가 있는 프로그램을 부르는 명칭이 따로 있을까?"></a>소스코드가 있는 프로그램을 부르는 명칭이 따로 있을까?</h2><p>나는 늘 그랬듯 용어가 궁금했다. 소통을 잘하고싶은 마음때문에 항상 용어를 신경쓴다.<br>소스코드가 있는 그 프로그램을 뭐라고 부르는지 무척 궁금했는데 과장님이 프로그램을 소스코드 경로 최상단인 <code>webroot</code> 라고도 부른다고 알려주셨다.<br>감사합니다 과장님!</p><p>과장님과 얘기나누던 중에 내가 아파치와 톰캣을 명확히 구분하지 못한다는 사실을 발견했다.<br>이와 관련되서는 따로 포스팅했다. <a href="https://sowon-dev.github.io/2022/09/05/220906Tomcat-vs-Apatch/">참고 아파치 vs 톰캣 같은 거 아냐? 차이점</a></p><p>여담으로, 회사 선임분들이 너무 좋다. 팀장님도 좋고 과장님도 좋다. 내가 난해하게 물어볼때도 최대한 알기쉽게 알려주신다. 항상 감사하다. 덕분에 많이 배웁니다.</p><p><br><br><br></p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li>과장님 경험</li><li><a href="https://webisfree.com/2020-05-07/[%EC%84%9C%EB%B2%84%EA%B5%AC%EC%B6%95]-%EB%8B%A8%EC%9D%BC-%EC%84%9C%EB%B2%84%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%84%EB%A6%AC%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C">단일 서버와 데이터베이스 서버의 분리가 왜 필요할까</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/09/04/220905Server-separation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS]동적 달력(캘린더)만들기</title>
      <link>https://sowon-dev.github.io/2022/08/30/220831js-calendar/</link>
      <guid>https://sowon-dev.github.io/2022/08/30/220831js-calendar/</guid>
      <pubDate>Tue, 30 Aug 2022 20:43:18 GMT</pubDate>
      
      <description>&lt;p&gt;JS로 달에 맞게 생성되는 동적 달력을 그려보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JS로 달에 맞게 생성되는 동적 달력을 그려보자.</p><a id="more"></a><h2 id="html-태그로만-달력그리기"><a href="#html-태그로만-달력그리기" class="headerlink" title="html 태그로만 달력그리기"></a>html 태그로만 달력그리기</h2><p>html코드로만 달력을 그린다면 아래와 같은 것이다.<br>하지만 이렇게 그린다면 달마다 바뀌는 달력이 아닌 정적달력이 되버린다.<br>매달 달라지는 달력은 어떻게 만들까?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-arrow-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>이전달<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"title-date"</span>&gt;</span>----년 -월<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-arrow-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>다음달<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"month-table"</span> <span class="attr">class</span>=<span class="string">"table_cal"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>일<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>월<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>화<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>수<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>목<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>금<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>토<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>9<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>10<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>11<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>12<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>13<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>14<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"possible"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>15<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>16<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>17<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>18<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>19<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>20<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>21<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"possible"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>22<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>23<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>24<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>25<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>26<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>27<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>28<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>29<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>30<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>31<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="동적-달력"><a href="#동적-달력" class="headerlink" title="동적 달력"></a>동적 달력</h2><p>위 html코드에서 thead와 tbody부분을 제거했다.<br>restDaysWeekNumber를 통해서 주말과 평일을 나눠서 달력에 특별한 표시를 할수도 있다.<br>해당 코드를 사용하기 위해서는 moment.js가 있어야한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha512-CryKbMe7sjSCDPl18jtJI5DR5jtkUWxPXWaLCst6QjH8wxDexfRJic2WRmRXmstr2Y8SxDDWuBO6CQC6IE4KTA=="</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span> <span class="attr">referrerpolicy</span>=<span class="string">"no-referrer"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> createMonthTable = <span class="keyword">async</span> (date) =&gt; &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> firstDate = <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), date.getMonth(), <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> lastDate = <span class="keyword">new</span> moment(firstDate).add(<span class="number">1</span>, <span class="string">'months'</span>).subtract(<span class="number">1</span>, <span class="string">'days'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> currentDate = firstDate;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#title-date'</span>).text(moment(firstDate).format(<span class="string">"YYYY년 MM월"</span>));</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#title-date'</span>).data(<span class="string">"firstdate"</span>, firstDate);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> table = $(<span class="string">"#month-table"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> calenderTable = $(<span class="string">"&lt;table id='month-table'&gt;&lt;/table&gt;"</span>);</span></span><br><span class="line">calenderTable.empty();</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> today = moment();</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> tempCurrentDate;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> daysNumber = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> theadTr = $(<span class="string">"&lt;thead&gt;&lt;/thead&gt;"</span>);</span></span><br><span class="line">theadTr.appendTo(calenderTable);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> headTr = $(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> th = $(<span class="string">"&lt;th&gt;"</span> + moment().day(i).format(<span class="string">"ddd"</span>) + <span class="string">"&lt;/th&gt;"</span>);</span></span><br><span class="line">headTr.append(th);</span><br><span class="line">&#125;</span><br><span class="line">headTr.appendTo(theadTr);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> restDaysWeekNumber = <span class="string">"60"</span>; <span class="comment">/* 정기휴일(일:0,월:1,화:2, ... ,금:5,토:6) */</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">while</span> (currentDate &lt;= lastDate) &#123;</span></span><br><span class="line"><span class="actionscript">tempCurrentDate = <span class="keyword">new</span> moment(currentDate);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> daysTr = $(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123; <span class="comment">// 여기서 i는 요일</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> td = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>);</span></span><br><span class="line"></span><br><span class="line">if (restDaysWeekNumber.includes(i)) &#123;</span><br><span class="line"><span class="actionscript">td.addClass(<span class="string">"blocked"</span>); <span class="comment">// 주말표시가 된 class를 추가할 수 있음</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">if (tempCurrentDate.day() == i &amp;&amp; firstDate <span class="tag">&lt;<span class="name">=</span> <span class="attr">tempCurrentDate</span> &amp;&amp; <span class="attr">tempCurrentDate</span> &lt;= <span class="string">lastDate)</span> &#123;</span></span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> p = $(<span class="string">"&lt;p&gt;"</span>+tempCurrentDate.date()+<span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line">p.appendTo(td);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> span = $(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>);</span></span><br><span class="line">span.appendTo(td);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">tempCurrentDate.add(<span class="number">1</span>, <span class="string">'days'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">td.appendTo(daysTr);</span><br><span class="line">&#125;</span><br><span class="line">daysTr.appendTo(calenderTable);</span><br><span class="line"><span class="actionscript">currentDate = <span class="keyword">new</span> moment(tempCurrentDate);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> parent = table.parent();</span></span><br><span class="line">table.remove();</span><br><span class="line">calenderTable.appendTo(parent);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="actionscript"><span class="comment">// 달력 이전달 이동</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> makePreCalender = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">preDateString = moment($(<span class="string">'#title-date'</span>).data(<span class="string">'firstdate'</span>)).add(<span class="string">'-1'</span>,<span class="string">'M'</span>).format(<span class="string">"YYYY-MM-DD"</span>);</span></span><br><span class="line"><span class="javascript">createMonthTable(<span class="keyword">new</span> <span class="built_in">Date</span>(preDateString));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 달력 다음달 이동</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> makeNextCalender = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">nextDateString = moment($(<span class="string">'#title-date'</span>).data(<span class="string">'firstdate'</span>)).add(<span class="string">'1'</span>,<span class="string">'M'</span>).format(<span class="string">"YYYY-MM-DD"</span>);</span></span><br><span class="line"><span class="javascript">createMonthTable(<span class="keyword">new</span> <span class="built_in">Date</span>(nextDateString));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data = createMonthTable(<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:makePreCalender();"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-arrow-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>이전달<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"title-date"</span>&gt;</span>----년 -월<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:makeNextCalender();"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-arrow-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>다음달<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"month-table"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>일<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>월<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>화<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>수<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>목<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>금<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>토<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>완성!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/08/30/220831js-calendar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>예약 프로그램 프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2022/08/23/220824projectreview7/</link>
      <guid>https://sowon-dev.github.io/2022/08/23/220824projectreview7/</guid>
      <pubDate>Tue, 23 Aug 2022 20:40:31 GMT</pubDate>
      
      <description>&lt;p&gt;이번 프로젝트에서는 예약프로그램을 도맡아 개발했다. 요구사항에 맞게 기능을 제한하는 부분에 가장 많은 공을 들였다.&lt;br&gt;시간이 많이 촉박했던 프로젝트라 야근을 많이 했는데 테스트할때 생각보다 큰 버그가 없어서 뿌듯했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번 프로젝트에서는 예약프로그램을 도맡아 개발했다. 요구사항에 맞게 기능을 제한하는 부분에 가장 많은 공을 들였다.<br>시간이 많이 촉박했던 프로젝트라 야근을 많이 했는데 테스트할때 생각보다 큰 버그가 없어서 뿌듯했다.</p><a id="more"></a><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li>성능을 고려하면서 SQL을 제대로 짜기위해 노력했다.</li><li>js와 jqeury로 달력그리기 마스터가 되었다. 데이터를 가져올때 async 와 await 도 사용하고 이해도가 훨씬 향상되었다. 다음에는 템플릿을 이용해서 그리고 싶다.</li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>고객사의 요구사항이 명확하지 않을때 해결하는 과정에서 많은 어려움이 있었다. 고객사 담당자도 구체적인 정책이 없는 상황에서 프로젝트 시간은 여전히 촉박하고 기다림의 시간이 반복되었다. 최대한 확장성이 있는 기능을 구현하는 게 해답이라는 걸 깨달았다. </li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>앞으로도 요구사항이 명확하지 않은 프로젝트를 할 수 있는데 어떤 설계를 해야 확장성을 갖추면서 효율적으로 개발할 수 있을까? 디자인패턴을 공부해야겠다.</li></ol><p><br><br><br></p><h2 id="관련-포스팅"><a href="#관련-포스팅" class="headerlink" title="관련 포스팅"></a>관련 포스팅</h2><ul><li><a href="https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/">서브쿼리(Subquery)보다 조인(Join)을 써야하는 이유(코드비교)</a></li><li><a href="https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/">gson을 이용하여 JSON을 HashMap으로 변환하기(영화관 좌석 예매 예시)</a></li><li><a href="https://sowon-dev.github.io/2022/08/11/220812SQL-variable/">변수 @사용법, 사용자 정의 변수 직접 사용해보기</a></li><li><a href="https://sowon-dev.github.io/2022/08/15/220816Jsp-restart/">jsp파일을 수정하면 서버를 재시작해야할까?</a></li><li><a href="https://sowon-dev.github.io/2022/08/18/220818JSTL-date/">JSTL 날짜 차이 계산하기</a></li><li><a href="https://sowon-dev.github.io/2022/08/30/220831js-calendar/">동적 달력(캘린더)만들기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/23/220824projectreview7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>소장도서목록</title>
      <link>https://sowon-dev.github.io/2022/08/22/bookList/</link>
      <guid>https://sowon-dev.github.io/2022/08/22/bookList/</guid>
      <pubDate>Mon, 22 Aug 2022 21:18:45 GMT</pubDate>
      
      <description>&lt;p&gt;소장도서목록입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>소장도서목록입니다.</p><a id="more"></a><h2 id="📚-소장도서"><a href="#📚-소장도서" class="headerlink" title="📚 소장도서"></a>📚 소장도서</h2><table><thead><tr><th align="center"><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=21396757">프로그래머의 뇌</a></th><th align="center"><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=22462163">좋은 코드, 나쁜 코드</a></th></tr></thead><tbody><tr><td align="center"><img src="http://image.kyobobook.co.kr/images/book/xlarge/650/x9791191600650.jpg" width="100%" height="300px"/>훌륭한 프로그래머가 알아야 할 인지과학의 모든 것</td><td align="center"><img src="http://image.kyobobook.co.kr/images/book/xlarge/896/x9791191600896.jpg" width="100%" height="300px"/>프로그래머의 코드 개선법</td></tr><tr><td align="center"><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788960777330&orderClick=LEa&Kc="><strong>자바 ORM 표준 JPA 프로그래밍</strong></a></td><td align="center"><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791161755656&orderClick=LEa&Kc="><strong>React.js, 스프링 부트, AWS로 배우는 웹 개발 101</strong></a></td></tr><tr><td align="center"><img src="http://image.kyobobook.co.kr/images/book/xlarge/330/x9788960777330.jpg" width="100%" height="300px"/>스프링 데이터 예제 프로젝트로 배우는 전자정부 표준 데이터베이스 프레임</td><td align="center"><img src="http://image.kyobobook.co.kr/images/book/xlarge/656/x9791161755656.jpg" width="100%" height="300px"/>SPA, REST API 기반 웹 애플리케이션 개발</td></tr><tr><td align="center"><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&linkClass=&barcode=9791190665643"><strong>자바 개발자를 위한 97가지 제안</strong></a></td><td align="center"><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9791191600414#N"><strong>그림으로 공부하는 TCP/IP 구조</strong></a></td></tr><tr><td align="center"><img src="http://image.kyobobook.co.kr/images/book/xlarge/643/x9791190665643.jpg" width="100%" height="300px"/>73인의 전문가에게 듣는 자바 컬렉션</td><td align="center"><img src="http://image.kyobobook.co.kr/images/book/xlarge/414/x9791191600414.jpg" width="100%" height="300px"/>인터넷, TCP/IP, 애플리케이션부터 보안, 네트워크 기기, 부하분산까지 네트워크의 기본 지식</td></tr><tr><td align="center"><a href="http://www.yes24.com/Product/Goods/112036547">모두를 위한 클라우드 컴퓨팅</a></td><td align="center"><a href=""></a></td></tr><tr><td align="center"><img src="http://image.yes24.com/goods/112036547/XL" width="100%" height="300px"/>HTC 개념부터 가상화, 컨테이너, CI/CD, AWS 프로그래밍까지</td><td align="center"></td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/22/bookList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>포인트 플랫폼 프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2022/08/20/220715projectreivew6/</link>
      <guid>https://sowon-dev.github.io/2022/08/20/220715projectreivew6/</guid>
      <pubDate>Sat, 20 Aug 2022 23:44:17 GMT</pubDate>
      
      <description>&lt;p&gt;이번 프로젝트는 기능 구현상 어려운 점은 크게 없었으나 서비스 도메인이 처음 접하는 도메인이라 비즈니스를 이해하는데 꽤 시간이 걸렸다.&lt;br&gt;이번 프로젝트를 통해 그 어떤 새로운 서비스 도메인을 접해도 어디서부터 어떻게 흐름을 잡고 분석하면 될지 배울 수 있었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번 프로젝트는 기능 구현상 어려운 점은 크게 없었으나 서비스 도메인이 처음 접하는 도메인이라 비즈니스를 이해하는데 꽤 시간이 걸렸다.<br>이번 프로젝트를 통해 그 어떤 새로운 서비스 도메인을 접해도 어디서부터 어떻게 흐름을 잡고 분석하면 될지 배울 수 있었다.</p><a id="more"></a><p>역시 노력하면 못할 게 없다. 물론 옆에 든든한 대리님과 팀장님이 있어서 모르는 부분을 중복해서 물어봐도 이해가 쏙쏙 되도록 잘 알려주셨다. 이 자리를 빌어 감사드립니다.<br>비즈니스로직에 의문을 품는 습관도 중요하다는 걸 알게되었다. 모두가 다 테스트 끝났다고 했지만 흐름을 이해하면서 하다보니 누락된 오류들을 여러 건 잡을 수 있었다.<br>문제가 발생되기 전에 미리 예방해서 참 뿌듯했다.</p><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li>서비스 도메인을 빠른 시일내에 이해하려고 노력한 부분: 어려운 도메인은 서비스 이해에서부터 시작된다. 처음하는 채굴과 코인, 포인트, 추천인등의 세계에서 나는 갈피를 못잡고 허우적대다 대리님의 주신 동아줄을 가까스로 잡을 수 있었다.</li><li>비즈니스 로직에 의심을 품은 부분: 단순히 숫자가 잘 나오는 지 테스트하는 게 아니라 유저입장과 관리자입장에서 각각 비즈니스 로직을 생각하고 현재 있는 로직에 오류는 없는 지 두번 체크한 부분은 참 잘했다. 덕분에 누락된 오류들과 애매모호한 로직들을 미리 잡고 정책을 만들 수 있었다. 뿌듯!</li><li>서버에 war배포를 직접 하겠다고 하고 해낸 부분: PuTTY와 FileZilla를 자주 접하려고 노력한 점은 참 잘했다. </li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>쉘스크립트 개념이 어려워서 다음에 이해해야지하고 넘어간 부분: 다음이란 없다. 다른 시니어 개발자와 소통할 수 있도록 지금부터 공부해야한다.</li><li>자바 스케줄러를 제대로 이해하려고 노력하지 않은 부분: 마찬가지로 다음이란 없다. 지금부터 익히 들어두며 스스로 공부해야한다.</li><li>트리구조 쿼리를 여전히 제대로 만들지 못하는 부분: recursive등 고급 SQL을 더 깊게 공부해야한다. 언제까지고 팀장님이 도와주실순 없다. 스스로 노력하자.</li><li>톰캣 배포 에러나는 부분은 전혀 갈피를 못잡고 팀장님께 도움을 요청한 부분: Server 배포를 추가로 공부하자.</li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>욕심내자. 생각으로 욕심내는 게아니라 행동으로 욕심내자. 실력은 스스로 키우는 것이다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/20/220715projectreivew6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSTL] 날짜 차이 계산하기</title>
      <link>https://sowon-dev.github.io/2022/08/18/220818JSTL-date/</link>
      <guid>https://sowon-dev.github.io/2022/08/18/220818JSTL-date/</guid>
      <pubDate>Thu, 18 Aug 2022 04:00:10 GMT</pubDate>
      
      <description>&lt;p&gt;현재날짜와 db에서 가져오는 날짜 차이를 계산하고 싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>현재날짜와 db에서 가져오는 날짜 차이를 계산하고 싶었다.</p><a id="more"></a><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><p>구글링끝에 드디어 성공~!!<br>now는 오늘날짜이고 list.dbDt는 db에서 가져온 날짜값이다.<br>여기서 중요한 점은 parseNumber할때 <code>.time</code>을 해줘야지 제대로 계산된다는 점이다. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:parseNumber</span> <span class="attr">value</span>=<span class="string">"$&#123;now.time / (1000*60*60*24)&#125;"</span> <span class="attr">integerOnly</span>=<span class="string">"true"</span> <span class="attr">var</span>=<span class="string">"nowfmtTime"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:parseNumber</span> <span class="attr">value</span>=<span class="string">"$&#123;list.dbDt.time / (1000*60*60*24)&#125;"</span> <span class="attr">integerOnly</span>=<span class="string">"true"</span> <span class="attr">var</span>=<span class="string">"dbDtParse"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">$&#123;dbDtParse - nowfmtTime &#125;</span><br></pre></td></tr></table></figure><p>예를 들어 now가 2022-08-18이고 list.dbDt가 2022-08-19이면 <code>${dbDtParse - nowfmtTime }</code>값은 0이다.<br>테스트해보면 아래와 같이 값을 계산할 수 있다.</p><table><thead><tr><th align="center">now</th><th align="center">list.dbDt</th><th align="center">${dbDtParse - nowfmtTime }</th></tr></thead><tbody><tr><td align="center">2022-08-18</td><td align="center">2022-08-18</td><td align="center">-1</td></tr><tr><td align="center">2022-08-18</td><td align="center">2022-08-18</td><td align="center">0</td></tr><tr><td align="center">2022-08-18</td><td align="center">2022-08-20</td><td align="center">1</td></tr><tr><td align="center">2022-08-18</td><td align="center">2022-08-23</td><td align="center">4</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/JSTL/">JSTL</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/18/220818JSTL-date/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] jsp파일을 수정하면 서버를 재시작해야할까?</title>
      <link>https://sowon-dev.github.io/2022/08/15/220816Jsp-restart/</link>
      <guid>https://sowon-dev.github.io/2022/08/15/220816Jsp-restart/</guid>
      <pubDate>Mon, 15 Aug 2022 20:16:34 GMT</pubDate>
      
      <description>&lt;p&gt;개발을 하다보면 알겠지만 jsp 파일을 수정한 뒤 서버를 재시작하지않아도 반영이 된다. 어떨땐 즉시 반영되는데 또 어떨땐 반영이 느릴때도 있다.&lt;br&gt;jsp에는 java코드도 있는데 어떻게 컴파일없이 바로 반영이 될까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>개발을 하다보면 알겠지만 jsp 파일을 수정한 뒤 서버를 재시작하지않아도 반영이 된다. 어떨땐 즉시 반영되는데 또 어떨땐 반영이 느릴때도 있다.<br>jsp에는 java코드도 있는데 어떻게 컴파일없이 바로 반영이 될까?</p><a id="more"></a><p>즉시반영이 안 될때 혹 반영이 느릴때는 어떻게 해야할까?</p><p><br><br><br></p><h2 id="JSP-특징"><a href="#JSP-특징" class="headerlink" title="JSP 특징"></a>JSP 특징</h2><ul><li>동적 웹어플리케이션 컴포넌트</li><li>응답형식 html</li></ul><p><br><br><br></p><h2 id="페이지-실행-순서"><a href="#페이지-실행-순서" class="headerlink" title="페이지 실행 순서"></a>페이지 실행 순서</h2><ul><li>최초 호출: jsp -&gt; 서블릿 java 변환 -&gt; .class로 컴파일(컴파일일시를기록) -&gt; 클래스파일을 메모리에 로딩 -&gt; html 전송 -&gt; 브라우저에서 html이 보여짐</li><li>jsp 파일 수정없이 호출한 경우: 깆ㄴ 단순히 publishing</li><li>jsp 파일 수정후 호출한 경우: 컴파일일시가 변경되었다면, 서블릿 java로 변환 -&gt; .class컴파일 후 재로딩</li></ul><p><br><br><br></p><h2 id="jsp-수정사항-즉시-반영이-안될때"><a href="#jsp-수정사항-즉시-반영이-안될때" class="headerlink" title="jsp 수정사항 즉시 반영이 안될때?"></a>jsp 수정사항 즉시 반영이 안될때?</h2><ol><li>서버세팅이 자동 컴파일 되는 지 체크<ul><li>톰캣 context.xml 파일에서 <code>&lt;Context reloadable=&quot;true&quot;&gt;</code> 리로더블이 true인지 확인할 것</li></ul></li><li>이클립스에서 publish to the server 버튼을 클릭(단축키 : Ctrl + Alt + P) - <a href="https://gocoder.tistory.com/387">참고글: Eclipse HTML 수정 즉시 반영</a></li></ol><p><br><br></p><h3 id="만약-서버-재시작해도-반영이-안된다면"><a href="#만약-서버-재시작해도-반영이-안된다면" class="headerlink" title="만약 서버 재시작해도 반영이 안된다면?"></a>만약 서버 재시작해도 반영이 안된다면?</h3><ol><li>해당 컴파일 파일을 먼저 백업해놓기</li><li>해당 class파일 석제하기</li><li>해당 페이지 다시 호출해서 컴파일 파일이 자동 생성되는 지 확인하기</li></ol><p>그렇다면 JSP컴파일 파일은 어디에 있을까?</p><ul><li>기본위치: <code>톰캣홈/work/Catalina/호스트이름/_/org/apache/jsp</code></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/08/15/220816Jsp-restart/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[SQL]변수 @사용법, 사용자 정의 변수 직접 사용해보기</title>
      <link>https://sowon-dev.github.io/2022/08/11/220812SQL-variable/</link>
      <guid>https://sowon-dev.github.io/2022/08/11/220812SQL-variable/</guid>
      <pubDate>Thu, 11 Aug 2022 15:13:20 GMT</pubDate>
      
      <description>&lt;p&gt;SQL에서도 변수를 사용할 수 있다! 알고는 있었지만 잘 사용한 적이 없는데 이번에 select로 가져온 값을 서브쿼리에서 사용하고 싶어서 찾아보다가 변수를 사용하게 되었다.&lt;br&gt;이밖에도 row갯수를 셀때에도 단독으로 많이 사용한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SQL에서도 변수를 사용할 수 있다! 알고는 있었지만 잘 사용한 적이 없는데 이번에 select로 가져온 값을 서브쿼리에서 사용하고 싶어서 찾아보다가 변수를 사용하게 되었다.<br>이밖에도 row갯수를 셀때에도 단독으로 많이 사용한다.</p><a id="more"></a><h2 id="사용자-정의-변수"><a href="#사용자-정의-변수" class="headerlink" title="사용자 정의 변수"></a>사용자 정의 변수</h2><p>변수란? 특정 값을 담아두는 곳이다.<br>사용자 정의변수란? 명칭 그대로 사용자가 임의로 사용하려고 만든 변수이다.</p><p><br><br><br></p><h3 id="1-선언-및-초기화"><a href="#1-선언-및-초기화" class="headerlink" title="1. 선언 및 초기화"></a>1. 선언 및 초기화</h3><p>사용자 정의 변수를 선언 및 초기화하는 방법은 간단하다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @변수명 = 대입값;</span><br><span class="line"><span class="keyword">SET</span> @변수명 := 대입값;</span><br><span class="line"><span class="keyword">SELECT</span> @변수명 := 대입값;</span><br></pre></td></tr></table></figure><p>SET 명령문에서는 <code>=</code>과 <code>:=</code>를 둘 다 사용할 수 있지만 SET 이외의 명령문에서는 <code>=</code>가 비교연산자이기때문에 변수를 선언할땐 <code>:=</code>만 쓸 수 있다.<br>기본값은 NULL이다.</p><p><br><br><br></p><h3 id="2-사용"><a href="#2-사용" class="headerlink" title="2. 사용"></a>2. 사용</h3><p>변수를 사용하는 방법은 더 간단하다.<br>원하는 곳에 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @변수명 = 대입값;</span><br><span class="line"><span class="keyword">SET</span> @변수명 := 대입값;</span><br><span class="line"><span class="keyword">SELECT</span> @변수명 := 대입값;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="예시코드"><a href="#예시코드" class="headerlink" title="예시코드"></a>예시코드</h2><p>내가 하고 싶었던 것: select에서 가져온 TPOT.WEEK_CODE의 값을 별칭 roundRowNo를 가져올 서브쿼리에 사용하기.<br>그래서 아래와 같은 코드를 짰다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDetail"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Movie"</span>&gt;</span></span><br><span class="line">/* query id: getDetail */</span><br><span class="line">SELECT</span><br><span class="line">DATE_FORMAT(TPR.RESERVE_DT, '%Y-%m-%d') as reserveDt</span><br><span class="line">, @weekcode := TPOT.WEEK_CODE </span><br><span class="line">, (SELECT roundRowNo </span><br><span class="line">FROM (</span><br><span class="line">SELECT </span><br><span class="line">OPEN_TIME_ID</span><br><span class="line">, (@row_number := @row_number + 1) AS roundRowNo </span><br><span class="line">FROM tb_open_time</span><br><span class="line">JOIN (SELECT @row_number := 0) r</span><br><span class="line">WHERE IS_USE = 1 </span><br><span class="line">AND   WEEK_CODE = @weekcode</span><br><span class="line">) totalRowCnt</span><br><span class="line">  WHERE totalRowCnt.OPEN_TIME_ID = TPR.OPEN_TIME_ID</span><br><span class="line">  ) AS roundRowNo</span><br><span class="line">, -- 중략</span><br><span class="line">FROM TB_RESERVE TPR </span><br><span class="line">JOIN TB_USER TU </span><br><span class="line">ON TPR.RESERVE_USER_NO = TU.USER_NO</span><br><span class="line">JOIN TB_OPEN_TIME TPOT </span><br><span class="line">ON  TPR.OPEN_TIME_ID = TPOT.OPEN_TIME_ID </span><br><span class="line">WHERE TPR.RESERVE_ID = #&#123;reserveId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="1-weekcode-TPOT-WEEK-CODE의-의미"><a href="#1-weekcode-TPOT-WEEK-CODE의-의미" class="headerlink" title="1. @weekcode := TPOT.WEEK_CODE의 의미"></a>1. <code>@weekcode := TPOT.WEEK_CODE</code>의 의미</h3><p>SELECT문에서 <code>weekcode</code>라는 변수를 선언 한 뒤(= <code>@weekcode</code>) TPOT.WEEK_CODE 값으로 초기화 했다.<br>이때 SET 명령문이 아닌 SELECT문이기에 <code>:=</code>를 사용했다.</p><p><br><br><br></p><h3 id="2-row-number"><a href="#2-row-number" class="headerlink" title="2. row_number"></a>2. row_number</h3><p>실무에서 사용자 정의 변수를 가장 많이 사용할 때는 바로 row 개수를 구할때이다.</p><ol><li><code>@row_number := 0</code> : 변수 <code>@row_number</code>를 0으로 선언 및 초기화를 한다.</li><li><code>@row_number := @row_number + 1</code> : 출력되는 행의 갯수만큼 +1 더해주면 되므로 누적합을 한다.</li><li>이를 행마다 출력해주면 row 개수를 구하는 쿼리 끝!</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQL/">MySQL</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/11/220812SQL-variable/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gson을 이용하여 JSON을 HashMap으로 변환하기(영화관 좌석 예매 예시)</title>
      <link>https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/</link>
      <guid>https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/</guid>
      <pubDate>Wed, 10 Aug 2022 15:02:02 GMT</pubDate>
      
      <description>&lt;p&gt;클라이언트에서 json형태로 넘긴 데이터를 컨트롤러에서 String으로 받아 Json으로 변환한 뒤 Map으로 변환하여 사용하고싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>클라이언트에서 json형태로 넘긴 데이터를 컨트롤러에서 String으로 받아 Json으로 변환한 뒤 Map으로 변환하여 사용하고싶었다.</p><a id="more"></a><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><p>영화관 좌석을 체크하면 원하는 정보가 Object형태로 생성한 뒤 리스트에 담아서 form태그로 서버에 전송하고싶었다.</p><ul><li>jsp파일</li></ul><p>html태그에는 체크박스 클릭시 클릭이벤트를 달아준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chkSeat"</span> <span class="attr">value</span>=<span class="string">"'+idx+'"</span> <span class="attr">data-movieId</span>=<span class="string">"17"</span> <span class="attr">data-row</span>=<span class="string">"F"</span> <span class="attr">data-seatNo</span>=<span class="string">"7"</span> <span class="attr">onclick</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>편의상 제이쿼리로 클릭이벤트를 달았다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 각 행 체크박스 클릭시 이벤트</span></span><br><span class="line"><span class="keyword">let</span> chkMovieSeatList = []; <span class="comment">// 전역변수로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tickSeatCheckbox</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentEl = event.currentTarget;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 체크박스 체크시</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.checked) &#123;</span><br><span class="line"><span class="keyword">let</span> tickSeat = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">tickSeat.idx = $(<span class="keyword">this</span>).val();</span><br><span class="line">tickSeat.movieId = $(<span class="keyword">this</span>).data(<span class="string">'movieId'</span>);</span><br><span class="line">tickSeat.row = $(<span class="keyword">this</span>).data(<span class="string">'row'</span>);</span><br><span class="line">tickSeat.seatNo = $(<span class="keyword">this</span>).data(<span class="string">'seatNo'</span>);</span><br><span class="line">chkMovieSeatList.push(tickSeat)</span><br><span class="line"><span class="comment">// 체크박스 체크해제시</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    chkMovieSeatList = chkMovieSeatList.filter(<span class="function">(<span class="params">element</span>)=&gt;</span>element.idx != $(currentEl).val());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 리스트에 담기</span></span><br><span class="line">$(<span class="string">"input[name=chkMovieSeatList]"</span>).val(<span class="built_in">JSON</span>.stringify(chkMovieSeatJson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 체크박스 변화시 체크박스 클릭이벤트 실행</span></span><br><span class="line">    $(<span class="string">"input[name=chkSeat]"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        tickSeatCheckbox();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>전송은 form태그로 했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"form[name=saveFrm]"</span>).submit();</span><br></pre></td></tr></table></figure><ul><li>DTO파일</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line"><span class="keyword">private</span> String chkMovieSeatList; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹시 <a href="https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/">DTO vs Model vs Entity 이 세가지의 차이가 궁금하다면 여기를</a> 클릭하면 된다.</p><ul><li>controller파일</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Seat param, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">String redirect = <span class="string">"redirect:주소"</span>;</span><br><span class="line"></span><br><span class="line">BooleanAndMessageResult result = <span class="keyword">new</span> BooleanAndMessageResult();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = seatService.save(param);</span><br><span class="line"><span class="keyword">if</span> (result.isResult()) &#123;</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"success"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">result.setResult(<span class="keyword">false</span>);</span><br><span class="line">result.setMessage(<span class="string">"등록에 실패 하였습니다."</span>);</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"result"</span>, result);</span><br><span class="line"><span class="keyword">return</span> redirect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="gson을-이용하여-JSON을-HashMap으로-변환"><a href="#gson을-이용하여-JSON을-HashMap으로-변환" class="headerlink" title="gson을 이용하여 JSON을 HashMap으로 변환"></a>gson을 이용하여 JSON을 HashMap으로 변환</h2><p>String 형태로 받은 chkMovieSeatList을 Map형태로 변환한 뒤 체크된 갯수만큼 반복문을 돌려 db에 insert를 했다.<br>자바 JSON 라이브러리인 <a href="https://github.com/google/gson">goolge.gson</a>를 이용해서 변환했다.<br>chkMovieSeatList에서는 쌍따옴표가 &quot;로 들어가 있기때문에 replaceAll()을 이용해서 변경해줬다.</p><ul><li>SeatServiceImpl.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonMappingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonArray;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonElement;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParseException;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BooleanAndMessageResult <span class="title">save</span><span class="params">(Seat param)</span></span>&#123;</span><br><span class="line">BooleanAndMessageResult result = <span class="keyword">new</span> BooleanAndMessageResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line"></span><br><span class="line">JsonParser jsonParser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">JsonArray jsonArray = (JsonArray) jsonParser.parse(req.getChkMovieSeatList을().replaceAll(<span class="string">"&amp;quot;"</span>,<span class="string">"\""</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(JsonElement seatEl : jsonArray)&#123;</span><br><span class="line">JsonObject seatObj = (JsonObject) seatEl;</span><br><span class="line">HashMap&lt;String, Object&gt; seatMap;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">seatMap = <span class="keyword">new</span> ObjectMapper().readValue(seatObj.toString(), HashMap<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">seatDAO.insertSeat(seatMap);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonParseException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/JSON/">JSON</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL] 서브쿼리(Subquery)보다 조인(Join)을 써야하는 이유(코드비교)</title>
      <link>https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/</link>
      <guid>https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/</guid>
      <pubDate>Tue, 09 Aug 2022 04:09:53 GMT</pubDate>
      
      <description>&lt;p&gt;회차별로 예약할 수 있는 영화 프로그램을 만들어야 한다고 생각해보자.&lt;br&gt;여기서 회차는 요일별로 동일하다. 즉, 이번주 월요일에 총 3회차 영화상영이, 화요일에는 2회차 영화상영이 있었다면 다음주 월요일도 총 3회차, 화요일에는 2회차 영화상영이 예정되어 있는 것이다.&lt;br&gt;사용자가 선택한 날짜의 회차별로 이미 예약된 내역정보뿐만 아니라 예약 가능한 좌석수를 가져오는 쿼리를 만들어야한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>회차별로 예약할 수 있는 영화 프로그램을 만들어야 한다고 생각해보자.<br>여기서 회차는 요일별로 동일하다. 즉, 이번주 월요일에 총 3회차 영화상영이, 화요일에는 2회차 영화상영이 있었다면 다음주 월요일도 총 3회차, 화요일에는 2회차 영화상영이 예정되어 있는 것이다.<br>사용자가 선택한 날짜의 회차별로 이미 예약된 내역정보뿐만 아니라 예약 가능한 좌석수를 가져오는 쿼리를 만들어야한다.</p><a id="more"></a><p>쿼리를 이해하기 위한 정보는 아래와 같다.</p><table><thead><tr><th align="center">구분</th><th align="center">명칭</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">테이블</td><td align="center">TB_TIME</td><td align="center">회차 테이블</td></tr><tr><td align="center">테이블</td><td align="center">TB_RESERVE</td><td align="center">예약 내역테이블</td></tr><tr><td align="center">파라미터</td><td align="center">dt</td><td align="center">조회 날짜</td></tr><tr><td align="center">파라미터</td><td align="center">id</td><td align="center">회차 ID</td></tr><tr><td align="center">컬럼</td><td align="center">ALL_SEAT</td><td align="center">해당 회차의 전체 좌석수</td></tr><tr><td align="center">컬럼</td><td align="center">RESERVE_DT</td><td align="center">상영일</td></tr><tr><td align="center">별칭</td><td align="center">openSeat</td><td align="center">예약가능한 좌석수</td></tr></tbody></table><h2 id="내쿼리"><a href="#내쿼리" class="headerlink" title="내쿼리"></a>내쿼리</h2><p>select구문에 subquery를 넣어서 해당 날짜에서 선택된 회차의 잔여 예약좌석수를 구했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TPOT.ID</span><br><span class="line">, <span class="comment">-- 여러 정보 컬럼 (중략) </span></span><br><span class="line">, <span class="keyword">IFNULL</span>(TPOT.ALL_SEAT,<span class="number">0</span>) - <span class="keyword">IFNULL</span>((<span class="keyword">SELECT</span> <span class="keyword">sum</span>(<span class="keyword">IFNULL</span>(TPR.RESERVED_SEAT, <span class="number">0</span>)) <span class="keyword">FROM</span> TB_RESERVE TPR <span class="keyword">WHERE</span> TPR.ID = <span class="comment">#&#123;id&#125; AND TPR.RESERVE_DT = DATE(#&#123;dt&#125;) GROUP BY TPR.ID),0) as openSeat</span></span><br><span class="line"><span class="keyword">FROM</span> TB_TIME TPOT </span><br><span class="line"><span class="keyword">WHERE</span> TPOT.ID = <span class="comment">#&#123;id&#125;</span></span><br></pre></td></tr></table></figure><p>팀장님이 이 쿼리를 보시곤 join을 써보는게 어떻냐며 알려주셨다.</p><p><br><br><br></p><h2 id="subquery를-제거한-쿼리"><a href="#subquery를-제거한-쿼리" class="headerlink" title="subquery를 제거한 쿼리"></a>subquery를 제거한 쿼리</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TPOT.ID</span><br><span class="line">, <span class="comment">-- 여러 정보 컬럼 (중략) </span></span><br><span class="line">, <span class="keyword">IFNULL</span>(TPOT.ALL_SEAT, <span class="number">0</span>) - <span class="keyword">IFNULL</span>(a.totalReservedSeat, <span class="number">0</span>) <span class="keyword">as</span> openSeat</span><br><span class="line"><span class="keyword">FROM</span> TB_TIME TPOT </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">RESERVE_DT</span><br><span class="line">,<span class="keyword">DATE_FORMAT</span>(RESERVE_DT, <span class="string">'%a'</span>) <span class="keyword">as</span> WEEK_CODE</span><br><span class="line">,TIME_ID </span><br><span class="line">,<span class="keyword">SUM</span>(RESERVED_SEAT) totalReservedSeat </span><br><span class="line"><span class="keyword">FROM</span>  TB_RESERVE</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">DATE</span>(RESERVE_DT) = <span class="built_in">DATE</span>(<span class="comment">#&#123;dt&#125;)</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">RESERVE_DT</span><br><span class="line">,<span class="keyword">DATE_FORMAT</span>(RESERVE_DT, <span class="string">'%a'</span>)</span><br><span class="line">,TIME_ID</span><br><span class="line">) a</span><br><span class="line"><span class="keyword">ON</span> TPOT.WEEK_CODE = a.WEEK_CODE</span><br><span class="line"><span class="keyword">AND</span> TPOT.TIME_ID = a.TIME_ID</span><br><span class="line"><span class="keyword">WHERE</span> TPOT.ID = <span class="comment">#&#123;id&#125;</span></span><br><span class="line"><span class="keyword">AND</span>   <span class="keyword">DATE_FORMAT</span>(<span class="comment">#&#123;dt&#125;, '%a') = TPOT.WEEK_CODE</span></span><br></pre></td></tr></table></figure><p>팀장님이 도와주셔서 다시 작성한 쿼리이다.이 쿼리를 보면 요일 구분이 확실히 들어가있어 요구사항이 제대로 반영되어있다는 걸 알 수 있다.<br>자칫 길어보이는 쿼리인데 왜 subquery보다 join을 쓰면 좋을까?</p><p><br><br><br></p><h2 id="subquery보다-join을-써야하는-이유"><a href="#subquery보다-join을-써야하는-이유" class="headerlink" title="subquery보다 join을 써야하는 이유"></a>subquery보다 join을 써야하는 이유</h2><p>MySQL버전마다 성능이 다르지만 MySQL5.5에서 MySQL5.6으로 버전업되면서 서브쿼리 성능이 개선되었다고 한다.<br>MySQL5.5에서는 서브퀴리 최적화에 많은 문제가 있어왔다. 의도한대로 서브쿼리가 제대로 실행되지 않거나 속도가 느리다.<br><a href="https://jojoldu.tistory.com/520">jojoldu님이 블로그 글 MySQL where in (서브쿼리) vs 조인 조회 성능 비교 (5.5 vs 5.6)</a>을 참고하면 얼마나 속도차이가 나는지까지 확인 할 수 있다.<br>버전과 조건 관계없이 좋은 성능을 내려면 최대한 join을 이용하는 것이 좋다.<br>만약 서브 쿼리를 사용해 필터링을 하면 이는 크게 성능이 저하된다. 이럴땐 LEFT [OUTER] JOIN을 써서 옵티마이저(Optimizer)가 최적화 하기 쉽도록 하여 성능을 개선할 수 있다.</p><p>오늘도 또 하나 배웠다! 뿌듯~</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQL/">MySQL</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] 쿼리 어노테이션(Query Annotation) 에러(expression or DISTINCT expected, got)해결</title>
      <link>https://sowon-dev.github.io/2022/08/08/220808SpringJPA-queryannotation/</link>
      <guid>https://sowon-dev.github.io/2022/08/08/220808SpringJPA-queryannotation/</guid>
      <pubDate>Mon, 08 Aug 2022 00:57:57 GMT</pubDate>
      
      <description>&lt;p&gt;인텔리제이를 사용하면 Spring 프레임워크를 사용하는데 많은 도움을 받을 수 있다.&lt;br&gt;친구가 인텔리제이로 공부하던 중에 JPA 쿼리어노테이션 에러가 떠서 나한테 물어봤는데 나도 정확히 잘 몰라서 이참에 함께 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>인텔리제이를 사용하면 Spring 프레임워크를 사용하는데 많은 도움을 받을 수 있다.<br>친구가 인텔리제이로 공부하던 중에 JPA 쿼리어노테이션 에러가 떠서 나한테 물어봤는데 나도 정확히 잘 몰라서 이참에 함께 공부해봤다.</p><a id="more"></a><h2 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h2><p>친구는 Todo테이블에서 userId에 일치되는 행을 가져오는 쿼리를 짜고 싶었다고 한다.</p><p><img src="/img/220808jpaqueryannotation.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo WHERE t.userId = ?1"</span>)</span><br></pre></td></tr></table></figure><p>위 쿼리에서 오류가 있어 인텔리제이가 인텔리저이의 아래 error 메시지를 보여줬다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;expression&gt; or DISTINCT expected, got &#39;*&#39;</span><br></pre></td></tr></table></figure><p>에러를 해석해보면, <code>표현식 또는 구별자가 있어야한다</code>라고 한다.<br>어떤 오류일까?</p><p><br><br><br></p><h2 id="오류-해결"><a href="#오류-해결" class="headerlink" title="오류 해결"></a>오류 해결</h2><p>where절에서 t.userId를 불러오는데 쿼리상에 t가 정의되지 않았다.<br>즉 Todo 테이블의 별칭을 t로 정의해줘야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo t WHERE t.userId = ?1"</span>)</span><br></pre></td></tr></table></figure><p>오류가 해결되었다!<br>사실 아주 간단한 문제였다.<br>하지만 JPA Query Annotation을 잘 알지못하니 5초만에 턱 해결할 수가 없었다.<br>JPA Query Annotation은 뭘까?<br>간단하게라도 공부해봤다.</p><p><br><br><br></p><h2 id="JPA-Query-Annotation-간단-설명"><a href="#JPA-Query-Annotation-간단-설명" class="headerlink" title="JPA Query Annotation 간단 설명"></a>JPA Query Annotation 간단 설명</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo t WHERE t.userId = ?1"</span>)</span><br></pre></td></tr></table></figure><p>여기서 물음표의 의미는 파라미터갯수이다.<br>물음표 뒤의 숫자 1의 의미는 무엇일까?<br>물음표에 들어올 파라미터의 위치이다. 즉 첫번째 파라미터는 <code>?1</code>여기에 위치하게된다.<br>만약 파라미터가 두개라면?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo t WHERE t.userId = ?1 AND t.userName = ?2"</span>)</span><br></pre></td></tr></table></figure><p>간단하다!<br>더 깊은 설명은 아래 글을 참고하면 된다.</p><ul><li><a href="https://attacomsian.com/blog/spring-data-jpa-query-annotation">Spring Data JPA Custom Queries using @Query Annotation</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/08/08/220808SpringJPA-queryannotation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[도서]인증과 인가</title>
      <link>https://sowon-dev.github.io/2022/07/22/220722authenticationVSauthorization/</link>
      <guid>https://sowon-dev.github.io/2022/07/22/220722authenticationVSauthorization/</guid>
      <pubDate>Fri, 22 Jul 2022 01:38:14 GMT</pubDate>
      
      <description>&lt;p&gt;책 &lt;code&gt;React.js, 스프링 부트, AWS로 배우는 웹 개발 101&lt;/code&gt; 를 읽고 공부한 내용을 정리한 글입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>책 <code>React.js, 스프링 부트, AWS로 배우는 웹 개발 101</code> 를 읽고 공부한 내용을 정리한 글입니다.</p><a id="more"></a><p><img src="http://image.kyobobook.co.kr/images/book/xlarge/656/x9791161755656.jpg" alt=""></p><ul><li><a href="http://www.acornpub.co.kr/book/reactjs-springboot#toc">도서 공식 링크</a></li><li><a href="http://www.acornpub.co.kr/book/reactjs-springboot#errata">도서 정오표</a></li><li><a href="https://github.com/fsoftwareengineer/todo-application">공식 레포지토리 링크</a></li></ul><p><br><br></p><h1 id="인증과-인가"><a href="#인증과-인가" class="headerlink" title="인증과 인가"></a>인증과 인가</h1><ul><li>인증: 내 집에 들어올 수 있는 사용자</li><li>인가: 인증받고 들어온 사용자가 내 집에서 할 수 있는 것들<ul><li>화장실 사용, 주방사용, 거실사용 등등</li></ul></li></ul><p>인증에는 여러 방법이 있다.<br>책에서는 3가지 방법에 대해 이야기한다.</p><table><thead><tr><th align="center">인증종류 3가지</th><th align="center">설명</th><th align="center">장점</th><th align="center">단점</th></tr></thead><tbody><tr><td align="center">Basic 인증</td><td align="center">클라이언트는 매 요청시 아이디와 비번을 전달하여 자신이 인증된 사용자임을 증명한다</td><td align="center"></td><td align="center">인코딩헤도 아이디와 비번 노출됨.사용자를 로그아웃시킬수없음.인증서버에 요청이 많아져 단일 장애점이 되버림.</td></tr><tr><td align="center">토근기반인증(Bearer 인증)</td><td align="center">토큰은 최초 로그인시 서버가 만들어 줌. 서버가 자기만 아는 시크릿코드로 토큰을 만들어 반환하면 클라이언트는 이후 요청에 아이디와 비번 대신 토큰을 넘겨 자신이 인증된 사용자임을 증명한다.</td><td align="center">아디랑 비번이 노출되지 않으므로 보안측면에서 Basic인증방식보다 안전함.서버가 토큰을 생성하므로 유효시간, 인가관리가능.</td><td align="center">토큰 이름만 바꾸면 새로운 사용자가 되버리므로 스케일문제 해결못함</td></tr><tr><td align="center">JSON 웹 토큰(JWT)</td><td align="center"><a href="https://jwt.io/">JWT</a>는 JSON Web Token의 약자.</td><td align="center">전자서명된 토큰을 이용항 스케일 문제를 해결함.</td><td align="center">인증서버에 토큰유효성을 물어보지않으므로 단일 장애점문제해결</td></tr></tbody></table><p><br><br><br><br></p><h1 id="인코딩을-했는데-왜-문제가-될까"><a href="#인코딩을-했는데-왜-문제가-될까" class="headerlink" title="인코딩을 했는데 왜 문제가 될까?"></a>인코딩을 했는데 왜 문제가 될까?</h1><p>Basic Auth에서는 아이디와 비밀번호를 인코딩한다. 이 솔루션은 아이디와 비밀번호를 노출한다.<br>인코딩을 했는데 왜 문제가 될까? 인코딩은 보안을 목적으로 하는 것이 아니기때문!<br>인간이 아이디와 비밀번호를 바로 알아내기 어렵지만 디코더만 있으면 누구나 원래의 아이디와 비번을 알아낼수 있다.<br>이렇게 가로채는 것을 <a href="https://blog.larapulse.com/security/prevent-mitm-attacks">MITM(Man in the middle attack)</a>라고한다.</p><p><img src="https://blog.larapulse.com/files/original/images/3e/8c/3e8c78810e53dec80d2a5b2933b564a20c0e0295.png" alt="https://blog.larapulse.com/security/prevent-mitm-attacks"></p><p><br><br><br><br></p><h1 id="JWT-설명-및-각-필드-뜻"><a href="#JWT-설명-및-각-필드-뜻" class="headerlink" title="JWT 설명 및 각 필드 뜻"></a>JWT 설명 및 각 필드 뜻</h1><p>JWT는 JSON 형태로 된 토큰이면서 토큰 기반 인증방식이다.<br>JSON 웹 토큰방식과 토큰 기반 인증방식의 차이점은 무엇일까?<br>JWT는 서버가 헤더와 페이로드를 생성한 후 전자 서명을 한다는 점이 기존 토큰 기반 인증방식과 다르다.<br>JWT에게 전자사명이란 {헤더}.{페이로드}와 시크릿키를 이용해 해시 함수에 돌린 암호화한 결과값이다.</p><ul><li>HEADER<ul><li>typ: Type의 약자. 토큰타입을 의미.</li><li>alg: Algorithm의 약자. 토큰 서명을 발행하는 데 사용된 해시 알고리즘의 종류를 의미</li></ul></li><li>Payload<ul><li>sub: Subject의 약자. 토큰의 주인을 의미 ex)사용자이메일, 사용자아이디</li><li>iss: Issuer의 약자. 토큰을 발행한 주체를 의미 ex) 내가만든애플리케이션이름, facebook</li><li>iat: issued at의 약자. 토큰이 발행된 날짜와 시간을 의미.</li><li>exp: expiration의 약자. 토큰 만료 시간을 의미.</li></ul></li><li>Signature<ul><li>토큰을 발행한 주체 Issuer가 발행한 서명으로 토큰의 유효성 검사에 사용된다.</li></ul></li></ul><p><br><br><br></p><h2 id="JWT-인증-방식"><a href="#JWT-인증-방식" class="headerlink" title="JWT 인증 방식"></a>JWT 인증 방식</h2><ol><li>최초 로그인: 서버는 사용자 아디와 비번을 서버에 저장딘 아디와 비번에 비교해 인증</li><li>일치하면 사용자의 정보를 이용해 <code>{헤더}.{페이로드}</code> 작성한 뒤 자신의 시크릿키로 <code>{헤더}.{페이로드}</code>부분을 전자서명함.</li><li>전자 서명의 결과로 나온 값을 <code>{헤더}.{페이로드}.{서명}</code>으로 이어붙이고 Base64로 인코딩한 후 반환.</li></ol><p><br><br><br></p><h2 id="만약-누군가가-이-토큰으로-리소스-접근을-요청한다면"><a href="#만약-누군가가-이-토큰으로-리소스-접근을-요청한다면" class="headerlink" title="만약 누군가가 이 토큰으로 리소스 접근을 요청한다면?"></a>만약 누군가가 이 토큰으로 리소스 접근을 요청한다면?</h2><ol><li>서버:토큰을 Base64로 디코딩</li><li>디코딩한 JSON을 <code>{헤더}.{페이로드}</code>과 <code>{서명}</code>으로 나눈다.</li><li>서버는 위에서 나눴던 <code>{헤더}.{페이로드}</code>와 자신이 갖고있는 시크릿키로 전자서명을 만든 후 잘라놨던 <code>{서명}</code>부분과 일치하는 비교</li></ol><p>이렇게 처리하면 좋은 점은 인증서버에 토큰 유효성에 대해 물어볼 필요가 없기에 단일 장애점 문제가 발생하지 않는다.</p><p><br><br><br></p><h2 id="만약-누군가가-토큰을-훔쳐간다면"><a href="#만약-누군가가-토큰을-훔쳐간다면" class="headerlink" title="만약 누군가가 토큰을 훔쳐간다면?"></a>만약 누군가가 토큰을 훔쳐간다면?</h2><p>당연히 해당 계정 리소스에 접근이 가능하다.<br>따라서 반드시 HTTPS로 통신해야만 한다.</p><blockquote><p>그래서 Postman 인증 테스트시 HTTP로 하면 안되었던 거구나. 유레카!</p></blockquote><p><br><br><br></p><h1 id="스프링-시큐리티가-필요한-이유"><a href="#스프링-시큐리티가-필요한-이유" class="headerlink" title="스프링 시큐리티가 필요한 이유?"></a>스프링 시큐리티가 필요한 이유?</h1><p>API 실행시마다 사용자 인증을 해주는 부분을 스프링 시큐리티가 대신해줄수있다.</p><ul><li>스프링 시큐리티란? 서블릿 필터의 집합</li><li>서블릿 필터이란? 서블릿 실행 전 에 실행되는 클래스들로 디스패처 서블릿 실행되기 전에 항상 실행됨.</li><li>스프링 시큐리티에서 서블릿 펄터를 사용하려면 2가지를 해야함<ol><li>서블릿 필터 구현하는 작업</li><li>서블릿 컨테이너에 구현한 필터를 사용하도록 설정해주는 작업</li></ol></li><li>여기서 개발자가 할 일은?<br>서블릿 필터를 구현하고 서블릿 필터를 서블릿 컨테이너가 실행하도록 설정해주기!</li><li>서블릿필터는 꼭 한 개여야할까?<br>서블릿 필터가 1개일 필요는 없다. 하나의 클래스에 모든 필터를 다 담으면 크기가 어마어마해질 것이다. 따라서 기능에 따라 서블릿 필터 여러 개를 작성하는 것이 좋다.<br>생성한 서블릿 필터들을 FilterChain을 통해 연쇄적으로 순서대로 실행시킬수 있음.</li></ul><p><br><br><br></p><h2 id="HttpSecurity란"><a href="#HttpSecurity란" class="headerlink" title="HttpSecurity란?"></a>HttpSecurity란?</h2><ul><li>WebSecurityConfig.java 파일을 생성해서 스프링시큐리티 설정해야 함</li><li>시큐리티 설정을 위한 오브젝트임. </li><li>이 오브젝트를 통해 web.xml 대신 HttpSecurity를 이용해 시큐리티 관련 설정함.</li><li>스프링시큐리티에 JwtAuthenticationFilter를 사용하라고 알려줘야함</li><li><a href="https://github.com/fsoftwareengineer/todo-application/blob/main/4.3-Spring_Security_Integration/demo/src/main/java/com/example/demo/config/WebSecurityConfig.java">코드 출처 및 원본 바로가기</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtAuthenticationFilter jwtAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// http 시큐리티 빌더</span></span><br><span class="line">http.cors() <span class="comment">// WebMvcConfig에서 이미 설정했으므로 기본 cors 설정.</span></span><br><span class="line">.and()</span><br><span class="line">.csrf()<span class="comment">// csrf는 현재 사용하지 않으므로 disable</span></span><br><span class="line">.disable()</span><br><span class="line">.httpBasic()<span class="comment">// token을 사용하므로 basic 인증 disable</span></span><br><span class="line">.disable()</span><br><span class="line">.sessionManagement()  <span class="comment">// session 기반이 아님을 선언</span></span><br><span class="line">.sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">.and()</span><br><span class="line">.authorizeRequests() <span class="comment">// /와 /auth/** 경로는 인증 안해도 됨.</span></span><br><span class="line">.antMatchers(<span class="string">"/"</span>, <span class="string">"/auth/**"</span>).permitAll()</span><br><span class="line">.anyRequest() <span class="comment">// /와 /auth/**이외의 모든 경로는 인증 해야됨.</span></span><br><span class="line">.authenticated();</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 등록.</span></span><br><span class="line"><span class="comment">// 매 리퀘스트마다</span></span><br><span class="line"><span class="comment">// CorsFilter 실행한 후에</span></span><br><span class="line"><span class="comment">// jwtAuthenticationFilter 실행한다.</span></span><br><span class="line">http.addFilterAfter(</span><br><span class="line">jwtAuthenticationFilter,</span><br><span class="line">CorsFilter<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addFilterAfter()메서드는 JwtAuthenticationFilter를 CorsFilter 이후에 실행하라고 설정하는 것임. 즉, 실행순서는 <code>CorsFilter -&gt; JwtAuthenticationFilter</code> 이 된다. 반드시 이 순서로 실행해야하는 것은 아니다. 저자가 보기에 적당해보여서 그렇게 설정한 것이다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Book/">Book</category>
      
      <category domain="https://sowon-dev.github.io/tags/WEB/">WEB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/07/22/220722authenticationVSauthorization/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CORS는 왜 날 헷갈리게 하는걸까?(ft. CSRF, XSS)</title>
      <link>https://sowon-dev.github.io/2022/07/17/220718CORS/</link>
      <guid>https://sowon-dev.github.io/2022/07/17/220718CORS/</guid>
      <pubDate>Sun, 17 Jul 2022 20:42:47 GMT</pubDate>
      
      <description>&lt;p&gt;CORS는 크로스-오리진 리소스 셰어링(Cross-Origin Resource Sharing)의 약자이고 직역하면 교차 출처 리소스 공유이다.&lt;br&gt;처음 리소스를 제공한 도메인(Origin)이 요청 도메인과 다르더라도 요청을 허락해 주는 웹 보안 방침이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>CORS는 크로스-오리진 리소스 셰어링(Cross-Origin Resource Sharing)의 약자이고 직역하면 교차 출처 리소스 공유이다.<br>처음 리소스를 제공한 도메인(Origin)이 요청 도메인과 다르더라도 요청을 허락해 주는 웹 보안 방침이다.</p><a id="more"></a><h2 id="CORS-웹-보안-방침이-왜-필요한-걸까"><a href="#CORS-웹-보안-방침이-왜-필요한-걸까" class="headerlink" title="CORS 웹 보안 방침이 왜 필요한 걸까?"></a>CORS 웹 보안 방침이 왜 필요한 걸까?</h2><p>웹 사이트는 원래 사용자의 공격에 취약하므로 보안에 유의해야한다.<br>서로 다른 출처의 웹 사이트가 통신하는데 제약이 없으면 악의적인 사용자가 웹 사이트 정보를 탈튀할 수도 있다.<br>따라서 같은 출처인지 다른 출처인지 구분이 필요하고 다른 출처인 경우 경고를 하는 것이다.</p><p><br><br><br></p><h3 id="CORS-취약점"><a href="#CORS-취약점" class="headerlink" title="CORS 취약점"></a>CORS 취약점</h3><ul><li>CSRF <small><a href="https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/">(참고: 전자정부프레임워크3.8에 CSRF 설정하기)</a></small>: 사이트 간 요청 위조 약자로 공격대상이 Server</li><li>XSS <small><a href="https://sowon-dev.github.io/2022/04/20/220420XSS/">(참고: XSS 방지)</a></small>: 사이트 간 스크립팅의 약자로 공격대상이 Client</li></ul><p><br><br><br></p><h2 id="개발자도구-F12-의-네트워크-탭"><a href="#개발자도구-F12-의-네트워크-탭" class="headerlink" title="개발자도구(F12)의 네트워크 탭"></a>개발자도구(F12)의 네트워크 탭</h2><p>다른 출처의 웹사이트로 요청을 보내면 브라우저는 2개의 요청을 보낸다.</p><ol><li>Options 메서드를 사용하는 요청</li><li>사용자가 보낸 요청</li></ol><p>Options 메서드는 보통 리소스에 대해 어떤 HTTP 메서드를 사용할 수 있는지 확인하고 싶을 때 보내고 Options 요청이 반환되고 CORS여부 및 GET 요청 사용가능 여부를 확인하면 두번째 요청을 보내게 된다.</p><ul><li>Access-Control-Allow-Origin: 프론트엔드 애플리케이션 서버 주소</li><li>Access-Control-Allow-Methods: 허용되는 메서드 ex) GET,POST,PUT,PATCH,DELETE,OPTIONS</li></ul><p><br><br><br></p><h2 id="CORS가-가능하려면"><a href="#CORS가-가능하려면" class="headerlink" title="CORS가 가능하려면?"></a>CORS가 가능하려면?</h2><p>CORS가 가능하려면 백엔드에서 CORS 방침을 설정해줘야한다.<br>자바의 경우 WebMvcConfig 클래스로 설정할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 스프링 빈으로 등록</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_AGE_SECS = <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 모든 경로에 대해</span></span><br><span class="line">registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line"><span class="comment">// Origin이 http:localhost:3000에 대해</span></span><br><span class="line">.allowedOrigins(<span class="string">"http://localhost:3000"</span>)</span><br><span class="line"><span class="comment">// GET, POST, PUT, PATCH, DELETE, OPTIONS 메서드를 허용한다.</span></span><br><span class="line">.allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>, <span class="string">"OPTIONS"</span>)</span><br><span class="line">.allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">.allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">.maxAge(MAX_AGE_SECS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/fsoftwareengineer/todo-application/blob/main/3.3-Service_Integration/demo/src/main/java/com/example/demo/config/WebMvcConfig.java">예시코드 출처</a></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.acornpub.co.kr/book/reactjs-springboot#toc">React.js, 스프링 부트, AWS로 배우는 웹 개발 101</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/CORS/">CORS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/07/17/220718CORS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>제네릭(Generic) 타입파라미터(T) vs 와일드카드(?) 차이</title>
      <link>https://sowon-dev.github.io/2022/07/14/220715wildcard-vs-typeparameter/</link>
      <guid>https://sowon-dev.github.io/2022/07/14/220715wildcard-vs-typeparameter/</guid>
      <pubDate>Thu, 14 Jul 2022 21:47:59 GMT</pubDate>
      
      <description>&lt;p&gt;제네릭(Generic)의 사전적 의미는 일반화이다.&lt;br&gt;제네릭의 장점은 컴파일시 데이터타입을 체크해줘서 타입이 안정적이고 타입체크와 형변환을 생략할 수 있어 코드가 간결해진다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>제네릭(Generic)의 사전적 의미는 일반화이다.<br>제네릭의 장점은 컴파일시 데이터타입을 체크해줘서 타입이 안정적이고 타입체크와 형변환을 생략할 수 있어 코드가 간결해진다.</p><a id="more"></a><h2 id="와일드카드-lt-gt"><a href="#와일드카드-lt-gt" class="headerlink" title="와일드카드(&lt;?&gt;)"></a>와일드카드(&lt;?&gt;)</h2><ol><li>하나의 참조 변수로 대입된 타입이 다른 객체를 참조 가능하다.</li></ol><table><thead><tr><th align="left">분류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">&lt;? extneds T&gt;</td><td align="left">와일드 카드의 상한 제한. T와 그 자손들만 가능.실무에서 가장 많이 사용함</td></tr><tr><td align="left">&lt;? super T&gt;</td><td align="left">와일드 카드의 하한 제한. T와 그 조상들만 가능</td></tr><tr><td align="left">&lt;?&gt;</td><td align="left">제한 없으므르 모든 타입 가능. &lt;? extneds Object&gt;와 동일</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;? extneds Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;apple&gt;(); <span class="comment">// OK</span></span><br><span class="line">ArrayList&lt;? extneds Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;orange&gt;(); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;apple&gt; list = <span class="keyword">new</span> ArrayList&lt;orange&gt;(); <span class="comment">// 에러발생</span></span><br></pre></td></tr></table></figure><ol start="2"><li>메서드의 매개변수에 와일드 카드를 사용할 수 있다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Payment <span class="title">buyFruit</span><span class="params">(FruitBox&lt;? extends Fruit&gt; box)</span></span>&#123;</span><br><span class="line"><span class="comment">// 매개변수에 와일드카드를 사용했다.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="타입-매개변수-lt-T-gt"><a href="#타입-매개변수-lt-T-gt" class="headerlink" title="타입 매개변수(&lt;T&gt;)"></a>타입 매개변수(&lt;T&gt;)</h2><p>타입 매개변수는 총 3곳에서 사용할 수 있다.</p><table><thead><tr><th align="center">명</th><th align="left">사용 위치</th></tr></thead><tbody><tr><td align="center">제네릭 인터페이스</td><td align="left">인터페이스에 타입 매개변수를 사용</td></tr><tr><td align="center">제네릭 클래스</td><td align="left">클래스에 타입 매개변수를 사용</td></tr><tr><td align="center">제네릭 메서드</td><td align="left">메서드에 타입 매개변수를 사용</td></tr></tbody></table><p>이 중에서 오늘 다룰 내용은 제네릭 클래스이다.<br>제네릭 클래스의 인스턴스를 생성할 때 타입 매개변수로 전달받은 타입으로 데이터타입이 정해진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 제니릭 클래스 선언</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 클래스명&lt;타입 매개변수&gt;</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성</span></span><br><span class="line"><span class="keyword">new</span> 클래스명&lt;타입 인자&gt;(<span class="keyword">new</span> 타입매개변수());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성 - JDK7이후부터는 타입인자 생략 가능</span></span><br><span class="line"><span class="keyword">new</span> 클래스명&lt;타입 인자&gt;();</span><br></pre></td></tr></table></figure><p>과일로 예시를 들어보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitBox</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">T fruit;</span><br><span class="line"><span class="keyword">public</span> FruitBox</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성</span></span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;Grape&gt;(<span class="keyword">new</span> Grape());</span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;Pear&gt;(<span class="keyword">new</span> Pear());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성 - JDK7이후부터는 타입인자 생략 가능</span></span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;&gt;(<span class="keyword">new</span> Grape());</span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;&gt;(<span class="keyword">new</span> Pear());</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="와일카드-vs-정규타입-매개변수-T차이"><a href="#와일카드-vs-정규타입-매개변수-T차이" class="headerlink" title="와일카드 vs 정규타입 매개변수 T차이"></a>와일카드 vs 정규타입 매개변수 T차이</h2><blockquote><p>The difference is that if you have a type parameter U, you can use that type inside the method;<br>if you use a wildcard, you don’t have access to the actual type inside the method (you only know that it is some unknown type that extends Number).<br>If you need to know the actual type for whatever reason inside the method, then you cannot use the wildcard version.<br>출처: <a href="https://coderanch.com/t/688561/java/difference-Bounded-Type-Parameters-Upper">coderanch 블로그</a></p></blockquote><ul><li>와일드카드는 Object를 받기때문에 get메서드를 사용할 수 있지만 set, put메서드는 사용할 수 없다.</li><li>타입 매개변수는 get, set, put메서드는 사용가능하다.</li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2020/07/19/200720javai2/">기본클래스 이외에 자바 구성요소3 : annotation, generic</a></li><li>추천영상: 자바의 정석 기초편 와일드카드, 지네릭 메서드 by 남궁성의 정석코딩 유튜브채널</li></ul><iframe width="600" height="380" src="https://www.youtube.com/embed/LL3PWmGFuQA" title="[자바의 정석 - 기초편] ch12-12~14 와일드카드,  지네릭 메서드" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/14/220715wildcard-vs-typeparameter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DTO vs Model vs Entity</title>
      <link>https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/</link>
      <guid>https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/</guid>
      <pubDate>Thu, 14 Jul 2022 05:34:26 GMT</pubDate>
      
      <description>&lt;p&gt;스프링프레임워크를 공부하면서 DTO와 Entity의 역할 차이는 확실한데 Model의 개념과 셋의 차이점이 궁금해 추가로 공부해봤다.&lt;br&gt;닷넷프레임워크를 사용할땐 대부분의 클래스를 Model라고 칭했기 때문에 더 혼란스러웠다.&lt;br&gt;언어별로 부르는 명칭이 다른 듯하다. 사실 명칭보다 더 중요한 것은 각 클래스가 어떤 역할을 하는지 정확히 아는 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링프레임워크를 공부하면서 DTO와 Entity의 역할 차이는 확실한데 Model의 개념과 셋의 차이점이 궁금해 추가로 공부해봤다.<br>닷넷프레임워크를 사용할땐 대부분의 클래스를 Model라고 칭했기 때문에 더 혼란스러웠다.<br>언어별로 부르는 명칭이 다른 듯하다. 사실 명칭보다 더 중요한 것은 각 클래스가 어떤 역할을 하는지 정확히 아는 것이다.</p><a id="more"></a><table><thead><tr><th align="center">명칭</th><th align="center">역할</th></tr></thead><tbody><tr><td align="center">DTO</td><td align="center">클라이언트의 데이터를 받는 역할. 클라이언트에서 사용하는 것이므로 노출되도 상관없다.</td></tr><tr><td align="center">Model</td><td align="center">비즈니스 데이터를 담는 역할</td></tr><tr><td align="center">Entity</td><td align="center">데이터베이스의 테이블과 스키마를 표현하는 역할. DB컬럼과 연결되기때문에 필드명이 노출되서는 안된다.</td></tr></tbody></table><ul><li><a href="https://sowon-dev.github.io/2021/09/06/210907Jpa-entityVSDto/">참고: Entity VS DTO 차이점, 컨트롤러에서는 뭘 받아야할까?</a></li></ul><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>공부하면서 내가 생각해 본 예시이다.<br>결제프로그램을 예로 들어 DTO, Model, Entity를 비교한다면 아래와 같을 것이다.</p><table><thead><tr><th align="center">명칭</th><th align="center">예시</th></tr></thead><tbody><tr><td align="center">DTO</td><td align="center">클라이언트가 입력한 카드정보, 쿠폰정보, 결정정보 파라미터로 전달한 걸 컨트롤러에서 받음</td></tr><tr><td align="center">Model</td><td align="center">유저별 결제 혜택, 포인트 차감, 통신사할인등 중간에 연산이나 외부시스템연동할때 쓸 필드들을 model에 담아서 처리함</td></tr><tr><td align="center">Entity</td><td align="center">연산되고 DB에 기록되어야 할 데이터(유저ID, 연산 후 포인트등)를 담아서 update시킴</td></tr></tbody></table><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://itzone.com.vn/en/article/entity-domain-model-and-dto-why-so-many/">Entity, domain model and DTO – why so many?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트]SPA 동작 순서</title>
      <link>https://sowon-dev.github.io/2022/07/11/220712React-spa/</link>
      <guid>https://sowon-dev.github.io/2022/07/11/220712React-spa/</guid>
      <pubDate>Mon, 11 Jul 2022 23:33:34 GMT</pubDate>
      
      <description>&lt;p&gt;SPA는 Single Page Application의 약자로 한 번 웹 페이지를 로딩하면 사용자가 새로고침하지 않는 이상 페이지를 새로 로딩하지 않는 애플리케이션을 의미한다.&lt;br&gt;이게 무슨 의미일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SPA는 Single Page Application의 약자로 한 번 웹 페이지를 로딩하면 사용자가 새로고침하지 않는 이상 페이지를 새로 로딩하지 않는 애플리케이션을 의미한다.<br>이게 무슨 의미일까?</p><a id="more"></a><h2 id="React-동작순서"><a href="#React-동작순서" class="headerlink" title="React 동작순서"></a>React 동작순서</h2><ol><li>index.html 렌더링<ul><li>HTML이 body태그를 렌더링하다가 마지막에 bundle.js 스크립트를 로딩하게 되고 거기에 index.js가 포함되어있음.</li></ul></li><li>index.js 실행<ul><li>ReactDOM.render() 함수가 실행됨 -&gt; 매개변수가 <code>&lt;APP /&gt;</code>이라서 해당 element를 렌더링하게 됨.</li></ul></li><li>root element 하위에 React.js가 생성한 HTML element 추가됨<ul><li>ReactDOM이 내부 컴포넌트들을 root 엘리먼트에 렌더링함.</li></ul></li><li>root element 하위 element 렌더링</li></ol><p><br><br><br></p><h2 id="SPA에서-페이지를-변경하고-싶다면"><a href="#SPA에서-페이지를-변경하고-싶다면" class="headerlink" title="SPA에서 페이지를 변경하고 싶다면?"></a>SPA에서 페이지를 변경하고 싶다면?</h2><p>root의 하위 엘리먼트를 다른 HTMl로 수정해야한다.<br>HOW?<br>fetch나 ajax등의 함수로 서버에 데이터를 요청한 뒤 응답 데이터를 받음 -&gt; js내에서 HTML 재구성된다.</p><p>이렇게 서버에게 새 HTML 페이지를 요청하지 않고 데이터를 받은 다음에 js가 동적으로 HTML 재구성해서 만드는 클라이언트 애플리케이션을 SPA라고 한다.<br>이 렌더링 과정을 Client-side Rendering이라고 함.</p><ul><li><a href="https://sowon-dev.github.io/2022/01/19/220119prjtreview/#Keep">참고: SSR과 CSR 중 뭐를 우선순위로 두는 게 좋을까?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/11/220712React-spa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] 리턴타입이 옵셔널(Optional)인 이유는?</title>
      <link>https://sowon-dev.github.io/2022/07/10/220711JPA-optional/</link>
      <guid>https://sowon-dev.github.io/2022/07/10/220711JPA-optional/</guid>
      <pubDate>Sun, 10 Jul 2022 22:19:54 GMT</pubDate>
      
      <description>&lt;p&gt;JPA를 사용 중 아래 코드를 만났고 의문이 생겼다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA를 사용 중 아래 코드를 만났고 의문이 생겼다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Optional&lt;TodoEntity&gt; original = repository.findById(entity.getId());</span><br></pre></td></tr></table></figure><p>왜 꼭 Optional로 리턴타입을 감싸줘야하는걸까?<br>그냥 리턴타입만 쓰면 안될까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TodoEntity original = repository.findById(entity.getId());</span><br></pre></td></tr></table></figure><p>이런식으로 말이다.<br>위처럼 옵셔널(Optional)을 빼버리니 바로 IDE가 에러를 알려주었다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type mismatch: cannot convert from Optional&lt;TodoEntity&gt; to TodoEntity</span><br></pre></td></tr></table></figure><p>왜 이런 에러가 발생하는 걸까?<br>원인은 바로 CrudRepository 인터페이스였다.</p><p><br><br><br></p><h2 id="갑자기-CrudRepository라고"><a href="#갑자기-CrudRepository라고" class="headerlink" title="갑자기 CrudRepository라고?"></a>갑자기 CrudRepository라고?</h2><p>Repository 인터페이스를 만들때 JPA를 쓰기 위해서 JpaRepository를 상속받는다.<br>JpaRepository인터페이스에서 find와 관련된 메서드를 알기위해서는 CrudRepository를 확인하라고 적혀있다.</p><ul><li>JpaRepository 인터페이스</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPA specific extension of &#123;<span class="doctag">@link</span> org.springframework.data.repository.Repository&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Oliver Gierke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Christoph Strobl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Paluch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sander Krabbenborg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jesse Wouters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Greg Turnquist</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.CrudRepository#findAll()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.PagingAndSortingRepository#findAll(org.springframework.data.domain.Sort)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.CrudRepository#findAll(java.lang.Iterable)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (중략)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="CrudRepository-인터페이스"><a href="#CrudRepository-인터페이스" class="headerlink" title="CrudRepository 인터페이스"></a>CrudRepository 인터페이스</h2><p>CrudRepository 인터페이스에서 findById 메서드를 확인해보면 리턴값이 Optional 타입으로 고정되어있다.<br>그래서 바로 IDE가 에러를 알려주었다. 그렇다면 Optional를 쓰면 좋은 점이 뭘까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for generic CRUD operations on a repository for a specific type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Oliver Gierke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eberhard Wolff</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jens Schauder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves an entity by its id.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the entity with the given id or &#123;<span class="doctag">@literal</span> Optional#empty()&#125; if none found.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@literal</span> id&#125; is &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">findById</span><span class="params">(ID id)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// (생략)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Optional-쓰면-좋은-점"><a href="#Optional-쓰면-좋은-점" class="headerlink" title="Optional 쓰면 좋은 점?"></a>Optional 쓰면 좋은 점?</h2><p>Optional은 Java 8에 추가되었다. 이전 자바버전에서는 사용 불가능하다.<br>Optional은 고통스러운 null 처리를 도와주는 Wrapper 클래스이다.</p><p>코드 예시를 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">    </span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name is null"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는 try catch문을 이용해서 null을 처리할 수 있도 있고 다양한 NPE 처리 방법이 있다. </p><ul><li><a href="https://sowon-dev.github.io/2021/06/27/210627Memoir6months/#4-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC-%EA%B0%80%EB%8A%A5">참고: 특별한 거 추가 없이 기본 메서드로 NPE처리하는 방법</a></li></ul><p>그런데 만약 필드가 많다면? 모든 필드를 NULL처리를 해줘야한다.</p><p>이때 Optional 클래스와 해당 클래스가 제공하는 orElse 메서드 또는 orElseGet 메서드를 이용하면 쉽게 NPE 처리가 가능하다.</p><table><thead><tr><th align="center">메서드명</th><th align="center">특징</th></tr></thead><tbody><tr><td align="center">orElseThrow(NullPointerException::new)</td><td align="center">null이라면 함수형 파라미터로 생성한 예외(NullPointerException)를 발생시킨다.</td></tr><tr><td align="center">orElse(person)</td><td align="center">null이면 파라미터(person)를 반환한다. 이때 파라미터(person)은 해당 값이 null이든지 말든지 항상 미리 생성된다.</td></tr><tr><td align="center">orElseGet</td><td align="center">null이면 파라미터(person)를 반환한다.  이때 파라미터(person)은 해당 값이 null 일때만 생성된다. 즉 미리 생성되지 않는다.</td></tr></tbody></table><p><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html?is-external=true">https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html?is-external=true</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/10/220711JPA-optional/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
