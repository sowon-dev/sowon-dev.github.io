<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 14 Oct 2020 05:28:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[ITWILL : JSP] JSP전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/jspList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/jspList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌷프로그래밍기초&quot;&gt;&lt;a href=&quot;#🌷프로그래밍기초&quot; class=&quot;headerlink&quot; title=&quot;🌷프로그래밍기초&quot;&gt;&lt;/a&gt;🌷프로그래밍기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/05/28/200528jspi/&quot;&gt;프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;🌷JS기초&quot;&gt;&lt;a href=&quot;#🌷JS기초&quot; class=&quot;headerlink&quot; title=&quot;🌷JS기초&quot;&gt;&lt;/a&gt;🌷JS기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200601jspi/&quot;&gt;JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌷프로그래밍기초"><a href="#🌷프로그래밍기초" class="headerlink" title="🌷프로그래밍기초"></a>🌷프로그래밍기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200528jspi/">프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버</a></li></ol><h2 id="🌷JS기초"><a href="#🌷JS기초" class="headerlink" title="🌷JS기초"></a>🌷JS기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200601jspi/">JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/06/02/200602jspi/">JS를 문서에 나타내는 3가지방법, undefined VS null, 백의자리 Math.floor(), 복합대입연산자로table생성, A++과 ++A차이점, ==과===차이점, 논리표</a></li><li><a href="https://sowon-dev.github.io/2020/06/03/200603jspi/">JAVA SE/EE/ME 차이점, JAVA EE 설정. Tomcat 설치및설정, 이클립스 단축키</a></li><li><a href="https://sowon-dev.github.io/2020/06/04/200604jspi/">아이디와 비번입력, 새로고침location.reload(), 주석한번에 단축키, switch문 출력문 한줄리팩토링</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200609jspi/">반복문 for 순서 자세히, 개발자 도구로 디버깅, 기본 반복문암기, for문과 if문의 자리바꿈에 따른 변화, 반복문의 전위연산 VS 후위연산, do while문</a></li><li><a href="https://sowon-dev.github.io/2020/06/11/200611jspi/">무한반복문, 보조제어(break와continue)문, 익명함수, 재귀함수, 지역변수를 전역에서 사용하는 방법, 내장함수</a></li></ol><h2 id="🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM"><a href="#🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM" class="headerlink" title="🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))"></a>🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi/">Object객체 전체개념, tv채널객체함수, new를 쓰고 안쓰고의 차이</a></li><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi2/">Date객체 자세히, 디데이구하는 함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi/">Array객체 (for ~ in구문, join(), reverse(), sort())</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi2/">String객체, 짤라오는 함수 4종류 .substring(), slice(), substr(), charAt(), .indexOf()와 .lastIndexOf()차이, .concat(), .split(), ID자릿수를 제한하는 이메일 유효성검사</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi3/">이벤트리스너와 이벤트핸들러, 브라우저객체모델, window객체전체</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi/">브라우저객체모델안의 Document객체 (bgColor와 fgColor사용,  img태그에 접근하여 속성 사용, 랜덤 img 출력하기)</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi2/">브라우저객체모델안의 location객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi/">브라우저객체모델안의 history객체, screen객체, navigator객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi2/">문서 객체 모델안의 form태그, 페이지이동방식(get과 post), focus() vs blur() vs select()</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200618jspi/">문서 객체 모델안의 if문에 return;의 역할, radio태그, checkbox태그</a></li></ol><h2 id="🌷JS실습"><a href="#🌷JS실습" class="headerlink" title="🌷JS실습"></a>🌷JS실습</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi/">js로 간단한 회원가입페이지 작성하기</a></li></ol><h2 id="🌷JSP기초"><a href="#🌷JSP기초" class="headerlink" title="🌷JSP기초"></a>🌷JSP기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi2/">JSP 첫 프로젝트 톰캣과 연결</a></li><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi/">JSP 주석과 JSP directive, JSP 스크립트 요소</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi/">JAVA DATATYPE, Integer.parseInt(문자열), 동일한 파라미터의 값을 가지는 데이터가 여러개있을 경우 변수로 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi2/">커넥션풀(Connection Pool)</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi/">Wrapper클래스, 오토 박싱과 오토 언박싱, hierarchy확인법</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-2/">자바 클래스(객체) vs 추상클래스 vs 인터페이스</a></li></ol><h2 id="🌷JSP기초-내장객체-중-영역객체"><a href="#🌷JSP기초-내장객체-중-영역객체" class="headerlink" title="🌷JSP기초 : 내장객체 중 영역객체"></a>🌷JSP기초 : 내장객체 중 영역객체</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi2/">내장객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi2/">영역객체scope</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi/">영역객체 안에서 사용하는 속성(Attribute), 링크이동 방법별 전달가능한 영역(scope)</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi2/">JSP 디렉티브(directive) 중 include VS 액션태그 include, jspf확장자 파일</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi/">세션(Session)</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi2/">==과 str.equals(str2) 차이, 객체와 클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200701jspi/">쿠키(Cookie)</a></li></ol><h2 id="🌷MySQL"><a href="#🌷MySQL" class="headerlink" title="🌷MySQL"></a>🌷MySQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200701jspi2/">MYSQL 설치, MYSQL환경변수설정, cmd에서 명령어 잘못입력해서 mysql못빠져나갈때</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi/">MYSQL 접속순서, DB명령어, 테이블명령어, 데이터명령어</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi2/">MySQL 한글깨짐현상 두가지 해결방법 : cmd와 Workbench, 이클립스와 MYSQL연결</a></li></ol><h2 id="🌷JDBC"><a href="#🌷JDBC" class="headerlink" title="🌷JDBC"></a>🌷JDBC</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi/">JDBC활용 - import쓰는 이유, form페이지로 받은 데이터를 DB에 insert하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi2/">JDBC활용 - JAVA에서 DB 정보 지우기 2가지방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi/">JDBC활용 - DB에서 고객정보를 불러와서 HTML테이블에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi2/">JDBC활용 - TIMESTAMP주의점, JDBC에서 데이터처리</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707jspi/">JDBC활용 - 회원정보수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/08/200708jspi/">JDBC활용 - 회원목록출력하는데 관리자는 빼고 출력하기, 자바 에러 두종류</a></li></ol><h2 id="🌷JAVABEAN"><a href="#🌷JAVABEAN" class="headerlink" title="🌷JAVABEAN"></a>🌷JAVABEAN</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi/">Javabean : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi2/">자바빈 실습1 : 회원가입페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi/">자바빈 실습2 : 로그인 및 로그아웃페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi2/">자바빈 실습3 : 회원정보조회 및 수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi/">자바빈 실습4 : web.xml, 회원정보삭제페이지</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi3/">자바빈 실습5 : 관리자만 확인할 수 있는 회원목록페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi2/">자바빈 실습6 : 게시판만들기(글쓰기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/21/200721jspi/">자바빈 실습7 : 게시판만들기(글 총 갯수, 글목록, 페이징처리)</a></li><li><a href="https://sowon-dev.github.io/2020/07/22/200722jspi/">자바빈 실습8 : 게시판만들기(글내용보기, 글수정하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi/">자바빈 실습9 : 게시판만들기(글삭제하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi2/">자바빈 실습10 : 게시판만들기(답글쓰기)</a></li></ol><h2 id="🌷파일업로드와-다운로드-기능-구현"><a href="#🌷파일업로드와-다운로드-기능-구현" class="headerlink" title="🌷파일업로드와 다운로드 기능 구현"></a>🌷파일업로드와 다운로드 기능 구현</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi/">자바빈 실습11 : MultipartRequest클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi2/">자바빈 실습12 : 파일업로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi3/">자바빈 실습13 : 파일다운로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200728jspi/">자바빈 실습14 : ServletContext 사용하여 파일업로드와 다운로드</a></li></ol><h2 id="🌷자료구조"><a href="#🌷자료구조" class="headerlink" title="🌷자료구조"></a>🌷자료구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi2/">자료구조1 : Collections Framwork(Set계열, List계열)</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi/">자료구조2 : Stack클래스, Queue인터페이스, Map인터페이스</a></li></ol><h2 id="🌷model1-홈페이지만들기"><a href="#🌷model1-홈페이지만들기" class="headerlink" title="🌷model1 홈페이지만들기"></a>🌷model1 홈페이지만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/29/200729jspi/">홈페이지만들기1 : 프로젝트 시작 설정 및 자바빈생성과 DB연결</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi/">홈페이지만들기2 : 아이디중복체크 포함한 회원가입기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi2/">홈페이지만들기3 : 로그인/로그아웃 기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200803jspi/">홈페이지만들기4 : 게시판글쓰기구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi/">홈페이지만들기5 : 게시판에 글목록표시구현</a></li></ol><h2 id="🌷JQuery"><a href="#🌷JQuery" class="headerlink" title="🌷JQuery"></a>🌷JQuery</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi2/">JQuery1 : JQuery 사용설정, 선택자, css()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi/">JQuery2 : attr(), html()와 text(), append()와 prepend()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi2/">JQuery3 : setInterval()와 clearInteval(), CDATA VS PCDATA</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi/">JQuery4 : click(), bind(), event.preventDefault(), unbind(), keyup(), 유효성체크(자바스크립트 vs 제이쿼리)</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi2/">JQuery5 : 유효성체크(자바스크립트 vs 제이쿼리), 제이쿼리 기본효과</a></li><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi/">JQuery6 : innerfade 라이브러리, animate(속성, 속도, 콜백함수)</a></li></ol><h2 id="🌷Ajax"><a href="#🌷Ajax" class="headerlink" title="🌷Ajax"></a>🌷Ajax</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi2/">Ajax : Ajax특징, XMLHttpRequest클래스, txt 페이지 처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi/">Ajax : xml처리, json처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi2/">Ajax : DB데이터를 불러와서 json형태로 변경하여 출력하기</a></li></ol><h2 id="🌷JSTL과-EL"><a href="#🌷JSTL과-EL" class="headerlink" title="🌷JSTL과 EL"></a>🌷JSTL과 EL</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi/">JSTL과 EL : JSTL과 EL개념, CORE 라이브러리(out)</a></li><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi2/">JSTL과 EL : CORE 라이브러리(set)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi/">JSTL과 EL : CORE 라이브러리(if, forEach, forTokens, choose)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi2/">JSTL과 EL : fmt 라이브러리(formatDate, formatNumber)</a></li><li><a href="https://sowon-dev.github.io/2020/08/13/200813jspi/">JSTL과 EL : EL태그로 동일한 name의 파라미터를 EL태그로 쉽게 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi/">JSTL과 EL : EL태그 연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi2/">EL과 Servlet : RequestDispatcher.forward 로 페이지 이동 후 데이터별 출력방법</a></li></ol><h2 id="🌷model2-MVC패턴-쇼핑몰만들기"><a href="#🌷model2-MVC패턴-쇼핑몰만들기" class="headerlink" title="🌷model2(MVC패턴) 쇼핑몰만들기"></a>🌷model2(MVC패턴) 쇼핑몰만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi/">Servlet : Servlet용어정리, model1과 model2(MVC구조) 개발방식 비교</a></li></ol><h3 id="쇼핑몰회원관리"><a href="#쇼핑몰회원관리" class="headerlink" title="쇼핑몰회원관리"></a>쇼핑몰회원관리</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi2/">Servlet회원관리1: 기본설정 및 가상주소생성</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi/">Servlet회원관리2: 회원가입</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi2/">Servlet회원관리3: 로그인</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi3/">Servlet회원관리4: 메인페이지와 로그아웃</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi/">Servlet회원관리5: 회원정보조회</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi2/">Servlet회원관리6: 회원탈퇴</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi/">Servlet회원관리7: 회원전체목록조회(관리자기능)</a></li></ol><h3 id="게시판"><a href="#게시판" class="headerlink" title="게시판"></a>게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/">Servlet게시판1: 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi/">Servlet게시판2: 게시판 글쓰기</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi2/">Servlet게시판3: 게시판 리스트·게시글전체목록·페이징처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi/">Servlet게시판4: 글 내용보기</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi2/">Servlet게시판5: 글 수정하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi/">Servlet게시판6: 글 삭제하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi2/">Servlet게시판7: 답글하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi3/">Servlet게시판8: 파일업로드·파일보기</a></li></ol><h3 id="관리자전용-상품목록과-등록게시판"><a href="#관리자전용-상품목록과-등록게시판" class="headerlink" title="관리자전용 상품목록과 등록게시판"></a>관리자전용 상품목록과 등록게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi4/">Servlet관리자전용상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi5/">Servlet관리자전용상품2 : 상품등록</a></li><li><a href="https://sowon-dev.github.io/2020/09/08/200908jspi/">Servlet관리자전용상품3 : 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi/">Servlet관리자전용상품4 : 상품수정·인기상품처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi2/">Servlet관리자전용상품5 : 상품삭제</a></li></ol><h3 id="일반유저용-상품목록"><a href="#일반유저용-상품목록" class="headerlink" title="일반유저용 상품목록"></a>일반유저용 상품목록</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi/">Servlet일반상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi2/">Servlet일반상품2 : 카테고리별 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi/">Servlet일반상품3 : 상품상세정보</a></li></ol><h3 id="장바구니"><a href="#장바구니" class="headerlink" title="장바구니"></a>장바구니</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi2/">Servlet장바구니1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi3basket/">Servlet장바구니2 : 장바구니에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi4/">Servlet장바구니3 : 장바구니리스트, 장바구니에서 상품삭제</a></li></ol><h3 id="구매하기"><a href="#구매하기" class="headerlink" title="구매하기"></a>구매하기</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/16/200916jspi/">Servlet구매하기1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/17/200917jspi/">Servlet구매하기2 : 구매하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi/">Servlet구매하기3 : 주문목록</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi2/">Servlet구매하기4 : 주문상세정보페이지</a></li></ol><h3 id="관리자용-주문리스트"><a href="#관리자용-주문리스트" class="headerlink" title="관리자용 주문리스트"></a>관리자용 주문리스트</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi/">Servlet관리자용주문목록1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-1/">Servlet관리자용주문목록2 : 고객주문목록</a></li><li>🌟<a href="https://sowon-dev.github.io/2020/09/23/200923jspi-3/">Servlet관리자용주문목록3 : 고객주문목록에서 주문 상태 및 운송장정보 변경</a></li><li><a href="https://sowon-dev.github.io/2020/09/24/200924jspi/">Servlet관리자용주문목록4 : 고객주문목록에서 삭제</a></li></ol><h2 id="🌷스프링프레임워크"><a href="#🌷스프링프레임워크" class="headerlink" title="🌷스프링프레임워크"></a>🌷스프링프레임워크</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/04/201005springi/">프레임워크란, Spring 특징과 기능, 컨테이너란</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007spring-1/">스프링(STS)설치 및 기본 설정</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/">STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006springi/">Spring 기본 동작순서, JSP와 SPRING의 차이점</a></li><li><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/">제어의 역행(IoC)과 의존성 주입(DI)</a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006springi-1/">회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007spring/">관점 지향(AOP, Aspect-Oriented Programming) 총정리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008spring/">스프링 MVC패턴 프로젝트, 주요 어노테이션(Annotation)</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/">MAVEN REPOSITORY, My(i)Batis설치</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring/">페이지이동하기, 파라미터가지고 페이지이동하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring-1/">redirect나forward로 페이지이동하기, JSON데이터처리하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201014spring/">주니어레벨의 스프링MVC 개발순서, MyBatis(iBatis) 사용 방법 3가지</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/jspList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Algorithm전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/algorithmList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/algorithmList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌊코드업기초&quot;&gt;&lt;a href=&quot;#🌊코드업기초&quot; class=&quot;headerlink&quot; title=&quot;🌊코드업기초&quot;&gt;&lt;/a&gt;🌊코드업기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-1/&quot;&gt;1011 : 문자 한 개 입력받아 그대로 출력하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al/&quot;&gt;1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-2/&quot;&gt;1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌊코드업기초"><a href="#🌊코드업기초" class="headerlink" title="🌊코드업기초"></a>🌊코드업기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-1/">1011 : 문자 한 개 입력받아 그대로 출력하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al/">1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-2/">1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006al/">1023 : 실수 1개 입력받아 부분별로 출력하기, split대신 StringTokenizer사용하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/">1034 : 8진 정수 1개 입력받아 10진수로 출력하기(설명), Scanner로 2진수, 8진수 16진수 받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008al-c1041/">1041 : 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012al-c1059/">1059 : 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1064/">1064 : 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1066/">1066 : 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</a></li><li><a href="https://sowon-dev.github.io/2020/10/13/201014al-c1071/">1071 : 0 입력될 때까지 무한 출력하기1, goto말고while문사용</a></li><li><a href="https://sowon-dev.github.io/2020/10/15/201015al-c1071/">1082 : 16진수 구구단?</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/algorithmList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : Android] Android전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/androidList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/androidList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:43:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🍫안드로이드기초&quot;&gt;&lt;a href=&quot;#🍫안드로이드기초&quot; class=&quot;headerlink&quot; title=&quot;🍫안드로이드기초&quot;&gt;&lt;/a&gt;🍫안드로이드기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/09/200909and/&quot;&gt;안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/28/200928and/&quot;&gt;안드로이드 4대 컴포넌트&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🍫안드로이드기초"><a href="#🍫안드로이드기초" class="headerlink" title="🍫안드로이드기초"></a>🍫안드로이드기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200909and/">안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928and/">안드로이드 4대 컴포넌트</a><a id="more"></a></li></ol><h2 id="🍫화면구성"><a href="#🍫화면구성" class="headerlink" title="🍫화면구성"></a>🍫화면구성</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910and/">컴파운드버튼(체크박스,라디오버튼,스위치,토글버튼) 한눈에 비교하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and/">레이아웃종류 및 레이아웃 안에서 자주 사용되는 속성</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-1/">고급위젯: 아날로그시계,디지털시계,크로노미터,타임피커,데이트피커,캘린더뷰,자동완성텍스트뷰와 멀티자동완성텍스트뷰</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-2/">옵션메뉴, 컨텍스트메뉴, 토스트</a></li></ol><h2 id="🍫기능"><a href="#🍫기능" class="headerlink" title="🍫기능"></a>🍫기능</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/24/200924and/">안드로이드 파일처리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201007and/">이미지파일 넣기</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/androidList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : DB] DB전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/DBList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/DBList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌱리눅스와-SQL&quot;&gt;&lt;a href=&quot;#🌱리눅스와-SQL&quot; class=&quot;headerlink&quot; title=&quot;🌱리눅스와 SQL&quot;&gt;&lt;/a&gt;🌱리눅스와 SQL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200602dbi/&quot;&gt;간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/15/200616dbi/&quot;&gt;virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/18/200619dbi/&quot;&gt;CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌱리눅스와-SQL"><a href="#🌱리눅스와-SQL" class="headerlink" title="🌱리눅스와 SQL"></a>🌱리눅스와 SQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200602dbi/">간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200616dbi/">virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200619dbi/">CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi/">SQL DEVELOPER사용방법</a></li></ol><h2 id="🌱DB와-SQL개념"><a href="#🌱DB와-SQL개념" class="headerlink" title="🌱DB와 SQL개념"></a>🌱DB와 SQL개념</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200529dbi/">DB기초이론, DBMS</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200602dbi2/">데이터베이스기초활용</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200605dbi/">DDL vs DML vs DCL</a></li><li><a href="https://sowon-dev.github.io/2020/06/07/200608dbi/">제약조건의 컬럼레벨과 테이블레벨문법, 제약조건 5가지, 버퍼에 있는 자주 사용할 쿼리구문을 저장하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200610dbi/">select as from where, order by, 동일유저 동시접속 가능, 트랜잭션 commit과 rollback</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200717dbi/">트랜잭션(Transaction), 치환변수, save명령어, 리소스부족에러발생시</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200804dbi/">Data Dictionary</a></li></ol><h2 id="🌱Select-구문"><a href="#🌱Select-구문" class="headerlink" title="🌱Select 구문"></a>🌱Select 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200623dbi/">Select 구문을 사용한 데이터 검색, null VS 0 VS 공백, Distinct</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi/">테이블 전체목록조회, 테이블구조조회, WHERE(조건문)절</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi2/">Order by 정렬</a></li></ol><h2 id="🌱단일행함수"><a href="#🌱단일행함수" class="headerlink" title="🌱단일행함수"></a>🌱단일행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi/">단일행함수 : 문자함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi2/">단일행함수 : 숫자함수, 날짜함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi3/">단일행함수 : 변환함수, 일반함수</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200811dbi/">단일행함수 : 조건부 표현식</a></li></ol><h2 id="🌱여러행함수"><a href="#🌱여러행함수" class="headerlink" title="🌱여러행함수"></a>🌱여러행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi4/">여러행함수 : 그룹함수</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707dbi/">여러행함수 : Group by절, Having절</a></li></ol><h2 id="🌱중요-구문"><a href="#🌱중요-구문" class="headerlink" title="🌱중요 구문"></a>🌱중요 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/">JOIN</a></li><li><a href="https://sowon-dev.github.io/2020/07/13/200714dbi/">Subquery1: Subquery개념, 중첩Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/23/200824dbi/">Subquery2: Inlineview, Scalar Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery3: exists연산자, not exists연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery4: with절</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi3/">SQL 기억해야 할 쿼리</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200820dbi/">Top-N분석</a></li></ol><h2 id="🌱데이터조작어-DML-데이터정의어-DDL"><a href="#🌱데이터조작어-DML-데이터정의어-DDL" class="headerlink" title="🌱데이터조작어 (DML) / 데이터정의어 (DDL)"></a>🌱데이터조작어 (DML) / 데이터정의어 (DDL)</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/14/200714dbi2/">데이터조작어DML : insert/update/delete구문</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200721dbi/">데이터정의어DDL : table 생성 table 복사, varchar2와 varchar와 char비교</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200724dbi/">데이터정의어DDL : 테이블수정(컬럼수정, 제약조건수정, 컬럼명수정, 제약조건명수정), 테이블명변경, 테이블삭제, 테이블절단, truncate과 delete과 drop차이</a></li></ol><h2 id="🌱SQL의-OBJECT-종류"><a href="#🌱SQL의-OBJECT-종류" class="headerlink" title="🌱SQL의 OBJECT 종류"></a>🌱SQL의 OBJECT 종류</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200728dbi/">SQL의 OBJECT종류 : view</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi/">SQL의 OBJECT종류 : 시퀀스(Sequence)</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi2/">SQL의 OBJECT종류 : 인덱스(Index), 시노님(Synonym)</a></li></ol><h2 id="🌱DB구조"><a href="#🌱DB구조" class="headerlink" title="🌱DB구조"></a>🌱DB구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/26/200826dbi/">Oracle DB구조1 : Database</a></li><li><a href="https://sowon-dev.github.io/2020/08/28/200828dbi/">Oracle DB구조2 : Instance의 SGA메모리구조</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831dbi/">Oracle DB구조3 : Instance의 Background process</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901dbi2/">Oracle DB구조4 : 구조 완벽정리, 상활별 오라클 DB 순서</a></li></ol><h2 id="🌱DB구현-및-관리"><a href="#🌱DB구현-및-관리" class="headerlink" title="🌱DB구현 및 관리"></a>🌱DB구현 및 관리</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200911dbi/">Oracle DB생성방법 2가지, Oracle DB Tool, Parameterfile 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/14/200914dbi/">오라클의 Database 켜고 끄기</a></li><li><a href="https://sowon-dev.github.io/2020/09/18/200918dbi/">오라클의 Datafile 관리하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/20/200921dbi/">DB유저관리 : user 생성, 권한부여</a></li><li><a href="https://sowon-dev.github.io/2020/09/21/200922dbi/">데이터충돌, DeadLock</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi2/">DB fail 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/27/200928dbi/">Controlfile다중화, Redoligfile다중화, 데이터베이스로그모드</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/DBList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1082 : [기초-종합] 16진수 구구단?</title>
      <link>https://sowon-dev.github.io/2020/10/14/201015al-c1082/</link>
      <guid>https://sowon-dev.github.io/2020/10/14/201015al-c1082/</guid>
      <pubDate>Wed, 14 Oct 2020 16:25:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1082-기초-종합-16진수-구구단&quot;&gt;&lt;a href=&quot;#문제-1082-기초-종합-16진수-구구단&quot; class=&quot;headerlink&quot; title=&quot;문제 1082 : [기초-종합] 16진수 구구단?&quot;&gt;&lt;/a&gt;문제 1082 : [기초-종합] 16진수 구구단?&lt;/h2&gt;&lt;p&gt;16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운 영일(01)이는 16진수끼리 곱하는 16진수 구구단?에 대해서 궁금해졌다.&lt;br&gt;A, B, C, D, E, F 중 하나가 입력될 때, 1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.&lt;br&gt;(단, A 부터 F 까지만 입력된다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1082-기초-종합-16진수-구구단"><a href="#문제-1082-기초-종합-16진수-구구단" class="headerlink" title="문제 1082 : [기초-종합] 16진수 구구단?"></a>문제 1082 : [기초-종합] 16진수 구구단?</h2><p>16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운 영일(01)이는 16진수끼리 곱하는 16진수 구구단?에 대해서 궁금해졌다.<br>A, B, C, D, E, F 중 하나가 입력될 때, 1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.<br>(단, A 부터 F 까지만 입력된다.)</p><a id="more"></a><ul><li>입력예시<br>16진수로 한 자리 수가 입력된다.(단, A 부터 F 까지만 입력된다.)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>입력된 16진수에 1부터 F까지 순서대로 곱한, 16진수 구구단을 줄을 바꿔 출력한다.<br>계산 결과도 16진수로 출력해야 한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">B*1&#x3D;B</span><br><span class="line">B*2&#x3D;16</span><br><span class="line">B*3&#x3D;21</span><br><span class="line">B*4&#x3D;2C</span><br><span class="line">B*5&#x3D;37</span><br><span class="line">B*6&#x3D;42</span><br><span class="line">B*7&#x3D;4D</span><br><span class="line">B*8&#x3D;58</span><br><span class="line">B*9&#x3D;63</span><br><span class="line">B*A&#x3D;6E</span><br><span class="line">B*B&#x3D;79</span><br><span class="line">B*C&#x3D;84</span><br><span class="line">B*D&#x3D;8F</span><br><span class="line">B*E&#x3D;9A</span><br><span class="line">B*F&#x3D;A5</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String input = sc.nextLine();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String에서 16진수로 변경</span></span><br><span class="line"><span class="keyword">int</span> b = Integer.valueOf(input, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line">String s, ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">s = Integer.toHexString(i).toUpperCase();</span><br><span class="line">ans = Integer.toHexString(b * i).toUpperCase();</span><br><span class="line">System.out.println(input + <span class="string">"*"</span> + s + <span class="string">"="</span> + ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>10진수를 16진수로 변환하는 방법을 도식화해서 나타낸 것이다.</p><p><img src="https://dojang.io/pluginfile.php/807/mod_page/content/16/unit85-1.png" alt="https://dojang.io/mod/page/view.php?id=743"></p><p>16진수는 1부터 16까지이므로 for문의 조건은 <code>F</code>가 아니라 <code>16</code>으로 설정해야한다.</p><ul><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/#%EB%B0%B0%EC%9A%B4-%EC%A7%80%EC%8B%9D">진법변환 정리</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/14/201015al-c1082/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]주니어레벨의 스프링MVC 개발순서, MyBatis(iBatis) 사용 방법 3가지</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014spring/</guid>
      <pubDate>Tue, 13 Oct 2020 20:01:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;주니어레벨의-스프링MVC-개발순서&quot;&gt;&lt;a href=&quot;#주니어레벨의-스프링MVC-개발순서&quot; class=&quot;headerlink&quot; title=&quot;주니어레벨의 스프링MVC 개발순서&quot;&gt;&lt;/a&gt;주니어레벨의 스프링MVC 개발순서&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DB -&amp;gt; MyBatis -&amp;gt; DAO -&amp;gt; Service -&amp;gt; Controller -&amp;gt; View</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="주니어레벨의-스프링MVC-개발순서"><a href="#주니어레벨의-스프링MVC-개발순서" class="headerlink" title="주니어레벨의 스프링MVC 개발순서"></a>주니어레벨의 스프링MVC 개발순서</h2><ul><li>DB -&gt; MyBatis -&gt; DAO -&gt; Service -&gt; Controller -&gt; View<a id="more"></a></li></ul><p><br><br><br></p><h2 id="MyBatis-iBatis-사용-방법-3가지"><a href="#MyBatis-iBatis-사용-방법-3가지" class="headerlink" title="MyBatis(iBatis) 사용 방법 3가지"></a>MyBatis(iBatis) 사용 방법 3가지</h2><ol><li>XML 코드를 사용해서 SQL구문, DAO파일에서 XML코드를 호출해서 사용<ul><li>장점: SQL구문이 xml 파일로 분리, 쿼리 수정 유지보수에 유리</li><li>단점: 개발할 코드의 분량이 많아짐, 복잡도 증가</li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/#My-i-Batis%EB%9E%80">추가로 MyBatis(iBatis)란 개념 및 설치</a></li></ul></li><li>애노테이션과 인터페이스를 사용해서 SQL구문 처리<ul><li>장점: 별도의 DAO없이 개발 가능 (생산성 증가)</li><li>단점: 쿼리 수정이 필요한경우, 매번 컴파일 해야함.</li></ul></li><li>인터페이스(애노테이션)와 XML을 같이 사용해서 SQL구문 처리 <ul><li>장점: 간단한 SQL 인터페이스로, 복잡한 SQL은 XML 파일을 사용하여 유연한 대처</li><li>단점: 개발자 마다 개발 방식의 차이가 발생 가능성 증가</li></ul></li></ol><p><br><br><br></p><h2 id="MyBatis-iBatis-사용-순서"><a href="#MyBatis-iBatis-사용-순서" class="headerlink" title="MyBatis(iBatis) 사용 순서"></a>MyBatis(iBatis) 사용 순서</h2><p>포스팅에서는 위의 3가지 방식 중에 1번 방법을 사용해 볼 것이다.</p><ol><li>필요한 라이브러리 준비</li><li>DB생성 및 테이블 생성</li><li>도메인객체설계(DTO, VO), 클래스 생성</li><li>DAO <strong>인터페이스</strong> 생성</li><li>인터페이스에 사용할 기능들을 작성(명세)</li><li>XML Mapper 생성, SQL구문 작성<ul><li>XML파일로 만들어진 Mapper의 위치설정</li><li>XML파일안에 Mapper - DTD 지정</li><li>SQL 구문 작성후 사용</li></ul></li><li>MyBatis에서 XML Mapper를 인식하도록 설정</li><li>DAO 객체 구현</li><li>스프링을 활용한 DAO테스트(Junit)</li></ol><p><br><br><br></p><h3 id="DB-생성-및-테이블-생성"><a href="#DB-생성-및-테이블-생성" class="headerlink" title="DB 생성 및 테이블 생성"></a>DB 생성 및 테이블 생성</h3><p>아래와 같이 테이블을 생성해준다.</p><p><img src="/img/201014springDBt.PNG" alt=""></p><p><br><br><br></p><h3 id="도메인객체인-MemberVO-java-생성"><a href="#도메인객체인-MemberVO-java-생성" class="headerlink" title="도메인객체인 MemberVO.java 생성"></a>도메인객체인 <code>MemberVO.java</code> 생성</h3><p>Domain(도메인)이란? 물리적인 환경으로 분리가 가능한 단위</p><ul><li>개발(프로젝트)에서 가장 중요한 용어(단어)이고 주로 명사이다.<ul><li>예를 들어 회원, 상품, 글, 주문, 배송, 댓글 … (1차 도메인)</li><li>회원-가입, 탈퇴, 수정 … (2차 도메인)</li></ul></li><li>즉 DB테이블로 구분할 수 있는 단위</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberVO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String userid;</span><br><span class="line"><span class="keyword">private</span> String userpw;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String useremail;</span><br><span class="line"><span class="keyword">private</span> Timestamp regdate;</span><br><span class="line"><span class="keyword">private</span> Timestamp updatedate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//생성자 2개 : 기본생성자, 멤버변수를 인자로 전부를 가진 생성자</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberVO</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberVO</span><span class="params">(String userid, String userpw, String username, String useremail, Timestamp regdate,</span></span></span><br><span class="line"><span class="function"><span class="params">Timestamp updatedate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.userid = userid;</span><br><span class="line"><span class="keyword">this</span>.userpw = userpw;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.useremail = useremail;</span><br><span class="line"><span class="keyword">this</span>.regdate = regdate;</span><br><span class="line"><span class="keyword">this</span>.updatedate = updatedate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get() set()메서드 생성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserid</span><span class="params">(String userid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userid = userid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(중략)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"MemberVO [userid="</span> + userid + <span class="string">", userpw="</span> + userpw + <span class="string">", username="</span> + username + <span class="string">", useremail="</span></span><br><span class="line">+ useremail + <span class="string">", regdate="</span> + regdate + <span class="string">", updatedate="</span> + updatedate + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="MemberDAO-java-인터페이스-생성"><a href="#MemberDAO-java-인터페이스-생성" class="headerlink" title="MemberDAO.java 인터페이스 생성"></a><code>MemberDAO.java</code> 인터페이스 생성</h3><ul><li>해당 도메인에 관련된 기능 선언</li><li>기능을 구현하는 것이 아니라 기능을 선언만 한다. 구현은 DAO 구현클래스에서 진행한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberDAO</span> </span>&#123;</span><br><span class="line"><span class="comment">//해당 도메인에 관련된 기능 선언</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="XML-Mapper-생성-SQL구문-작성-memberMapper-xml-인터페이스-생성"><a href="#XML-Mapper-생성-SQL구문-작성-memberMapper-xml-인터페이스-생성" class="headerlink" title="XML Mapper 생성, SQL구문 작성 : memberMapper.xml 인터페이스 생성"></a>XML Mapper 생성, SQL구문 작성 : <code>memberMapper.xml</code> 인터페이스 생성</h3><ul><li>src &gt; main &gt; resource &gt; mappers폴더생성 후 <code>memberMapper.xml</code>파일 생성 </li><li><a href="https://mybatis.org/mybatis-3/ko/getting-started.html">MyBatis 홈페이지 매핑된 SQL 구문 살펴보기</a>에서 DOCTYPE 코드 복붙하기</li><li>XML파일로 만들어진 Mapper의 위치설정은 <code>root-context.xml</code>에 함</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD지정  --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- SQL 구문 작성후 사용  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itwillbs.mappers.memberMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTime"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">select now()</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DAO패키지(com.itwillbs.persistence)와 연결  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itwillbs.persistence"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="MyBatis에서-XML-Mapper를-인식하도록-설정"><a href="#MyBatis에서-XML-Mapper를-인식하도록-설정" class="headerlink" title="MyBatis에서 XML Mapper를 인식하도록 설정"></a>MyBatis에서 XML Mapper를 인식하도록 설정</h3><ul><li><code>root-context.xml</code>파일에 위에서 만든 mapper파일을 연결시켜준다.</li><li>SqlSessionTemplate 객체 : DB연결, 사용후에는 자원해제 (close()) 처리해주는 객체<ul><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/#MyBatis-%EC%84%A4%EC%B9%98">mybatis-spring 라이브러리</a>에 포함되어있다.</li><li>SqlSession 인터페이스를 구현한 객체이다.<ul><li>SqlSession인터페이스는 기본적인 트랜잭션, 쓰레드 처리의 안정성 보장, 디비 연결/해체처리</li></ul></li></ul></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/#MyBatis%EB%A1%9C-DB%EC%97%B0%EA%B2%B0">SqlSessionFactory 객체</a>와 SqlSessionTemplate객체의 차이점<ul><li>SqlSessionFactory객체는 Connection + MyBatis 객체연결 역할, DB해제는 못하고 Connection해제만 가능</li><li>SqlSessionTemplate객체는 DB연결/해제(pstmt, resultset포함 해제가능) 역할</li></ul></li><li>크기가 작은 객체들을 먼저 생성하고 크기가 큰 객체들을 나중에 생성한다. 생성한 큰 객체들안에 작은 객체들을 주입한다.<ul><li>처음부터 큰 객체를 만들면 되는데 왜 작은 객체부터 만드는걸까?</li><li>코드의 유지보수성때문에.</li><li>작은 기능을 사용할때는 작은 클래스를 사용할 수 있도록 모듈화하는 것이다.</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SqlSessionFactory 객체 (Connection + MyBatis 객체연결 역할, DB해제는 못하고 Connection해제만 가능)--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 위에서 생성된 객체를 주입하기 위해서는 value가 아니라 ref를 통해서 주입해야한다 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/Mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Mapper와 연결  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/**/*Mapper.xml"</span> /&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory 객체 end--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SqlSesstionTemplate 객체 (DB연결/해제(pstmt, resultset포함 해제가능) 역할)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span> <span class="attr">destroy-method</span>=<span class="string">"clearCache"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 바로 위에 있는 sqlSessionFactory객체를 생상자 의존주입  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SqlSesstionTemplate 객체 end--&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="DAO-객체-구현-MemberDAOImpl-java-객체-생성"><a href="#DAO-객체-구현-MemberDAOImpl-java-객체-생성" class="headerlink" title="DAO 객체 구현 : MemberDAOImpl.java 객체 생성"></a>DAO 객체 구현 : <code>MemberDAOImpl.java</code> 객체 생성</h3><ul><li>테스트를 위해서 <code>@Repository</code> 사용<ul><li>DAO객체를 스프링으로 인식할 수 있도록 처리</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDAOImpl</span> <span class="keyword">implements</span> <span class="title">MemberDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DB연결 (xml에서 만들어진 객체를 가져다 사용하고자함 = 의존 주입)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> SqlSession sqlSession; <span class="comment">//mapper위치까지 접근 가능 but mapper가 여러개일수있음 =&gt; mapper구분필요</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper구분하는 값 namespace</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String namespace = <span class="string">"com.itwillbs.mappers.memberMapper"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String result = sqlSession.selectOne(namespace+<span class="string">".getTime"</span>); <span class="comment">//괄호안에 쿼리구문 넣으면 됨</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="스프링을-활용한-DAO테스트-Junit-MemberDAOTest-java-생성"><a href="#스프링을-활용한-DAO테스트-Junit-MemberDAOTest-java-생성" class="headerlink" title="스프링을 활용한 DAO테스트(Junit) : MemberDAOTest.java 생성"></a>스프링을 활용한 DAO테스트(Junit) : <code>MemberDAOTest.java</code> 생성</h3><ul><li>@RunWith + @ContextConfiguration =&gt; 스프링으로 테스트하겠다는 의미</li><li>@RunWith + @ContextConfiguration + @WebAppConfiguration =&gt; 스프링MVC로 테스트하겠다는 의미</li><li><code>root-context.xml</code>에 DAO객체를 연결해줘야 테스트 가능하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itwillbs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itwillbs.persistence.MemberDAO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>= &#123;<span class="string">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDAOTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DB처리객체 생성 -&gt;MemberDAO 인터페이스라서 객체 생성할 수없다 -&gt; 의존 주입 @Inject 추가</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> MemberDAO mdao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDAO</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"테스트 : DAO객체생성 "</span>+ mdao);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTime</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//DAO getTime() 메서드 사용가능한지 테스트</span></span><br><span class="line">System.out.println(mdao.getTime());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014al-c1072/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014al-c1072/</guid>
      <pubDate>Tue, 13 Oct 2020 18:22:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기&quot;&gt;&lt;a href=&quot;#문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기&quot; class=&quot;headerlink&quot; title=&quot;문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기&quot;&gt;&lt;/a&gt;문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기&lt;/h2&gt;&lt;p&gt;n개의 정수가 순서대로 입력된다.(-2147483648 부터 +2147483647까지, 단 n의 최대 개수는 알 수 없다.)&lt;br&gt;n개의 입력된 정수를 순서대로 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기"><a href="#문제-1072-기초-반복실행구조-정수-입력받아-계속-출력하기" class="headerlink" title="문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기"></a>문제 1072 : [기초-반복실행구조] 정수 입력받아 계속 출력하기</h2><p>n개의 정수가 순서대로 입력된다.(-2147483648 부터 +2147483647까지, 단 n의 최대 개수는 알 수 없다.)<br>n개의 입력된 정수를 순서대로 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>첫 줄에 정수의 개수 n이 입력되고,<br>두 번째 줄에 n개의 정수가 공백을 두고 입력된다. (-2147483648 부터 +2147483647까지, 단 n의 최대 개수는 알 수 없다.)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>n개의 정수를 한 개씩 줄을 바꿔 출력한다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>입력을 두 번 받으면 되는 문제였다.<br>난 어떻게든 한 번 입력받고 처리할려고했으니 잘 될 턱이 있나…</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014al-c1072/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014al-c1071/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014al-c1071/</guid>
      <pubDate>Tue, 13 Oct 2020 17:41:13 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명&quot;&gt;&lt;a href=&quot;#문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)&quot;&gt;&lt;/a&gt;문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)&lt;/h2&gt;&lt;p&gt;정수가 순서대로 입력된다. (-2147483648 부터 +2147483647까지, 단 개수는 알 수 없다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명"><a href="#문제-1071-기초-반복실행구조-0-입력될-때까지-무한-출력하기1-설명" class="headerlink" title="문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)"></a>문제 1071 : [기초-반복실행구조] 0 입력될 때까지 무한 출력하기1(설명)</h2><p>정수가 순서대로 입력된다. (-2147483648 부터 +2147483647까지, 단 개수는 알 수 없다.)</p><a id="more"></a><p>0이 아니면 입력된 정수를 출력하고, 0이 입력되면 출력을 중단해보자.<br>while( ), for( ), do while( ) 등의 반복문을 사용할 수 없다.</p><p>참고<br>goto 명령문을 사용하면 간단한 반복 실행을 만들 수 있다.<br>반복 실행 부분을 빠져나오기 위해(즉 무한 반복을 방지하기 위해)<br>반복 실행 되는 도중에 조건을 검사해야 한다.</p><p>goto 이름:<br>이 명령은 이름: 이 작성된 곳으로 프로그램의 실행 흐름을 바꾸어 준다.</p><p>“이름:” 과 같이 콜론(:)이 붙어있는 부분을 이름표(label, 레이블)라고 한다.<br>레이블은 특별한 선언 없이 사용할 수 있으며 언더바(_)나 영문자로 시작하면 된다.<br>레이블은 한 단어처럼 공백없이 모두 붙여 써야 한다.</p><p>switch( ) … case … : … break; 에서<br>case … : 도 일종의 레이블이라고 생각할 수 있다.</p><p>goto 레이블:<br>명령을 사용하면 반복되는 부분을 여러 개 자유롭게 만들 수 있다.</p><p>goto 명령은 반복 실행을 만들어낼 수 있는 가장 간단한 명령이지만,<br>복잡하게(스파게티 코드) 사용하는 경우, 이해가 어렵고 오류가 생기기 쉽다.</p><ul><li>입력예시<br>정수가 순서대로 입력된다. (-2147483648부터 +2147483647까지, 단 개수는 알 수 없다.)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 4 2 3 0 1 5 6 9 10 8</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>입력된 정수를 줄을 바꿔 하나씩 출력하는데, 0이 입력되면 종료한다.<br>(0은 출력하지 않는다.)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      nums = sc.nextInt();</span><br><span class="line">      <span class="keyword">if</span>(nums == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">      System.out.println(nums);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>첫번째</p><blockquote><p>C언어나 C++과는 달리 자바에는 goto 문이 없습니다. 따라서 이렇게 반복문을 가리키는 이름(label)은 break 문이나 continue 문에만 사용될 수 있습니다.<br>출처 : <a href="http://tcpschool.com/java/java_control_etc">http://tcpschool.com/java/java_control_etc</a></p></blockquote><p>두번째</p><ul><li>갯수를 모르면 for반복문이 아니라 while반복문을 사용해야한다. 그리고 while반복문사용시 무한루프로 빠질 수 있으므로 나가는 조건을 꼭 확인한다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014al-c1071/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[국비교육 자바JAVA 팀프로젝트]2.팀결성, 내가 팀장?!, 깃허브로 팀프로젝트하기</title>
      <link>https://sowon-dev.github.io/2020/10/13/201014team/</link>
      <guid>https://sowon-dev.github.io/2020/10/13/201014team/</guid>
      <pubDate>Tue, 13 Oct 2020 15:19:22 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;팀결성-내가-팀장&quot;&gt;&lt;a href=&quot;#팀결성-내가-팀장&quot; class=&quot;headerlink&quot; title=&quot;팀결성, 내가 팀장?!&quot;&gt;&lt;/a&gt;팀결성, 내가 팀장?!&lt;/h2&gt;&lt;p&gt;팀구성원은 학원에서 여러 가지를 고려하여 나누어주었다. 우리 강의실은 총 16명의 수강생이있고 2팀으로 나누어졌다. 팀끼리 모였는데 다들 어색어색했다. 침묵의 시간…&lt;br&gt;팀장을 선출하는데 아무도 팀장을 하고싶어하지않아 오픈카톡에서 익명투표를 했다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="팀결성-내가-팀장"><a href="#팀결성-내가-팀장" class="headerlink" title="팀결성, 내가 팀장?!"></a>팀결성, 내가 팀장?!</h2><p>팀구성원은 학원에서 여러 가지를 고려하여 나누어주었다. 우리 강의실은 총 16명의 수강생이있고 2팀으로 나누어졌다. 팀끼리 모였는데 다들 어색어색했다. 침묵의 시간…<br>팀장을 선출하는데 아무도 팀장을 하고싶어하지않아 오픈카톡에서 익명투표를 했다. </p><a id="more"></a><p>그리고 내가 선출되어버렸다.<br>어느정도 예견된 결과였다. 동아리든 팀프로젝트이든 난 항상 팀장으로 선발되었다ㅋㅋㅋㅋㅋ 익숙. 이것이 운명인가?<br>남은 1개월이란 기간동안 다들 좋은 결과를 가져갈 수 있도록 해야지!</p><p><br><br><br></p><h2 id="팀장의-마음가짐"><a href="#팀장의-마음가짐" class="headerlink" title="팀장의 마음가짐"></a>팀장의 마음가짐</h2><ul><li>팀원 모두가 팀프로젝트를 끝내고 무언갈 하나씩 얻어갔으면 좋겠다.</li><li>팀장이 없더라도 헤매지않고 프로세스안에서 팀원 각자 해결할 수 있는 협업 프로세스를 만들고 싶다.</li><li>함께 하는 팀을 만들고 싶다.</li><li>재미있는 의견이 자유롭게 오고갔으면 좋겠다.</li></ul><p><br><br><br></p><h2 id="첫-회의때의-내-목표"><a href="#첫-회의때의-내-목표" class="headerlink" title="첫 회의때의 내 목표"></a>첫 회의때의 내 목표</h2><p>내가 팀장이 될 걸 알고(?) 있었기때문에 첫 회의때 해내고 싶었던 목표들을 미리 생각해놓았다. 한 2주전부터ㅋㅋㅋㅋㅋㅋ<br>국비학원 팀프로젝트인 경우 주제가 신선한지는 크게 중요하지 않다.<br>가장 중요한 것은 해내는 것. 바로 <strong>완성도</strong>라고 생각했다.<br>주제선정에 시간을 쏟을 필요가 전혀 없다고 판단했고 최대한 빨리 시작하는 것이 중요하다는 생각이 들었다. 갈수록 시간이 부족할테니까…<br>다양하게 고려해야 할 것들이 있지만 다년간의 팀프로젝트경험으로 말하는 건데 이 자바프로젝트에서 가장 중요한 건 각 팀원의 기능구현이다. 이는 취업과 직결되어있고 면접시 필수 질문이 되기 때문이다.<br>따라서 기능이 아닌 부차적인 것들은 빠르게 결정하려고 노력했다.</p><ul><li>첫 회의때 끝내고 싶었던 목표<ol><li>팀프로젝트 주제</li><li>디자인패턴 결정</li><li>커뮤니케이션 도구 확정</li><li>파트분배</li></ol></li></ul><p><br><br><br></p><h2 id="첫-회의-결과"><a href="#첫-회의-결과" class="headerlink" title="첫 회의 결과"></a>첫 회의 결과</h2><p>다행히 첫 회의때 팀원들이 좋은 의견을 많이 내주어서 원해던 목표의 80%를 결정할 수 있었다.<br>또한 팀원이 8명인만큼 페어프로그래밍을 하자고 의견을 제시하였고 팀원들도 좋다고 해서 2인 1팀으로 각 팀마다 게시판을 맡아서 짝프로그래밍을 하기로 했다.</p><ul><li>팀프로젝트 주제 : 다내놔는 회원이 구매자인 동시에 판매자가 될 수 있는 쇼핑 플랫폼입니다.<ul><li>쇼핑몰이 레퍼런스도 많고 팀원들중 다수가 하고자했던 프로젝트였다.</li><li>다나와처럼 컴퓨터와 관련된 상품을 판매하는 사이트로 모티브를 잡았다.</li><li>팀프로젝트 이름도 한 팀원의 재치로 금방 정해졌다.</li></ul></li><li>디자인패턴 결정 : springMVC패턴<ul><li>springMVC패턴은 지금 공부하고 있고 model2패턴은 이미 수업이 끝났다.</li><li>그나마 익숙한 model2패턴을 할지 springMVC패턴으로 도전할 지 논의가 있었다.</li><li>이를 익명투표를 통해 해결했다.</li></ul></li><li>커뮤니케이션 도구 확정 : 오픈카톡, 깃허브 레포<ul><li>깃허브 레포를 적극 어필했고 팀원들에게 받아들여져서 레포를 생성하고 collaborator로 팀원들을 초대했다.</li><li><a href="https://github.com/sowon-dev/danenaShop">깃허브 레포지토리 : 다내나샵</a></li><li>칸반보드 형식인 <a href="https://github.com/sowon-dev/danenaShop/projects/1">깃허브 Projects</a>를 사용하여 전체 프로세스 진행사항을 체크할 수 있도록 하였다.</li><li>다른 팀프로젝트 레포지토리를 참고하여 <a href="https://github.com/sowon-dev/danenaShop/wiki">팀프로젝트 규정을 wiki</a>에 작성했다.</li><li><a href="https://github.com/sowon-dev/danenaShop/wiki/201014-%EC%B2%AB%ED%9A%8C%EC%9D%98">회의록</a> 중 중요한 사항을 남기기위해 새로운 페이지에 작성했다.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">## 💻 협업규칙</span><br><span class="line">1. 담당파트를 Pair프로그래밍으로 진행합니다.</span><br><span class="line">2. 각 팀에서는 진행사항을 수시로 Projects탭에 업데이트합니다.</span><br><span class="line">- 1. 드래그를 통해 진행사항 업데이트.(To do, WIP, Done 중 선택)</span><br><span class="line">- 1. 추가 기술은 자신의 팀에 `+` 버튼을 눌러 자세히 적어서 추가합니다.</span><br><span class="line">3. DB테이블은 팀전체가 함께 구상합니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 💻 Commit Rule</span><br><span class="line">기능</span><br><span class="line">기능-상세기능</span><br><span class="line"></span><br><span class="line">ex) </span><br><span class="line">"회원가입"</span><br><span class="line">"로그인-유효성확인"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 💻 PR Rule</span><br><span class="line">PR은 기능단위로 진행합니다.</span><br><span class="line">rebase 대신 merge 사용합니다.</span><br><span class="line"></span><br><span class="line">## 💻 주요 회의록</span><br><span class="line">1. [201014 첫회의](https://github.com/sowon-dev/danenaShop/wiki/201014-%EC%B2%AB%ED%9A%8C%EC%9D%98)</span><br></pre></td></tr></table></figure><ul><li>파트분배 : 못함….</li><li>CSS : 부트스트랩<ul><li>직접 view페이지를 작성할지말지 의견이 분분했다.</li><li>각각의 장단점이 분명히 존재하기 때문이다.</li><li>직접 만들기<ul><li>장점 : 변수명등을 직접 생성하기때문에 뷰페이지 이해도 쉬움</li><li>단점 : 직접 뷰페이지를 만들기때문에 긴 생성시간, 부족한 미적인 요소</li></ul></li><li>템플릿 가져다쓰기<ul><li>장점 : 미적요소 향상, 전체프로젝트생성시간 단축</li><li>단점 : 페이지 이해가 어려움, 긴 적응시간</li></ul></li><li>따라서 다수결에 의해 템플릿을 이용하기로 했다.</li></ul></li></ul><p><br><br><br></p><h2 id="앞으로-해야할-것"><a href="#앞으로-해야할-것" class="headerlink" title="앞으로 해야할 것"></a>앞으로 해야할 것</h2><ul><li>협업규칙은 가장 기본적인 것들만 내가 찾아서 적은 것이므로 팀원들과 회의를 통해 구체화 할 예정이다.</li><li>CSS 템플릿 선택</li><li>파트분배</li><li>DB테이블 설계</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/Team-Project/">Team Project</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/13/201014team/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[SQL퀴즈] substr과 TO_CHAR차이</title>
      <link>https://sowon-dev.github.io/2020/10/12/201013dbi-q11-3/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201013dbi-q11-3/</guid>
      <pubDate>Mon, 12 Oct 2020 22:44:29 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;employees 테이블로부터 각 월의 16일 이전에 채용된 사원을 모두 출력하는 쿼리구문을 작성하시오.&lt;br&gt;사용가능한 컬럼명 : hire_date, last_name&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>employees 테이블로부터 각 월의 16일 이전에 채용된 사원을 모두 출력하는 쿼리구문을 작성하시오.<br>사용가능한 컬럼명 : hire_date, last_name</p><a id="more"></a><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name, hire_date</span><br><span class="line">from employees</span><br><span class="line"><span class="built_in">where</span> substr(hire_date, -2, 2) &lt; 16;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="강사님쿼리"><a href="#강사님쿼리" class="headerlink" title="강사님쿼리"></a>강사님쿼리</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name, hire_date </span><br><span class="line">FROM employees </span><br><span class="line">WHERE TO_CHAR(hire_date, <span class="string">'DD'</span>) &lt; 16;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운지식"><a href="#배운지식" class="headerlink" title="배운지식"></a>배운지식</h2><p>날짜형식은 나라에 따라 달라진다. 우리나라는 년-월-일순이지만 미국은 보통 월-일-년순, 뉴질랜드는 보통 일-월-년이기도 하다. 이처럼 다양한 나라가 서로 다른 날짜형식을 사용한다.<br>내 코드처럼 substr를 사용하면 날짜형식이 변하는 순간 다시 index값을 찾아서 작성해야한다.</p><p>하지만 TO_CHAR를 사용하면 <code>DD</code>를 찾기때문에 날짜형식이 달라도 날짜만을 찾아서 쿼리를 진행할 수 있어 수월하다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/SQL%ED%80%B4%EC%A6%88/">SQL퀴즈</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201013dbi-q11-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[SQL퀴즈] not a single-group group function 해결, group by사용, outer join사용</title>
      <link>https://sowon-dev.github.io/2020/10/12/201013dbi-q11-2/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201013dbi-q11-2/</guid>
      <pubDate>Mon, 12 Oct 2020 22:07:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;employees 테이블과 departments 테이블로부터 각 부서에 대한 부서번호(department_id), 부서이&lt;br&gt;름(department_name), 위치(location_id) 및 사원(employee_id) 수를 보여주는 쿼리구문을 작성하시오.&lt;br&gt;단, 사원이 없는 부서도 출력을 시키시오.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>employees 테이블과 departments 테이블로부터 각 부서에 대한 부서번호(department_id), 부서이<br>름(department_name), 위치(location_id) 및 사원(employee_id) 수를 보여주는 쿼리구문을 작성하시오.<br>단, 사원이 없는 부서도 출력을 시키시오.</p><a id="more"></a><p>두 테이블 구조는 아래와 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$&gt; desc employees;</span><br><span class="line"></span><br><span class="line">이름             널?       유형           </span><br><span class="line">-------------- -------- ------------ </span><br><span class="line">EMPLOYEE_ID NOT NULL NUMBER(6) </span><br><span class="line">FIRST_NAME          VARCHAR2(20) </span><br><span class="line">LAST_NAME NOT NULL VARCHAR2(25) </span><br><span class="line">EMAIL  NOT NULL VARCHAR2(25) </span><br><span class="line">PHONE_NUMBER          VARCHAR2(20) </span><br><span class="line">HIRE_DATE NOT NULL DATE  </span><br><span class="line">JOB_ID  NOT NULL VARCHAR2(10) </span><br><span class="line">SALARY          NUMBER(8,2) </span><br><span class="line">COMMISSION_PCT          NUMBER(2,2) </span><br><span class="line">MANAGER_ID          NUMBER(6) </span><br><span class="line">DEPARTMENT_ID          NUMBER(4)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$&gt; desc departments;</span><br><span class="line"></span><br><span class="line">이름              널?       유형           </span><br><span class="line">--------------- -------- ------------ </span><br><span class="line">DEPARTMENT_ID NOT NULL NUMBER(4) </span><br><span class="line">DEPARTMENT_NAME NOT NULL VARCHAR2(30) </span><br><span class="line">MANAGER_ID          NUMBER(6) </span><br><span class="line">LOCATION_ID          NUMBER(4)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="내쿼리"><a href="#내쿼리" class="headerlink" title="내쿼리"></a>내쿼리</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select e.department_id, d.department_name, d.location_id, count(e.employee_id)</span><br><span class="line">from employees e</span><br><span class="line">join departments d</span><br><span class="line">on d.department_id = e.department_id;</span><br><span class="line"></span><br><span class="line">//출력값</span><br><span class="line">ORA-00937: 단일 그룹의 그룹 함수가 아닙니다</span><br><span class="line">00937 00000 -  <span class="string">"not a single-group group function"</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="강사님코드"><a href="#강사님코드" class="headerlink" title="강사님코드"></a>강사님코드</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.department_id, d.department_name, d.location_id, COUNT(e.employee_id)</span><br><span class="line">FROM employees e </span><br><span class="line">RIGHT OUTER JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id</span><br><span class="line">GROUP BY d.department_id, d.department_name, d.location_id;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>첫번째</p><ul><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/#inner-join%EA%B3%BC-outer-join-%EB%B9%84%EA%B5%90">join</a>할때 내 코드는 inner join으로 조인조건을 만족하는 행만 반환한다<ul><li>반면 outer join은 조인조건을 만족하는 행과 조인조건을 만족하지않는 행을 모두 반환하기때문에 문제에서 제시했던 <code>단, 사원이 없는 부서도 출력을 시키시오.</code>까지 만족시킬 수 있다.</li><li>따라서 outer join을 사용해야한다.</li></ul></li></ul><p>두번째</p><ul><li><code>not a single-group group function</code> 의미는 해당 SQL쿼리문에 특정 열이 GROUP BY구에서 참조되지 않으면 그 열과 Group function를 포함할 수 없으므로 group by를 넣어야한다.</li><li><a href="https://sowon-dev.github.io/2020/07/07/200707dbi/#Group-by%EC%A0%88">Group by절</a>    <ul><li>Group by절은 count하는 열빼고 다 작성해야한다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/SQL%ED%80%B4%EC%A6%88/">SQL퀴즈</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201013dbi-q11-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]redirect나forward로 페이지이동하기, JSON데이터처리하기</title>
      <link>https://sowon-dev.github.io/2020/10/12/201013spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201013spring-1/</guid>
      <pubDate>Mon, 12 Oct 2020 17:50:44 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;리턴타입-String일-때-리턴값을-redirect-또는-forward-줘서-페이지이동&quot;&gt;&lt;a href=&quot;#리턴타입-String일-때-리턴값을-redirect-또는-forward-줘서-페이지이동&quot; class=&quot;headerlink&quot; title=&quot;리턴타입 String일 때 리턴값을 redirect: 또는 forward:줘서 페이지이동&quot;&gt;&lt;/a&gt;리턴타입 String일 때 리턴값을 &lt;code&gt;redirect: 또는 forward:&lt;/code&gt;줘서 페이지이동&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redirect: 또는 forward:&lt;/code&gt; 페이지이동 메서드에서 String 리턴시 주소 앞에 사용&lt;ul&gt;
&lt;li&gt;리턴타입이 일반 string일때랑 redirect: 또는 forward형식의 String일때 차이가 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return string&lt;/code&gt;은 jsp뷰페이지를 바로 가는 것</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="리턴타입-String일-때-리턴값을-redirect-또는-forward-줘서-페이지이동"><a href="#리턴타입-String일-때-리턴값을-redirect-또는-forward-줘서-페이지이동" class="headerlink" title="리턴타입 String일 때 리턴값을 redirect: 또는 forward:줘서 페이지이동"></a>리턴타입 String일 때 리턴값을 <code>redirect: 또는 forward:</code>줘서 페이지이동</h2><ul><li><code>redirect: 또는 forward:</code> 페이지이동 메서드에서 String 리턴시 주소 앞에 사용<ul><li>리턴타입이 일반 string일때랑 redirect: 또는 forward형식의 String일때 차이가 있다.</li><li><code>return string</code>은 jsp뷰페이지를 바로 가는 것<a id="more"></a></li><li><code>return redirect: 또는 forward:</code>은 jsp 뷰페이지를 찾는 것이 아니라 메서드를 호출하는 것</li><li>그리고 또 redirect와 forward도 차이가 있다<ul><li><code>return &quot;redirect:doF&quot;;</code> : 주소변경O, 페이지변경O</li><li><code>return &quot;forward:doF&quot;;</code> : 주소변경X, 페이지변경O</li></ul></li></ul></li></ul><p><br><br><br></p><h3 id="다양한-값들을-객체에-넣어서-파라미터로-전달"><a href="#다양한-값들을-객체에-넣어서-파라미터로-전달" class="headerlink" title="다양한 값들을 객체에 넣어서 파라미터로 전달"></a>다양한 값들을 객체에 넣어서 파라미터로 전달</h3><ul><li>매개변수 객체에 데이터를 넣을 때 키값을 정하지 않고 value만 넣는 경우 자동으로 value의 데이터타입으로 전달된다.<ul><li>예를 들어 <code>model.addAttribute(&quot;1234test&quot;)</code>한 경우 <code>string=1234test</code>를 주소에 붙어서 전달</li><li>다른 예로 <code>model.addAttribute(132)</code>인 경우 <code>integer=132</code>를 주소에 붙어서 전달</li></ul></li><li>자바코드<ul><li>key와 value를 객체에 넣기 : <code>model.addAttribute(&quot;msg&quot;, &quot;4567test&quot;);</code></li><li>string을 객체에 넣기 : <code>model.addAttribute(&quot;1234test&quot;);</code></li><li>int를 객체에 넣기 : <code>model.addAttribute(132);</code></li><li>객체생성해서 객체에 넣기 : <code>model.addAttribute(&quot;msg&quot;, new ProductVO(&quot;moniter&quot;, 2000));</code> =&gt; 불가능</li></ul></li><li>입력한 주소 : <a href="http://localhost:8088/test/doE">http://localhost:8088/test/doE</a></li><li>메서드에 따라 호출되는 페이지 : <code>doF.jsp</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//로그정보 처리객체생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger  = LoggerFactory.getLogger(SampleController4<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 맵핑</span></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doE</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doE"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doE</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doE()호출"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//model.addAttribute("msg", "4567test");</span></span><br><span class="line"><span class="comment">//model.addAttribute("1234test");//매개변수명을 지정하지 않으면 데이터타입으로 전달됨 string</span></span><br><span class="line"><span class="comment">//model.addAttribute(132);//매개변수명을 지정하지 않으면 데이터타입으로 전달됨 integer</span></span><br><span class="line"><span class="comment">//model.addAttribute("msg", new ProductVO("moniter", 2000)); //redirect로 파라미터 전달안됨</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/doF"</span>; <span class="comment">//아래의 주소 호출하기 위해 사용</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doF</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doF"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doF</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doF()호출"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doF.jsp</code> 뷰페이지 코드 (공통코드)<ul><li>다양한 방법으로 파라미터 값을 가져와서 출력하려고 노력해보았다</li><li>key와 value를 객체에 넣은 경우 출력하기 : <code>${키_이름 }</code></li><li>string을 객체에 넣은 경우 출력하기 : <code>${param.integer }</code></li><li>int를 객체에 넣은 경우 출력하기 :  ${param.string }`</li><li>키값이 없는 경우에는 <code>param.자동으로_지정된_파라미터명</code>으로 가져와야한다. 왜냐하면 param데이터 영역안에 값이 들어있기때문이다.</li><li>키값이 없는 경우 <code>${requestScope.자동으로_지정된_파라미터명 }</code>를 사용해서 출력하려했으나 출력되지 않았다. 왜일까…? 강사님께 물어봤는데 자신도 찾아봐야겠다고하셨다…</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">request.setCharacterEncoding</span>("<span class="attr">UTF-8</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">여기는 doF.jsp입니다.<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>키값이 있는 파라미터 값 가져오기(객체는 안됨)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">메세지(키값 msg) : $&#123;msg &#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>키값이 없는 int 파라미터 값 가져오기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">메세지(integer) : $&#123;integer &#125; 키값이 아니라서 안됨<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">메세지(param.integer) : $&#123;param.integer &#125; 파람데이터영역에서 꺼내기때문에 가능<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">메세지(requestScope.integer) : $&#123;requestScope.integer &#125; 왜 안 될까? <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>키값이 없는 String 파라미터 값 가져오기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">메세지(string) : $&#123;string &#125;  키값이 아니라서 안됨<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">메세지(param.string) : $&#123;param.string &#125; 파람데이터영역에서 꺼내기때문에 가능<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">메세지(requestScope.string) : $&#123;requestScope.string &#125; 왜 안 될까? <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="RedirectAttributes클래스-사용하여-파라미터-1회성으로-전달하기"><a href="#RedirectAttributes클래스-사용하여-파라미터-1회성으로-전달하기" class="headerlink" title="RedirectAttributes클래스 사용하여 파라미터 1회성으로 전달하기"></a>RedirectAttributes클래스 사용하여 파라미터 1회성으로 전달하기</h2><ul><li><code>rttr.addFlashAttribute(&quot;msg&quot;, &quot;flash!&quot;);</code> : 주소줄에 안보임, El표현식가능, jsp표현식불가능, 새로고침하면 사라짐(즉 1회성 데이터)<ul><li>예를 들어 카운트를 올릴때 새로고침시 계속 조회수가 올라가는 것이 아니라 한번 올라가게끔 만들때 addFlashAttribute 사용</li></ul></li><li><code>rttr.addAttribute(&quot;msg&quot;, &quot;add!&quot;);</code> : 주소줄에 보임, El표현식가능, jsp표현식가능, 새로고침해도 그대로</li></ul><ul><li>자바코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//로그정보 처리객체생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger  = LoggerFactory.getLogger(SampleController4<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doE</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doE"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doE</span><span class="params">(Model model, RedirectAttributes rttr)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doE()호출"</span>);</span><br><span class="line"></span><br><span class="line">rttr.addFlashAttribute(<span class="string">"msg"</span>, <span class="string">"flash!"</span>); <span class="comment">//주소줄에 안보임, El표현식가능, jsp표현식불가능, 새로고침하면 사라짐(즉 1회성 데이터)</span></span><br><span class="line"><span class="comment">// rttr.addAttribute("msg", "add!"); //주소줄에 보임, El표현식가능, jsp표현식가능, 새로고침해도 그대로</span></span><br><span class="line">addFlashAttribute 사용</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/doF"</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doF</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doF"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doF</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doF()호출"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doF.jsp</code> 뷰페이지코드</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">메세지(키값 msg) : $&#123;msg &#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//출력값</span><br><span class="line">메세지(키값 msg) : flash!</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="데이터를-JSON으로-변경한-뒤-파라미터-전달하기"><a href="#데이터를-JSON으로-변경한-뒤-파라미터-전달하기" class="headerlink" title="데이터를 JSON으로 변경한 뒤 파라미터 전달하기"></a>데이터를 JSON으로 변경한 뒤 파라미터 전달하기</h2><ul><li>JSON데이터로 만들기 순서<ol><li>라이브러리 복붙 </li><li>doJSON()메서드 생성</li></ol></li></ul><p><br><br><br></p><h3 id="Jackson-Databind-라이브러리-추가"><a href="#Jackson-Databind-라이브러리-추가" class="headerlink" title="Jackson Databind 라이브러리 추가"></a>Jackson Databind 라이브러리 추가</h3><ul><li><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.8.4">Jackson Databind » 2.8.4 버전</a>코드를 복사하여 프로젝트의 <code>po,.xml</code>에 붙여넣기</li><li>복붙시 꼭 dependencies 태그 안에 위치시켜야한다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="doJSON-메서드-생성"><a href="#doJSON-메서드-생성" class="headerlink" title="doJSON()메서드 생성"></a>doJSON()메서드 생성</h3><ul><li><code>ProductVO.java</code> 객체생성<ul><li>자바코드에서 사용할 json을 담을 객체를 만들어보자</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//자바빈(DTO == VO)설계규약</span></span><br><span class="line"><span class="comment">//규칙1번 : public클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVO</span> </span>&#123;</span><br><span class="line"><span class="comment">//규칙2 : private로 멤버변수 생성</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="comment">//규칙4 : 생성자(생략가능 - 생략하면 디폴트생성자)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductVO</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductVO</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//규칙3 : getter setter메서드생성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. toString</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"제품정보 [name="</span> + name + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자바코드<ul><li>VO데이터를 JSON데이터로 변경시키기위해서 리턴타입앞에 <code>@ResponseBody</code>을 사용한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController5</span> </span>&#123;</span><br><span class="line"><span class="comment">//로그정보 처리객 체생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger  = LoggerFactory.getLogger(SampleController5<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 맵핑</span></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doJSON</span></span><br><span class="line"><span class="comment">// 프레임워크를 사용하는 가장 큰 이유는 json데이터처리를 위해서.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON데이터로 만들기 1.라이브러리 복붙 2.doJSON()메서드생성</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doJSON"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">ProductVO <span class="title">doJSON</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doJSON 실행"</span>);</span><br><span class="line"></span><br><span class="line">ProductVO vo = <span class="keyword">new</span> ProductVO(<span class="string">"radio"</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>뷰페이지 출력값<ul><li>뷰페이지(.jsp)를 따로 만들지않아도 서버를 통해 json데이터를 화면에서 볼 수 있다.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 출력값</span><br><span class="line">&#123;"name":"radio","price":1000.0&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201013spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]페이지이동하기, 파라미터가지고 페이지이동하기</title>
      <link>https://sowon-dev.github.io/2020/10/12/201013spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201013spring/</guid>
      <pubDate>Mon, 12 Oct 2020 17:07:11 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;특정-주소를-처리하는-메서드-2가지방식-페이지이동하기&quot;&gt;&lt;a href=&quot;#특정-주소를-처리하는-메서드-2가지방식-페이지이동하기&quot; class=&quot;headerlink&quot; title=&quot;특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)&quot;&gt;&lt;/a&gt;특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;리턴타입이 있는지 없는지에 따라 두가지 방식으로 나누어진다&lt;ul&gt;
&lt;li&gt;메서드 리턴타입이 void인 경우 [주소.jsp] 페이지 호출&lt;/li&gt;
&lt;li&gt;메소드 리턴타입이 String인 경우 [리턴되는_문자열.jsp] 페이지 호출</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="특정-주소를-처리하는-메서드-2가지방식-페이지이동하기"><a href="#특정-주소를-처리하는-메서드-2가지방식-페이지이동하기" class="headerlink" title="특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)"></a>특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)</h2><ul><li>리턴타입이 있는지 없는지에 따라 두가지 방식으로 나누어진다<ul><li>메서드 리턴타입이 void인 경우 [주소.jsp] 페이지 호출</li><li>메소드 리턴타입이 String인 경우 [리턴되는_문자열.jsp] 페이지 호출<a id="more"></a></li></ul></li></ul><p><br><br><br></p><h3 id="return타입-없는-경우"><a href="#return타입-없는-경우" class="headerlink" title="return타입 없는 경우"></a>return타입 없는 경우</h3><ul><li>void 메서드를 사용하면 된다</li><li>입력하는 주소 : <code>http://localhost:8088/test/home</code></li><li>메서드 실행에 따라 호출되는 페이지 : <code>home.jsp</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8088/test/home</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"home"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doA 메서드 호출"</span>);</span><br><span class="line">logger.info(<span class="string">"Logger: doA()호출"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="return타입-있는-경우"><a href="#return타입-있는-경우" class="headerlink" title="return타입 있는 경우"></a>return타입 있는 경우</h3><ul><li>string, int, 객체 등등 알맞은 데이터타입을 적어주면 된다.</li><li>입력하는 주소 : <code>http://localhost:8088/test/doC</code></li><li>메서드에 따라 호출되는 페이지 : <code>abc.jsp</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController2</span> </span>&#123;</span><br><span class="line"><span class="comment">// 로그정보를 처리하는 객체 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleController2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doC</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doC"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doC</span><span class="params">()</span> </span>&#123; <span class="comment">//리턴타입 String인 경우</span></span><br><span class="line">logger.info(<span class="string">"doC 메서드 호출"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="파라미터가지고-페이지이동하기"><a href="#파라미터가지고-페이지이동하기" class="headerlink" title="파라미터가지고 페이지이동하기"></a>파라미터가지고 페이지이동하기</h2><ul><li>파라미터의 데이터타입에 따라 다양하게 전달 가능</li><li>파라미터 앞에 애노테이션과 키명을 적어주어야한다<ul><li><code>@ModelAttribute(&quot;키_이름&quot;)</code></li></ul></li></ul><p><br><br><br></p><h3 id="파라미터-타입이-String인-경우"><a href="#파라미터-타입이-String인-경우" class="headerlink" title="파라미터 타입이 String인 경우"></a>파라미터 타입이 String인 경우</h3><ul><li><a href="https://sowon-dev.github.io/2020/10/13/201013spring/">리턴타입이 String일때 리턴값 <code>redirect: 또는 forward:</code>로 페이지이동하기</a></li><li>입력하는 주소 : <code>http://localhost:8088/test/testParam?msg=&quot;hi&quot;</code></li><li>메서드에 따라 호출되는 페이지 : <code>doC.jsp</code></li><li>java코드<ul><li>파라미터를 return할때 함께 줄 수 없을까? 즉 return “doC?msg=Hi”;가 가능할까?</li><li>NOPE 안된다.</li><li>그 이유는 <code>doC?msg=hi.jsp</code>로 매핑이 되서 오류가 발생한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8088/test/testParam?msg="hi"</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"testParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doC1</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg, @<span class="title">ModelAttribute</span><span class="params">(<span class="string">"name"</span>)</span> String username) </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doC1 메서드 호출, 파라미터 메세지: "</span>+msg+<span class="string">", 유저이름: "</span>+username);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"doC"</span>;</span><br><span class="line"><span class="comment">// return "doC?msg=Hi";</span></span><br><span class="line"><span class="comment">// Q. 에러의 이유가 'doC?msg=hi.jsp'로 매핑이 되서 그런거 아닌가요? A. 맞음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doC.jsp</code> 뷰 페이지 코드<ul><li>표현식에는 el표현식방식과 jsp표현식방식이 있다.</li><li>두가지 표현방식 중 주로 EL표현식을 사용한다.</li><li>그 이유는 EL표현식은 데이터가 NULL일때 컴파일에러가 없이 빈 공백으로 표시되기때문에 안정성이 높아서.</li></ul></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;(el태그 사용)&lt;/strong&gt; 전달받은 메세지 파라미터는 $&#123;msg &#125; 입니다. 너의 이름은? $&#123;name &#125;&lt;br&gt;</span><br><span class="line">&lt;strong&gt;(jsp표현식 사용)&lt;/strong&gt; 전달받은 메세지 파라미터는 &lt;%=request.getParameter("msg") %&gt; 입니다. 너의 이름은? &lt;%=request.getParameter("name") %&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">(el태그 사용) 전달받은 메세지 파라미터는 hi 입니다. 너의 이름은?</span><br><span class="line">(jsp표현식 사용) 전달받은 메세지 파라미터는 hi 입니다. 너의 이름은? <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="파라미터-타입이-객체인-경우"><a href="#파라미터-타입이-객체인-경우" class="headerlink" title="파라미터 타입이 객체인 경우"></a>파라미터 타입이 객체인 경우</h3><ul><li><p>기존에는 request.setAttribute로 객체를 넘겼는데 스프링에서는 model객체(스프링mvc에서 제공해주는 객체)를 사용</p></li><li><p>model 객체는 객체를 저장해서 뷰페이지로 전달</p></li><li><p>model 객체 생성 방법 두가지</p><ul><li>첫번째 방법: 키와값 쌍으로 전달 <code>model.addAttribute(&quot;vo&quot;, vo);</code></li><li>두번째 방법: 키없이 객체만 전달 <code>model.addAttribute(vo);</code><ul><li>키없이 객체만 전달한 경우 받을때는 클래스 첫글자를 소문자 변경해서 el표현식으로 호출해야함.</li></ul></li></ul></li><li><p>공통코드 : <code>ProductVO.java</code>라는 객체생성</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 도메인 : 프로젝트에서 중요한 의미를 가지는 명사로 ex) 회원, 글, 상품, 주문 ... 등등</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//자바빈(DTO == VO)설계규약</span></span><br><span class="line"><span class="comment">//규칙1번 : public클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVO</span> </span>&#123;</span><br><span class="line"><span class="comment">//규칙2 : private로 멤버변수 생성</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="comment">//규칙4 : 생성자(생략가능 - 생략하면 디폴트생성자)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductVO</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductVO</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//규칙3 : getter setter메서드생성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. toString</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"제품정보 [name="</span> + name + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>동일한 페이지명으로 페이지이동시 자바코드<ul><li>입력한 주소 : <a href="http://localhost:8088/test/doD">http://localhost:8088/test/doD</a></li><li>메서드에 따라 호출되는 페이지 : <code>doD.jsp</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController3</span> </span>&#123;</span><br><span class="line"><span class="comment">// 페이지 이동시 객체 정보를 가지고 이동</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 로그정보 처리 객체</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleController3<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doD</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doD"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doD</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doD() 호출!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//상품객체생성</span></span><br><span class="line">ProductVO vo = <span class="keyword">new</span> ProductVO(<span class="string">"phone"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 방법 : 키와값 쌍으로 전달</span></span><br><span class="line">model.addAttribute(<span class="string">"vo"</span>, vo);</span><br><span class="line"><span class="comment">// 두번째 방법: 키없이 객체만 전달</span></span><br><span class="line">model.addAttribute(vo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doD.jsp</code> 뷰페이지 코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">전달받은 객체 호출&lt;br&gt;</span><br><span class="line">&lt;!-- toString()를 통해서 출력 --&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"vo"</span>) %&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">제품명 : $&#123;vo.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;vo.price &#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">제품명 : $&#123;productVO.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;productVO.price &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">전달받은 객체 호출</span><br><span class="line">제품정보 [name=phone, price=<span class="number">100.0</span>]</span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br></pre></td></tr></table></figure><ul><li>다른 페이지명으로 페이지이동시 자바코드<ul><li>입력한 주소 : <a href="http://localhost:8088/test/doD">http://localhost:8088/test/doD</a></li><li>메서드에 따라 호출되는 페이지 : <code>doDPage.jsp</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController3</span> </span>&#123;</span><br><span class="line"><span class="comment">// 페이지 이동시 객체 정보를 가지고 이동</span></span><br><span class="line"><span class="comment">// 로그정보 처리 객체</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleController3<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doD</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doD"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doD</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doD() 호출!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//상품객체생성</span></span><br><span class="line">ProductVO vo = <span class="keyword">new</span> ProductVO(<span class="string">"phone"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 방법: 키와값 쌍으로 전달</span></span><br><span class="line">model.addAttribute(<span class="string">"vo"</span>, vo);</span><br><span class="line"><span class="comment">// 두번째 방법: 키없이 객체만 전달</span></span><br><span class="line">model.addAttribute(vo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"doDPage"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doDPage.jsp</code> 뷰페이지 코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">전달받은 객체 호출(doDpage.jsp)&lt;br&gt;</span><br><span class="line">&lt;!-- toString()를 통해서 출력 --&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"vo"</span>) %&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">제품명 : $&#123;vo.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;vo.price &#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">제품명 : $&#123;productVO.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;productVO.price &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">전달받은 객체 호출(doDpage.jsp)</span><br><span class="line">제품정보 [name=phone, price=<span class="number">100.0</span>]</span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201013spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</title>
      <link>https://sowon-dev.github.io/2020/10/12/201012al-c1066/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201012al-c1066/</guid>
      <pubDate>Mon, 12 Oct 2020 04:08:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)&lt;/h2&gt;&lt;p&gt;세 정수 a, b, c가 입력되었을 때, 짝(even)/홀(odd)을 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명"><a href="#문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명" class="headerlink" title="문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)"></a>문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)</h2><p>세 정수 a, b, c가 입력되었을 때, 짝(even)/홀(odd)을 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>세 정수 a, b, c 가 공백을 두고 입력된다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;&#x3D; a, b, c &lt;&#x3D; +2147483647</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 8</span><br></pre></td></tr></table></figure><ul><li>출력예시</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">odd</span><br><span class="line">even</span><br><span class="line">even</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드1"><a href="#코드1" class="headerlink" title="코드1"></a>코드1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] nums = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(nums[i])%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"even"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"odd"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내가 제일 처음 생각한 코드이다.<br>최대한 반복을 줄이고싶어서 String 배열로 받아서 if문안에서 int로 변형했다.<br>좋은 코드가 있을까싶어 다른 코드들도 구글링했는데 더 좋은 코드를 찾았다.</p><p><br><br><br></p><h2 id="코드2"><a href="#코드2" class="headerlink" title="코드2"></a>코드2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">            arr[i]= sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(arr[i]%<span class="number">2</span> ==<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"even"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"odd"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>두 코드의 메모리사용과 시간, 코드길이를 비교해보았다</p><table><thead><tr><th align="center"></th><th align="center">코드1(String Array사용)</th><th align="center">코드2(int Array사용)</th></tr></thead><tbody><tr><td align="center">메모리</td><td align="center">14908</td><td align="center">14948</td></tr><tr><td align="center">시간</td><td align="center">112</td><td align="center">113</td></tr><tr><td align="center">코드길이</td><td align="center">590 B</td><td align="center">458 B</td></tr></tbody></table><p>공백으로 나누어야하니까 String Array만 써야하는 줄 알았는데 int Array도 가능했다.<br>코드길이도 더 짧다.<br>어떻게 nextInt()는 space를 받아들일까?</p><p><br><br><br></p><h3 id="Scanner-default-delimiter-스캐너-클래스-기본-구분자"><a href="#Scanner-default-delimiter-스캐너-클래스-기본-구분자" class="headerlink" title="Scanner default delimiter (스캐너 클래스 기본 구분자)"></a>Scanner default delimiter (스캐너 클래스 기본 구분자)</h3><p>엄청 열심히 검색해서 그 답을 알아냈다.<br>그 답은 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextInt(int)">nextInt()메서드</a>가 아닌 Scanner 클래스에 있었다.</p><blockquote><p>A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods.<br>출처 : <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html">https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html</a></p></blockquote><p>여기서 말하는 기본 구분자(default delimiter)는 화이트스페이스(whitespace)라고한다.</p><p><br><br><br></p><h3 id="whitespace-화이트-스페이스"><a href="#whitespace-화이트-스페이스" class="headerlink" title="whitespace (화이트 스페이스)"></a>whitespace (화이트 스페이스)</h3><p>그렇다면 화이트스페이스(whitespace)가 무엇일까?<br>화이트 스페이스란 말그대로 의미없는 공백, 탭, 행 등등을 의미한다.<br>예를 들어 소스코드 끝에 있는 공백이라든지 의미없는 새로운 행이 있다.</p><ul><li>화이트 스페이스의 종류<ul><li>space</li><li>tabs</li><li>new lines</li></ul></li></ul><blockquote><p>The Scanner class provides a versatile way of reading data of various types including Files, InputStreams and simple String objects. The input data must be delimited by some character. By default the delimiters are white space (space, tabs, and new lines). The class provides methods for changing the delimiter.<br>출처 : <a href="http://csc.columbusstate.edu/woolbright/java/scanner.html">http://csc.columbusstate.edu/woolbright/java/scanner.html</a></p></blockquote><p><a href="https://stackoverflow.com/questions/11863503/whitespaces-in-java">자바에서는 whitespace인지 아닌지 구분하는 isWhitespace()메서드</a>가 있다.</p><ul><li><a href="https://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)">https://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201012al-c1066/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</title>
      <link>https://sowon-dev.github.io/2020/10/12/201012al-c1064/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201012al-c1064/</guid>
      <pubDate>Mon, 12 Oct 2020 03:50:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)&lt;/h2&gt;&lt;p&gt;입력된 세 정수 a, b, c 중 가장 작은 값을 출력하는 프로그램을 작성해보자.&lt;br&gt;단, 조건문을 사용하지 않고 3항 연산자 ? 를 사용한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명"><a href="#문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명" class="headerlink" title="문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)"></a>문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)</h2><p>입력된 세 정수 a, b, c 중 가장 작은 값을 출력하는 프로그램을 작성해보자.<br>단, 조건문을 사용하지 않고 3항 연산자 ? 를 사용한다.</p><a id="more"></a><ul><li>입력예시<br>3개의 정수가 공백으로 구분되어 입력된다.</li><li>2147483648 ~ +2147483648</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 -1 5</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>가장 작은 값을 출력한다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><p>삼항연산은 쉽지만 헷갈리기때문에 정신을 똑바로 차리고 참과 거짓을 콜론(:)으로 가려내야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] nums = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = Integer.parseInt(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> b = Integer.parseInt(nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> c = Integer.parseInt(nums[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"%d"</span>, a&gt;b? b&gt;c? c:b : a&gt;c? c:a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201012al-c1064/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</title>
      <link>https://sowon-dev.github.io/2020/10/11/201012al-c1059/</link>
      <guid>https://sowon-dev.github.io/2020/10/11/201012al-c1059/</guid>
      <pubDate>Sun, 11 Oct 2020 23:10:50 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)&lt;/h2&gt;&lt;p&gt;입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.&lt;br&gt;비트단위(bitwise)연산자 ~ 를 붙이면 된다.(~ : tilde, 틸드라고 읽는다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명"><a href="#문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명" class="headerlink" title="문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)"></a>문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)</h2><p>입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.<br>비트단위(bitwise)연산자 ~ 를 붙이면 된다.(~ : tilde, 틸드라고 읽는다.)</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">** 비트단위(bitwise) 연산자는,</span><br><span class="line">~(bitwise not), &amp;(bitwise and), |(bitwise or), ^(bitwise xor),</span><br><span class="line">&lt;&lt;(bitwise left shift), &gt;&gt;(bitwise right shift)</span><br><span class="line">가 있다.</span><br><span class="line"></span><br><span class="line">예를 들어 1이 입력되었을 때 저장되는 1을 32비트 2진수로 표현하면</span><br><span class="line">        00000000 00000000 00000000 00000001 이고,</span><br><span class="line">~1은 11111111 11111111 11111111 11111110 가 되는데 이는 -2를 의미한다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">예시</span><br><span class="line">int a=1;</span><br><span class="line">printf("%d", ~a); //-2가 출력된다.</span><br></pre></td></tr></table></figure><ul><li>입력예시<br>정수 1개가 입력된다. (-2147483648 ~ +2147483647)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>출력예시<br>비트 단위로 <code>1 -&gt; 0</code>, <code>0 -&gt; 1</code>로 바꾼 후 그 값을 10진수로 출력한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        System.out.println(~a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>괜히 어렵게 생각했다. 2진수를 만들어야한다고 생각해서 사용자로부터 String을 받아서 2진수로 변경 후 비트연산자 적용하여 10진수로 출력하려고 했는데 잘 되지않았다.</p><p>앞으로 2진수로 받아야한다하면 그냥 int로 받아야겠다!</p><ul><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/#%EB%B0%B0%EC%9A%B4-%EC%A7%80%EC%8B%9D">2진수 처리 비교- 2진수, 8진수 16진수를 Scanner로 받으려면 String 데이터타입으로 지정해야한다.</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/11/201012al-c1059/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]MAVEN REPOSITORY, My(i)Batis설치</title>
      <link>https://sowon-dev.github.io/2020/10/11/201012spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/11/201012spring/</guid>
      <pubDate>Sun, 11 Oct 2020 20:15:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Maven-메이븐&quot;&gt;&lt;a href=&quot;#Maven-메이븐&quot; class=&quot;headerlink&quot; title=&quot;Maven(메이븐)&quot;&gt;&lt;/a&gt;Maven(메이븐)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;빌드도구 중의 하나&lt;/li&gt;
&lt;li&gt;필요한 라이브러리 코드들을 아래 공식 메이븐레파지토리에서 복사한 뒤 &lt;code&gt;pom.xml&lt;/code&gt;에 붙여넣어서 사용 및 관리</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Maven-메이븐"><a href="#Maven-메이븐" class="headerlink" title="Maven(메이븐)"></a>Maven(메이븐)</h2><ul><li>빌드도구 중의 하나</li><li>필요한 라이브러리 코드들을 아래 공식 메이븐레파지토리에서 복사한 뒤 <code>pom.xml</code>에 붙여넣어서 사용 및 관리<a id="more"></a></li><li><a href="https://mvnrepository.com/">메이븐 공식 레파지토리(MAVEN REPOSITORY) 사이트</a>에 접속한 뒤 검색해서 원하는 것을 클릭한 후 코드를 복사해서 <code>pom.xml</code>의 test주석부분의 <code>&lt;dependencies&gt;</code>태그 안에 붙여넣기하면 된다<ul><li>검색한 뒤 어떤 버전을 쓸지 모르겠다면? Usages가 가장 많은 것을 받으면 된다.</li><li>라이브러리 에러 해결방법 두 가지<ul><li>프로젝트 우클릭 &gt; Maven &gt; project update (해당 파일 동기화)</li><li>C:\Users\ITWILL.m2\repository 폴더에 저장 되고 프로젝트 (강제로 삭제후 STS 재실행) </li></ul></li></ul></li></ul><p><br><br><br></p><h2 id="MyBatis-iBatis-란"><a href="#MyBatis-iBatis-란" class="headerlink" title="MyBatis(iBatis)란"></a>MyBatis(iBatis)란</h2><ul><li>SQL MAPPER 라이브러리</li><li>스프링 프레임워크와 같이 활용하여 효율적인 SQL 처리</li><li>반복되는 try~catch 구문, pstmt, rs 객체를 대신 처리<ul><li>코드양이 줄어드는 장점</li></ul></li><li>XML/애노테이션 형태로 SQL구문 사용가능<ul><li>하지만 보통 XML로 쿼리구문작성한다.</li></ul></li><li>스프링과 자동으로 연동되어 처리되는 라이브러리를 제공한다.</li><li>장점 : 동적 SQL문 사용가능<ul><li>동적 SQL구문이란 SQL구문안에 반복문과 조건문 사용가능한 형태</li></ul></li><li><a href="https://sowon-dev.github.io/2020/10/14/201014spring/">MyBatis(iBatis) 사용 방법 2가지</a></li></ul><p><br><br><br></p><h2 id="MyBatis-설치"><a href="#MyBatis-설치" class="headerlink" title="MyBatis 설치"></a>MyBatis 설치</h2><p>메이븐 레포지토리에서 아래와 같이 4개의 라이브러리 코드를 복붙한다.</p><ul><li><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis/3.4.1">메이븐 레포지토리에서 mybatis</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기</li><li><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis-spring/1.3.0">메이븐 레포지토리에서 mybatis-spring</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 마이바티스를 연결하는 라이브러리</li></ul></li><li><a href="https://mvnrepository.com/artifact/org.springframework/spring-jdbc/5.2.9.RELEASE">메이븐 레포지토리에서 Spring-JDBC</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 JDBC를 연결하는 라이브러리 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//위의 코드 두 개를 버전 수정</span></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.2.9.RELEASE">메이븐 레포지토리에서 Spring-test</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 마이바티스의 연결을 확인하는 라이브러리 (Junit의 역할)</li></ul></li></ul><p><br><br><br></p><h2 id="MyBatis로-DB연결"><a href="#MyBatis로-DB연결" class="headerlink" title="MyBatis로 DB연결"></a>MyBatis로 DB연결</h2><p>위의 4가지 라이브러리를 설치 후 <code>root-context.xml</code>에 속성을 처리해준다.</p><ul><li>아래 사진처럼 <code>root-context.xml</code>의 Namespaces속성에 위에서 추가한 라이브러리들을 tick한다.</li></ul><p><img src="/img/201008rootContext.PNG" alt=""></p><ul><li>이제 <code>root-context.xml</code>에 DB연결객체를 생성하여 DB를 연결할 수 있다.</li><li>SqlSessionFactory 객체 : Connection을 생성하고 사용하는 객체 + MyBatis설정까지 가능한 객체<ul><li>SqlSessionFactoryBean 클래스를 사용해야함</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mybatis-spring</span>=<span class="string">"http://mybatis.org/schema/mybatis-spring"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Root Context: defines shared resources visible to all other web components --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataSource 정보를 가지고 있는 DriverManagerDataSource 객체를 생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/springdb?useSSL=false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory 객체 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 위에서 생성된 객체를 주입하기 위해서는 value가 아니라 ref를 통해서 주입해야한다 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/Mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/11/201012spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008al-c1041/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008al-c1041/</guid>
      <pubDate>Wed, 07 Oct 2020 18:17:16 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)&lt;/h2&gt;&lt;p&gt;영문자 1개를 입력받아 그 다음 문자를 출력해보자.&lt;br&gt;영문자 ‘A’의 다음 문자는 ‘B’이고, 영문자 ‘0’의 다음 문자는 ‘1’이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명"><a href="#문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명" class="headerlink" title="문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)"></a>문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)</h2><p>영문자 1개를 입력받아 그 다음 문자를 출력해보자.<br>영문자 ‘A’의 다음 문자는 ‘B’이고, 영문자 ‘0’의 다음 문자는 ‘1’이다.</p><a id="more"></a><p>참고<br>숫자는 수를 표현하는 문자로서 ‘0’ 은 문자 그 자체를 의미하고, 0은 값을 의미한다.</p><p>힌트<br>아스키문자표에서 ‘A’는 10진수 65로 저장되고 ‘B’는 10진수 66으로 저장된다.<br>따라서 문자도 값으로 덧셈을 할 수 있다.</p><ul><li>입력예시<br>영문자 1개가 입력된다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><ul><li>출력예시 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="첫번째-코드"><a href="#첫번째-코드" class="headerlink" title="첫번째 코드"></a>첫번째 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String -&gt; char</span></span><br><span class="line"><span class="keyword">char</span> c = s.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//char+1</span></span><br><span class="line"><span class="keyword">int</span> i = c+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char로 출력</span></span><br><span class="line">System.out.printf(<span class="string">"%s"</span>, (<span class="keyword">char</span>)i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="두번째-코드"><a href="#두번째-코드" class="headerlink" title="두번째 코드"></a>두번째 코드</h2><p>위의 코드보다 더 간결하게 나타낼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">char</span> a = sc.nextLine().charAt(<span class="number">0</span>);</span><br><span class="line">        System.out.printf(<span class="string">"%c"</span>, a+<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>꼭 기억하자</p><ul><li>char를 Scanner로 받을땐 <code>sc.nextLine().charAt(0);</code>로 받으면 String이 아닌 Char형태로 바로 받을 수 있다.</li><li>char를 printf로 출력할때 <code>&quot;%s&quot;</code>가 아니라 <code>&quot;%c&quot;</code>로 출력하면 된다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008al-c1041/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/</guid>
      <pubDate>Wed, 07 Oct 2020 17:47:32 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;STS-단축키-추가하기&quot;&gt;&lt;a href=&quot;#STS-단축키-추가하기&quot; class=&quot;headerlink&quot; title=&quot;STS 단축키 추가하기&quot;&gt;&lt;/a&gt;STS 단축키 추가하기&lt;/h2&gt;&lt;p&gt;Spring Tool Suite 4(STS)는 이클립스환경이다. 이클립스와 동일하게 단축키도 이용가능한 줄 알았다.&lt;br&gt;&lt;code&gt;sout&lt;/code&gt; + Ctrl + Space를 통해서 &lt;code&gt;System.out.println()&lt;/code&gt;을 이용하려고 했는데 단축키가 적용되지않았다.&lt;br&gt;&lt;code&gt;sysout&lt;/code&gt; 매번 입력하기는 너&amp;#126;&amp;#126;&amp;#126;&amp;#126;무 귀찮기때문에 구글링하여 직접 단축키를 추가해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="STS-단축키-추가하기"><a href="#STS-단축키-추가하기" class="headerlink" title="STS 단축키 추가하기"></a>STS 단축키 추가하기</h2><p>Spring Tool Suite 4(STS)는 이클립스환경이다. 이클립스와 동일하게 단축키도 이용가능한 줄 알았다.<br><code>sout</code> + Ctrl + Space를 통해서 <code>System.out.println()</code>을 이용하려고 했는데 단축키가 적용되지않았다.<br><code>sysout</code> 매번 입력하기는 너&#126;&#126;&#126;&#126;무 귀찮기때문에 구글링하여 직접 단축키를 추가해보았다.</p><a id="more"></a><p>이클립스도 STS와 별반 다르지않게 단축키를 추가할 수 있다.</p><p><img src="/img/201008stsAddShortcuts.PNG" alt=""></p><p><br><br><br></p><h2 id="1-Window-gt-Preferences-클릭-gt-Templates검색"><a href="#1-Window-gt-Preferences-클릭-gt-Templates검색" class="headerlink" title="1. Window &gt; Preferences 클릭 &gt; Templates검색"></a>1. Window &gt; Preferences 클릭 &gt; Templates검색</h2><h2 id="2-Java-Editor하위의-Templates-클릭-사진-속-1번-참조"><a href="#2-Java-Editor하위의-Templates-클릭-사진-속-1번-참조" class="headerlink" title="2. Java-Editor하위의 Templates 클릭(사진 속 1번 참조)"></a>2. Java-Editor하위의 Templates 클릭(사진 속 1번 참조)</h2><ul><li>여기서 내장되어있는 단축키를 확인할 수 있다.</li><li>기존 단축키 수정도 가능하고 새로운 단축키 추가도 가능하다</li></ul><h2 id="3-New버튼클릭-사진-속-2번-참조"><a href="#3-New버튼클릭-사진-속-2번-참조" class="headerlink" title="3. New버튼클릭(사진 속 2번 참조)"></a>3. New버튼클릭(사진 속 2번 참조)</h2><h2 id="4-Edit-Template에-단축키-추가-사진-속-3번-참조"><a href="#4-Edit-Template에-단축키-추가-사진-속-3번-참조" class="headerlink" title="4. Edit Template에 단축키 추가(사진 속 3번 참조)"></a>4. Edit Template에 단축키 추가(사진 속 3번 참조)</h2><ul><li>Name : 원하는 단축키</li><li>Context : Java statements 설정</li><li>Description : 단축키 설명 입력</li><li>Pattern : 단축키 입력시 원하는 동작 추가</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pattern예시</span></span><br><span class="line">System.out.println($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br></pre></td></tr></table></figure><p>나는 두가지를 단축키로 추가하였다.</p><ul><li><code>System.out.println()</code>를 <code>sout</code>으로 단축키 추가 지정</li><li><code>System.out.printf()</code>를 <code>souf</code>로 단축키 추가 지정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//`System.out.println()`를 `sout`으로 단축키 추가 지정시 Pattern예시</span></span><br><span class="line">System.out.println($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//`System.out.printf()`를 `souf`로 단축키 추가 지정시 Pattern예시</span></span><br><span class="line">System.out.printf($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br></pre></td></tr></table></figure><h2 id="5-OK클릭-gt-Apply-and-Close-클릭-사진-속-4번-참조"><a href="#5-OK클릭-gt-Apply-and-Close-클릭-사진-속-4번-참조" class="headerlink" title="5. OK클릭 &gt; Apply and Close 클릭(사진 속 4번 참조)"></a>5. OK클릭 &gt; Apply and Close 클릭(사진 속 4번 참조)</h2><ul><li>단축키가 잘 되는 지 확인한다.</li><li>완-벽!</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링 MVC프로젝트, 주요 어노테이션(Annotation)</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008spring/</guid>
      <pubDate>Wed, 07 Oct 2020 16:14:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Spring-MVC-프로젝트-생성하는-두가지-방법&quot;&gt;&lt;a href=&quot;#Spring-MVC-프로젝트-생성하는-두가지-방법&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC 프로젝트 생성하는 두가지 방법&quot;&gt;&lt;/a&gt;Spring MVC 프로젝트 생성하는 두가지 방법&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Spring Legacy Project&lt;ul&gt;
&lt;li&gt;WAS-tomcat 경험과 model2 경험 필요&lt;/li&gt;
&lt;li&gt;상대적으로 설정하는 것이 어렵다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Spring-MVC-프로젝트-생성하는-두가지-방법"><a href="#Spring-MVC-프로젝트-생성하는-두가지-방법" class="headerlink" title="Spring MVC 프로젝트 생성하는 두가지 방법"></a>Spring MVC 프로젝트 생성하는 두가지 방법</h2><ol><li>Spring Legacy Project<ul><li>WAS-tomcat 경험과 model2 경험 필요</li><li>상대적으로 설정하는 것이 어렵다.<a id="more"></a></li><li>실무에서 기존 프로젝트를 이해하기 쉽다 (실무에서 주로 사용하기때문에)</li><li>모든 버전의 스프링을 사용가능</li><li>단점 : 리소스가 많이 필요하다.</li><li>Create a project &gt; Spring Legacy Project &gt; Spring MVC project 클릭하여 생성</li></ul></li><li>Spring Starter Project(Spring Boot)<ul><li>최대한 간결하게 실행, 배포하기 위한 방법</li><li>WAS없이 실행가능</li><li>최근 유행 &gt; 빠르게 처리가능하기에 간단한 테스트용으로 자주 사용</li><li>단점 : jsp뷰 별도의 설정 필요</li></ul></li></ol><p><br><br><br></p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><ul><li><code>*.me</code> 주소를 직접 처리해서 사용하는 개발방법</li></ul><table><thead><tr><th align="center">Spring MVC</th><th align="center">특징</th></tr></thead><tbody><tr><td align="center">M odel</td><td align="center">데이터 처리(DB)</td></tr><tr><td align="center">V iew</td><td align="center">화면 처리(jsp)</td></tr><tr><td align="center">C ontroller</td><td align="center">뷰와 모델을 연결</td></tr></tbody></table><p><br><br><br></p><h3 id="MVC패턴을-사용하는-이유-두가지"><a href="#MVC패턴을-사용하는-이유-두가지" class="headerlink" title="MVC패턴을 사용하는 이유 두가지"></a>MVC패턴을 사용하는 이유 두가지</h3><ol><li>개발자,디자이너의 영역을 분리 </li><li>각각의 주소(URI)통한 페이지 제어하기 때문에 유지보수 쉽다.</li></ol><p><br><br><br></p><h3 id="스프링-MVC프로젝트안-src-폴더하위의-각-파일이-가진-의미"><a href="#스프링-MVC프로젝트안-src-폴더하위의-각-파일이-가진-의미" class="headerlink" title="스프링 MVC프로젝트안 src 폴더하위의 각 파일이 가진 의미"></a>스프링 MVC프로젝트안 src 폴더하위의 각 파일이 가진 의미</h3><ul><li><code>servlet-context.xml</code> : 스프링 프로젝트에서 웹과 관련된 모든 속성을 처리</li><li><code>root-context.xml</code> : 스프링 프로젝트에서 웹을 제외한 모든 속성을 처리</li></ul><p><br><br><br>    </p><h3 id="FrontController패턴"><a href="#FrontController패턴" class="headerlink" title="FrontController패턴"></a>FrontController패턴</h3><p><img src="https://nesoy.github.io/assets/posts/20170217/2.PNG" alt="https://nesoy.github.io/articles/2017-02/Front-Controller"></p><ul><li>기존 패턴(Page Controller)보다 더 강제적으로 페이지제어를 할 수 있게 됨</li><li>기존 패턴(컨트롤러 하나가 전체 로직을 제어) –위임 사용–&gt; FrontController(일부분만 제어하는 컨트롤러 생성)</li><li>스프링MVC패턴에서 컨트롤러의 역할<ol><li>페이지 요청에 따라 파라미터 처리(DTO객체, VI객체)</li><li>애노테이션을 사용한 처리</li><li>로직이 집중되게끔 해주는 역할</li><li>테스트 동작의 편의성</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------   </span><br><span class="line">주소요청 -&gt; FC  <span class="tag">&lt;<span class="name">-</span>&gt;</span>  C  <span class="tag">&lt;<span class="name">-</span>&gt;</span> Service <span class="tag">&lt;<span class="name">-</span>&gt;</span> DAO <span class="tag">&lt;<span class="name">-</span>&gt;</span>MyBatis <span class="tag">&lt;<span class="name">-</span>&gt;</span> MySQL</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">V</span><br><span class="line">----------------------------------------------------------------</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Spring MVC 각 작업분류</th><th align="left">작업</th></tr></thead><tbody><tr><td align="center">스프링MVC가 처리해주는 작업</td><td align="left">URI를 분석해서 알맞는 Controller 찾기</td></tr><tr><td align="center"></td><td align="left">Controller에 필요한 메서드 호출</td></tr><tr><td align="center"></td><td align="left">Controller의 결과 데이터를 VIEW로 전달</td></tr><tr><td align="center"></td><td align="left">적절한 VIEW 페이지를 찾아서 연결</td></tr><tr><td align="center">개발자가 처리해야하는 작업</td><td align="left">특정 URI에 동작하는 Controller를 설계</td></tr><tr><td align="center"></td><td align="left">서비스 객체 생성 (약한결합)</td></tr><tr><td align="center"></td><td align="left">DAO 객체 생성 (약한결합)</td></tr><tr><td align="center"></td><td align="left">Controller 내부에 원하는 동작을 메서드로 설계</td></tr><tr><td align="center"></td><td align="left">VIEW에서 전달받은 데이터 출력</td></tr></tbody></table><p><br><br><br></p><h2 id="스프링-웹-프로젝트"><a href="#스프링-웹-프로젝트" class="headerlink" title="스프링 웹 프로젝트"></a>스프링 웹 프로젝트</h2><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RahUjo1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uqvr69zi0mlvh2eh8459.jpg" alt="https://dev.to/urunov/truly-there-is-no-difference-in-implementation-integrating-spring-with-jersey-and-integrating-jersey-with-spring-m2k"></p><ul><li>Presentation Layer : UI담당하는 계층, 웹,모바일 구분<ul><li>view-jsp 페이지, html/css/js 페이지, Controller 페이지 처리</li></ul></li><li>Business Layer : 서비스 계층, 사용자 요구사항을 바탕으로 구현하는 계층(기능적 구현)<ul><li>컨트롤러와 DB 직접 연결을 방지하는 역할</li></ul></li><li>Data Access Layer(=Persistence Layer) : 데이터처리 계층, DB관련 처리<ul><li>DAO객체 처리</li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/">My(i)Batis 호출(마이바티스가 아래의 DB에 접근함)</a></li></ul></li><li>Data Base</li></ul><p><br><br><br>    </p><h2 id="주요-애노테이션-Annotation"><a href="#주요-애노테이션-Annotation" class="headerlink" title="주요 애노테이션(Annotation)"></a>주요 애노테이션(Annotation)</h2><p><img src="https://postfiles.pstatic.net/MjAxNzA0MjhfOTYg/MDAxNDkzMzc3NzM2NzEz.9-2zHEEBRqwcidCNJQEfTgHituz29SKhWzsxvuEy6QAg.Wf5cnIDUQ8mzjNq74WsUhHBEeAgsCQU1CUQLmWnHt1wg.JPEG.wwwkang8/faef.jpg?type=w773" alt="https://blog.naver.com/wwwkang8/220994093310"></p><table><thead><tr><th align="left">주요 애너테이션</th><th align="left">특징</th></tr></thead><tbody><tr><td align="left">@Controller</td><td align="left">스프링 MVC 컨트롤러 객체의미 (클래스)</td></tr><tr><td align="left">@RequestMapping</td><td align="left">특정 URI에 매칭되는 클래스,메서드처리 (클래스,메서드)</td></tr><tr><td align="left">@RequestParam</td><td align="left">요청정보 중에서 파라미터값을 찾을때사용(파라미터)</td></tr><tr><td align="left">@ModelAttribute</td><td align="left">자동으로 해당 객체를 뷰까지 전달 (메서드,파라미터)</td></tr><tr><td align="left">@SessionAttribute</td><td align="left">세션객체 안에서 정보를 유지 (클래스)</td></tr><tr><td align="left">@Repository</td><td align="left">DAO 객체 (클래스)</td></tr><tr><td align="left">@Service</td><td align="left">서비스 객체(클래스)</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008spring/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
