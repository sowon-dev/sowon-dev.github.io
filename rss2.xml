<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Tue, 17 Jan 2023 04:30:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>NAS가 뭐길래</title>
      <link>https://sowon-dev.github.io/2023/01/15/230116nas/</link>
      <guid>https://sowon-dev.github.io/2023/01/15/230116nas/</guid>
      <pubDate>Sun, 15 Jan 2023 16:55:28 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;&quot;&gt;클라우드 네이티브&lt;/a&gt;관련해서 교육을 듣던 중 강사님이 NAS에 관해 아래처럼 말씀하셨다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;서버 1x.x.x.xx는 NAS로 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예전에 대리님이 아기 사진이 너무 많아 NAS서버를 만들까한다는 말도 떠오르면서 NAS가 정확히 뭔지 궁금해졌다.&lt;br&gt;문맥상 데이터 저장소같은데 DB와는 또 어떻게 다를까? 외부에서 접근하면 클라우드저장소같은데 그와는 또 어떻게 다를까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="">클라우드 네이티브</a>관련해서 교육을 듣던 중 강사님이 NAS에 관해 아래처럼 말씀하셨다.</p><blockquote><p>서버 1x.x.x.xx는 NAS로 사용합니다.</p></blockquote><p>예전에 대리님이 아기 사진이 너무 많아 NAS서버를 만들까한다는 말도 떠오르면서 NAS가 정확히 뭔지 궁금해졌다.<br>문맥상 데이터 저장소같은데 DB와는 또 어떻게 다를까? 외부에서 접근하면 클라우드저장소같은데 그와는 또 어떻게 다를까?</p><a id="more"></a><h1 id="NAS-Network-Attached-Storage"><a href="#NAS-Network-Attached-Storage" class="headerlink" title="NAS(Network Attached Storage)"></a>NAS(Network Attached Storage)</h1><ul><li>Network Attached Storage: 네트워크 결합 스토리지</li><li>LAN으로 연결하는 외장 하드디스크</li><li>반대 개념은 컴퓨터에 직접 연결해서 쓰는 DAS(직접 결합 저장장치, Direct Attached Storage) e.g. 내장형 하드디스크</li></ul><p>컴퓨터를 직접 연결하지 않고 근거리 통신 네트워크(LAN)를 통해 데이터를 주고 받는다. 클라우드 스토리지 서비스와 유사한 느낌인데 어떤 차이가 있을까?</p><p><br><br><br></p><h1 id="클라우드-스토리지-서비스와-차이점"><a href="#클라우드-스토리지-서비스와-차이점" class="headerlink" title="클라우드 스토리지 서비스와 차이점"></a>클라우드 스토리지 서비스와 차이점</h1><table><thead><tr><th align="center"></th><th align="left">NAS</th><th align="left">클라우드스토리지</th></tr></thead><tbody><tr><td align="center">정의</td><td align="left">LAN으로 연결하는 외장 하드디스크</td><td align="left"></td></tr><tr><td align="center">보안성</td><td align="left">우수</td><td align="left">개인정보보안취약</td></tr><tr><td align="center">안정성</td><td align="left">하드디스크에 몇개에 의존해서 취약</td><td align="left">우수</td></tr><tr><td align="center">속도</td><td align="left">상대적 빠름</td><td align="left">상대적 느림</td></tr><tr><td align="center">비용</td><td align="left">초기비용많지만 유지비 상대적 저렴</td><td align="left">주로 월정액방식으로 초기비용도 낮고 유지비도 비싸지않다</td></tr></tbody></table><p><br><br><br></p><h1 id="NAS-목적"><a href="#NAS-목적" class="headerlink" title="NAS 목적"></a>NAS 목적</h1><p>사람에 따라 사용방식이 다양하지만 구글링해본 결과 대용량, 개인자료는 NAS에 보관하고 업무용 또는 백업용 자료는 클라우드저장소(구글클라우드)를 많이 사용하는 것으로 보인다.</p><p><br><br><br></p><h1 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h1><p>NAS에 대해 궁금한 점을 팀장님께 물으니 팀장님이 RAID에 관해서도 함께 설명해주셨다. 안 물어보면 어쩔뻔했어! 이렇게 지식이 확장되는 거 정말 좋다! 재밌어!</p><ul><li>RAID정의: 저장장치 여러 개를 묶어 고용량, 고성능인 저장 장치 한 개와 같은 효과를 얻기 위해 개발된 기법</li><li>사용목적<ol><li>무정지 구현</li><li>고성능 구현</li></ol></li></ul><p>그렇다면 왜 묶어서 사용할까? 나무위키에 그에 관한 설명이 잘 나와있다.</p><blockquote><p>저장장치는 소모품이다. 5년에서 10년정도 수없이 읽고 쓰기를 반복하면 물리적으로 움직이는 부품이 있는 HDD는 물론이요 전자적으로만 작동하는 SSD도 NAND 소자가 닳아 읽고 쓰는 속도가 느려지고, 결국에는 읽고 쓸 수 없는 부분인 불량섹터가 발생하게 된다. 이런 경우에는 불량섹터에 기록되어 있던 정보가 손상되는 것도 문제지만, 이후에 저장장치에 기록되는 데이터의 무결성을 보장할 수 없기 때문에 보통 장치째로 (기존에 기록되어 있던 데이터와 함께) 폐기 처분하게 된다. 여러개의 디스크를 특정 방법으로 연결해주는 시스템인 RAID는 바로 이렇게 저장장치가 갑자기 고장나는 경우를 대비해서 활용할 수 있는 유용한 기법이다. 방대한 양의 데이터를 읽고 쓰며 1년 365일 내내 가용성이 보장되어야 하는 구글이나 페이스북의 서버들을 상상해보자.<br>출처: 나무위키</p></blockquote><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://namu.wiki/w/NAS(%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98)">https://namu.wiki/w/NAS(%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98)</a></li><li><a href="https://namu.wiki/w/RAID">https://namu.wiki/w/RAID</a></li><li><a href="https://quarker.tistory.com/175">quarker님 - NAS와 Cloud Storage 서비스 비교</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/15/230116nas/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]RestTemplate response 한글깨짐 UTF-8적용하기</title>
      <link>https://sowon-dev.github.io/2023/01/12/230113spring-resttemplateutf8/</link>
      <guid>https://sowon-dev.github.io/2023/01/12/230113spring-resttemplateutf8/</guid>
      <pubDate>Thu, 12 Jan 2023 15:46:57 GMT</pubDate>
      
      <description>&lt;p&gt;최근에 Gson 한글 깨지는 현상을 해결한 블로그 글 &lt;a href=&quot;https://sowon-dev.github.io/2023/01/05/230106gson-korean-encoding/&quot;&gt;Gson 한글이 ?로 깨져보일때&lt;/a&gt;을 포스팅했었다.&lt;br&gt;성공메시지는 한글이라 몰랐는데 에러메시지가 엉망진창으로 인코딩되서 출력되었다.&lt;br&gt;나는 한글을 정말 사랑하는데… 한글 인코딩이 나를 힘들게 한다. 한글아 그만 깨져😠&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>최근에 Gson 한글 깨지는 현상을 해결한 블로그 글 <a href="https://sowon-dev.github.io/2023/01/05/230106gson-korean-encoding/">Gson 한글이 ?로 깨져보일때</a>을 포스팅했었다.<br>성공메시지는 한글이라 몰랐는데 에러메시지가 엉망진창으로 인코딩되서 출력되었다.<br>나는 한글을 정말 사랑하는데… 한글 인코딩이 나를 힘들게 한다. 한글아 그만 깨져😠</p><a id="more"></a><h1 id="문제-현상"><a href="#문제-현상" class="headerlink" title="문제 현상"></a>문제 현상</h1><p>이번에는 어디서 한글이 깨졌는지부터 찾아야했다. log를 뒤진 결과 <code>RestTemplateLoggingInterceptor</code>의 로그까지는 한글이 깨지지않고 출력하나 그 뒤 RestTemplate response를 받는 부분에서 한글이 깨지는 것을 확인했다.<br>RestTemplate 선언하는 방법은 블로그 글 <a href="https://sowon-dev.github.io/2022/12/09/221210spring-resttemplate/">RestTemplate과 HttpEntity가 뭐길래(제네릭과 ParameterizedTypeReference)</a>를 참조하면 된다.</p><p><br><br><br></p><h1 id="수정한-코드"><a href="#수정한-코드" class="headerlink" title="수정한 코드"></a>수정한 코드</h1><p>StringHttpMessageConverter의 default Charset이 ISO-8859-1이라고 한다. 이를 UTF-8로 변경하면 한글이 깨짐없이 잘 출력된다! </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> BufferingClientHttpRequestFactory(<span class="keyword">new</span> HttpComponentsClientHttpRequestFactory()));</span><br><span class="line">restTemplate.getMessageConverters().add(<span class="number">0</span>, <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8)); <span class="comment">// 추가한 부분</span></span><br><span class="line">restTemplate.exchange(apiUrl, HttpMethod.POST, entity, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>StringHttpMessageConverter가 어떤 역할을 하는 지 좀 더 깊게 궁금했는데 잘 정리된 글이 이미 있었다. 자세한 내용은 <a href="https://cornswrold.tistory.com/402">깡냉쓰님의 RestTemplate 한글 깨짐관련(StringHttpMessageConverter)</a>을 참고하면 된다.</p><p>해결!😎</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/01/12/230113spring-resttemplateutf8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Java]익숙한 for each말고 Stream도 써봐야지</title>
      <link>https://sowon-dev.github.io/2023/01/10/230111codereview/</link>
      <guid>https://sowon-dev.github.io/2023/01/10/230111codereview/</guid>
      <pubDate>Tue, 10 Jan 2023 15:56:45 GMT</pubDate>
      
      <description>&lt;p&gt;코드리뷰를 통해 익숙한 for each대신 Stream을 써보게되었다. 너무 재밌는 배움이라 기록하기로 마음먹었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>코드리뷰를 통해 익숙한 for each대신 Stream을 써보게되었다. 너무 재밌는 배움이라 기록하기로 마음먹었다.</p><a id="more"></a><p>정책상의 이유로 동일한 데이터를 서로 다른 User DB와 Wallet DB에 각각 저장하고 있다. 이 두 DB의 값들이 싱크가 맞는지 확인하는 메서드가 필요했다.</p><p><br><br><br></p><h1 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h1><ul><li><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Wallet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> walletId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> balance;</span><br><span class="line">  <span class="keyword">private</span> Boolean isAvailalbe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h1 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h1><p>DiffVO를 담을 객체를 구현하고 User 디비를 호출해서 userDBValue에 셋팅하고 Wallet를 호출해서 walletDBValue에 셋팅한 뒤 if조건문으로 두 값을 비교해서 같으면 isTheSame = true로 바꿔주도록 구현했다.<br>주의점은 User 디비 호출메서드 리턴데이터타입(User)과 Wallet 디비 호출메서드 리턴데이터타입(List)이 다르게 고정되어 있다는 점이다. </p><ul><li><p>DiffVO.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffVO</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> userDBValue;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> walletDBValue;</span><br><span class="line">  <span class="keyword">private</span> Boolean isTheSame = <span class="keyword">false</span>; <span class="comment">// 디폴트 false로</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> testService&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> DiffVO <span class="title">checkTheSameValue</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    DiffVO diffInfo = <span class="keyword">new</span> DiffVO();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. A디비 값 가져오기</span></span><br><span class="line">User userInfo = dao.selectUserInfo(id);</span><br><span class="line">diffInfo.setUserDBValue(userInfo.getBalance());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. B디비 값 가져오기</span></span><br><span class="line">List&lt;Wallet&gt; walletInfo = balanceAllWallet(); <span class="comment">// 기 구현된 서비스 balanceAllWallet()이용 필수</span></span><br><span class="line"><span class="keyword">for</span>(Wallet w : walletInfo)&#123;</span><br><span class="line">  <span class="keyword">if</span>(w.getUserId() == id)&#123;</span><br><span class="line">      diffInfo.setWalletDBValue(w.getBalance());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 비교하기</span></span><br><span class="line"><span class="keyword">if</span>(diffInfo.getUserDBValue() == diffInfo.getWalletDBValue())&#123;</span><br><span class="line">  diffInfo.setIsTheSame(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> diffInfo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>3단계로 비교했다. 팀장님이 내 코드를 보시곤 Stream을 사용하는 건 어떻겠냐고 말씀해주셨다.</p><p><br><br><br></p><h1 id="팀장님-코드"><a href="#팀장님-코드" class="headerlink" title="팀장님 코드"></a>팀장님 코드</h1><p> 내 코드는 for each문이고 팀장님은 stream을 사용하셨다.<br> stream에 대한 자세한 설명은 <a href="https://sowon-dev.github.io/2020/08/26/200827javai2/">블로그 글 - 스트림 API 개념</a>에 엄청 친절하게 적어놓았다.<br> stream을 써보고싶었는데 익숙한 for 문만 쓰다 이렇게 코드리뷰하다가 쓰게되니 무척 재밌었다. 너무 재밌어!</p><ul><li>service<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (중략)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. B디비 값 가져오기 -&gt; 코드리뷰</span></span><br><span class="line">List&lt;Wallet&gt; walletInfo = balanceAllWallet(); <span class="comment">// 기 구현된 서비스 balanceAllWallet()이용 필수</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Wallet&gt; walletStream = walletInfo.stream().filter(d -&gt; id.equals(d.getUserId()));</span><br><span class="line">Wallet wallet = walletInfo.findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">diffInfo.setWalletDBValue(wallet.getBalance());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 비교하기</span></span><br><span class="line"><span class="keyword">if</span>(diffInfo.getUserDBValue() == diffInfo.getWalletDBValue())&#123;</span><br><span class="line">diffInfo.setIsTheSame(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> diffInfo;</span><br></pre></td></tr></table></figure></li></ul><p>Stream을 쓰니 가독성도 좋아졌다.<br>여담이지만 팀장님은 정말 천재같다. </p><p><br><br><br></p><h1 id="스트림과-for반복문-어느-것이-더-좋을까"><a href="#스트림과-for반복문-어느-것이-더-좋을까" class="headerlink" title="스트림과 for반복문 어느 것이 더 좋을까?"></a>스트림과 for반복문 어느 것이 더 좋을까?</h1><p>이렇게 스트림을 쓰고나니 for문과 비교해서 뭐가 더 좋은지가 궁금했다. 여러 구글링 끝에 흥미로운 미디엄 글 <a href="https://jypthemiracle.medium.com/java-stream-api%EB%8A%94-%EC%99%9C-for-loop%EB%B3%B4%EB%8B%A4-%EB%8A%90%EB%A6%B4%EA%B9%8C-50dec4b9974b">Sigrid Jin님의 Java Stream API는 왜 for-loop보다 느릴까?</a>를 찾았다.</p><blockquote><p>오늘의 결론이다. 스트림 사용이 for-loop보다 의미가 있으려면 Collection이 되는 스트림 소스의 크기가 충분히 크거나, 컴퓨팅 연산이 CPU-intensive할 정도로 비용이 매우 비싸야 한다. 병렬 스트림을 사용하려면, 스트림 소스인 Collection은 split하기 쉬운 자료 구조이어야 하며, 웬만해서는 연산이 stateful하지 않아야 한다. 성능차이는 개발자의 로컬환경에 따라 다를 수 있다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/10/230111codereview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring] 컨트롤러에서 json을 리턴하고 싶을때</title>
      <link>https://sowon-dev.github.io/2023/01/08/230109spring-returnjsonview/</link>
      <guid>https://sowon-dev.github.io/2023/01/08/230109spring-returnjsonview/</guid>
      <pubDate>Sun, 08 Jan 2023 21:44:25 GMT</pubDate>
      
      <description>&lt;p&gt;컨트롤러에서 json형식으로 반환해주는 방법은 크게 두가지이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>컨트롤러에서 json형식으로 반환해주는 방법은 크게 두가지이다.</p><a id="more"></a><ol><li>String으로 반환: Controller return type을 String으로 리턴한 뒤 클라이언트에서 파싱하기.</li><li>MappingJackson2JsonView 사용: ModelAndView를 json 형식으로 반환해 준다.</li></ol><p>스프링프레임워크에서는 주로 MappingJackson2JsonView을 bean으로 등록해서 이용한다.</p><p><br><br><br></p><h1 id="MappingJackson2JsonView"><a href="#MappingJackson2JsonView" class="headerlink" title="MappingJackson2JsonView"></a>MappingJackson2JsonView</h1><p><code>servlet-context.xml</code>에서 아래 코드를 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonView"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJacksonJsonView"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span> <span class="attr">value</span>=<span class="string">"application/json;charset=UTF-8"</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- BeanNameViewResolver 우선순위 지정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanNameResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.BeanNameViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>BeanNameViewResolver우선순위 지정: beanNameResolver는 우선순위를 0으로 해서 ViewPage를 찾을 때 우선 탐색한다. 만약 BeanNameViewResolver에서 없으면 viewResolver에서 탐색한다.<br>출처: <a href="https://icefree.tistory.com/entry/Spring-BeanNameViewResolver">Classic!님의 블로그 글 BeanNameViewResolver</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/01/08/230109spring-returnjsonview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Gson]한글이 ?로 깨져보일때</title>
      <link>https://sowon-dev.github.io/2023/01/05/230106gson-korean-encoding/</link>
      <guid>https://sowon-dev.github.io/2023/01/05/230106gson-korean-encoding/</guid>
      <pubDate>Thu, 05 Jan 2023 21:07:31 GMT</pubDate>
      
      <description>&lt;p&gt;구글에서 만든 &lt;a href=&quot;https://github.com/google/gson&quot;&gt;Gson&lt;/a&gt;을 사용해서 객체를 json으로 혹은 그 반대로 변환하는데 사용하고 있다. 이때 한글이 ?로 깨지는 현상이 나타났다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>구글에서 만든 <a href="https://github.com/google/gson">Gson</a>을 사용해서 객체를 json으로 혹은 그 반대로 변환하는데 사용하고 있다. 이때 한글이 ?로 깨지는 현상이 나타났다.</p><a id="more"></a><h1 id="한글깨질때-produces-quot-text-plain-charset-UTF-8-quot-추가하기"><a href="#한글깨질때-produces-quot-text-plain-charset-UTF-8-quot-추가하기" class="headerlink" title="한글깨질때 produces=&quot;text/plain;charset=UTF-8&quot; 추가하기"></a>한글깨질때 <code>produces=&quot;text/plain;charset=UTF-8&quot;</code> 추가하기</h1><p>컨트롤러 RequestMapping 에 추가하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>, method=RequestMethod.GET, produces=<span class="string">"text/plain;charset=UTF-8"</span>)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="그래도-안될때"><a href="#그래도-안될때" class="headerlink" title="그래도 안될때"></a>그래도 안될때</h1><p>produces를 설정하고 나니까 http통신이 안된다. 그래서 <code>produces = &quot;application/json;charset=utf-8&quot;</code>로 바꿔주니 통신이 되었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>, method=RequestMethod.GET, produces=<span class="string">"application/json;charset=UTF-8"</span>)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="그래도-또-안될때"><a href="#그래도-또-안될때" class="headerlink" title="그래도 또 안될때"></a>그래도 또 안될때</h1><p>하지만 여전히 한글이 깨졌다. 그래서 다시 구글링해서 찾은 내용인 <code>produces = &quot;MediaType.APPLICATION_JSON_UTF8_VALUE&quot;</code>로 바꿔적용했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>, method=RequestMethod.GET, produces=<span class="string">"MediaType.APPLICATION_JSON_UTF8_VALUE"</span>)</span><br></pre></td></tr></table></figure><p>해결!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Gson/">Gson</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/05/230106gson-korean-encoding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring] 새로운 컨트롤러(Controller)를 생성했는데 호출이 안될때</title>
      <link>https://sowon-dev.github.io/2023/01/04/230105spring-servletcontext/</link>
      <guid>https://sowon-dev.github.io/2023/01/04/230105spring-servletcontext/</guid>
      <pubDate>Wed, 04 Jan 2023 20:02:22 GMT</pubDate>
      
      <description>&lt;p&gt;레거시 프로젝트에 신규 패키지를 만들고 그 패키지안에 신규 컨트롤러를 생성했다. 컨트롤러에 서비스 메서드를 만들고 포스트맨으로 호출했는데 웬걸?! 서버가 전혀 반응을 안한다. 왜일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>레거시 프로젝트에 신규 패키지를 만들고 그 패키지안에 신규 컨트롤러를 생성했다. 컨트롤러에 서비스 메서드를 만들고 포스트맨으로 호출했는데 웬걸?! 서버가 전혀 반응을 안한다. 왜일까?</p><a id="more"></a><p>기본적으로 해봐야하는 것은 build 탭 &gt; clean &gt; 서버 재시작이다. 빌드가 제대로 안되어있으면 컨트롤러가 새로 생성된지도 모르기때문이다. 하지만 나는 여전히 반응하지않았다. 수석연구원님께 물어 알게된 것은 컴포넌트 스캔문제였다.</p><h1 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h1><p><code>servlet-context.xml</code>파일에서 아래처럼 컴포넌트 스캔 코드가 있는데 나는 테스트용 새로운 패키지인 <code>com.test.preview</code>를 만들고 그곳에다 신규 컨트롤러를 생성했다. 따라서 컴포넌트가 스캔이 되지않았던 것이다.</p><ul><li>기존코드 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.test.controller"</span> /&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>콤마를 이용해서 베이스패키지를 추가해주면 해결!<br>감사합니다 김수석연구원님!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.test.controller,com.test.preview"</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/01/04/230105spring-servletcontext/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Java] 포스트맨(Postman)사용시 동시 요청이 되는 이유?</title>
      <link>https://sowon-dev.github.io/2023/01/04/230105postman-multithread/</link>
      <guid>https://sowon-dev.github.io/2023/01/04/230105postman-multithread/</guid>
      <pubDate>Wed, 04 Jan 2023 19:20:56 GMT</pubDate>
      
      <description>&lt;p&gt;서버 API 작업 중 A요청 후 디버깅을 하는 와중에 B요청을 했더니 B요청에 대한 응답을 바로 받을 수 있었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>서버 API 작업 중 A요청 후 디버깅을 하는 와중에 B요청을 했더니 B요청에 대한 응답을 바로 받을 수 있었다.</p><a id="more"></a><p>A요청에 대한 응답을 받기 전인데 B응답과 요청을 어떻게 처리될 수 있었을까?</p><h1 id="멀티쓰레드가-답이다"><a href="#멀티쓰레드가-답이다" class="headerlink" title="멀티쓰레드가 답이다."></a>멀티쓰레드가 답이다.</h1><p>내가 만든 서버API는 스프링프레임워크로 스프링프레이워크는 멀티스레드를 지원한다. 그래서 특별한 설정을 하지않아도 한 요청에 대한 응답을 받기도 전에 다른 요청을 보내고 응답도 받을 수 있었던 것!<br>간단하게 멀티쓰레드의 장점은 작업 분리로 효율성 증대이고 단점은 제어의 어려움이 있다.</p><p>블로그 글 <a href="https://sowon-dev.github.io/2020/08/19/200820javai/">멀티스레드프로그래밍1 : 개념, 용어정리, 스래드 상태와 제어</a>을 보면 더 자세히 알수있다.</p><p><br><br><br></p><h1 id="멀티스레드말고-싱글스레드를-쓰기도-하는가"><a href="#멀티스레드말고-싱글스레드를-쓰기도-하는가" class="headerlink" title="멀티스레드말고 싱글스레드를 쓰기도 하는가?"></a>멀티스레드말고 싱글스레드를 쓰기도 하는가?</h1><p>싱글스레드하면 떠오르는 건 node.js이다. 사실 node.js는 싱글스레드도 지원하면서 멀티스레드도 지원한다. 이에 대해서는 블로그글 <a href="https://haeunyah.tistory.com/81">vodkamitlime님의 NodeJS 는 Single Thread 일까? Multi Thread 일까?</a>을 보면 자세히 알수있다.</p><p>언뜻보기에는 멀티스레드가 좋은데 왜 싱글스레드를 지원할까?<br>자바스크립트가 싱글스레드를 지원하기 때문이다. </p><p>싱글스레드를 사용하는 이유는 싱글스레드만의 장점이 있기때문이다.</p><p><br><br><br></p><h1 id="싱글스레드-장단점"><a href="#싱글스레드-장단점" class="headerlink" title="싱글스레드 장단점"></a>싱글스레드 장단점</h1><ul><li>장점<ul><li>자원 접근에 대한 동기화를 신경쓰지 않아도 된다</li><li>작업전환(context switch) 작업을 요구하지 않는다.</li></ul></li><li>단점<ul><li>여러개의 CPU를 활용하지 못한다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/01/04/230105postman-multithread/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[안드로이드] 키스토어란?</title>
      <link>https://sowon-dev.github.io/2023/01/03/230103Android-keystore/</link>
      <guid>https://sowon-dev.github.io/2023/01/03/230103Android-keystore/</guid>
      <pubDate>Tue, 03 Jan 2023 04:51:33 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 회의에서 키스토어에 대해서 이야기가 나왔다. 앱개발은 전혀 모르므로 이참에 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 회의에서 키스토어에 대해서 이야기가 나왔다. 앱개발은 전혀 모르므로 이참에 공부해봤다.</p><a id="more"></a><h1 id="Keystore란"><a href="#Keystore란" class="headerlink" title="Keystore란?"></a>Keystore란?</h1><p>안드로이드 앱을 구글 플레이스토어에 올리려면 배포할때 개발자가 서명을 해야한다. 이 서명을 코드서명인증서 즉, 키스토어(Keystore)라고 한다.<br>키스토어(Keystore)는 앱 개발자에 대한 정보를 서명한 암호화된 파일이다.</p><p><br><br><br></p><h1 id="왜-Keystore를-사용할까"><a href="#왜-Keystore를-사용할까" class="headerlink" title="왜 Keystore를 사용할까?"></a>왜 Keystore를 사용할까?</h1><p>추후에 버그픽스등으로 해당 앱 업데이트시 서명이 동일한 지 확인한다. 만약 이 서명을 잃어버리면 아무리 내가 만든 앱이라고해도 이 앱을 업데이트 할 수 없다.<br>즉, 키스토어를 통해서 다른 개발자가 내 앱을 변조 못하게 막는 역할을 한다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/03/230103Android-keystore/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AP(Access Point)가 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/12/29/221230accesspoint/</link>
      <guid>https://sowon-dev.github.io/2022/12/29/221230accesspoint/</guid>
      <pubDate>Thu, 29 Dec 2022 16:09:24 GMT</pubDate>
      
      <description>&lt;p&gt;회의때 무수히 들었던 AP. 도대체 AP가 뭘까?&lt;br&gt;일단 Access Point의 약어이다. 네트워크와 관련된 느낌 물씬!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>회의때 무수히 들었던 AP. 도대체 AP가 뭘까?<br>일단 Access Point의 약어이다. 네트워크와 관련된 느낌 물씬!</p><a id="more"></a><h1 id="AP란"><a href="#AP란" class="headerlink" title="AP란"></a>AP란</h1><p>AP는 유선랜의 유선신호를 무선으로 변경해주는 것이다. → 회사 내부망이 유선랜인데 다양한 기기에서 사용하려면 무선랜으로 바꿔주면 편리하다.<br>AP는 DHCP 서버에서 IP를 할당해줘야한다.</p><blockquote><p>무선랜을 구성하는 장치중 하나로, 유선랜과 무선랜을 연결시켜주는 장치이다.<br>AP는 Access Point의 약어이나, Wireless Access Point라고 하여 WAP 라고도 한다.<br>AP는 대체로 독립형 장치로, 이더넷 허브(Ehternet Hub)나 서버(Server)에 꽂아 사용할 수 있다.<br>AP는 휴대폰(Cellular Phone)처럼 사용자의 위치에 따라 하나의 AP에서 다른 AP로 핸드오프(Hand-off : 넘겨주기) 되므로, 사용자가 이동하면서 이동형 무선장치를 사용할 수 있다.<br>출처: <a href="https://m.blog.naver.com/twers/50118628879">Just Blue - AP(Access Point)</a></p></blockquote><p><br><br><br></p><h1 id="AP와-일반-무선공유기-차이점"><a href="#AP와-일반-무선공유기-차이점" class="headerlink" title="AP와 일반 무선공유기 차이점"></a>AP와 일반 무선공유기 차이점</h1><table><thead><tr><th align="left">일반 무선공유기</th><th align="left">AP</th></tr></thead><tbody><tr><td align="left">한 개의 IP로 여러 명의 네트워크를 사용할 수 있음</td><td align="left">건물의 각 층과 사무실별로 설치할 경우 사무실 내에서 자유롭게 네트워크를 사용할 수 있다는 장점이 있고 안테나의 개수에 따라 사용할 수 있는 범위가 정해지며 넓은 곳일수록 안테나가 많이 달린 제품을 활용하면 좋음</td></tr><tr><td align="left">SSID 3개까지 가능</td><td align="left">SSID 512개까지도 가능</td></tr><tr><td align="left">네트워크선 따로, 전원선 따로</td><td align="left">특정 모델에 따라 네트워크선 하나로 전원까지 공급가능</td></tr><tr><td align="left"></td><td align="left">일반공유기보다 많은 라우팅 기능을 지원</td></tr></tbody></table><ul><li>SSID란?<br>Service Set IDentifier의 약자로 무선네트워크 이름이다.</li></ul><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=futuremain&logNo=221618229181">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=futuremain&amp;logNo=221618229181</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Network/">Network</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/12/29/221230accesspoint/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]@Transactional 속성 총정리</title>
      <link>https://sowon-dev.github.io/2022/12/22/221223spring-transactional-annotation/</link>
      <guid>https://sowon-dev.github.io/2022/12/22/221223spring-transactional-annotation/</guid>
      <pubDate>Thu, 22 Dec 2022 20:35:29 GMT</pubDate>
      
      <description>&lt;p&gt;레거시 코드를 분석하면서 다양한 @Transactional 속성을 만났다.&lt;br&gt;평소에 디폴트로만 썼었기에 이참에 정리해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>레거시 코드를 분석하면서 다양한 @Transactional 속성을 만났다.<br>평소에 디폴트로만 썼었기에 이참에 정리해보았다.</p><a id="more"></a><h1 id="Transactional-이란"><a href="#Transactional-이란" class="headerlink" title="@Transactional 이란?"></a>@Transactional 이란?</h1><p>먼저 Transaction을 살펴보자. 트랜젝션은 데이터베이스의 상태를 변화시키기 위한 작업 수행의 논리적 단위를 의미한다.<br>테스트를 위해 서비스에서 SQL쿼리를 호출한 후 롤백을 해야하는 경우라든지 전체 실행 중 특정 수행이 오류가 나면 이전에 완료했던 SQL쿼리들을 다 롤백해야할 경우에 @Transactional을 사용한다.</p><p>자세한 내용은 포스팅 <a href="https://sowon-dev.github.io/2021/08/04/210805Spring-Transactional/">@Transactional 쓰는 이유</a>를 참고하면 된다.</p><p><br><br><br></p><h1 id="Transactional-에-우선순위가-있다"><a href="#Transactional-에-우선순위가-있다" class="headerlink" title="@Transactional 에 우선순위가 있다?"></a>@Transactional 에 우선순위가 있다?</h1><p>@Transactional은 우선순위를 가지고 있다.</p><ol><li>클래스 메서드</li><li>클래스</li><li>인터페이스 메서드</li><li>인터페이스</li></ol><p>클래스 메서드에 선언된 트랜잭션의 우선순위가 가장 높다.<br>가장 구체적으로 구현된 것부터 트랜잭션순위가 높다고 생각하면 된다.</p><p><br><br><br></p><h1 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h1><table><thead><tr><th align="center">속성명</th><th align="center">특징</th><th align="center">옵션</th></tr></thead><tbody><tr><td align="center">isolation</td><td align="center">일관성없는 데이터 허용 수준을 설정</td><td align="center">DEFAULT, READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE</td></tr><tr><td align="center">noRollbackFor, rollbackFor</td><td align="center">특정 예외발생시 rollback하지않음 or rollback함으로 설정</td><td align="center"></td></tr><tr><td align="center">noRollbackForClassName, rollbackForClassName</td><td align="center">특정 클래스이름인 경우 rollback하지않음 or rollback함으로 설정</td><td align="center">(e.g)rollbackForClassName=”Exception”</td></tr><tr><td align="center">propagation(전파속성)</td><td align="center">트랜잭션 동작 도중 다른 트랜잭션을 호출할 때, 어떻게 할 것인지 설정</td><td align="center">REQUIRED(Defualt), REQUIRES_NEW, SUPPORT, NOT_SUPPORT, MANDATORY, NEVER, NESTED</td></tr><tr><td align="center">readOnly</td><td align="center">트랜잭션을 읽기 전용으로 설정. true면 insert, update, delete 실행 시 예외 발생</td><td align="center">true, false(Defualt)</td></tr><tr><td align="center">timeout, timeoutString</td><td align="center">지정한 시간내에 메서드수행이 완료되지 않으면 rollback함으로설정(단위 : 초,seconds)</td><td align="center"></td></tr><tr><td align="center">transactionManager</td><td align="center">특정 Transaction의 qualifier value를 설정</td><td align="center"></td></tr><tr><td align="center">value</td><td align="center">transactionManager의 alias(별칭)을 설정한다.</td><td align="center"></td></tr></tbody></table><ul><li><a href="https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation">https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation</a></li><li><a href="https://n1tjrgns.tistory.com/266">https://n1tjrgns.tistory.com/266</a></li></ul><p><br><br><br></p><h1 id="isolation-레벨"><a href="#isolation-레벨" class="headerlink" title="isolation 레벨"></a>isolation 레벨</h1><ol><li>DEFAULT : 기본 격리 수준</li><li>READ_UNCOMMITED (level 0): 트랜잭션의 동시 액세스 허용, 커밋되지 않는 데이터에 대한 읽기를 허용</li><li>READ_COMMITED (level 1) : 커밋된 데이터에 대해 읽기 허용, Dirty read 방지</li><li>REPEATEABLE_READ (level 2) : 동시 액세스를 허용하지 않음, 동일 필드에 대해 다중 접근 시 모두 동일한 결과를 보장, Dirty read, Nonrepeatable read 방지</li><li>SERIALIZABLE (level 3) : 가장 높은 격리, 성능 저하의 우려가 있음, 모든 부작용을 방지</li></ol><p><br><br><br></p><h2 id="isolation-문제점"><a href="#isolation-문제점" class="headerlink" title="isolation 문제점"></a>isolation 문제점</h2><p><a href="https://feco.tistory.com/45">feco님 블로그 글 - 트랜잭션, 트랜잭션 격리수준(Isolation Level)</a>에 예시까지 잘 설명되어있다! 꼭 읽어보길!<br>아래는 feco님 블로그글의 격리성 문제점부분만 발췌했다.</p><ol><li>Dirty Read: 한 트랜잭션(T1)이 데이타에 접근하여 값을 ‘A’에서 ‘B’로 변경했고 아직 커밋을 하지 않았을때, 다른 트랜잭션(T2)이 해당 데이타를 Read 하면? T2가 읽은 데이타는 B가 될 것이다. 하지만 T1이 최종 커밋을 하지 않고 종료된다면, T2가 가진 데이타는 꼬이게 된다.</li><li>Non-Repeatable Read: 한 트랜잭션(T1)이 데이타를 Read 하고 있다. 이때 다른 트랜잭션(T2)가 데이타에 접근하여 값을 변경 또는, 데이타를 삭제하고 커밋을 때려버리면? 그 후 T1이 다시 해당 데이타를 Read하고자 하면 변경된 데이타 혹은 사라진 데이타를 찾게 된다.</li><li>Phantom Read: 트랜잭션(T1) 중에 특정 조건으로 데이타를 검색하여 결과를 얻었다. 이때 다른 트랜잭션(T2)가 접근해 해당 조건의 데이타 일부를 삭제 또는 추가 했을때, 아직 끝나지 않은 T1이 다시 한번 해당 조건으로 데이타를 조회 하면 T2에서 추가/삭제된 데이타가 함께 조회/누락 된다. 그리고 T2가 롤백을 하면? 데이타가 꼬인다</li></ol><p><br><br><br></p><h1 id="propagation-전파속성-레벨"><a href="#propagation-전파속성-레벨" class="headerlink" title="propagation(전파속성) 레벨"></a>propagation(전파속성) 레벨</h1><p>트랜잭션 동작 도중 다른 트랜잭션을 호출할 때, 어떻게 할 것인지 전파속성을 선택할 수 있다. 총 7가지 속성이 있다.</p><ol><li>REQUIRED(Defualt): 이미 진행중인 트랜잭션이 있다면 해당 트랜잭션 속성을 따르고, 진행중이 아니라면 새로운 트랜잭션을 생성한다.</li><li>REQUIRES_NEW: 항상 새로운 트랜잭션을 생성한다. 이미 진행중인 트랜잭션이 있다면 잠깐 보류하고 해당 트랜잭션 작업을 먼저 진행한다.</li><li>SUPPORT: 이미 진행 중인 트랜잭션이 있다면 해당 트랜잭션 속성을 따르고, 없다면 트랜잭션을 설정하지 않는다.</li><li>NOT_SUPPORT: 이미 진행중인 트랜잭션이 있다면 보류하고, 트랜잭션 없이 작업을 수행한다.</li><li>MANDATORY: 이미 진행중인 트랜잭션이 있어야만, 작업을 수행한다. 없다면 Exception을 발생시킨다.</li><li>NEVER: 트랜잭션이 진행중이지 않을 때 작업을 수행한다. 트랜잭션이 있다면 Exception을 발생시킨다.</li><li>NESTED: 진행중인 트랜잭션이 있다면 중첩된 트랜잭션이 실행되며, 존재하지 않으면 REQUIRED와 동일하게 실행된다.</li></ol><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html</a></li><li><a href="https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation">https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation</a></li><li><a href="https://velog.io/@kdhyo/JavaTransactional-Annotation-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-26her30h">https://velog.io/@kdhyo/JavaTransactional-Annotation-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-26her30h</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/12/22/221223spring-transactional-annotation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Server]Mock Server(목서버)는 어때요?</title>
      <link>https://sowon-dev.github.io/2022/12/21/221222server-mockserver/</link>
      <guid>https://sowon-dev.github.io/2022/12/21/221222server-mockserver/</guid>
      <pubDate>Wed, 21 Dec 2022 19:52:19 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 회의에서 신규서비스 테스트를 위해 Mock서버, jUnit단위테스트 등의 이야기가 나왔다.&lt;br&gt;외부 API를 테스트를 하려면 어떻게 해야할까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 회의에서 신규서비스 테스트를 위해 Mock서버, jUnit단위테스트 등의 이야기가 나왔다.<br>외부 API를 테스트를 하려면 어떻게 해야할까?</p><a id="more"></a><p>jUnit에 관해서는 이전에 작성한 <a href="https://sowon-dev.github.io/2021/08/12/210813Spring-junit/#Mock">Junit</a> 포스팅을 참고하면 된다.<br>그럼 목서버는 무엇일까?</p><h1 id="먼저-MOCK-목-이-뭘까"><a href="#먼저-MOCK-목-이-뭘까" class="headerlink" title="먼저 MOCK(목)이 뭘까?"></a>먼저 MOCK(목)이 뭘까?</h1><blockquote><p>실제 사용되어야하는 객체의 대체객체로 실제 객체를 만들어서 하기엔 시간이 부족하고 비용이 높은 경우, 구현이 까다로울 경우에 가짜 객체를 만들어서 사용하는데 그중 하나가 Mock객체이다.<br>Mock객체: 행위를 검증하기 위해 사용되는 객체<br>직접 만들거나 스프링프레임워크를 통해서 간단하게 만들수 있음<br>출처: <a href="https://sowon-dev.github.io/2021/08/12/210813Spring-junit/#Mock">Junit - Mock 객체</a></p></blockquote><p><br><br><br></p><h1 id="Mock-서버란"><a href="#Mock-서버란" class="headerlink" title="Mock 서버란?"></a>Mock 서버란?</h1><blockquote><p>For any system you integrate with via HTTP or HTTPS MockServer can be used as:<br>a mock configured to return specific responses for different requests<br>a proxy recording and optionally modifying requests and responses<br>both a proxy for some requests and a mock for other requests at the same time<br>When MockServer receives a request it matches the request against active expectations that have been configured.<br>Then, if no matches are found, it proxies the request if appropriate; otherwise a 404 is returned.<br>For each request received the following steps happen:<br>find matching expectation and perform action<br>if no matching expectation proxy request<br>if not a proxy request return 404<br>An expectation defines the action that is taken, for example, a response could be returned.<br>출처: <a href="https://www.mock-server.com/">https://www.mock-server.com/</a></p></blockquote><p>간단하게 말하자면, 실제 서버처럼 HTTP나 HTTPS 요청과 응답을 주고 받을 수 있는 가짜 서버이다. </p><ul><li>다양한 요청에 특정한 반응을 반환하도록 구성할 수 있음</li><li>프록시를 기록하고 선택적으로 요청과 응답을 수정할 수 있음</li><li>목서버가 예상되는 요청을 받았을땐 이미 작성된 특정 반응을 반환하고 예상되지 않는 요청인 경우 404를 리턴한다.</li></ul><p><br><br><br></p><h1 id="왜-목서버를-사용할까"><a href="#왜-목서버를-사용할까" class="headerlink" title="왜 목서버를 사용할까?"></a>왜 목서버를 사용할까?</h1><p>크게 3가지 이유가 있다.</p><ul><li>testing via HTTP or HTTPS, such as a REST or RPC service.<ul><li>만약 스펙만 존재하고 실제 동작하지 않는 API를 염두하고 해당 API의 데이터를 받는 부분을 개발해야 한다면 어떻게 해야할까? 이럴 때 필요한 것이 가상의 서버, 바로 Mock Server이다.</li></ul></li><li>de-coupling development</li><li>isolate single service</li></ul><p><br><br><br></p><h1 id="목서버를-만드는-방법"><a href="#목서버를-만드는-방법" class="headerlink" title="목서버를 만드는 방법"></a>목서버를 만드는 방법</h1><p>구글링했을때 가장 많이 나오는 방법은 PostMan을 활용하는 것이다. 하지만 무료요금제인 경우 한달에 1000건 요청제한이 있다.<br><a href="https://way-be-developer.tistory.com/239">Postman 으로 Mock Server 구축하기</a>글을 참고!</p><p><br><br><br></p><h1 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h1><ul><li><a href="https://opennote46.tistory.com/208">https://opennote46.tistory.com/208</a></li><li><a href="https://www.mock-server.com/">https://www.mock-server.com/</a></li><li><a href="https://sowon-dev.github.io/2021/08/12/210813Spring-junit/#Mock">Junit - Mock 객체</a></li><li><a href="https://devvkkid.tistory.com/219">https://devvkkid.tistory.com/219</a></li><li><a href="https://velog.io/@kyle/%EC%99%B8%EB%B6%80-API%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80">우아한마켓 - 외부 API를 어떻게 테스트 할 것인가?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/12/21/221222server-mockserver/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]ResponseEntity 코드리뷰</title>
      <link>https://sowon-dev.github.io/2022/12/20/221221java-responseentity-refactoring/</link>
      <guid>https://sowon-dev.github.io/2022/12/20/221221java-responseentity-refactoring/</guid>
      <pubDate>Tue, 20 Dec 2022 15:31:41 GMT</pubDate>
      
      <description>&lt;p&gt;RestTemplate을 통해서 외부 API와 통신하는 메서드를 구현하고 있었다.&lt;br&gt;팀장님이 내 코드를 보시더니 코드리뷰를 해주셨다. (바쁘신 와중에도 코드봐주셔서 감사합니다🙂)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>RestTemplate을 통해서 외부 API와 통신하는 메서드를 구현하고 있었다.<br>팀장님이 내 코드를 보시더니 코드리뷰를 해주셨다. (바쁘신 와중에도 코드봐주셔서 감사합니다🙂)</p><a id="more"></a><h1 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ResponseVO&lt;T&gt; 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"><span class="keyword">private</span> T payload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// testVO 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래처럼 exchange()를 실행하는 코드였다. RestTemplate과 HttpEntity가 궁금한 사람은 <a href="https://sowon-dev.github.io/2022/12/09/221210spring-resttemplate/">RestTemplate과 HttpEntity가 뭐길래</a>글을 참고하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;ResponseVO&lt;TestVO&gt;&gt; response = rt.exchange(</span><br><span class="line"><span class="string">"http://localhost:3000/"</span>,</span><br><span class="line">HttpMethod.POST,</span><br><span class="line">testJson,</span><br><span class="line"><span class="keyword">new</span> ParameterizedtypeReference&lt;ResponseVO&lt;TestVO&gt;&gt;()&#123;&#125; <span class="comment">//반환되는 데이터타입</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>여기서 좀 더 나은 코드가 있다고 말씀해주셨다.</p><p><br><br><br></p><h1 id="코드리뷰"><a href="#코드리뷰" class="headerlink" title="코드리뷰"></a>코드리뷰</h1><p>OOP(객체지향프로그램)를 설명해주시면서 java lang reflect으로 데이터타입을 유연하게 가져갈 수 있다고 말씀해주셨다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; responseEntity = rt.exchange(</span><br><span class="line"><span class="string">"http://localhost:3000/"</span>, </span><br><span class="line">HttpMethod.POST, </span><br><span class="line">httpEntity, </span><br><span class="line">string<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line">String bodyofResponseEntity = responseEntity.getBody();</span><br><span class="line">Gson gson= <span class="keyword">new</span> Gson();</span><br><span class="line">Type gType = TypeToken.getparameterized(ResponseVO.class, TestVO.class).getType():</span><br><span class="line">ResponseVO&lt;TestVO&gt; responsevo = gson.fromJson(responseentity.getBody(), gType);</span><br></pre></td></tr></table></figure><p>기존 코드와 가장 큰 차이점은 ResponseEntity반환데이터 타입을 String으로 설정했다는 점이다.<br>그 이유는 무엇일까?<br>만약 특정한 데이터타입을 지정해놓으면 exchange()한 뒤 반환데이터타입 형식이 안 맞는 경우 exchage()를 성공적으로 수행했음에도 타입변환에러가 발생한다.<br>이를 예방하기 위해 String으로 반환데이터를 받으면된다!</p><p><br><br><br></p><h2 id="반환데이터타입을-왜-굳이-String을-쓸까"><a href="#반환데이터타입을-왜-굳이-String을-쓸까" class="headerlink" title="반환데이터타입을 왜 굳이 String을 쓸까?"></a>반환데이터타입을 왜 굳이 String을 쓸까?</h2><p>반환타입을 String으로 쓰면 좋은 점은 크게 3가지가 있다.</p><ol><li>exchage()하는 도중에 에러가 발생한건지, 캐스팅중에 에러가 발생한건지 명확하게 파악가능</li><li>String변수<code>bodyofResponseEntity</code>에 값을 대입함으로서 데이터 유실을 예방가능</li></ol><p><br><br><br></p><h2 id="String데이터를-원하는-데이터로-캐스팅하려면"><a href="#String데이터를-원하는-데이터로-캐스팅하려면" class="headerlink" title="String데이터를 원하는 데이터로 캐스팅하려면?"></a>String데이터를 원하는 데이터로 캐스팅하려면?</h2><p><a href="https://sites.google.com/site/gson/gson-user-guide#TOC-Using-Gson">구글에서 만든 Gson</a>을 이용하면 된다.<br>String데이터를 Gson으로 원하는 <code>ResponseVO&lt;TestVO&gt;</code>로 변환하면 해결!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson= <span class="keyword">new</span> Gson();</span><br><span class="line">Type gType = TypeToken.getparameterized(ResponseVO.class, TestVO.class).getType():</span><br><span class="line">ResponseVO&lt;TestVO&gt; responsevo = gson.fromJson(responseentity.getBody(), gType);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      
      <comments>https://sowon-dev.github.io/2022/12/20/221221java-responseentity-refactoring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[네트워크]payload가 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/12/15/221216payload/</link>
      <guid>https://sowon-dev.github.io/2022/12/15/221216payload/</guid>
      <pubDate>Thu, 15 Dec 2022 19:54:50 GMT</pubDate>
      
      <description>&lt;p&gt;외부API와 통신을 하면서 payload를 많이 만나게 되었다. 어렴풋이 알고 있는 이 단어, 생긴 건 JSON과 비슷한데 왜 PAYLOAD라고 부를까?&lt;br&gt;궁금한 건 해결해야지!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>외부API와 통신을 하면서 payload를 많이 만나게 되었다. 어렴풋이 알고 있는 이 단어, 생긴 건 JSON과 비슷한데 왜 PAYLOAD라고 부를까?<br>궁금한 건 해결해야지!</p><a id="more"></a><h1 id="내가-알고있었던-payload"><a href="#내가-알고있었던-payload" class="headerlink" title="내가 알고있었던 payload"></a>내가 알고있었던 payload</h1><p>성공이나 실패등이 일어났을때 내가 챙겨 보고 싶은 message.</p><p><br><br><br></p><h1 id="정확한-개념"><a href="#정확한-개념" class="headerlink" title="정확한 개념"></a>정확한 개념</h1><p>위키백과에 예시까지 설명이 잘되어있어서 정리해보았다.</p><ul><li>개념: 전송되는 데이터</li><li>페이로드는 크게 2가지 의미<ol><li>전송의 근본적인 목적이 되는 데이터의 일부분으로 그 데이터와 함께 전송되는 헤더와 메타데이터와 같은 데이터는 제외한다.</li><li>컴퓨터 보안에서 페이로드는 멀웨어의 일부를 뜻한다. 웜, 바이러스, 트로이목마 같은 해로운 소프트웨어를 분석할 때 페이로드는 그 소프트웨어가 주는 피해를 뜻한다. 예를 들어 페이로드에는 데이터 훼손, 스팸메일, 개인정보를 알아내기 위해 다수에게 보내는 이메일 등이 있다. 즉 페이로드는 전송 행위의 본래 의도를 뜻한다.</li></ol></li><li>특징<ol><li>페이로드라는 용어는 큰 데이터 덩어리 중에 ‘흥미 있는’ 데이터를 구별하는 데 사용된다.</li><li>프로그래밍에서 주로 메시지 프로토콜(message protocols) 중에 프로토콜 오버헤드(protocol overhead)와 원하는 데이터를 구별할 때 사용된다. </li></ol></li></ul><p> 웹 서비스 응답(web service response)이 아래의 JSON이라 해보자</p><ul><li><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"status"</span>:<span class="string">"OK"</span>,</span><br><span class="line"><span class="attr">"data"</span>: &#123;</span><br><span class="line"><span class="attr">"message"</span>:<span class="string">"Hello, world!"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>여기서 “Hello, world!”가 클라이언트가 관심을 가지는 페이로드이다. 나머지 부분은, 중요하긴 하지만, 프로토콜 오버헤드이다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://ko.wikipedia.org/wiki/%ED%8E%98%EC%9D%B4%EB%A1%9C%EB%93%9C_(%EC%BB%B4%ED%93%A8%ED%8C%85)">https://ko.wikipedia.org/wiki/페이로드</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Network/">Network</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/12/15/221216payload/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Java] TimeUnit의 sleep() 사용하기</title>
      <link>https://sowon-dev.github.io/2022/12/12/221213java-timeunit/</link>
      <guid>https://sowon-dev.github.io/2022/12/12/221213java-timeunit/</guid>
      <pubDate>Mon, 12 Dec 2022 15:39:23 GMT</pubDate>
      
      <description>&lt;p&gt;js에서는 &lt;a href=&quot;https://sowon-dev.github.io/2019/09/21/190922/&quot;&gt;setTimeout()이나 setInterval()&lt;/a&gt;을 자주 사용했는데 자바에서는 어떻게 사용할까?&lt;br&gt;바로 TimeUnit의 static메서드인 sleep()이 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>js에서는 <a href="https://sowon-dev.github.io/2019/09/21/190922/">setTimeout()이나 setInterval()</a>을 자주 사용했는데 자바에서는 어떻게 사용할까?<br>바로 TimeUnit의 static메서드인 sleep()이 있다.</p><a id="more"></a><h1 id="TimeUnit"><a href="#TimeUnit" class="headerlink" title="TimeUnit"></a>TimeUnit</h1><p>TimeUnit는 자바가 제공하는 Enum타입클래스이다.<br>시간에 관한 열거형 클래스로 두날짜의 차이를 구하기, sleep()걸기 등에 유용하게 쓰인다.</p><ul><li>DAYS </li><li>HOURS </li><li>MICROSECONDS </li><li>MILLISECONDS </li><li>MINUTES </li><li>NANOSECONDS </li><li>SECONDS </li></ul><p><br><br><br></p><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h1><p>TimeUnit.class에 sleep()이 선언되어있다.<br>파라미터에 따라 Thread.sleep()을 쉽게 걸어준다.<br>열거형이기때문에 직관적이고 static 메서드라 바로 사용할 수 있다는 것이 장점이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs a &#123;<span class="doctag">@link</span> Thread#sleep(long, int) Thread.sleep&#125; using</span></span><br><span class="line"><span class="comment"> * this time unit.</span></span><br><span class="line"><span class="comment"> * This is a convenience method that converts time arguments into the</span></span><br><span class="line"><span class="comment"> * form required by the &#123;<span class="doctag">@code</span> Thread.sleep&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout the minimum time to sleep. If less than</span></span><br><span class="line"><span class="comment"> * or equal to zero, do not sleep at all.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException if interrupted while sleeping</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> ms = toMillis(timeout);</span><br><span class="line"><span class="keyword">int</span> ns = excessNanos(timeout, ms);</span><br><span class="line">Thread.sleep(ms, ns);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h1><p>다양하게 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5분 지연시키기</span></span><br><span class="line">TimeUnit.MINUTES.Sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10초 지연시키기</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html">https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/12/12/221213java-timeunit/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]RestTemplate과 HttpEntity가 뭐길래(제네릭과 ParameterizedTypeReference)</title>
      <link>https://sowon-dev.github.io/2022/12/09/221210spring-resttemplate/</link>
      <guid>https://sowon-dev.github.io/2022/12/09/221210spring-resttemplate/</guid>
      <pubDate>Fri, 09 Dec 2022 19:32:44 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트를 하다보면 화면이 아닌 서비스단에서 외부 API와 호출해야할 일들이 생긴다.&lt;br&gt;이때 주로 사용되는 것이 RestTemplate이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트를 하다보면 화면이 아닌 서비스단에서 외부 API와 호출해야할 일들이 생긴다.<br>이때 주로 사용되는 것이 RestTemplate이다.</p><a id="more"></a><p>이번 프로젝트에서 백엔드 업무를 도맡았다. 첫 작업으로 맡게 된 건 외부 프로그램과 API로 연동하는 작업이었다.<br>Http통신을 화면에서 수도없이 날렸지만 서비스단에서 하는 건 업무로썬 처음이었다. 결론 너무 재밌다!<br>역시 난 프론트보단 백이 더 재밌어.</p><h1 id="✍-RestTemplate-이란"><a href="#✍-RestTemplate-이란" class="headerlink" title="✍ RestTemplate 이란?"></a>✍ RestTemplate 이란?</h1><p>스프링 3.0에서부터 지원하는 객체로 REST방식으로 API를 호출할 수 있는 내장 클래스이다.<br>스프링어플리케이션에서 HTTP요청할때 사용하며 주로 외부API와 연동할때 RestTemplate와 함께 MultiValueMap, HttpEntity도 사용한다.<br>다만, 스프링프레임워크5부터는 <a href="https://www.baeldung.com/spring-5-webclient">WebClient</a>사용을 권장하고 있기에 조만간 RestTemplate은 deprecated 될지도 모른다.</p><ul><li><p>특징</p><ul><li>RESTful 원칙을 지킴</li><li>멀티쓰레드 방식 사용</li><li><a href="https://sowon-dev.github.io/2019/09/23/190924/#2-%EB%8F%99%EA%B8%B0%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B0%9C%EB%85%90%EC%84%A4%EB%AA%85-Blocking-VS-non-blocking">Blocking(동기) 방식 사용</a></li></ul></li><li><p>함수</p><ul><li><img src="https://velog.velcdn.com/images%2Fsoosungp33%2Fpost%2Fd02efacc-56e6-4abc-a390-12ecbb565c6b%2Fimage.png" alt="출처: https://velog.io/@soosungp33/%EC%8A%A4%ED%94%84%EB%A7%81-RestTemplate-%EC%A0%95%EB%A6%AC%EC%9A%94%EC%B2%AD-%ED%95%A8"></li><li>가장 많이 사용하는 메서드는 당연 exchage()이다.</li><li>exchage() : 모든 HTTP 요청 메소드를 지원하며 원하는 서버에 요청시켜주는 메소드<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;원하는클래스타입&gt; resultMap &#x3D; restTemplate.exchange(uri.toString(), HttpMethod.원하는통신, entity, 원하는클래스타입.class);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><br><br><br></p><h1 id="✍-사용방법"><a href="#✍-사용방법" class="headerlink" title="✍ 사용방법"></a>✍ 사용방법</h1><p><br><br><br></p><h2 id="1-의존성-설정"><a href="#1-의존성-설정" class="headerlink" title="1 의존성 설정"></a>1 의존성 설정</h2><p>스프링부트를 사용하면 이미 포함되어있으므로 의존성 설정을 따로 해줄 필요가 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="2-RestTemplate의-생성"><a href="#2-RestTemplate의-생성" class="headerlink" title="2 RestTemplate의 생성"></a>2 RestTemplate의 생성</h2><ol><li>Header 생성: HTTP요청을 보낼때 Body를 설명해주는 Header도 같이 보내야한다.</li><li>Body 생성: key-value 형식인 MultiValueMap 타입을 사용해서 만든다.</li><li>HttpEntity생성: HTTP통신을 하려면 Header와 Body가 하나여야하는데 HttpEntity클래스가 Header와 Body를 합쳐준다. </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. Header생성</span></span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.add(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Body생성</span></span><br><span class="line">MultiValueMap&lt;String, String&gt; params = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">params.add(<span class="string">"name"</span>, <span class="string">"sowon-dev"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. HttpEntity생성</span></span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; entity = <span class="keyword">new</span> HttpEntity&lt;&gt;(params, headers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. HTTP 통신</span></span><br><span class="line">RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">ResponseEntity&lt;Map&gt; response = rt.exchange(</span><br><span class="line">                <span class="string">"http://localhost:3000/"</span>, <span class="comment">//요청할 서버주소</span></span><br><span class="line">                HttpMethod.POST, <span class="comment">//요청방식</span></span><br><span class="line">                entity, <span class="comment">//요청데이터</span></span><br><span class="line">                String<span class="class">.<span class="keyword">class</span> //반환되는 데이터타입</span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Map데이터타입을 메서드리턴타입인 String형태로 파싱</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">jsonInString = mapper.writeValueAsString(response.getBody());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jsonInString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="✍-만약-exchange-메서드에서-Generic-클래스를-사용하고싶다면"><a href="#✍-만약-exchange-메서드에서-Generic-클래스를-사용하고싶다면" class="headerlink" title="✍ 만약 exchange 메서드에서 Generic 클래스를 사용하고싶다면?"></a>✍ 만약 exchange 메서드에서 Generic 클래스를 사용하고싶다면?</h1><p>위의 4번에서 exchange()할때 반환되는 데이터타입이 제네릭클래스라면 어떻게 처리할까?<br>하루종일 구글링한 방법을 정리하고자한다.</p><p><br><br><br></p><h2 id="1-현재-상황"><a href="#1-현재-상황" class="headerlink" title="1 현재 상황"></a>1 현재 상황</h2><p>아래처럼 <code>ResponseVO&lt;T&gt;클래스</code>와 <code>TestVO 클래스</code>가 선언되어있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ResponseVO&lt;T&gt; 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"><span class="keyword">private</span> T payload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// testVO 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exchange()를 실행하고자한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;ResponseVO&lt;TestVO&gt;&gt; response = rt.exchange(</span><br><span class="line">                <span class="string">"http://localhost:3000/"</span>,</span><br><span class="line">                HttpMethod.POST,</span><br><span class="line">                testJson,</span><br><span class="line">                ResponseVO&lt;TestVO&gt;<span class="class">.<span class="keyword">class</span> //반환되는 데이터타입</span></span><br><span class="line"><span class="class">)</span>;</span><br></pre></td></tr></table></figure><p>당연히 잘 될꺼라고 생각했던 코드에 빨간 밑줄이 생기면서 에러가 발생했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 에러메시지</span><br><span class="line">ResponseVO cannot be resolved to a variable</span><br><span class="line">TestVO cannot be resolved to a variable</span><br></pre></td></tr></table></figure><p>제네릭클래스인 경우 인스턴스를 어떻게 생성해야할까?</p><p><br><br><br></p><h2 id="2-ParameterizedTypeReference로-해결"><a href="#2-ParameterizedTypeReference로-해결" class="headerlink" title="2 ParameterizedTypeReference로 해결"></a>2 ParameterizedTypeReference로 해결</h2><ul><li>정의: <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/ParameterizedTypeReference.html">ParameterizedTypeReference</a>는 제네릭형식을 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;ResponseVO&lt;TestVO&gt;&gt; response = rt.exchange(</span><br><span class="line"><span class="string">"http://localhost:3000/"</span>,</span><br><span class="line">HttpMethod.POST,</span><br><span class="line">testJson,</span><br><span class="line"><span class="keyword">new</span> ParameterizedtypeReference&lt;ResponseVO&lt;TestVO&gt;&gt;()&#123;&#125; <span class="comment">//반환되는 데이터타입</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>잘해결되었지만 어떤 문제가 있었던걸까? 원인을 알아봤다.</p><h2 id="3-문제-원인"><a href="#3-문제-원인" class="headerlink" title="3 문제 원인"></a>3 문제 원인</h2><ul><li>제네릭은 데이터타입을 클래스 내부에서 지정하는 것이 아닌 외부에서 사용자가 지정한다. </li><li>자바는 컴파일시에 제네릭 타입 정보들을 제거 한다.런타임시에는 실제로 타입정보는 존재 하지 않고 강제 캐스팅 된다.</li></ul><blockquote><p>이런 제네릭 정보가 지워지는 문제 때문에 Super type token 기법이 생겨났다.<br>Super type token은 수퍼(상위)타입을 토큰으로 사용하겠다는 의미이다. 무슨말인가?<br>제네릭 정보가 컴파일시 런타임시 다 지워지지만 제네릭 정보를 런타임시 가져올 방법이 존재한다. 제네릭 클래스를 정의한 후에 그 제네릭 클래스를 상속받으면 런타임시에는 제네릭 정보를 가져올 수 있다.<br>Class의 메소드의 public Type getGenericSuperclass() 메소드를 통해 구할수 있다. getGenericSuperclass() 이용하여 바로 위의 슈퍼 클래스의 타입을 반환한다. 상위타입은 제네릭의 타입토큰 정보가 존재한다.<br>슈퍼(상위)타입의 제네릭 파라미터정보인 Type을 통해 제네릭 파라미터 클래스 정보를 가져온다.<br>출처: <a href="https://ka0oll.tistory.com/m/6">https://ka0oll.tistory.com/m/6</a></p></blockquote><p>제네릭 정보가 지워지는 문제때문에 제네릭타입은 인스턴스를 생성할 수 없는게 흥미로웠다. 구글링할수록 자바를 깊이있게 알 수 있어서 재밌었고 좋은 글 써주신 분들 덕분에 한결 쉽게 이해할 수 있었다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html</a></li><li><a href="https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/">https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/</a></li><li><a href="https://jung-story.tistory.com/132">https://jung-story.tistory.com/132</a></li><li><a href="https://www.baeldung.com/rest-template">https://www.baeldung.com/rest-template</a></li><li><a href="https://tecoble.techcourse.co.kr/post/2021-07-25-resttemplate-webclient/">https://tecoble.techcourse.co.kr/post/2021-07-25-resttemplate-webclient/</a></li><li><a href="https://vmpo.tistory.com/27">https://vmpo.tistory.com/27</a></li><li><a href="https://www.skyer9.pe.kr/wordpress/?p=1476">https://www.skyer9.pe.kr/wordpress/?p=1476</a></li><li><a href="https://countryxide.tistory.com/148">https://countryxide.tistory.com/148</a></li><li><a href="https://ka0oll.tistory.com/m/6">https://ka0oll.tistory.com/m/6</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/12/09/221210spring-resttemplate/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Java] web.xml이 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/12/06/221207sring-webxml/</link>
      <guid>https://sowon-dev.github.io/2022/12/06/221207sring-webxml/</guid>
      <pubDate>Tue, 06 Dec 2022 19:19:12 GMT</pubDate>
      
      <description>&lt;p&gt;자바로 웹어플리케이션을 만드면 필수로 만나게 되는 파일 중 &lt;code&gt;web.xml&lt;/code&gt;이 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바로 웹어플리케이션을 만드면 필수로 만나게 되는 파일 중 <code>web.xml</code>이 있다.</p><a id="more"></a><h1 id="web-xml이란"><a href="#web-xml이란" class="headerlink" title="web.xml이란"></a>web.xml이란</h1><p>단어로는 Deployment Descriptor로 배포설명자이다.<br>자바 웹 애플리케이션은 배포 설명자 파일을 사용하여 URL이 서블릿에 매핑되는 방법, 인증이 필요한 URL 등의 정보를 확인한다.<br>자바 웹 애플리케이션이면 반드시 하나씩 존재해야하는 파일이며 프로그램에 필요한 전반적인 설정을 지정할 수 있다.<br>프로젝트 실행시 가장 먼저 실행되는 파일로서 메모리에 로딩된다.<br>위치는 WEBCONTENT하위의 WEB-INF폴더 하위에 있으며 가장 많이 사용되는 곳은 에러코드별 페이지처리이다.</p><blockquote><p>In a java web application a file named web.xml is known as deployment descriptor. It is a xml file and <web-app> is the root element for it. When a request comes web server uses web.xml file to map the URL of the request to the specific code that handle the request.<br>출처: <a href="https://www.w3schools.blog/deployment-descriptor-web-xml-file">w3schools</a></p></blockquote><p><br><br><br></p><h1 id="무엇을-설정할수있을까"><a href="#무엇을-설정할수있을까" class="headerlink" title="무엇을 설정할수있을까?"></a>무엇을 설정할수있을까?</h1><ol><li>ServletContext의 초기 파라미터</li><li>Session의 유효시간 설정</li><li>Servlet/JSP에 대한 정의</li><li>Servlet/JSP 매핑: URL 패턴 및 URL이 해당 패턴과 일치하는 요청에 사용할 선언된 서블릿의 이름을 지정. <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>redteam<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/red/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>blueteam<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/blue/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Mime Type 매핑</li><li>Welcome File list</li><li>Error Pages 처리 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 존재하지 않는 페이지, 404에러시 처리 페이지를 error.jsp로 설정함 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>리스너: 어떠한 이벤트가 발생하면 호출되어 처리하는 객체 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>TestListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>필터: <a href="https://sowon-dev.github.io/2021/08/06/210807Spring-filter/">Spring-Filter 포스팅참조</a></li><li>보안: 패턴과 일치하는 URL에 대한 보안 제약조건을 정의할 수 있다. 제약조건에서 사용자 역할을 admin으로 지정하면 등록된 애플리케이션 개발자만 URL에 액세스하도록 만들수있다. <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role-name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://www.w3schools.blog/deployment-descriptor-web-xml-file">https://www.w3schools.blog/deployment-descriptor-web-xml-file</a></li><li><a href="http://wiki.gurubee.net/pages/viewpage.action?pageId=26740333&amp;">http://wiki.gurubee.net/pages/viewpage.action?pageId=26740333&amp;</a></li><li><a href="https://cloud.google.com/appengine/docs/standard/java/config/webxml?hl=ko">https://cloud.google.com/appengine/docs/standard/java/config/webxml?hl=ko</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/WEB/">WEB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/12/06/221207sring-webxml/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL/MariaDB] xml파일에 PASSWORD()가 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/12/05/221206mariadb-passwordhashing/</link>
      <guid>https://sowon-dev.github.io/2022/12/05/221206mariadb-passwordhashing/</guid>
      <pubDate>Mon, 05 Dec 2022 20:16:15 GMT</pubDate>
      
      <description>&lt;p&gt;xml파일에 선언하지 않았던 AES_DECRYPT(), UNHEX(), PASSWORD() 함수들이 보였다. 쿼리를 읽었을때 암호화와 복호화인건 알았으나 구체적인 사용방법을 알고 싶어 구글링해보니 MARIADB가 제공하는 내장함수였다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>xml파일에 선언하지 않았던 AES_DECRYPT(), UNHEX(), PASSWORD() 함수들이 보였다. 쿼리를 읽었을때 암호화와 복호화인건 알았으나 구체적인 사용방법을 알고 싶어 구글링해보니 MARIADB가 제공하는 내장함수였다.</p><a id="more"></a><ul><li>예시코드</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> USER_NO</span><br><span class="line">, <span class="keyword">AES_DECRYPT</span>(<span class="keyword">UNHEX</span>(USER_NUM), <span class="comment">#&#123;encrypt_key&#125;) AS USER_NUM</span></span><br><span class="line">, <span class="keyword">PASSWORD</span>(<span class="comment">#&#123;user_login_pin&#125;) AS USER_LOGIN_PIN</span></span><br><span class="line"><span class="comment">-- 중략</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">USER</span></span><br></pre></td></tr></table></figure><p>마리아DB 공식문서에 너무 잘 나와있어서 이해하기 훨씬 편했다.</p><ul><li><a href="https://mariadb.com/kb/en/">마리아DB 공식 문서-영어</a></li><li><a href="https://mariadb.com/kb/ko/">마리아DB 공식 문서-한국어</a></li></ul><p>한글버전이 있지만 번역되지 않은 페이지가 더 많으므로 영어로 보는 것을 추천한다.<br>그리고 공식문서를 보기위해선 현재 프로젝트가 어떤 버전을 사용하고 있는지 알아야한다. 사용하고 있는 마리아DB버전에 따라 지원되지 않는 함수가 있을 수 있기때문이다.<br>db를 열어 아래 쿼리를 입력해주면 된다.</p><p><br><br><br></p><h1 id="MariaDB-버전확인-하는-방법"><a href="#MariaDB-버전확인-하는-방법" class="headerlink" title="MariaDB 버전확인 하는 방법"></a>MariaDB 버전확인 하는 방법</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line"></span><br><span class="line">// 쿼리 결과 예시</span><br><span class="line">10.3.32-MariaDB-log</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="PASSWORD"><a href="#PASSWORD" class="headerlink" title="PASSWORD()"></a>PASSWORD()</h1><blockquote><p>Calculates and returns a hashed password string from the plaintext password str. Returns an empty string (&gt;= MariaDB 10.0.4) if the argument was NULL.<br>The return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables.<br>This is the function that is used for hashing MariaDB passwords for storage in the Password column of the user table (see privileges), usually used with the SET PASSWORD statement. It is not intended for use in other applications<br>출처: <a href="https://mariadb.com/kb/en/password/">https://mariadb.com/kb/en/password</a></p></blockquote><p>순수 문자열을 입력하면 해시처리된 문자열로 바꿔주는 함수이다. 만약 순수 문자열이 NULL인 경우에는 빈 문자열이 반환된다.<br>왜 PASSWORD() 함수를 사용해야할까? 사용자가 입력한 비밀번호를 개발자도 모르는 암호화된 값으로 바꿔서 DB에 저장하기때문이다.<br>어떤 방식으로 암호화될까? <a href="https://mariadb.com/kb/en/authentication-plugin-ed25519/">마리아DB 버전4.1까지는 기존의 SHA-1 알고리즘을 사용했으나 보안의 취약성으로 인해 마리아DB 5.2부터는 ed25519 인증플러그인을 사용한다.</a></p><p><br><br><br></p><h2 id="구문"><a href="#구문" class="headerlink" title="구문"></a>구문</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PASSWORD(str)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PASSWORD</span>(<span class="string">'notagoodpwd'</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------+</span></span><br><span class="line">| PASSWORD('notagoodpwd')                   |</span><br><span class="line">+<span class="comment">-------------------------------------------+</span></span><br><span class="line">| *3A70EE9FC6594F88CE9E959CD51C5A1C002DC937 |</span><br><span class="line">+<span class="comment">-------------------------------------------+</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="HEX-와-UNHEX"><a href="#HEX-와-UNHEX" class="headerlink" title="HEX()와 UNHEX()"></a>HEX()와 UNHEX()</h1><ul><li>HEX(): 기존 텍스트를 16진수 값의 문자로 변환하여 반환한다.</li><li>UNHEX(): HEX의 역산으로 16진수를 숫자로 해석을 하고 그 숫자에 대응하는 문자로 변환한다. 그 결과, 문자들은 바이너리 스트링으로 리턴된다. 그리고 UTF8로 CONVERT 작업을 해주면 기존 텍스트로 변환이 가능하다.</li></ul><p><br><br><br></p><h2 id="예시-1"><a href="#예시-1" class="headerlink" title="예시"></a>예시</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HEX</span>(<span class="string">'MariaDB'</span>);</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| HEX('MariaDB') |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| 4D617269614442 |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UNHEX</span>(<span class="string">'4D617269614442'</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| UNHEX('4D617269614442') |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| MariaDB                 |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://mariadb.com/kb/en/password/">https://mariadb.com/kb/en/password/</a></li><li><a href="https://victorydntmd.tistory.com/144">https://victorydntmd.tistory.com/144</a></li><li><a href="https://shxrecord.tistory.com/238">https://shxrecord.tistory.com/238</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/12/05/221206mariadb-passwordhashing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[jQuery] Ajax 글로벌 이벤트(Global Event)가 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/11/29/221130jQuery-global/</link>
      <guid>https://sowon-dev.github.io/2022/11/29/221130jQuery-global/</guid>
      <pubDate>Tue, 29 Nov 2022 21:10:59 GMT</pubDate>
      
      <description>&lt;p&gt;레거시 소스코드를 분석하면서 jQuery.ajaxSetup()에 대해 알아볼 기회가 생겼다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>레거시 소스코드를 분석하면서 jQuery.ajaxSetup()에 대해 알아볼 기회가 생겼다.</p><a id="more"></a><p>jQuery Ajax는 지역 이벤트(Local Event)와 전역 이벤트(Global Event)로 나뉜다. 둘이 가지고 있는 이벤트가 매우 비슷하다.</p><h1 id="지역-이벤트-Local-Event-vs-전역-이벤트-Global-Event"><a href="#지역-이벤트-Local-Event-vs-전역-이벤트-Global-Event" class="headerlink" title="지역 이벤트(Local Event) vs 전역 이벤트(Global Event)"></a>지역 이벤트(Local Event) vs 전역 이벤트(Global Event)</h1><table><thead><tr><th align="left"></th><th align="left">로컬 이벤트</th><th align="left">글로벌 이벤트</th></tr></thead><tbody><tr><td align="left">셋팅</td><td align="left">global속성을 false(default)설정</td><td align="left">global속성을 true설정</td></tr><tr><td align="left">시행시기</td><td align="left">ajax수행의 특정시점에 함수가 호출되는 callback형태로 이벤트 발생</td><td align="left">개별 혹은 전체 ajax전송에 이벤트 발생</td></tr><tr><td align="left">전송시</td><td align="left">beforeSend</td><td align="left">ajaxSend()</td></tr><tr><td align="left">성공시(응답코드 200 일때)</td><td align="left">success</td><td align="left">ajaxSuccess()</td></tr><tr><td align="left">에러발생시(응답코드 오류일때)</td><td align="left">error</td><td align="left">ajaxError()</td></tr><tr><td align="left">완료시</td><td align="left">complete</td><td align="left">ajaxComplete()</td></tr><tr><td align="left">시작시 정의</td><td align="left"></td><td align="left">ajaxStart()</td></tr><tr><td align="left">정지시</td><td align="left"></td><td align="left">ajaxStop()</td></tr></tbody></table><ul><li>특징<ul><li>지역과 전역에 둘다 존재하는 send, success, error, complete와 관련된 이벤트들은 지역이벤트 callback이 실행 후 전역이벤트가 실행된다.</li></ul></li></ul><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://api.jquery.com/jquery.ajaxsetup/">https://api.jquery.com/jquery.ajaxsetup/</a></li><li><a href="https://www.nextree.co.kr/p10308/">https://www.nextree.co.kr/p10308/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/jQuery/">jQuery</category>
      
      
      <comments>https://sowon-dev.github.io/2022/11/29/221130jQuery-global/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL/MariaDB] 함수(function) vs 프로시저(Procedure) 차이</title>
      <link>https://sowon-dev.github.io/2022/11/28/221129MySQL-function-Procedure/</link>
      <guid>https://sowon-dev.github.io/2022/11/28/221129MySQL-function-Procedure/</guid>
      <pubDate>Mon, 28 Nov 2022 21:03:57 GMT</pubDate>
      
      <description>&lt;p&gt;이번에 진행중인 프로젝트는 프로시저보다 함수가 더 많이 사용되었다. 지난번 담당했던 프로젝트는 오직 프로시저만 썼었다. 둘의 차이가 뭘까? 언뜻 생각해봤을땐 return유무정도인데 깊이있게 알고싶어졌다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번에 진행중인 프로젝트는 프로시저보다 함수가 더 많이 사용되었다. 지난번 담당했던 프로젝트는 오직 프로시저만 썼었다. 둘의 차이가 뭘까? 언뜻 생각해봤을땐 return유무정도인데 깊이있게 알고싶어졌다.</p><a id="more"></a><p><br><br><br></p><h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><ol><li>정의: 항상 리턴값을 가짐</li><li>특징<ul><li>리턴값은 필수이고 오직 하나</li><li>try catch 사용 불가</li></ul></li><li>단점<ul><li>클라이언트실행으로 프로시저보다 속도가 느리다.</li></ul></li><li>선언 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name(</span><br><span class="line">param1,</span><br><span class="line">param2,…</span><br><span class="line">)</span><br><span class="line"><span class="keyword">RETURNS</span> datatype</span><br><span class="line">[<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li><li>선언예시 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> MultiplyNumbers(@int1 <span class="keyword">as</span> <span class="built_in">int</span>,@int2 <span class="keyword">as</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">As</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">Return</span> (@int1 * @int2)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>호출 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MultiplyNumbers(2,2) </span><br><span class="line">// RETURN: 4</span><br></pre></td></tr></table></figure></li></ol><h1 id="프로시저"><a href="#프로시저" class="headerlink" title="프로시저"></a>프로시저</h1><ol><li>정의: 특정 작업을 수행. 여러 SQL문을 한 번에 실행 가능</li><li>특징<ul><li>개발업무와 DB처리를 구분하여 개발할 수 있음</li><li>보수성 뛰어남</li><li>서버 실행이라 속도가 함수보다 상대적으로 빠름</li><li>리턴값 없거나 여러개도 가능 -&gt; 유연성</li><li>try catch 사용가능 -&gt; 에러처리가능</li></ul></li><li>단점<ul><li>재사용성이 좋지 않음</li></ul></li><li>선언 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Procedure</span> [<span class="keyword">Procedure</span> <span class="keyword">Name</span>] ([Parameter <span class="number">1</span>], [Parameter <span class="number">2</span>], [Parameter <span class="number">3</span>] )</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line"><span class="comment">-- SQL Queries..</span></span><br><span class="line"><span class="keyword">End</span></span><br></pre></td></tr></table></figure></li><li>선언 예시 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GetAllProducts()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> *  <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li><li>호출 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> GetAllProducts()</span><br></pre></td></tr></table></figure></li></ol><p><br><br><br></p><h1 id="차이"><a href="#차이" class="headerlink" title="차이"></a>차이</h1><table><thead><tr><th align="center"></th><th align="left">함수(Function)</th><th align="left">프로시저(Procedure)</th></tr></thead><tbody><tr><td align="center">처리주체</td><td align="left">클라이언트에서 처리</td><td align="left">서버로 보내서 처리</td></tr><tr><td align="center">리턴값 유무</td><td align="left">필수</td><td align="left">선택</td></tr><tr><td align="center">리턴값 갯수</td><td align="left">하나만 반환가능</td><td align="left">여러개 반환가능</td></tr><tr><td align="center">호출방법</td><td align="left">select문장안에서 함수호출</td><td align="left">call 프로시저명()</td></tr><tr><td align="center">주사용처</td><td align="left">로직 처리 도와주는 용도</td><td align="left">로직 처리를 직접하는 용도 why? DML문 사용가능해서</td></tr></tbody></table><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://www.geeksforgeeks.org/difference-between-function-and-procedure/">https://www.geeksforgeeks.org/difference-between-function-and-procedure/</a></li><li><a href="https://www.mysqltutorial.org/getting-started-with-mysql-stored-procedures.aspx">https://www.mysqltutorial.org/getting-started-with-mysql-stored-procedures.aspx</a></li><li><a href="https://velog.io/@devjooj/Mysql-Function%EA%B3%BC-Procedure-%EC%B0%A8%EC%9D%B4">https://velog.io/@devjooj/Mysql-Function%EA%B3%BC-Procedure-%EC%B0%A8%EC%9D%B4</a></li><li><a href="https://spiderwebcoding.tistory.com/7">https://spiderwebcoding.tistory.com/7</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/11/28/221129MySQL-function-Procedure/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>레디스(Redis)가 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/11/21/221122Redis/</link>
      <guid>https://sowon-dev.github.io/2022/11/21/221122Redis/</guid>
      <pubDate>Mon, 21 Nov 2022 20:33:44 GMT</pubDate>
      
      <description>&lt;p&gt;종종 들었던 Redis, 이번 레거시프로젝트 소스코드분석중 RedisTemplate을 만나면서 그 개념을 함께 정리해보고자한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>종종 들었던 Redis, 이번 레거시프로젝트 소스코드분석중 RedisTemplate을 만나면서 그 개념을 함께 정리해보고자한다.</p><a id="more"></a><h1 id="In-Memory-DB란"><a href="#In-Memory-DB란" class="headerlink" title="In Memory DB란?"></a>In Memory DB란?</h1><blockquote><p>인메모리 데이터베이스(In-memory Database)는 데이터 스토리지의 메인 메모리에 설치되어 운영되는 방식의 데이터베이스 관리 시스템이다.<br>인메모리 데이터베이스는 디스크에 최적화된 데이터베이스보다 더 빠른데 그 까닭은 디스크 접근이 메모리 접근보다 느리기 때문이며, 이 데이터베이스는 내부 최적화 알고리즘이 더 단순하며 더 적은 CPU 명령을 실행한다. 메모리의 데이터에 접근하면 데이터를 조회할 때 검색 시간이 줄어들며 디스크보다 더 빠르고 더 예측 가능성 성능을 제공한다.<br>인메모리 데이터 스토리지의 잠재적인 기술적 문제는 RAM의 휘발성이다. 구체적으로 말해 전원이 소실될 경우나 고의적인 상황 등에서 휘발성 RAM 안에 저장된 데이터는 손실된다.비휘발성 RAM 기술의 도입으로 인메모리 데이터베이스는 전력 손실에도 완전한 속도로 데이터를 유지할 수 있게 되었다.<br>출처: <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4">위키백과</a></p></blockquote><p><br><br><br></p><h2 id="인메모리DB-특징"><a href="#인메모리DB-특징" class="headerlink" title="인메모리DB 특징"></a>인메모리DB 특징</h2><p>인메모리디비의 가장 큰 특징은 2가지이다.</p><ol><li>인메모리 데이터구조: 디스크 아닌 메모리 기반. Redis의 가장 큰 특징.</li><li>캐시를 사용하여 속도가 빠름</li></ol><p><br><br><br></p><h2 id="인메모리DB-사용처"><a href="#인메모리DB-사용처" class="headerlink" title="인메모리DB 사용처"></a>인메모리DB 사용처</h2><p>크게 3가지 용도로 사용한다.</p><ol><li>데이터베이스</li><li>캐시</li><li>메세지 브로커</li></ol><p>결국 빠른 속도를 위해서 메모리에 올려서 사용하는 데이터 저장소이다.<br>인메모리DB의 종류에는 Redis, Memcached, Amazon ElastiCache 등이 있고 그 중 Redis의 인기가 압도적으로 높다. </p><p><br><br><br></p><h1 id="Redis란"><a href="#Redis란" class="headerlink" title="Redis란?"></a>Redis란?</h1><p>Redis는 REmote DIctionary Server의 약어로 Key와 Value를 가진 오픈소스 NoSQL 데이터베이스이다.<br>여기서 NoSQL이란 스키마없이 데이터를 표현한 데이터베이스로 <a href="https://sowon-dev.github.io/2022/02/26/220226NoSQL/">NoSQL이 뭐길래</a>포스팅을 참고하면된다.</p><p><br><br><br></p><h2 id="Redis-특징"><a href="#Redis-특징" class="headerlink" title="Redis 특징"></a>Redis 특징</h2><ol><li>다양한 데이터 구조: String, Set, Sorted Set, Hash, List 등 다양한 타입을 지원</li><li>스냅샷: 장애시 복구 가능</li><li>Master-Slave 구조로 여러 개의 복제본 만들기 용이</li><li>트랜잭션 지원</li><li>Pub(발행) / Sub(구독) 방식의 메시징을 지원</li></ol><p><br><br><br></p><h1 id="DB가-있는데-인메모리DB를-왜-쓸까"><a href="#DB가-있는데-인메모리DB를-왜-쓸까" class="headerlink" title="DB가 있는데 인메모리DB를 왜 쓸까?"></a>DB가 있는데 인메모리DB를 왜 쓸까?</h1><p>근원적인 궁금증을 해결해준 글을 발견해서 발췌해왔다.</p><blockquote><p>데이터 베이스가 있는데도 Redis라는 인메모리 데이터 구조 저장소를 사용하는 이유는 무엇일까요?<br>데이터 베이스는 데이터를 물리 디스크에 직접 쓰기 때문에 서버에 문제가 발생하여 다운되더라도 데이터가 손실되지 않습니다. 하지만 매번 디스크에 접근해야 하기 때문에 사용자가 많아질수록 부하가 많아져서 느려질 수 있는데요.<br>일반적으로 서비스 운영 초반이거나 규모가 작은, 사용자가 많지 않은 서비스의 경우에는 WEB - WAS - DB 의 구조로도 데이터 베이스에 무리가 가지 않습니다.<br>하지만 사용자가 늘어난다면 데이터 베이스가 과부하 될 수 있기 때문에 이때 캐시 서버를 도입하여 사용합니다.<br>그리고 이 캐시 서버로 이용할 수 있는 것이 바로 Redis 입니다.<br>캐시는 한번 읽어온 데이터를 임의의 공간에 저장하여 다음에 읽을 때는 빠르게 결괏값을 받을 수 있도록 도와주는 공간입니다.<br>같은 요청이 여러 번 들어오는 경우 매번 데이터 베이스를 거치는 것이 아니라 캐시 서버에서 첫 번째 요청 이후 저장된 결괏값을 바로 내려주기 때문에 DB의 부하를 줄이고 서비스의 속도도 느려지지 않는 장점이 있습니다.<br>출처: <a href="https://wildeveloperetrain.tistory.com/m/21">Jan92님 블로그 - Redis란? 레디스의 기본적인 개념</a></p></blockquote><p><br><br><br></p><h1 id="MSSQL이나-MYSQL도-인메모리테이블을-지원하는데-왜-굳이-레디스-Redis-를-사용할까"><a href="#MSSQL이나-MYSQL도-인메모리테이블을-지원하는데-왜-굳이-레디스-Redis-를-사용할까" class="headerlink" title="MSSQL이나 MYSQL도 인메모리테이블을 지원하는데 왜 굳이 레디스(Redis)를 사용할까?"></a>MSSQL이나 MYSQL도 인메모리테이블을 지원하는데 왜 굳이 레디스(Redis)를 사용할까?</h1><p>레디스에 대해 이야기를 나누다가 팀장님이 RDB에서도 인메모리를 지원하는데 왜 굳이 레디스를 사용하는 지 알아보는게 어떠냐고 제안해주셨다.<br>RDB에서도 메모리DB를 쓸수있다니! 전혀 몰랐던 사실이어서 공부해봤다.</p><table><thead><tr><th align="center">DB명</th><th align="left">인메모리DB 사용</th><th align="left">적용법</th></tr></thead><tbody><tr><td align="center">Oracle</td><td align="left">In Memory Option</td><td align="left"><a href="http://www.koreaoug.org/c12/935">Oracle Database In-Memory Option –I (설명과 설정방법)</a></td></tr><tr><td align="center">MySQL</td><td align="left">메모리테이블</td><td align="left"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=oralol&logNo=222198862146">DB 튜닝 - MySQL Memory 테이블 사용</a></td></tr><tr><td align="center">MSSQL</td><td align="left">메모리테이블</td><td align="left"><a href="https://mozi.tistory.com/566">MSSQL 테이블을 인메모리(in-memory)로 사용하는 방법</a></td></tr></tbody></table><p><br><br><br></p><h2 id="왜-굳이-레디스를-사용할까"><a href="#왜-굳이-레디스를-사용할까" class="headerlink" title="왜 굳이 레디스를 사용할까?"></a>왜 굳이 레디스를 사용할까?</h2><p>먼저, 레디스는 사용자가 많아 자료가 많다. 커뮤니티가 큰 오픈소스를 사용해야 적용 및 대응이 쉽다.<br>두번째로 인메모리데이블은 제약사항이 많은 반면에 레디스는 다양한 데이터구조 사용가능, 스냅샷으로 복구시 활용가능한 점등이 확장성을 고려해봤을때도 여전히 좋다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://aws.amazon.com/ko/elasticache/what-is-redis/">https://aws.amazon.com/ko/elasticache/what-is-redis/</a></li><li><a href="https://wildeveloperetrain.tistory.com/m/21">https://wildeveloperetrain.tistory.com/m/21</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4">위키백과 - 인메모리데이터베이스</a></li><li><a href="http://www.koreaoug.org/c12/935">http://www.koreaoug.org/c12/935</a></li><li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=oralol&amp;logNo=222198862146">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=oralol&amp;logNo=222198862146</a></li><li><a href="https://mozi.tistory.com/566">https://mozi.tistory.com/566</a></li><li><a href="https://kdhyo98.tistory.com/89">https://kdhyo98.tistory.com/89</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Redis/">Redis</category>
      
      
      <comments>https://sowon-dev.github.io/2022/11/21/221122Redis/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
