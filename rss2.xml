<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 13 Oct 2020 00:11:56 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[ITWILL : JSP] JSP전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/jspList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/jspList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌷프로그래밍기초&quot;&gt;&lt;a href=&quot;#🌷프로그래밍기초&quot; class=&quot;headerlink&quot; title=&quot;🌷프로그래밍기초&quot;&gt;&lt;/a&gt;🌷프로그래밍기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/05/28/200528jspi/&quot;&gt;프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;🌷JS기초&quot;&gt;&lt;a href=&quot;#🌷JS기초&quot; class=&quot;headerlink&quot; title=&quot;🌷JS기초&quot;&gt;&lt;/a&gt;🌷JS기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200601jspi/&quot;&gt;JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌷프로그래밍기초"><a href="#🌷프로그래밍기초" class="headerlink" title="🌷프로그래밍기초"></a>🌷프로그래밍기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200528jspi/">프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버</a></li></ol><h2 id="🌷JS기초"><a href="#🌷JS기초" class="headerlink" title="🌷JS기초"></a>🌷JS기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200601jspi/">JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/06/02/200602jspi/">JS를 문서에 나타내는 3가지방법, undefined VS null, 백의자리 Math.floor(), 복합대입연산자로table생성, A++과 ++A차이점, ==과===차이점, 논리표</a></li><li><a href="https://sowon-dev.github.io/2020/06/03/200603jspi/">JAVA SE/EE/ME 차이점, JAVA EE 설정. Tomcat 설치및설정, 이클립스 단축키</a></li><li><a href="https://sowon-dev.github.io/2020/06/04/200604jspi/">아이디와 비번입력, 새로고침location.reload(), 주석한번에 단축키, switch문 출력문 한줄리팩토링</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200609jspi/">반복문 for 순서 자세히, 개발자 도구로 디버깅, 기본 반복문암기, for문과 if문의 자리바꿈에 따른 변화, 반복문의 전위연산 VS 후위연산, do while문</a></li><li><a href="https://sowon-dev.github.io/2020/06/11/200611jspi/">무한반복문, 보조제어(break와continue)문, 익명함수, 재귀함수, 지역변수를 전역에서 사용하는 방법, 내장함수</a></li></ol><h2 id="🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM"><a href="#🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM" class="headerlink" title="🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))"></a>🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi/">Object객체 전체개념, tv채널객체함수, new를 쓰고 안쓰고의 차이</a></li><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi2/">Date객체 자세히, 디데이구하는 함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi/">Array객체 (for ~ in구문, join(), reverse(), sort())</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi2/">String객체, 짤라오는 함수 4종류 .substring(), slice(), substr(), charAt(), .indexOf()와 .lastIndexOf()차이, .concat(), .split(), ID자릿수를 제한하는 이메일 유효성검사</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi3/">이벤트리스너와 이벤트핸들러, 브라우저객체모델, window객체전체</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi/">브라우저객체모델안의 Document객체 (bgColor와 fgColor사용,  img태그에 접근하여 속성 사용, 랜덤 img 출력하기)</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi2/">브라우저객체모델안의 location객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi/">브라우저객체모델안의 history객체, screen객체, navigator객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi2/">문서 객체 모델안의 form태그, 페이지이동방식(get과 post), focus() vs blur() vs select()</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200618jspi/">문서 객체 모델안의 if문에 return;의 역할, radio태그, checkbox태그</a></li></ol><h2 id="🌷JS실습"><a href="#🌷JS실습" class="headerlink" title="🌷JS실습"></a>🌷JS실습</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi/">js로 간단한 회원가입페이지 작성하기</a></li></ol><h2 id="🌷JSP기초"><a href="#🌷JSP기초" class="headerlink" title="🌷JSP기초"></a>🌷JSP기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi2/">JSP 첫 프로젝트 톰캣과 연결</a></li><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi/">JSP 주석과 JSP directive, JSP 스크립트 요소</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi/">JAVA DATATYPE, Integer.parseInt(문자열), 동일한 파라미터의 값을 가지는 데이터가 여러개있을 경우 변수로 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi2/">커넥션풀(Connection Pool)</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi/">Wrapper클래스, 오토 박싱과 오토 언박싱, hierarchy확인법</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-2/">자바 클래스(객체) vs 추상클래스 vs 인터페이스</a></li></ol><h2 id="🌷JSP기초-내장객체-중-영역객체"><a href="#🌷JSP기초-내장객체-중-영역객체" class="headerlink" title="🌷JSP기초 : 내장객체 중 영역객체"></a>🌷JSP기초 : 내장객체 중 영역객체</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi2/">내장객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi2/">영역객체scope</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi/">영역객체 안에서 사용하는 속성(Attribute), 링크이동 방법별 전달가능한 영역(scope)</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi2/">JSP 디렉티브(directive) 중 include VS 액션태그 include, jspf확장자 파일</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi/">세션(Session)</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi2/">==과 str.equals(str2) 차이, 객체와 클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200701jspi/">쿠키(Cookie)</a></li></ol><h2 id="🌷MySQL"><a href="#🌷MySQL" class="headerlink" title="🌷MySQL"></a>🌷MySQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200701jspi2/">MYSQL 설치, MYSQL환경변수설정, cmd에서 명령어 잘못입력해서 mysql못빠져나갈때</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi/">MYSQL 접속순서, DB명령어, 테이블명령어, 데이터명령어</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi2/">MySQL 한글깨짐현상 두가지 해결방법 : cmd와 Workbench, 이클립스와 MYSQL연결</a></li></ol><h2 id="🌷JDBC"><a href="#🌷JDBC" class="headerlink" title="🌷JDBC"></a>🌷JDBC</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi/">JDBC활용 - import쓰는 이유, form페이지로 받은 데이터를 DB에 insert하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi2/">JDBC활용 - JAVA에서 DB 정보 지우기 2가지방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi/">JDBC활용 - DB에서 고객정보를 불러와서 HTML테이블에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi2/">JDBC활용 - TIMESTAMP주의점, JDBC에서 데이터처리</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707jspi/">JDBC활용 - 회원정보수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/08/200708jspi/">JDBC활용 - 회원목록출력하는데 관리자는 빼고 출력하기, 자바 에러 두종류</a></li></ol><h2 id="🌷JAVABEAN"><a href="#🌷JAVABEAN" class="headerlink" title="🌷JAVABEAN"></a>🌷JAVABEAN</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi/">Javabean : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi2/">자바빈 실습1 : 회원가입페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi/">자바빈 실습2 : 로그인 및 로그아웃페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi2/">자바빈 실습3 : 회원정보조회 및 수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi/">자바빈 실습4 : web.xml, 회원정보삭제페이지</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi3/">자바빈 실습5 : 관리자만 확인할 수 있는 회원목록페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi2/">자바빈 실습6 : 게시판만들기(글쓰기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/21/200721jspi/">자바빈 실습7 : 게시판만들기(글 총 갯수, 글목록, 페이징처리)</a></li><li><a href="https://sowon-dev.github.io/2020/07/22/200722jspi/">자바빈 실습8 : 게시판만들기(글내용보기, 글수정하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi/">자바빈 실습9 : 게시판만들기(글삭제하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi2/">자바빈 실습10 : 게시판만들기(답글쓰기)</a></li></ol><h2 id="🌷파일업로드와-다운로드-기능-구현"><a href="#🌷파일업로드와-다운로드-기능-구현" class="headerlink" title="🌷파일업로드와 다운로드 기능 구현"></a>🌷파일업로드와 다운로드 기능 구현</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi/">자바빈 실습11 : MultipartRequest클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi2/">자바빈 실습12 : 파일업로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi3/">자바빈 실습13 : 파일다운로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200728jspi/">자바빈 실습14 : ServletContext 사용하여 파일업로드와 다운로드</a></li></ol><h2 id="🌷자료구조"><a href="#🌷자료구조" class="headerlink" title="🌷자료구조"></a>🌷자료구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi2/">자료구조1 : Collections Framwork(Set계열, List계열)</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi/">자료구조2 : Stack클래스, Queue인터페이스, Map인터페이스</a></li></ol><h2 id="🌷model1-홈페이지만들기"><a href="#🌷model1-홈페이지만들기" class="headerlink" title="🌷model1 홈페이지만들기"></a>🌷model1 홈페이지만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/29/200729jspi/">홈페이지만들기1 : 프로젝트 시작 설정 및 자바빈생성과 DB연결</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi/">홈페이지만들기2 : 아이디중복체크 포함한 회원가입기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi2/">홈페이지만들기3 : 로그인/로그아웃 기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200803jspi/">홈페이지만들기4 : 게시판글쓰기구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi/">홈페이지만들기5 : 게시판에 글목록표시구현</a></li></ol><h2 id="🌷JQuery"><a href="#🌷JQuery" class="headerlink" title="🌷JQuery"></a>🌷JQuery</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi2/">JQuery1 : JQuery 사용설정, 선택자, css()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi/">JQuery2 : attr(), html()와 text(), append()와 prepend()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi2/">JQuery3 : setInterval()와 clearInteval(), CDATA VS PCDATA</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi/">JQuery4 : click(), bind(), event.preventDefault(), unbind(), keyup(), 유효성체크(자바스크립트 vs 제이쿼리)</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi2/">JQuery5 : 유효성체크(자바스크립트 vs 제이쿼리), 제이쿼리 기본효과</a></li><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi/">JQuery6 : innerfade 라이브러리, animate(속성, 속도, 콜백함수)</a></li></ol><h2 id="🌷Ajax"><a href="#🌷Ajax" class="headerlink" title="🌷Ajax"></a>🌷Ajax</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi2/">Ajax : Ajax특징, XMLHttpRequest클래스, txt 페이지 처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi/">Ajax : xml처리, json처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi2/">Ajax : DB데이터를 불러와서 json형태로 변경하여 출력하기</a></li></ol><h2 id="🌷JSTL과-EL"><a href="#🌷JSTL과-EL" class="headerlink" title="🌷JSTL과 EL"></a>🌷JSTL과 EL</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi/">JSTL과 EL : JSTL과 EL개념, CORE 라이브러리(out)</a></li><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi2/">JSTL과 EL : CORE 라이브러리(set)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi/">JSTL과 EL : CORE 라이브러리(if, forEach, forTokens, choose)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi2/">JSTL과 EL : fmt 라이브러리(formatDate, formatNumber)</a></li><li><a href="https://sowon-dev.github.io/2020/08/13/200813jspi/">JSTL과 EL : EL태그로 동일한 name의 파라미터를 EL태그로 쉽게 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi/">JSTL과 EL : EL태그 연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi2/">EL과 Servlet : RequestDispatcher.forward 로 페이지 이동 후 데이터별 출력방법</a></li></ol><h2 id="🌷model2-MVC패턴-쇼핑몰만들기"><a href="#🌷model2-MVC패턴-쇼핑몰만들기" class="headerlink" title="🌷model2(MVC패턴) 쇼핑몰만들기"></a>🌷model2(MVC패턴) 쇼핑몰만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi/">Servlet : Servlet용어정리, model1과 model2(MVC구조) 개발방식 비교</a></li></ol><h3 id="쇼핑몰회원관리"><a href="#쇼핑몰회원관리" class="headerlink" title="쇼핑몰회원관리"></a>쇼핑몰회원관리</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi2/">Servlet회원관리1: 기본설정 및 가상주소생성</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi/">Servlet회원관리2: 회원가입</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi2/">Servlet회원관리3: 로그인</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi3/">Servlet회원관리4: 메인페이지와 로그아웃</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi/">Servlet회원관리5: 회원정보조회</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi2/">Servlet회원관리6: 회원탈퇴</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi/">Servlet회원관리7: 회원전체목록조회(관리자기능)</a></li></ol><h3 id="게시판"><a href="#게시판" class="headerlink" title="게시판"></a>게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/">Servlet게시판1: 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi/">Servlet게시판2: 게시판 글쓰기</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi2/">Servlet게시판3: 게시판 리스트·게시글전체목록·페이징처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi/">Servlet게시판4: 글 내용보기</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi2/">Servlet게시판5: 글 수정하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi/">Servlet게시판6: 글 삭제하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi2/">Servlet게시판7: 답글하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi3/">Servlet게시판8: 파일업로드·파일보기</a></li></ol><h3 id="관리자전용-상품목록과-등록게시판"><a href="#관리자전용-상품목록과-등록게시판" class="headerlink" title="관리자전용 상품목록과 등록게시판"></a>관리자전용 상품목록과 등록게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi4/">Servlet관리자전용상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi5/">Servlet관리자전용상품2 : 상품등록</a></li><li><a href="https://sowon-dev.github.io/2020/09/08/200908jspi/">Servlet관리자전용상품3 : 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi/">Servlet관리자전용상품4 : 상품수정·인기상품처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi2/">Servlet관리자전용상품5 : 상품삭제</a></li></ol><h3 id="일반유저용-상품목록"><a href="#일반유저용-상품목록" class="headerlink" title="일반유저용 상품목록"></a>일반유저용 상품목록</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi/">Servlet일반상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi2/">Servlet일반상품2 : 카테고리별 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi/">Servlet일반상품3 : 상품상세정보</a></li></ol><h3 id="장바구니"><a href="#장바구니" class="headerlink" title="장바구니"></a>장바구니</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi2/">Servlet장바구니1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi3basket/">Servlet장바구니2 : 장바구니에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi4/">Servlet장바구니3 : 장바구니리스트, 장바구니에서 상품삭제</a></li></ol><h3 id="구매하기"><a href="#구매하기" class="headerlink" title="구매하기"></a>구매하기</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/16/200916jspi/">Servlet구매하기1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/17/200917jspi/">Servlet구매하기2 : 구매하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi/">Servlet구매하기3 : 주문목록</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi2/">Servlet구매하기4 : 주문상세정보페이지</a></li></ol><h3 id="관리자용-주문리스트"><a href="#관리자용-주문리스트" class="headerlink" title="관리자용 주문리스트"></a>관리자용 주문리스트</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi/">Servlet관리자용주문목록1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-1/">Servlet관리자용주문목록2 : 고객주문목록</a></li><li>🌟<a href="https://sowon-dev.github.io/2020/09/23/200923jspi-3/">Servlet관리자용주문목록3 : 고객주문목록에서 주문 상태 및 운송장정보 변경</a></li><li><a href="https://sowon-dev.github.io/2020/09/24/200924jspi/">Servlet관리자용주문목록4 : 고객주문목록에서 삭제</a></li></ol><h2 id="🌷스프링프레임워크"><a href="#🌷스프링프레임워크" class="headerlink" title="🌷스프링프레임워크"></a>🌷스프링프레임워크</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/04/201005springi/">프레임워크란, Spring 특징과 기능, 컨테이너란</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007spring-1/">스프링(STS)설치 및 기본 설정</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/">STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006springi/">Spring 기본 동작순서, JSP와 SPRING의 차이점</a></li><li><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/">제어의 역행(IoC)과 의존성 주입(DI)</a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006springi-1/">회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007spring/">관점 지향(AOP, Aspect-Oriented Programming) 총정리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008spring/">스프링 MVC패턴 프로젝트, 주요 어노테이션(Annotation)</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012spring/">MAVEN REPOSITORY</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/jspList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Algorithm전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/algorithmList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/algorithmList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌊코드업기초&quot;&gt;&lt;a href=&quot;#🌊코드업기초&quot; class=&quot;headerlink&quot; title=&quot;🌊코드업기초&quot;&gt;&lt;/a&gt;🌊코드업기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-1/&quot;&gt;1011 : 문자 한 개 입력받아 그대로 출력하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al/&quot;&gt;1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-2/&quot;&gt;1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌊코드업기초"><a href="#🌊코드업기초" class="headerlink" title="🌊코드업기초"></a>🌊코드업기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-1/">1011 : 문자 한 개 입력받아 그대로 출력하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al/">1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-2/">1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006al/">1023 : 실수 1개 입력받아 부분별로 출력하기, split대신 StringTokenizer사용하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/">1034 : 8진 정수 1개 입력받아 10진수로 출력하기(설명), Scanner로 2진수, 8진수 16진수 받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008al-c1041/">1041 : 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012al-c1059/">1059 : 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1064/">1064 : 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1066/">1066 : 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/algorithmList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : Android] Android전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/androidList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/androidList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:43:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🍫안드로이드기초&quot;&gt;&lt;a href=&quot;#🍫안드로이드기초&quot; class=&quot;headerlink&quot; title=&quot;🍫안드로이드기초&quot;&gt;&lt;/a&gt;🍫안드로이드기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/09/200909and/&quot;&gt;안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/28/200928and/&quot;&gt;안드로이드 4대 컴포넌트&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🍫안드로이드기초"><a href="#🍫안드로이드기초" class="headerlink" title="🍫안드로이드기초"></a>🍫안드로이드기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200909and/">안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928and/">안드로이드 4대 컴포넌트</a><a id="more"></a></li></ol><h2 id="🍫화면구성"><a href="#🍫화면구성" class="headerlink" title="🍫화면구성"></a>🍫화면구성</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910and/">컴파운드버튼(체크박스,라디오버튼,스위치,토글버튼) 한눈에 비교하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and/">레이아웃종류 및 레이아웃 안에서 자주 사용되는 속성</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-1/">고급위젯: 아날로그시계,디지털시계,크로노미터,타임피커,데이트피커,캘린더뷰,자동완성텍스트뷰와 멀티자동완성텍스트뷰</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-2/">옵션메뉴, 컨텍스트메뉴, 토스트</a></li></ol><h2 id="🍫기능"><a href="#🍫기능" class="headerlink" title="🍫기능"></a>🍫기능</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/24/200924and/">안드로이드 파일처리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201007and/">이미지파일 넣기</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/androidList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : DB] DB전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/DBList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/DBList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌱리눅스와-SQL&quot;&gt;&lt;a href=&quot;#🌱리눅스와-SQL&quot; class=&quot;headerlink&quot; title=&quot;🌱리눅스와 SQL&quot;&gt;&lt;/a&gt;🌱리눅스와 SQL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200602dbi/&quot;&gt;간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/15/200616dbi/&quot;&gt;virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/18/200619dbi/&quot;&gt;CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌱리눅스와-SQL"><a href="#🌱리눅스와-SQL" class="headerlink" title="🌱리눅스와 SQL"></a>🌱리눅스와 SQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200602dbi/">간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200616dbi/">virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200619dbi/">CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi/">SQL DEVELOPER사용방법</a></li></ol><h2 id="🌱DB와-SQL개념"><a href="#🌱DB와-SQL개념" class="headerlink" title="🌱DB와 SQL개념"></a>🌱DB와 SQL개념</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200529dbi/">DB기초이론, DBMS</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200602dbi2/">데이터베이스기초활용</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200605dbi/">DDL vs DML vs DCL</a></li><li><a href="https://sowon-dev.github.io/2020/06/07/200608dbi/">제약조건의 컬럼레벨과 테이블레벨문법, 제약조건 5가지, 버퍼에 있는 자주 사용할 쿼리구문을 저장하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200610dbi/">select as from where, order by, 동일유저 동시접속 가능, 트랜잭션 commit과 rollback</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200717dbi/">트랜잭션(Transaction), 치환변수, save명령어, 리소스부족에러발생시</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200804dbi/">Data Dictionary</a></li></ol><h2 id="🌱Select-구문"><a href="#🌱Select-구문" class="headerlink" title="🌱Select 구문"></a>🌱Select 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200623dbi/">Select 구문을 사용한 데이터 검색, null VS 0 VS 공백, Distinct</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi/">테이블 전체목록조회, 테이블구조조회, WHERE(조건문)절</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi2/">Order by 정렬</a></li></ol><h2 id="🌱단일행함수"><a href="#🌱단일행함수" class="headerlink" title="🌱단일행함수"></a>🌱단일행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi/">단일행함수 : 문자함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi2/">단일행함수 : 숫자함수, 날짜함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi3/">단일행함수 : 변환함수, 일반함수</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200811dbi/">단일행함수 : 조건부 표현식</a></li></ol><h2 id="🌱여러행함수"><a href="#🌱여러행함수" class="headerlink" title="🌱여러행함수"></a>🌱여러행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi4/">여러행함수 : 그룹함수</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707dbi/">여러행함수 : Group by절, Having절</a></li></ol><h2 id="🌱중요-구문"><a href="#🌱중요-구문" class="headerlink" title="🌱중요 구문"></a>🌱중요 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/">JOIN</a></li><li><a href="https://sowon-dev.github.io/2020/07/13/200714dbi/">Subquery1: Subquery개념, 중첩Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/23/200824dbi/">Subquery2: Inlineview, Scalar Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery3: exists연산자, not exists연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery4: with절</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi3/">SQL 기억해야 할 쿼리</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200820dbi/">Top-N분석</a></li></ol><h2 id="🌱데이터조작어-DML-데이터정의어-DDL"><a href="#🌱데이터조작어-DML-데이터정의어-DDL" class="headerlink" title="🌱데이터조작어 (DML) / 데이터정의어 (DDL)"></a>🌱데이터조작어 (DML) / 데이터정의어 (DDL)</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/14/200714dbi2/">데이터조작어DML : insert/update/delete구문</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200721dbi/">데이터정의어DDL : table 생성 table 복사, varchar2와 varchar와 char비교</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200724dbi/">데이터정의어DDL : 테이블수정(컬럼수정, 제약조건수정, 컬럼명수정, 제약조건명수정), 테이블명변경, 테이블삭제, 테이블절단, truncate과 delete과 drop차이</a></li></ol><h2 id="🌱SQL의-OBJECT-종류"><a href="#🌱SQL의-OBJECT-종류" class="headerlink" title="🌱SQL의 OBJECT 종류"></a>🌱SQL의 OBJECT 종류</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200728dbi/">SQL의 OBJECT종류 : view</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi/">SQL의 OBJECT종류 : 시퀀스(Sequence)</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi2/">SQL의 OBJECT종류 : 인덱스(Index), 시노님(Synonym)</a></li></ol><h2 id="🌱DB구조"><a href="#🌱DB구조" class="headerlink" title="🌱DB구조"></a>🌱DB구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/25/200826dbi/">Oracle DB구조1 : Database</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200828dbi/">Oracle DB구조2 : Instance의 SGA메모리구조</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831dbi/">Oracle DB구조3 : Instance의 Background process</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200901dbi2/">Oracle DB구조4 : 구조 완벽정리, 상활별 오라클 DB 순서</a></li></ol><h2 id="🌱DB구현-및-관리"><a href="#🌱DB구현-및-관리" class="headerlink" title="🌱DB구현 및 관리"></a>🌱DB구현 및 관리</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200911dbi/">Oracle DB생성방법 2가지, Oracle DB Tool, Parameterfile 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/14/200914dbi/">오라클의 Database 켜고 끄기</a></li><li><a href="https://sowon-dev.github.io/2020/09/18/200918dbi/">오라클의 Datafile 관리하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/21/200921dbi/">DB유저관리 : user 생성, 권한부여</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi/">데이터충돌, DeadLock</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi2/">DB fail 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928dbi/">Controlfile다중화, Redoligfile다중화, 데이터베이스로그모드</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201006dbi/">데이터모델링</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/DBList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING] 주니어레벨의 스프링MVC 개발순서, redirect나forward로 페이지이동하기, JSON데이터처리하기</title>
      <link>https://sowon-dev.github.io/2020/10/12/201013spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201013spring-1/</guid>
      <pubDate>Mon, 12 Oct 2020 17:50:44 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;주니어레벨의-스프링MVC-개발순서&quot;&gt;&lt;a href=&quot;#주니어레벨의-스프링MVC-개발순서&quot; class=&quot;headerlink&quot; title=&quot;주니어레벨의 스프링MVC 개발순서&quot;&gt;&lt;/a&gt;주니어레벨의 스프링MVC 개발순서&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DB -&amp;gt; MyBatis -&amp;gt; DAO -&amp;gt; Service -&amp;gt; Controller -&amp;gt; View</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="주니어레벨의-스프링MVC-개발순서"><a href="#주니어레벨의-스프링MVC-개발순서" class="headerlink" title="주니어레벨의 스프링MVC 개발순서"></a>주니어레벨의 스프링MVC 개발순서</h2><ul><li>DB -&gt; MyBatis -&gt; DAO -&gt; Service -&gt; Controller -&gt; View<a id="more"></a></li></ul><p><br><br><br></p><h2 id="리턴타입-String일-때-리턴값을-redirect-또는-forward-줘서-페이지이동"><a href="#리턴타입-String일-때-리턴값을-redirect-또는-forward-줘서-페이지이동" class="headerlink" title="리턴타입 String일 때 리턴값을 redirect: 또는 forward:줘서 페이지이동"></a>리턴타입 String일 때 리턴값을 <code>redirect: 또는 forward:</code>줘서 페이지이동</h2><ul><li><code>redirect: 또는 forward:</code> 페이지이동 메서드에서 String 리턴시 주소 앞에 사용<ul><li>리턴타입이 일반 string일때랑 redirect: 또는 forward형식의 String일때 차이가 있다.</li><li><code>return string</code>은 jsp뷰페이지를 바로 가는 것</li><li><code>return redirect: 또는 forward:</code>은 jsp 뷰페이지를 찾는 것이 아니라 메서드를 호출하는 것</li><li>그리고 또 redirect와 forward도 차이가 있다<ul><li><code>return &quot;redirect:doF&quot;;</code> : 주소변경O, 페이지변경O</li><li><code>return &quot;forward:doF&quot;;</code> : 주소변경X, 페이지변경O</li></ul></li></ul></li></ul><ul><li>자바코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//로그정보 처리객체생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger  = LoggerFactory.getLogger(SampleController4<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 맵핑</span></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doE</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doE"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doE</span><span class="params">(Model model, RedirectAttributes rttr)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doE()호출"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//model.addAttribute("msg", "4567test");</span></span><br><span class="line">model.addAttribute(<span class="string">"1234test"</span>);<span class="comment">//매개변수명을 지정하지 않으면 데이터타입으로 전달됨 string</span></span><br><span class="line"><span class="comment">//model.addAttribute(132);//매개변수명을 지정하지 않으면 데이터타입으로 전달됨 integer</span></span><br><span class="line"><span class="comment">//model.addAttribute("msg", new ProductVO("moniter", 2000)); //redirect로 파라미터 전달안됨</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//rttr.addFlashAttribute("msg", "flash!"); //주소줄에 안보임, El표현식가능, jsp표현식불가능, 새로고침하면 사라짐(즉 1회성 데이터)</span></span><br><span class="line"><span class="comment">//rttr.addAttribute("msg", "add!"); //주소줄에 보임, El표현식가능, jsp표현식가능, 새로고침해도 그대로</span></span><br><span class="line"><span class="comment">//예를 들어 카운트를 올릴때 새로고침시 계속 조회수가 올라가는 것이 아니라 한번 올라가게끔 만들때 addFlashAttribute 사용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/doF"</span>; <span class="comment">//아래의 주소 호출</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doF</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doF"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doF</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doF()호출"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doF.jsp</code> 뷰페이지 코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">여기는 doF.jsp입니다.&lt;br&gt;</span><br><span class="line">&lt;h2&gt;키값이 있는 파라미터 값 가져오기(객체는 안됨)&lt;/h2&gt;</span><br><span class="line">메세지(키값 msg) : $&#123;msg &#125;&lt;br&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h2&gt;키값이 없는 int 파라미터 값 가져오기&lt;/h2&gt;</span><br><span class="line">메세지(integer) : $&#123;integer &#125; 키값이 아니라서 안됨&lt;br&gt;</span><br><span class="line">메세지(param.integer) : $&#123;param.integer &#125; 파람데이터영역에서 꺼내기때문에 가능&lt;br&gt;</span><br><span class="line">메세지(requestScope.integer) : $&#123;requestScope.integer &#125; 왜안될까? &lt;br&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h2&gt;키값이 없는 String 파라미터 값 가져오기&lt;/h2&gt;</span><br><span class="line">메세지(string) : $&#123;string &#125;  키값이 아니라서 안됨&lt;br&gt;</span><br><span class="line">메세지(param.string) : $&#123;param.string &#125;&lt;br&gt;</span><br><span class="line">메세지(requestScope.string) : $&#123;requestScope.string &#125; 왜안될까? &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Jackson-Databind-라이브러리-추가"><a href="#Jackson-Databind-라이브러리-추가" class="headerlink" title="Jackson Databind 라이브러리 추가"></a>Jackson Databind 라이브러리 추가</h2><ul><li><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.8.4">Jackson Databind » 2.8.4 버전</a>코드를 복사하여 프로젝트의 <code>po,.xml</code>에 붙여넣기</li><li>복붙시 꼭 dependencies 태그 안에 위치시켜야한다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201013spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]페이지이동하기, 파라미터가지고 페이지이동하기</title>
      <link>https://sowon-dev.github.io/2020/10/12/201013spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201013spring/</guid>
      <pubDate>Mon, 12 Oct 2020 17:07:11 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;특정-주소를-처리하는-메서드-2가지방식-페이지이동하기&quot;&gt;&lt;a href=&quot;#특정-주소를-처리하는-메서드-2가지방식-페이지이동하기&quot; class=&quot;headerlink&quot; title=&quot;특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)&quot;&gt;&lt;/a&gt;특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;리턴타입이 있는지 없는지에 따라 두가지 방식으로 나누어진다&lt;ul&gt;
&lt;li&gt;메서드 리턴타입이 void인 경우 [주소.jsp] 페이지 호출&lt;/li&gt;
&lt;li&gt;메소드 리턴타입이 String인 경우 [리턴되는_문자열.jsp] 페이지 호출</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="특정-주소를-처리하는-메서드-2가지방식-페이지이동하기"><a href="#특정-주소를-처리하는-메서드-2가지방식-페이지이동하기" class="headerlink" title="특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)"></a>특정 주소를 처리하는 메서드 2가지방식(페이지이동하기)</h2><ul><li>리턴타입이 있는지 없는지에 따라 두가지 방식으로 나누어진다<ul><li>메서드 리턴타입이 void인 경우 [주소.jsp] 페이지 호출</li><li>메소드 리턴타입이 String인 경우 [리턴되는_문자열.jsp] 페이지 호출<a id="more"></a></li></ul></li></ul><p><br><br><br></p><h3 id="return타입-없는-경우"><a href="#return타입-없는-경우" class="headerlink" title="return타입 없는 경우"></a>return타입 없는 경우</h3><ul><li>void 메서드를 사용하면 된다</li><li>입력하는 주소 : <code>http://localhost:8088/test/home</code></li><li>메서드 실행에 따라 호출되는 페이지 : <code>home.jsp</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8088/test/home</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"home"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doA 메서드 호출"</span>);</span><br><span class="line">logger.info(<span class="string">"Logger: doA()호출"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="return타입-있는-경우"><a href="#return타입-있는-경우" class="headerlink" title="return타입 있는 경우"></a>return타입 있는 경우</h3><ul><li>string, int, 객체 등등 알맞은 데이터타입을 적어주면 된다.</li><li>입력하는 주소 : <code>http://localhost:8088/test/doC</code></li><li>메서드에 따라 호출되는 페이지 : <code>abc.jsp</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController2</span> </span>&#123;</span><br><span class="line"><span class="comment">// 로그정보를 처리하는 객체 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleController2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doC</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doC"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doC</span><span class="params">()</span> </span>&#123; <span class="comment">//리턴타입 String인 경우</span></span><br><span class="line">logger.info(<span class="string">"doC 메서드 호출"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="파라미터가지고-페이지이동하기"><a href="#파라미터가지고-페이지이동하기" class="headerlink" title="파라미터가지고 페이지이동하기"></a>파라미터가지고 페이지이동하기</h2><ul><li>파라미터의 데이터타입에 따라 다양하게 전달 가능</li><li>파라미터 앞에 애노테이션과 키명을 적어주어야한다<ul><li><code>@ModelAttribute(&quot;키_이름&quot;)</code></li></ul></li></ul><p><br><br><br></p><h3 id="파라미터-타입이-String인-경우"><a href="#파라미터-타입이-String인-경우" class="headerlink" title="파라미터 타입이 String인 경우"></a>파라미터 타입이 String인 경우</h3><ul><li><a href="https://sowon-dev.github.io/2020/10/13/201013spring/">리턴타입이 String일때 리턴값 <code>redirect: 또는 forward:</code>로 페이지이동하기</a></li><li>입력하는 주소 : <code>http://localhost:8088/test/testParam?msg=&quot;hi&quot;</code></li><li>메서드에 따라 호출되는 페이지 : <code>doC.jsp</code></li><li>java코드<ul><li>파라미터를 return할때 함께 줄 수 없을까? 즉 return “doC?msg=Hi”;가 가능할까?</li><li>NOPE 안된다.</li><li>그 이유는 <code>doC?msg=hi.jsp</code>로 매핑이 되서 오류가 발생한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8088/test/testParam?msg="hi"</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"testParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doC1</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg, @<span class="title">ModelAttribute</span><span class="params">(<span class="string">"name"</span>)</span> String username) </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doC1 메서드 호출, 파라미터 메세지: "</span>+msg+<span class="string">", 유저이름: "</span>+username);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"doC"</span>;</span><br><span class="line"><span class="comment">// return "doC?msg=Hi";</span></span><br><span class="line"><span class="comment">// Q. 에러의 이유가 'doC?msg=hi.jsp'로 매핑이 되서 그런거 아닌가요? A. 맞음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doC.jsp</code> 뷰 페이지 코드<ul><li>표현식에는 el표현식방식과 jsp표현식방식이 있다.</li><li>두가지 표현방식 중 주로 EL표현식을 사용한다.</li><li>그 이유는 EL표현식은 데이터가 NULL일때 컴파일에러가 없이 빈 공백으로 표시되기때문에 안정성이 높아서.</li></ul></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;(el태그 사용)&lt;/strong&gt; 전달받은 메세지 파라미터는 $&#123;msg &#125; 입니다. 너의 이름은? $&#123;name &#125;&lt;br&gt;</span><br><span class="line">&lt;strong&gt;(jsp표현식 사용)&lt;/strong&gt; 전달받은 메세지 파라미터는 &lt;%=request.getParameter("msg") %&gt; 입니다. 너의 이름은? &lt;%=request.getParameter("name") %&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">(el태그 사용) 전달받은 메세지 파라미터는 hi 입니다. 너의 이름은?</span><br><span class="line">(jsp표현식 사용) 전달받은 메세지 파라미터는 hi 입니다. 너의 이름은? <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="파라미터-타입이-객체인-경우"><a href="#파라미터-타입이-객체인-경우" class="headerlink" title="파라미터 타입이 객체인 경우"></a>파라미터 타입이 객체인 경우</h3><ul><li><p>기존에는 request.setAttribute로 객체를 넘겼는데 스프링에서는 model객체(스프링mvc에서 제공해주는 객체)를 사용</p></li><li><p>model 객체는 객체를 저장해서 뷰페이지로 전달</p></li><li><p>model 객체 생성 방법 두가지</p><ul><li>첫번째 방법: 키와값 쌍으로 전달 <code>model.addAttribute(&quot;vo&quot;, vo);</code></li><li>두번째 방법: 키없이 객체만 전달 <code>model.addAttribute(vo);</code><ul><li>키없이 객체만 전달한 경우 받을때는 클래스 첫글자를 소문자 변경해서 el표현식으로 호출해야함.</li></ul></li></ul></li><li><p>공통코드 : <code>ProductVO.java</code>라는 객체생성</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 도메인 : 프로젝트에서 중요한 의미를 가지는 명사로 ex) 회원, 글, 상품, 주문 ... 등등</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//자바빈(DTO == VO)설계규약</span></span><br><span class="line"><span class="comment">//규칙1번 : public클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVO</span> </span>&#123;</span><br><span class="line"><span class="comment">//규칙2 : private로 멤버변수 생성</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="comment">//규칙4 : 생성자(생략가능 - 생략하면 디폴트생성자)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductVO</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductVO</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//규칙3 : getter setter메서드생성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. toString</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"제품정보 [name="</span> + name + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>동일한 페이지명으로 페이지이동시 자바코드<ul><li>입력한 주소 : <a href="http://localhost:8088/test/doD">http://localhost:8088/test/doD</a></li><li>메서드에 따라 호출되는 페이지 : <code>doD.jsp</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController3</span> </span>&#123;</span><br><span class="line"><span class="comment">// 페이지 이동시 객체 정보를 가지고 이동</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 로그정보 처리 객체</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleController3<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doD</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doD"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doD</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doD() 호출!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//상품객체생성</span></span><br><span class="line">ProductVO vo = <span class="keyword">new</span> ProductVO(<span class="string">"phone"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 방법 : 키와값 쌍으로 전달</span></span><br><span class="line">model.addAttribute(<span class="string">"vo"</span>, vo);</span><br><span class="line"><span class="comment">// 두번째 방법: 키없이 객체만 전달</span></span><br><span class="line">model.addAttribute(vo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doD.jsp</code> 뷰페이지 코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">전달받은 객체 호출&lt;br&gt;</span><br><span class="line">&lt;!-- toString()를 통해서 출력 --&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"vo"</span>) %&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">제품명 : $&#123;vo.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;vo.price &#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">제품명 : $&#123;productVO.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;productVO.price &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">전달받은 객체 호출</span><br><span class="line">제품정보 [name=phone, price=<span class="number">100.0</span>]</span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br></pre></td></tr></table></figure><ul><li>다른 페이지명으로 페이지이동시 자바코드<ul><li>입력한 주소 : <a href="http://localhost:8088/test/doD">http://localhost:8088/test/doD</a></li><li>메서드에 따라 호출되는 페이지 : <code>doDPage.jsp</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController3</span> </span>&#123;</span><br><span class="line"><span class="comment">// 페이지 이동시 객체 정보를 가지고 이동</span></span><br><span class="line"><span class="comment">// 로그정보 처리 객체</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleController3<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8088/test/doD</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doD"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doD</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doD() 호출!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//상품객체생성</span></span><br><span class="line">ProductVO vo = <span class="keyword">new</span> ProductVO(<span class="string">"phone"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 방법: 키와값 쌍으로 전달</span></span><br><span class="line">model.addAttribute(<span class="string">"vo"</span>, vo);</span><br><span class="line"><span class="comment">// 두번째 방법: 키없이 객체만 전달</span></span><br><span class="line">model.addAttribute(vo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"doDPage"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>doDPage.jsp</code> 뷰페이지 코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">전달받은 객체 호출(doDpage.jsp)&lt;br&gt;</span><br><span class="line">&lt;!-- toString()를 통해서 출력 --&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"vo"</span>) %&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">제품명 : $&#123;vo.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;vo.price &#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">제품명 : $&#123;productVO.name &#125; &lt;br&gt;</span><br><span class="line">가격 : $&#123;productVO.price &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출력값</span></span><br><span class="line">전달받은 객체 호출(doDpage.jsp)</span><br><span class="line">제품정보 [name=phone, price=<span class="number">100.0</span>]</span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br><span class="line">제품명 : phone</span><br><span class="line">가격 : <span class="number">100.0</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201013spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</title>
      <link>https://sowon-dev.github.io/2020/10/12/201012al-c1066/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201012al-c1066/</guid>
      <pubDate>Mon, 12 Oct 2020 04:08:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)&lt;/h2&gt;&lt;p&gt;세 정수 a, b, c가 입력되었을 때, 짝(even)/홀(odd)을 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명"><a href="#문제-1066-기초-조건-선택실행구조-정수-3개-입력받아-짝-홀-출력하기-설명" class="headerlink" title="문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)"></a>문제 1066 : [기초-조건/선택실행구조] 정수 3개 입력받아 짝/홀 출력하기(설명)</h2><p>세 정수 a, b, c가 입력되었을 때, 짝(even)/홀(odd)을 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>세 정수 a, b, c 가 공백을 두고 입력된다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;&#x3D; a, b, c &lt;&#x3D; +2147483647</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 8</span><br></pre></td></tr></table></figure><ul><li>출력예시</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">odd</span><br><span class="line">even</span><br><span class="line">even</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드1"><a href="#코드1" class="headerlink" title="코드1"></a>코드1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] nums = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(nums[i])%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"even"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"odd"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내가 제일 처음 생각한 코드이다.<br>최대한 반복을 줄이고싶어서 String 배열로 받아서 if문안에서 int로 변형했다.<br>좋은 코드가 있을까싶어 다른 코드들도 구글링했는데 더 좋은 코드를 찾았다.</p><p><br><br><br></p><h2 id="코드2"><a href="#코드2" class="headerlink" title="코드2"></a>코드2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">            arr[i]= sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(arr[i]%<span class="number">2</span> ==<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"even"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"odd"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>두 코드의 메모리사용과 시간, 코드길이를 비교해보았다</p><table><thead><tr><th align="center"></th><th align="center">코드1(String Array사용)</th><th align="center">코드2(int Array사용)</th></tr></thead><tbody><tr><td align="center">메모리</td><td align="center">14908</td><td align="center">14948</td></tr><tr><td align="center">시간</td><td align="center">112</td><td align="center">113</td></tr><tr><td align="center">코드길이</td><td align="center">590 B</td><td align="center">458 B</td></tr></tbody></table><p>공백으로 나누어야하니까 String Array만 써야하는 줄 알았는데 int Array도 가능했다.<br>코드길이도 더 짧다.<br>어떻게 nextInt()는 space를 받아들일까?</p><p><br><br><br></p><h3 id="Scanner-default-delimiter-스캐너-클래스-기본-구분자"><a href="#Scanner-default-delimiter-스캐너-클래스-기본-구분자" class="headerlink" title="Scanner default delimiter (스캐너 클래스 기본 구분자)"></a>Scanner default delimiter (스캐너 클래스 기본 구분자)</h3><p>엄청 열심히 검색해서 그 답을 알아냈다.<br>그 답은 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextInt(int)">nextInt()메서드</a>가 아닌 Scanner 클래스에 있었다.</p><blockquote><p>A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods.<br>출처 : <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html">https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html</a></p></blockquote><p>여기서 말하는 기본 구분자(default delimiter)는 화이트스페이스(whitespace)라고한다.</p><p><br><br><br></p><h3 id="whitespace-화이트-스페이스"><a href="#whitespace-화이트-스페이스" class="headerlink" title="whitespace (화이트 스페이스)"></a>whitespace (화이트 스페이스)</h3><p>그렇다면 화이트스페이스(whitespace)가 무엇일까?<br>화이트 스페이스란 말그대로 의미없는 공백, 탭, 행 등등을 의미한다.<br>예를 들어 소스코드 끝에 있는 공백이라든지 의미없는 새로운 행이 있다.</p><ul><li>화이트 스페이스의 종류<ul><li>space</li><li>tabs</li><li>new lines</li></ul></li></ul><blockquote><p>The Scanner class provides a versatile way of reading data of various types including Files, InputStreams and simple String objects. The input data must be delimited by some character. By default the delimiters are white space (space, tabs, and new lines). The class provides methods for changing the delimiter.<br>출처 : <a href="http://csc.columbusstate.edu/woolbright/java/scanner.html">http://csc.columbusstate.edu/woolbright/java/scanner.html</a></p></blockquote><p><a href="https://stackoverflow.com/questions/11863503/whitespaces-in-java">자바에서는 whitespace인지 아닌지 구분하는 isWhitespace()메서드</a>가 있다.</p><ul><li><a href="https://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)">https://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201012al-c1066/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</title>
      <link>https://sowon-dev.github.io/2020/10/12/201012al-c1064/</link>
      <guid>https://sowon-dev.github.io/2020/10/12/201012al-c1064/</guid>
      <pubDate>Mon, 12 Oct 2020 03:50:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)&lt;/h2&gt;&lt;p&gt;입력된 세 정수 a, b, c 중 가장 작은 값을 출력하는 프로그램을 작성해보자.&lt;br&gt;단, 조건문을 사용하지 않고 3항 연산자 ? 를 사용한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명"><a href="#문제-1064-기초-삼항연산-정수-3개-입력받아-가장-작은-수-출력하기-설명" class="headerlink" title="문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)"></a>문제 1064 : [기초-삼항연산] 정수 3개 입력받아 가장 작은 수 출력하기(설명)</h2><p>입력된 세 정수 a, b, c 중 가장 작은 값을 출력하는 프로그램을 작성해보자.<br>단, 조건문을 사용하지 않고 3항 연산자 ? 를 사용한다.</p><a id="more"></a><ul><li>입력예시<br>3개의 정수가 공백으로 구분되어 입력된다.</li><li>2147483648 ~ +2147483648</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 -1 5</span><br></pre></td></tr></table></figure><ul><li>출력예시<br>가장 작은 값을 출력한다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><p>삼항연산은 쉽지만 헷갈리기때문에 정신을 똑바로 차리고 참과 거짓을 콜론(:)으로 가려내야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] nums = sc.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = Integer.parseInt(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> b = Integer.parseInt(nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> c = Integer.parseInt(nums[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"%d"</span>, a&gt;b? b&gt;c? c:b : a&gt;c? c:a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/12/201012al-c1064/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</title>
      <link>https://sowon-dev.github.io/2020/10/11/201012al-c1059/</link>
      <guid>https://sowon-dev.github.io/2020/10/11/201012al-c1059/</guid>
      <pubDate>Sun, 11 Oct 2020 23:10:50 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)&lt;/h2&gt;&lt;p&gt;입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.&lt;br&gt;비트단위(bitwise)연산자 ~ 를 붙이면 된다.(~ : tilde, 틸드라고 읽는다.)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명"><a href="#문제-1059-기초-비트단위논리연산-비트단위로-NOT-하여-출력하기-설명" class="headerlink" title="문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)"></a>문제 1059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기(설명)</h2><p>입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.<br>비트단위(bitwise)연산자 ~ 를 붙이면 된다.(~ : tilde, 틸드라고 읽는다.)</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">** 비트단위(bitwise) 연산자는,</span><br><span class="line">~(bitwise not), &amp;(bitwise and), |(bitwise or), ^(bitwise xor),</span><br><span class="line">&lt;&lt;(bitwise left shift), &gt;&gt;(bitwise right shift)</span><br><span class="line">가 있다.</span><br><span class="line"></span><br><span class="line">예를 들어 1이 입력되었을 때 저장되는 1을 32비트 2진수로 표현하면</span><br><span class="line">        00000000 00000000 00000000 00000001 이고,</span><br><span class="line">~1은 11111111 11111111 11111111 11111110 가 되는데 이는 -2를 의미한다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">예시</span><br><span class="line">int a=1;</span><br><span class="line">printf("%d", ~a); //-2가 출력된다.</span><br></pre></td></tr></table></figure><ul><li>입력예시<br>정수 1개가 입력된다. (-2147483648 ~ +2147483647)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>출력예시<br>비트 단위로 <code>1 -&gt; 0</code>, <code>0 -&gt; 1</code>로 바꾼 후 그 값을 10진수로 출력한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        System.out.println(~a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>괜히 어렵게 생각했다. 2진수를 만들어야한다고 생각해서 사용자로부터 String을 받아서 2진수로 변경 후 비트연산자 적용하여 10진수로 출력하려고 했는데 잘 되지않았다.</p><p>앞으로 2진수로 받아야한다하면 그냥 int로 받아야겠다!</p><ul><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/#%EB%B0%B0%EC%9A%B4-%EC%A7%80%EC%8B%9D">2진수 처리 비교- 2진수, 8진수 16진수를 Scanner로 받으려면 String 데이터타입으로 지정해야한다.</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/11/201012al-c1059/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]MAVEN REPOSITORY</title>
      <link>https://sowon-dev.github.io/2020/10/11/201012spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/11/201012spring/</guid>
      <pubDate>Sun, 11 Oct 2020 20:15:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Maven-메이븐&quot;&gt;&lt;a href=&quot;#Maven-메이븐&quot; class=&quot;headerlink&quot; title=&quot;Maven(메이븐)&quot;&gt;&lt;/a&gt;Maven(메이븐)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;빌드도구 중의 하나&lt;/li&gt;
&lt;li&gt;필요한 라이브러리 코드들을 아래 공식 메이븐레파지토리에서 복사한 뒤 &lt;code&gt;pom.xml&lt;/code&gt;에 붙여넣어서 사용 및 관리</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Maven-메이븐"><a href="#Maven-메이븐" class="headerlink" title="Maven(메이븐)"></a>Maven(메이븐)</h2><ul><li>빌드도구 중의 하나</li><li>필요한 라이브러리 코드들을 아래 공식 메이븐레파지토리에서 복사한 뒤 <code>pom.xml</code>에 붙여넣어서 사용 및 관리<a id="more"></a></li><li><a href="https://mvnrepository.com/">메이븐 공식 레파지토리(MAVEN REPOSITORY) 사이트</a>에 접속한 뒤 검색해서 원하는 것을 클릭한 후 코드를 복사해서 <code>pom.xml</code>의 test주석부분의 <code>&lt;dependencies&gt;</code>태그 안에 붙여넣기하면 된다<ul><li>검색한 뒤 어떤 버전을 쓸지 모르겠다면? Usages가 가장 많은 것을 받으면 된다.</li><li>라이브러리 에러 해결방법 두 가지<ul><li>프로젝트 우클릭 &gt; Maven &gt; project update (해당 파일 동기화)</li><li>C:\Users\ITWILL.m2\repository 폴더에 저장 되고 프로젝트 (강제로 삭제후 STS 재실행) </li></ul></li></ul></li></ul><p><br><br><br></p><h2 id="My-i-Batis란"><a href="#My-i-Batis란" class="headerlink" title="My(i)Batis란"></a>My(i)Batis란</h2><ul><li>SQL MAPPER 라이브러리</li><li>스프링 프레임워크와 같이 활용하여 효율적인 SQL 처리</li><li>반복되는 try~catch 구문, pstmt,rs 객체를 대신 처리<ul><li>코드양이 줄어드는 장점</li></ul></li><li>XML/애노테이션 형태로 SQL구문 사용가능<ul><li>하지만 보통 XML로 쿼리구문작성한다.</li></ul></li><li>스프링과 자동으로 연동되어 처리되는 라이브러리를 제공한다.</li><li>장점 : 동적 SQL문 사용가능<ul><li>동적 SQL구문이란 SQL구문안에 반복문과 조건문 사용가능한 형태</li></ul></li></ul><p><br><br><br></p><h2 id="MyBatis-설치"><a href="#MyBatis-설치" class="headerlink" title="MyBatis 설치"></a>MyBatis 설치</h2><p>메이븐 레포지토리에서 아래와 같이 4개의 라이브러리 코드를 복붙한다.</p><ul><li><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis/3.4.1">메이븐 레포지토리에서 mybatis</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기</li><li><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis-spring/1.3.0">메이븐 레포지토리에서 mybatis-spring</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 마이바티스를 연결하는 라이브러리</li></ul></li><li><a href="https://mvnrepository.com/artifact/org.springframework/spring-jdbc/5.2.9.RELEASE">메이븐 레포지토리에서 Spring-JDBC</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 JDBC를 연결하는 라이브러리 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//위의 코드 두 개를 버전 수정</span></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.2.9.RELEASE">메이븐 레포지토리에서 Spring-test</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 마이바티스의 연결을 확인하는 라이브러리 (Junit의 역할)</li></ul></li></ul><p><br><br><br></p><h2 id="MyBatis로-DB연결"><a href="#MyBatis로-DB연결" class="headerlink" title="MyBatis로 DB연결"></a>MyBatis로 DB연결</h2><p>위의 4가지 라이브러리를 설치 후 <code>root-context.xml</code>에 속성을 처리해준다.</p><ul><li>아래 사진처럼 <code>root-context.xml</code>의 Namespaces속성에 위에서 추가한 라이브러리들을 tick한다.</li></ul><p><img src="/img/201008rootContext.PNG" alt=""></p><ul><li>이제 <code>root-context.xml</code>에 DB연결객체를 생성하여 DB를 연결할 수 있다.</li><li>SqlSessionFactory 객체 : Connection을 생성하고 사용하는 객체 + MyBatis설정까지 가능한 객체<ul><li>SqlSessionFactoryBean 클래스를 사용해야함</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mybatis-spring</span>=<span class="string">"http://mybatis.org/schema/mybatis-spring"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Root Context: defines shared resources visible to all other web components --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataSource 정보를 가지고 있는 DriverManagerDataSource 객체를 생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/springdb?useSSL=false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory 객체 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 위에서 생성된 객체를 주입하기 위해서는 value가 아니라 ref를 통해서 주입해야한다 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/Mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/11/201012spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008al-c1041/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008al-c1041/</guid>
      <pubDate>Wed, 07 Oct 2020 18:17:16 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)&lt;/h2&gt;&lt;p&gt;영문자 1개를 입력받아 그 다음 문자를 출력해보자.&lt;br&gt;영문자 ‘A’의 다음 문자는 ‘B’이고, 영문자 ‘0’의 다음 문자는 ‘1’이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명"><a href="#문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명" class="headerlink" title="문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)"></a>문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)</h2><p>영문자 1개를 입력받아 그 다음 문자를 출력해보자.<br>영문자 ‘A’의 다음 문자는 ‘B’이고, 영문자 ‘0’의 다음 문자는 ‘1’이다.</p><a id="more"></a><p>참고<br>숫자는 수를 표현하는 문자로서 ‘0’ 은 문자 그 자체를 의미하고, 0은 값을 의미한다.</p><p>힌트<br>아스키문자표에서 ‘A’는 10진수 65로 저장되고 ‘B’는 10진수 66으로 저장된다.<br>따라서 문자도 값으로 덧셈을 할 수 있다.</p><ul><li>입력예시<br>영문자 1개가 입력된다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><ul><li>출력예시 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="첫번째-코드"><a href="#첫번째-코드" class="headerlink" title="첫번째 코드"></a>첫번째 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String -&gt; char</span></span><br><span class="line"><span class="keyword">char</span> c = s.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//char+1</span></span><br><span class="line"><span class="keyword">int</span> i = c+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char로 출력</span></span><br><span class="line">System.out.printf(<span class="string">"%s"</span>, (<span class="keyword">char</span>)i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="두번째-코드"><a href="#두번째-코드" class="headerlink" title="두번째 코드"></a>두번째 코드</h2><p>위의 코드보다 더 간결하게 나타낼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">char</span> a = sc.nextLine().charAt(<span class="number">0</span>);</span><br><span class="line">        System.out.printf(<span class="string">"%c"</span>, a+<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>꼭 기억하자</p><ul><li>char를 Scanner로 받을땐 <code>sc.nextLine().charAt(0);</code>로 받으면 String이 아닌 Char형태로 바로 받을 수 있다.</li><li>char를 printf로 출력할때 <code>&quot;%s&quot;</code>가 아니라 <code>&quot;%c&quot;</code>로 출력하면 된다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008al-c1041/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/</guid>
      <pubDate>Wed, 07 Oct 2020 17:47:32 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;STS-단축키-추가하기&quot;&gt;&lt;a href=&quot;#STS-단축키-추가하기&quot; class=&quot;headerlink&quot; title=&quot;STS 단축키 추가하기&quot;&gt;&lt;/a&gt;STS 단축키 추가하기&lt;/h2&gt;&lt;p&gt;Spring Tool Suite 4(STS)는 이클립스환경이다. 이클립스와 동일하게 단축키도 이용가능한 줄 알았다.&lt;br&gt;&lt;code&gt;sout&lt;/code&gt; + Ctrl + Space를 통해서 &lt;code&gt;System.out.println()&lt;/code&gt;을 이용하려고 했는데 단축키가 적용되지않았다.&lt;br&gt;&lt;code&gt;sysout&lt;/code&gt; 매번 입력하기는 너&amp;#126;&amp;#126;&amp;#126;&amp;#126;무 귀찮기때문에 구글링하여 직접 단축키를 추가해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="STS-단축키-추가하기"><a href="#STS-단축키-추가하기" class="headerlink" title="STS 단축키 추가하기"></a>STS 단축키 추가하기</h2><p>Spring Tool Suite 4(STS)는 이클립스환경이다. 이클립스와 동일하게 단축키도 이용가능한 줄 알았다.<br><code>sout</code> + Ctrl + Space를 통해서 <code>System.out.println()</code>을 이용하려고 했는데 단축키가 적용되지않았다.<br><code>sysout</code> 매번 입력하기는 너&#126;&#126;&#126;&#126;무 귀찮기때문에 구글링하여 직접 단축키를 추가해보았다.</p><a id="more"></a><p>이클립스도 STS와 별반 다르지않게 단축키를 추가할 수 있다.</p><p><img src="/img/201008stsAddShortcuts.PNG" alt=""></p><p><br><br><br></p><h2 id="1-Window-gt-Preferences-클릭-gt-Templates검색"><a href="#1-Window-gt-Preferences-클릭-gt-Templates검색" class="headerlink" title="1. Window &gt; Preferences 클릭 &gt; Templates검색"></a>1. Window &gt; Preferences 클릭 &gt; Templates검색</h2><h2 id="2-Java-Editor하위의-Templates-클릭-사진-속-1번-참조"><a href="#2-Java-Editor하위의-Templates-클릭-사진-속-1번-참조" class="headerlink" title="2. Java-Editor하위의 Templates 클릭(사진 속 1번 참조)"></a>2. Java-Editor하위의 Templates 클릭(사진 속 1번 참조)</h2><ul><li>여기서 내장되어있는 단축키를 확인할 수 있다.</li><li>기존 단축키 수정도 가능하고 새로운 단축키 추가도 가능하다</li></ul><h2 id="3-New버튼클릭-사진-속-2번-참조"><a href="#3-New버튼클릭-사진-속-2번-참조" class="headerlink" title="3. New버튼클릭(사진 속 2번 참조)"></a>3. New버튼클릭(사진 속 2번 참조)</h2><h2 id="4-Edit-Template에-단축키-추가-사진-속-3번-참조"><a href="#4-Edit-Template에-단축키-추가-사진-속-3번-참조" class="headerlink" title="4. Edit Template에 단축키 추가(사진 속 3번 참조)"></a>4. Edit Template에 단축키 추가(사진 속 3번 참조)</h2><ul><li>Name : 원하는 단축키</li><li>Context : Java statements 설정</li><li>Description : 단축키 설명 입력</li><li>Pattern : 단축키 입력시 원하는 동작 추가</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pattern예시</span></span><br><span class="line">System.out.println($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br></pre></td></tr></table></figure><p>나는 두가지를 단축키로 추가하였다.</p><ul><li><code>System.out.println()</code>를 <code>sout</code>으로 단축키 추가 지정</li><li><code>System.out.printf()</code>를 <code>souf</code>로 단축키 추가 지정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//`System.out.println()`를 `sout`으로 단축키 추가 지정시 Pattern예시</span></span><br><span class="line">System.out.println($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//`System.out.printf()`를 `souf`로 단축키 추가 지정시 Pattern예시</span></span><br><span class="line">System.out.printf($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br></pre></td></tr></table></figure><h2 id="5-OK클릭-gt-Apply-and-Close-클릭-사진-속-4번-참조"><a href="#5-OK클릭-gt-Apply-and-Close-클릭-사진-속-4번-참조" class="headerlink" title="5. OK클릭 &gt; Apply and Close 클릭(사진 속 4번 참조)"></a>5. OK클릭 &gt; Apply and Close 클릭(사진 속 4번 참조)</h2><ul><li>단축키가 잘 되는 지 확인한다.</li><li>완-벽!</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링 MVC프로젝트, 주요 어노테이션(Annotation)</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008spring/</guid>
      <pubDate>Wed, 07 Oct 2020 16:14:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Spring-MVC-프로젝트-생성하는-두가지-방법&quot;&gt;&lt;a href=&quot;#Spring-MVC-프로젝트-생성하는-두가지-방법&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC 프로젝트 생성하는 두가지 방법&quot;&gt;&lt;/a&gt;Spring MVC 프로젝트 생성하는 두가지 방법&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Spring Legacy Project&lt;ul&gt;
&lt;li&gt;WAS-tomcat 경험과 model2 경험 필요&lt;/li&gt;
&lt;li&gt;상대적으로 설정하는 것이 어렵다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Spring-MVC-프로젝트-생성하는-두가지-방법"><a href="#Spring-MVC-프로젝트-생성하는-두가지-방법" class="headerlink" title="Spring MVC 프로젝트 생성하는 두가지 방법"></a>Spring MVC 프로젝트 생성하는 두가지 방법</h2><ol><li>Spring Legacy Project<ul><li>WAS-tomcat 경험과 model2 경험 필요</li><li>상대적으로 설정하는 것이 어렵다.<a id="more"></a></li><li>실무에서 기존 프로젝트를 이해하기 쉽다 (실무에서 주로 사용하기때문에)</li><li>모든 버전의 스프링을 사용가능</li><li>단점 : 리소스가 많이 필요하다.</li><li>Create a project &gt; Spring Legacy Project &gt; Spring MVC project 클릭하여 생성</li></ul></li><li>Spring Starter Project(Spring Boot)<ul><li>최대한 간결하게 실행, 배포하기 위한 방법</li><li>WAS없이 실행가능</li><li>최근 유행 &gt; 빠르게 처리가능하기에 간단한 테스트용으로 자주 사용</li><li>단점 : jsp뷰 별도의 설정 필요</li></ul></li></ol><p><br><br><br></p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><ul><li><code>*.me</code> 주소를 직접 처리해서 사용하는 개발방법</li></ul><table><thead><tr><th align="center">Spring MVC</th><th align="center">특징</th></tr></thead><tbody><tr><td align="center">M odel</td><td align="center">데이터 처리(DB)</td></tr><tr><td align="center">V iew</td><td align="center">화면 처리(jsp)</td></tr><tr><td align="center">C ontroller</td><td align="center">뷰와 모델을 연결</td></tr></tbody></table><p><br><br><br></p><h3 id="MVC패턴을-사용하는-이유-두가지"><a href="#MVC패턴을-사용하는-이유-두가지" class="headerlink" title="MVC패턴을 사용하는 이유 두가지"></a>MVC패턴을 사용하는 이유 두가지</h3><ol><li>개발자,디자이너의 영역을 분리 </li><li>각각의 주소(URI)통한 페이지 제어하기 때문에 유지보수 쉽다.</li></ol><p><br><br><br></p><h3 id="스프링-MVC프로젝트안-src-폴더하위의-각-파일이-가진-의미"><a href="#스프링-MVC프로젝트안-src-폴더하위의-각-파일이-가진-의미" class="headerlink" title="스프링 MVC프로젝트안 src 폴더하위의 각 파일이 가진 의미"></a>스프링 MVC프로젝트안 src 폴더하위의 각 파일이 가진 의미</h3><ul><li><code>servlet-context.xml</code> : 스프링 프로젝트에서 웹과 관련된 모든 속성을 처리</li><li><code>root-context.xml</code> : 스프링 프로젝트에서 웹을 제외한 모든 속성을 처리</li></ul><p><br><br><br>    </p><h3 id="FrontController패턴"><a href="#FrontController패턴" class="headerlink" title="FrontController패턴"></a>FrontController패턴</h3><p><img src="https://nesoy.github.io/assets/posts/20170217/2.PNG" alt="https://nesoy.github.io/articles/2017-02/Front-Controller"></p><ul><li>기존 패턴(Page Controller)보다 더 강제적으로 페이지제어를 할 수 있게 됨</li><li>기존 패턴(컨트롤러 하나가 전체 로직을 제어) –위임 사용–&gt; FrontController(일부분만 제어하는 컨트롤러 생성)</li><li>스프링MVC패턴에서 컨트롤러의 역할<ol><li>페이지 요청에 따라 파라미터 처리(DTO객체, VI객체)</li><li>애노테이션을 사용한 처리</li><li>로직이 집중되게끔 해주는 역할</li><li>테스트 동작의 편의성</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------   </span><br><span class="line">주소요청 -&gt; FC  <span class="tag">&lt;<span class="name">-</span>&gt;</span>  C  <span class="tag">&lt;<span class="name">-</span>&gt;</span> Service <span class="tag">&lt;<span class="name">-</span>&gt;</span> DAO <span class="tag">&lt;<span class="name">-</span>&gt;</span>MyBatis <span class="tag">&lt;<span class="name">-</span>&gt;</span> MySQL</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">V</span><br><span class="line">----------------------------------------------------------------</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Spring MVC 각 작업분류</th><th align="left">작업</th></tr></thead><tbody><tr><td align="center">스프링MVC가 처리해주는 작업</td><td align="left">URI를 분석해서 알맞는 Controller 찾기</td></tr><tr><td align="center"></td><td align="left">Controller에 필요한 메서드 호출</td></tr><tr><td align="center"></td><td align="left">Controller의 결과 데이터를 VIEW로 전달</td></tr><tr><td align="center"></td><td align="left">적절한 VIEW 페이지를 찾아서 연결</td></tr><tr><td align="center">개발자가 처리해야하는 작업</td><td align="left">특정 URI에 동작하는 Controller를 설계</td></tr><tr><td align="center"></td><td align="left">서비스 객체 생성 (약한결합)</td></tr><tr><td align="center"></td><td align="left">DAO 객체 생성 (약한결합)</td></tr><tr><td align="center"></td><td align="left">Controller 내부에 원하는 동작을 메서드로 설계</td></tr><tr><td align="center"></td><td align="left">VIEW에서 전달받은 데이터 출력</td></tr></tbody></table><p><br><br><br></p><h2 id="스프링-웹-프로젝트"><a href="#스프링-웹-프로젝트" class="headerlink" title="스프링 웹 프로젝트"></a>스프링 웹 프로젝트</h2><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RahUjo1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uqvr69zi0mlvh2eh8459.jpg" alt="https://dev.to/urunov/truly-there-is-no-difference-in-implementation-integrating-spring-with-jersey-and-integrating-jersey-with-spring-m2k"></p><ul><li>Presentation Layer : UI담당하는 계층, 웹,모바일 구분<ul><li>view-jsp 페이지, html/css/js 페이지, Controller 페이지 처리</li></ul></li><li>Business Layer : 서비스 계층, 사용자 요구사항을 바탕으로 구현하는 계층(기능적 구현)<ul><li>컨트롤러와 DB 직접 연결을 방지하는 역할</li></ul></li><li>Data Access Layer(=Persistence Layer) : 데이터처리 계층, DB관련 처리<ul><li>DAO객체 처리</li><li><a href="https://sowon-dev.github.io/2020/10/12/201012spring/">My(i)Batis 호출(마이바티스가 아래의 DB에 접근함)</a></li></ul></li><li>Data Base</li></ul><p><br><br><br>    </p><h2 id="주요-애노테이션-Annotation"><a href="#주요-애노테이션-Annotation" class="headerlink" title="주요 애노테이션(Annotation)"></a>주요 애노테이션(Annotation)</h2><p><img src="https://blogfiles.pstatic.net/MjAxNzA0MjhfOTYg/MDAxNDkzMzc3NzM2NzEz.9-2zHEEBRqwcidCNJQEfTgHituz29SKhWzsxvuEy6QAg.Wf5cnIDUQ8mzjNq74WsUhHBEeAgsCQU1CUQLmWnHt1wg.JPEG.wwwkang8/faef.jpg" alt="https://postfiles.pstatic.net/MjAxNzA0MjhfOTYg/MDAxNDkzMzc3NzM2NzEz.9-2zHEEBRqwcidCNJQEfTgHituz29SKhWzsxvuEy6QAg.Wf5cnIDUQ8mzjNq74WsUhHBEeAgsCQU1CUQLmWnHt1wg.JPEG.wwwkang8/faef.jpg?type=w773"></p><table><thead><tr><th align="left">주요 애너테이션</th><th align="left">특징</th></tr></thead><tbody><tr><td align="left">@Controller</td><td align="left">스프링 MVC 컨트롤러 객체의미 (클래스)</td></tr><tr><td align="left">@RequestMapping</td><td align="left">특정 URI에 매칭되는 클래스,메서드처리 (클래스,메서드)</td></tr><tr><td align="left">@RequestParam</td><td align="left">요청정보 중에서 파라미터값을 찾을때사용(파라미터)</td></tr><tr><td align="left">@ModelAttribute</td><td align="left">자동으로 해당 객체를 뷰까지 전달 (메서드,파라미터)</td></tr><tr><td align="left">@SessionAttribute</td><td align="left">세션객체 안에서 정보를 유지 (클래스)</td></tr><tr><td align="left">@Repository</td><td align="left">DAO 객체 (클래스)</td></tr><tr><td align="left">@Service</td><td align="left">서비스 객체(클래스)</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링(STS)설치 및 기본 설정</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007spring-1/</guid>
      <pubDate>Tue, 06 Oct 2020 21:56:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;스프링-설치&quot;&gt;&lt;a href=&quot;#스프링-설치&quot; class=&quot;headerlink&quot; title=&quot;스프링 설치&quot;&gt;&lt;/a&gt;스프링 설치&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/tools&quot;&gt;스프링 공식 사이트&lt;/a&gt;에서 project탭 클릭 &amp;gt; Spring Tool 4 클릭</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="스프링-설치"><a href="#스프링-설치" class="headerlink" title="스프링 설치"></a>스프링 설치</h2><ol><li><a href="https://spring.io/tools">스프링 공식 사이트</a>에서 project탭 클릭 &gt; Spring Tool 4 클릭<a id="more"></a><img src="/img/201007spring.PNG" alt=""></li><li>스프링설치후 exe파일을 실행</li><li>workspace생성 후 Lanch</li><li>Help &gt; Marketplace &gt; sts 검색 후 Spring Tools 3 Add-On for Spring Tools 4를 설치한다<br><img src="/img/201007spring2.PNG" alt=""></li><li>restart하고 나면 Create a project &gt; Spring Legacy Project &gt; Spring MVC project 클릭</li><li>project name 작성하고 next클릭 &gt; the top-level pacakge 을 지정<ul><li>보통 회사도메인주소 뒤부터 작성 ex)com.test</li></ul></li><li>설치와 프로젝트 생성까지 끝!</li></ol><p><br><br><br></p><h2 id="기본설정"><a href="#기본설정" class="headerlink" title="기본설정"></a>기본설정</h2><p>Preferences에서 아래 내용을 설정해준다</p><ol><li>General show heap status 틱하기</li><li>General &gt; Appearance &gt; Colors and Fonts &gt; basic &gt;Text Font 더블클릭 &gt; 폰트크기지정 </li><li>General &gt; Web Browser &gt; Use external web browser 틱 &gt; chrome 틱하기</li><li>Web의 CSS Files, HTML Files, JSP Files을 각각 Encoding UTF-8로 설정 </li></ol><p><br><br><br></p><h2 id="Mybatis-설치"><a href="#Mybatis-설치" class="headerlink" title="Mybatis 설치"></a>Mybatis 설치</h2><ul><li><a href="https://sowon-dev.github.io/2020/10/08/201008spring/#MyBatis-설치">스프링 MVC패턴 프로젝트, MAVEN REPOSITORY</a> 참고</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]관점 지향(AOP, Aspect-Oriented Programming) 총정리</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007spring/</guid>
      <pubDate>Tue, 06 Oct 2020 19:59:21 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;관점-지향-AOP-Aspect-Oriented-Programming&quot;&gt;&lt;a href=&quot;#관점-지향-AOP-Aspect-Oriented-Programming&quot; class=&quot;headerlink&quot; title=&quot;관점 지향 (AOP, Aspect-Oriented Programming)&quot;&gt;&lt;/a&gt;관점 지향 (AOP, Aspect-Oriented Programming)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;메서드나 객체 안에 주기능과 보조기능으로 분리한 후 선택적으로 적용해서 사용하는 방법&lt;/li&gt;
&lt;li&gt;전체 코드에 흩어져있는 보조 기능들을 한 곳에 모아서 처리가능하다&lt;/li&gt;
&lt;li&gt;필요시(=주기능이 사용될때마다) 선택적으로 보조기능을 사용할 수 있다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="관점-지향-AOP-Aspect-Oriented-Programming"><a href="#관점-지향-AOP-Aspect-Oriented-Programming" class="headerlink" title="관점 지향 (AOP, Aspect-Oriented Programming)"></a>관점 지향 (AOP, Aspect-Oriented Programming)</h2><ul><li>메서드나 객체 안에 주기능과 보조기능으로 분리한 후 선택적으로 적용해서 사용하는 방법</li><li>전체 코드에 흩어져있는 보조 기능들을 한 곳에 모아서 처리가능하다</li><li>필요시(=주기능이 사용될때마다) 선택적으로 보조기능을 사용할 수 있다.<a id="more"></a></li><li>예시 : 쇼핑몰개발자는 쇼핑몰 정보를 처리만 하고 보안처리는 spring 프레임워크가 하는 것</li><li>장점 : 코드가 단순해지면서 가독성 향상, 중복된 코드 제거.</li><li>사용처: 로깅, 보안, 트랜젝션처리시 사용</li></ul><p><br><br><br></p><h2 id="AOP용어"><a href="#AOP용어" class="headerlink" title="AOP용어"></a>AOP용어</h2><table><thead><tr><th align="center">AOP용어</th><th align="left">설명</th><th align="left">특징</th></tr></thead><tbody><tr><td align="center">Target</td><td align="left">Advice가 적용되는 클래스/메서드</td><td align="left">-</td></tr><tr><td align="center">Advice</td><td align="left">Aspect의 실체, 구현해놓은 클래스</td><td align="left">메서드호출기준으로 여러 지점에서 호출 가능</td></tr><tr><td align="center">Pointcut</td><td align="left">Jointpoint의 부분으로 실제로 Advice가 적용된 대상, JointPoint의 상세한 스펙을 정의한 것</td><td align="left">패키지이름/클래스이름/메서드이름을 정규식으로 지정 후 처리함</td></tr><tr><td align="center">Jointpoint</td><td align="left">Advice가 적용될 위치, 끼어들 수 있는 지점</td><td align="left">스프링에서는 method 결합점만 제공</td></tr><tr><td align="center">Aspect</td><td align="left">공통기능, 구현하고자 하는 보조 기능</td><td align="left">-</td></tr><tr><td align="center">Weaving(위빙)</td><td align="left">Advice를 핵심기능에 적용하는 행위</td><td align="left">-</td></tr></tbody></table><p><br><br><br></p><h2 id="스프링API를-활용한-AOP구현방법"><a href="#스프링API를-활용한-AOP구현방법" class="headerlink" title="스프링API를 활용한 AOP구현방법"></a>스프링API를 활용한 AOP구현방법</h2><ol><li>Target 클래스 지정</li><li>Advice 클래스 지정</li><li>설정파일(스프링프레임워크)에서 Pointcut을 지정</li><li>설정파일(스프링프레임워크)에서 Advice와 Pointcut을 결합하는 Advicer 생성</li><li>설정파일(스프링프레임워크)에서 ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용</li><li>getBean()메서드로 해당 bean(객체)접근해서 사용</li></ol><p><br><br><br></p><h2 id="스프링API에서-제공하는-Advice인터페이스"><a href="#스프링API에서-제공하는-Advice인터페이스" class="headerlink" title="스프링API에서 제공하는 Advice인터페이스"></a>스프링API에서 제공하는 Advice인터페이스</h2><table><thead><tr><th align="center">인터페이스 이름</th><th align="center">추상메서드 이름</th><th align="left">특징</th></tr></thead><tbody><tr><td align="center">MethodBeforeAdvice</td><td align="center">before()</td><td align="left">주 메서드 실행하기 전에 실행. 예를 들면 내 주기능이 로그인이다. 로그인전에 보안처리나 로깅처리를 실행하고자할때 내 주기능 실행전에 실행하는 것</td></tr><tr><td align="center">AfterReturningAdvice</td><td align="center">afterReturning()</td><td align="left">주 메서드 실행 후 실행</td></tr><tr><td align="center">ThrowsAdvice</td><td align="center">afterThrowing()</td><td align="left">주 메서드에서 예외가 발생시 실행</td></tr><tr><td align="center">MethodInterceptor</td><td align="center">invoke()</td><td align="left">주 메서드의 실행 전/후에 실행(예외발생시 실행도 포함)</td></tr></tbody></table><p><br><br><br></p><h2 id="예시-계산기-만들기"><a href="#예시-계산기-만들기" class="headerlink" title="예시 : 계산기 만들기"></a>예시 : 계산기 만들기</h2><p>간단한 계산기 예제를 통해서 AOP를 알아보자</p><ul><li><code>Calculator.java</code> 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"><span class="comment">//계산기객체 target</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x + y;</span><br><span class="line">System.out.println(<span class="string">"add 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x - y;</span><br><span class="line">System.out.println(<span class="string">"sub 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x * y;</span><br><span class="line">System.out.println(<span class="string">"mul 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x / y;</span><br><span class="line">System.out.println(<span class="string">"div 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="target-객체생성"><a href="#target-객체생성" class="headerlink" title="target 객체생성"></a>target 객체생성</h3><h3 id="advice-객체생성"><a href="#advice-객체생성" class="headerlink" title="advice 객체생성"></a>advice 객체생성</h3><p>위에서 학습한 순서에 따라 객체 생성해보자.<br>1번과 2번을 함께 xml파일에 생성</p><ul><li><code>AOPTest.xml</code>생성</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- BEAN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.타겟 클래스 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calcTarget"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.Calculator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.로그기능을 처리하는 advice 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.LoggingAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="설정파일-스프링프레임워크-에서-Pointcut을-지정"><a href="#설정파일-스프링프레임워크-에서-Pointcut을-지정" class="headerlink" title="설정파일(스프링프레임워크)에서 Pointcut을 지정"></a>설정파일(스프링프레임워크)에서 Pointcut을 지정</h3><h3 id="설정파일-스프링프레임워크-에서-Advice와-Pointcut을-결합하는-Advicer-생성"><a href="#설정파일-스프링프레임워크-에서-Advice와-Pointcut을-결합하는-Advicer-생성" class="headerlink" title="설정파일(스프링프레임워크)에서 Advice와 Pointcut을 결합하는 Advicer 생성"></a>설정파일(스프링프레임워크)에서 Advice와 Pointcut을 결합하는 Advicer 생성</h3><p>3번 4번을 함께 java파일에 작성하자<br>스프링API에서 제공하는 Advice인터페이스 중 MethodInterceptor를 구현해보았다.</p><ul><li><code>LoggingAdvice.java</code> 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//로그를 기록하는 로강클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//주 메서드의 실행 전/후에 실행(예외발생시 실행도 포함)하는 메서드 오버라이딩</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation inv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//메서드 호출 전에 수행하는 구문</span></span><br><span class="line">System.out.println(inv.getMethod()+<span class="string">" 메서드 호출 전"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메서드 호출</span></span><br><span class="line">Object obj = inv.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">//메서드 호출 후에 수행하는 구문</span></span><br><span class="line">System.out.println(inv.getMethod()+<span class="string">" 메서드 호출 후"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="설정파일-스프링프레임워크-에서-ProxyFactoryBean-스프링에서-제공-클래스를-사용해서-Target에-Advice를-적용"><a href="#설정파일-스프링프레임워크-에서-ProxyFactoryBean-스프링에서-제공-클래스를-사용해서-Target에-Advice를-적용" class="headerlink" title="설정파일(스프링프레임워크)에서 ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용"></a>설정파일(스프링프레임워크)에서 ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용</h3><ul><li><code>AOPTest.xml</code> 추가 작성 (주석 5번내용)</li><li>property의 name이 궁금해져서 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html">ProxyFactoryBean공식문서</a>를 찾아봤다 <ul><li>interceptorNames는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html#setInterceptorNames-java.lang.String...-">setInterceptorNames()</a>를 통해서 의존 주입(Setter)을 하였다.</li><li>하지만 target의 경우 동일한 파라미터이름을 찾을 수 없었다. 하지만 그 비슷한 것을 찾았는데 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html#setTargetName-java.lang.String-">setTargetName(String targetName)</a>이다.  <code>name=&quot;targetName&quot;</code>으로 하면 error가 발생한다. </li><li>데이터타입이 object인데 targetName의 데이터타입은 String이기때문이다. 그럼 어떤 메서드에 의해서 의존주입이 되는 것일까? 부모클래스인 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/AdvisedSupport.html#setTarget-java.lang.Object-">Class AdvisedSupport의 setTarget(Object target)</a></li><li>따라서 property 속성을 꼭 <code>name=&quot;target&quot;</code>으로 지정해야 스프링이 해당 클래스가 target클래스인 걸 알 수 있다. </li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- BEAN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.타겟 클래스 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calcTarget"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.Calculator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.로그기능을 처리하는 advice 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.LoggingAdvice"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--5.ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyCalc"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5-1.타켓클래스 지정(setTargetName메서드를 이용한 setter 의존주입)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"calcTarget"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5-2.타겟클래스에서 메서드 호출시 logAdive객체 실행(setter 의존주입)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>logAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="getBean-메서드로-해당-bean-객체-접근해서-사용"><a href="#getBean-메서드로-해당-bean-객체-접근해서-사용" class="headerlink" title="getBean()메서드로 해당 bean(객체)접근해서 사용"></a>getBean()메서드로 해당 bean(객체)접근해서 사용</h3><ul><li><code>CalcAOPTest.java</code>생성 후 getBean()사용</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcAOPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">" 계산기 실행 ! "</span>);</span><br><span class="line"></span><br><span class="line">ApplicationContext appCtx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"AOPTest.xml"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------target 객체생성"</span>);</span><br><span class="line">Calculator cal2 = (Calculator)appCtx.getBean(<span class="string">"calcTarget"</span>);</span><br><span class="line">cal2.add(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------Proxy로 객체생성"</span>);</span><br><span class="line">Calculator cal = (Calculator)appCtx.getBean(<span class="string">"proxyCalc"</span>);</span><br><span class="line">cal.sub(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">cal.mul(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>로그를 통해 정상적으로 객체를 생성하고 호출하는 것을 확인할 수 있다.</p><p><img src="/img/201007spring3.PNG" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명), Scanner로 2진수, 8진수 16진수 받기</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007al-c1034/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007al-c1034/</guid>
      <pubDate>Tue, 06 Oct 2020 17:12:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)&lt;/h2&gt;&lt;p&gt;8진수로 입력된 정수 1개를 10진수로 바꾸어 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명"><a href="#문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명" class="headerlink" title="문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)"></a>문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)</h2><p>8진수로 입력된 정수 1개를 10진수로 바꾸어 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>8진 정수 1개가 입력된다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><ul><li>출력예시<br>10진수로 바꾸어 출력한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String을 8진수로 변경</span></span><br><span class="line"><span class="keyword">int</span> octal = Integer.parseInt(s, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8진수를 10진수로 출력</span></span><br><span class="line">System.out.printf(<span class="string">"%d"</span>, octal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>2진수, 8진수 16진수를 Scanner로 받으려면 String 데이터타입으로 지정하거나 int로 받아도 된다(아래 링크 참조).<br>그 후 원하는 타입에 맞춰서 아래와 같이 코딩하면된다.</p><ul><li>2진수 : <code>Integer.parseInt(num, 2);</code></li><li>8진수 : <code>Integer.parseInt(num, 8);</code></li><li>16진수 : <code>Integer.parseInt(num, 16);</code></li></ul><ul><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1059">2진수처리 비교 - 정수를 입력받아 2진수 비트연산하여 10진수로 출력하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007al-c1034/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[안드로이드]이미지파일 넣기</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007and/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007and/</guid>
      <pubDate>Tue, 06 Oct 2020 15:13:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;이미지파일-넣기&quot;&gt;&lt;a href=&quot;#이미지파일-넣기&quot; class=&quot;headerlink&quot; title=&quot;이미지파일 넣기&quot;&gt;&lt;/a&gt;이미지파일 넣기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;안드로이드에서 가장 빠르게 처리할 수 있는 이미지파일확장자 : png&lt;/li&gt;
&lt;li&gt;이미지를 사용하려면 그림 파일을 [res]-[drawable]폴더에 미리 복사해놓아야한다.&lt;/li&gt;
&lt;li&gt;이미지파일은 res폴더 하위 drawable폴더 안에 복사·붙여넣기한 뒤 ImageView태그로 불러올 수 있다.</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="이미지파일-넣기"><a href="#이미지파일-넣기" class="headerlink" title="이미지파일 넣기"></a>이미지파일 넣기</h1><ul><li>안드로이드에서 가장 빠르게 처리할 수 있는 이미지파일확장자 : png</li><li>이미지를 사용하려면 그림 파일을 [res]-[drawable]폴더에 미리 복사해놓아야한다.</li><li>이미지파일은 res폴더 하위 drawable폴더 안에 복사·붙여넣기한 뒤 ImageView태그로 불러올 수 있다.<a id="more"></a></li><li><code>@</code>의미는 참조이다.<ul><li>예를 들어 <code>android:src=&quot;@drawable/이미지파일명&quot;</code>인 경우 drawable을 참조해서 그 안의 이미지파일명을 불러와달라는 의미이다.</li></ul></li><li>이미지뷰와 이미지버튼의 xml속성<ul><li>src : 이미지 경로</li><li>maxHeight/maxWidth : 이미지 크기 지정</li><li>scaleType : 이미지 확대/축소방식 결정</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/이미지파일명"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007and/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기, split대신 StringTokenizer사용</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006al/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006al/</guid>
      <pubDate>Mon, 05 Oct 2020 21:35:07 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기&quot;&gt;&lt;a href=&quot;#문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기&quot; class=&quot;headerlink&quot; title=&quot;문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기&quot;&gt;&lt;/a&gt;문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기&lt;/h2&gt;&lt;p&gt;실수 1개를 입력받아 정수 부분과 실수 부분으로 나누어 출력한다. 만약 실수 부분이 0으로 시작하지 않는다면(예를 들어 1.000009) scanf(“%d.%d”, &amp;amp;a, &amp;amp;b)도 하나의 방법이 될 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기"><a href="#문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기" class="headerlink" title="문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기"></a>문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기</h2><p>실수 1개를 입력받아 정수 부분과 실수 부분으로 나누어 출력한다. 만약 실수 부분이 0으로 시작하지 않는다면(예를 들어 1.000009) scanf(“%d.%d”, &amp;a, &amp;b)도 하나의 방법이 될 수 있다.</p><a id="more"></a><ul><li><p>입력 :<br>실수 1개가 입력된다.<br>(단, 입력값은 절댓값이 10000을 넘지 않으며, 소수점 이하 자릿수는 최대 6자리까지이고<br>0이 아닌 숫자로 시작한다.)</p></li><li><p>출력 :<br>첫 번째 줄에 정수 부분을, 두 번째 줄에 실수 부분을 출력한다.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력예시</span></span><br><span class="line"><span class="number">1.414213</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력예시</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">414213</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="방법1-split-사용"><a href="#방법1-split-사용" class="headerlink" title="방법1 : split()사용"></a>방법1 : split()사용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">c1023</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String f = sc.next();</span><br><span class="line"></span><br><span class="line">String[] ff = f.split(<span class="string">"\\."</span>);</span><br><span class="line"></span><br><span class="line">String int1 = ff[<span class="number">0</span>];  </span><br><span class="line">String int2 = ff[<span class="number">1</span>];  </span><br><span class="line"></span><br><span class="line">System.out.println(int1);</span><br><span class="line">System.out.println(int2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="방법2-StringTokenizer사용"><a href="#방법2-StringTokenizer사용" class="headerlink" title="방법2 : StringTokenizer사용"></a>방법2 : StringTokenizer사용</h2><p>StringTokenizer는 단 한 개의 구분자만을 사용할 수 있으므로 복잡한 구분자를 사용해야 할 때는<br>Scanner 나 split을 사용해야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringTokenizer 사용</span></span><br><span class="line">StringTokenizer st = <span class="keyword">new</span> StringTokenizer(s,<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (st.hasMoreElements()) &#123;</span><br><span class="line">System.out.println(st.nextToken());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006al/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>컴파일에러와 런타임에러 차이</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006jspi/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006jspi/</guid>
      <pubDate>Mon, 05 Oct 2020 20:57:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;컴파일에러-VS-런타임에러-차이&quot;&gt;&lt;a href=&quot;#컴파일에러-VS-런타임에러-차이&quot; class=&quot;headerlink&quot; title=&quot;컴파일에러 VS 런타임에러 차이&quot;&gt;&lt;/a&gt;컴파일에러 VS 런타임에러 차이&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;컴파일에</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="컴파일에러-VS-런타임에러-차이"><a href="#컴파일에러-VS-런타임에러-차이" class="headerlink" title="컴파일에러 VS 런타임에러 차이"></a>컴파일에러 VS 런타임에러 차이</h2><ul><li>컴파일에러 : 컴파일시 발생하는 에러, IDE의 빨간줄 에러<ul><li>컴파일이란 개발자가 작성한 고급언어를 기계어로 바꾸어주는 것</li></ul></li><li>런타임에러 : 프로그램 실행시 발생하는 에러, IDE의 노란줄 에러<ul><li>RUN 버튼 클릭 후, 즉 프로그램 실행 후 CONSOLE에 나타나는 에러</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006jspi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[이슈해결]Exception in thread java.lang.ArrayIndexOutOfBoundsException: 점(.)사용시 에러 해결방법</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006java/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006java/</guid>
      <pubDate>Mon, 05 Oct 2020 20:54:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제상황&quot;&gt;&lt;a href=&quot;#문제상황&quot; class=&quot;headerlink&quot; title=&quot;문제상황&quot;&gt;&lt;/a&gt;문제상황&lt;/h2&gt;&lt;p&gt;Scanner로 사용자로부터 문자열을 입력받아 &lt;code&gt;점(.)&lt;/code&gt;을 기준으로 split() 하려고 실행하니 &lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.ArrayIndexOutOfBoundsException:&lt;/code&gt; 런타임에러가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제상황"><a href="#문제상황" class="headerlink" title="문제상황"></a>문제상황</h2><p>Scanner로 사용자로부터 문자열을 입력받아 <code>점(.)</code>을 기준으로 split() 하려고 실행하니 <code>Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException:</code> 런타임에러가 발생했다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String f = sc.next();</span><br><span class="line">String[] ff = f.split(<span class="string">"."</span>);</span><br><span class="line">String int1 = ff[<span class="number">0</span>];  </span><br><span class="line">String int2 = ff[<span class="number">1</span>];  </span><br><span class="line">System.out.println(int1);</span><br><span class="line">System.out.println(int2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>콘솔창에 런타임에러발생</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12.123</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.ArrayIndexOutOfBoundsException: 0</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ul><li><code>split(&quot;.&quot;)</code>에서 <code>split(&quot;\\.&quot;)</code>으로 변경해준다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String f = sc.next();</span><br><span class="line">String[] ff = f.split(<span class="string">"\\."</span>);</span><br><span class="line">String int1 = ff[<span class="number">0</span>];  </span><br><span class="line">String int2 = ff[<span class="number">1</span>];  </span><br><span class="line">System.out.println(int1);</span><br><span class="line">System.out.println(int2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><ul><li>정규표현식에서 <code>점(.)</code>은 임의의 한 문자(종류를 가리지않지만 \는 넣을 수 없음)를 의미한다.</li><li><code>split()</code>과 <code>replace()</code>를 사용할 때, <code>점(.)</code>이 정규식으로 적용되어 모든 문자를 “”으로 만들어 버린다.</li><li><code>점(.)</code>을 <code>점(.)</code> 그대로 인식시키기 위해서는 <code>\.</code>로 해줘야 한다.</li><li>하지만 <code>\</code> 또한 예약어이기 때문에 <code>\\</code>로 표시해줘야 한다.</li><li>따라서 <code>\\.</code>을 입력해줘야 원하는 <code>.</code>을 출력할 수 있다.</li></ul><p><img src="https://i.imgur.com/M6PjUz7.png" alt="https://skout90.github.io/2017/09/23/Javascript/6.%20javascript-RegExp%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/"></p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ohgyun.com/4">https://ohgyun.com/4</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006java/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
