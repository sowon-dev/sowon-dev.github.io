<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Wed, 13 Apr 2022 14:33:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>try catch와 throws, throw의 차이</title>
      <link>https://sowon-dev.github.io/2022/04/13/220413trycatchvsthrow/</link>
      <guid>https://sowon-dev.github.io/2022/04/13/220413trycatchvsthrow/</guid>
      <pubDate>Wed, 13 Apr 2022 04:52:33 GMT</pubDate>
      
      <description>&lt;p&gt;예외처리기법은 크게 3가지가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;try catch를 통한 예외처리&lt;/li&gt;
&lt;li&gt;throw로 그냥 예외발생시키기&lt;/li&gt;
&lt;li&gt;throws 키워드를 통한 예외처리 위임&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 중 try catch와 throw의 차이는 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>예외처리기법은 크게 3가지가 있다.</p><ol><li>try catch를 통한 예외처리</li><li>throw로 그냥 예외발생시키기</li><li>throws 키워드를 통한 예외처리 위임</li></ol><p>이 중 try catch와 throw의 차이는 무엇일까?</p><a id="more"></a><h2 id="try-catch와-throws의-차이"><a href="#try-catch와-throws의-차이" class="headerlink" title="try catch와 throws의 차이"></a>try catch와 throws의 차이</h2><p>throws의 예외를 던지는 것, 즉 위임이다. 이는 처리와는 다르다.<br>try catch는 예외를 받아서 처리하는 것이다. 이는 처리이다. catch구문에서 사용자가 흐름을 능동적으로 제어할 수 있다.</p><p><br><br><br></p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><p>throws는 메서드에서 처리해야 할 하나 이상의 예외를 메서드를 호출한 곳으로 던져버린다.<br>이러한 위임은 처리와는 다르다.<br>try catch사용시 catch블록에서 예외를 처리해서 없애버린다.<br>BUT 위임은 예외를 없애지 못하고 그냥 호출한 곳으로 예외를 전달만 한다.<br>예외를 전달받은 메서드는 다시 예외 처리 책임이 발생한다.</p><p>throws를 쓰면 예외처리를 해줘야하는 번거로움이 있는데 왜 사용할까?<br>주로 개발자가 직접 정의하는 예외를 발생시키고 싶은 경우 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">customThrowExample</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 다시 예외처리해줘야한다.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">customThrowExample();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"catch구문은 잡히지않는다. try에서 customThrowExample으로 직접 예외를 발생시킴"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2020/07/21/200722javai/">자바 Error와 Exception</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/13/220413trycatchvsthrow/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>예약가능여부 SQL쿼리로 알아보는 주니어 개발자와 시니어 개발자의 차이</title>
      <link>https://sowon-dev.github.io/2022/03/22/220322SQLdiff/</link>
      <guid>https://sowon-dev.github.io/2022/03/22/220322SQLdiff/</guid>
      <pubDate>Tue, 22 Mar 2022 05:26:26 GMT</pubDate>
      
      <description>&lt;p&gt;예약시간표를 만들고싶었다.&lt;br&gt;예악가능한 시간대는 10시와 13시, 15시가 총 3가지이고 예약상태가 예약승인, 예약취소 총 3가지가 있다.&lt;br&gt;예약이 한 번도 없거나, 예약취소가 된 경우 예약이 가능하며 예약승인인 경우 예약이 불가능하다.&lt;br&gt;이때 특정 날짜를 달력에서 선택했을때 시간대별로 예약가능한지 불가능한지를 알고싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>예약시간표를 만들고싶었다.<br>예악가능한 시간대는 10시와 13시, 15시가 총 3가지이고 예약상태가 예약승인, 예약취소 총 3가지가 있다.<br>예약이 한 번도 없거나, 예약취소가 된 경우 예약이 가능하며 예약승인인 경우 예약이 불가능하다.<br>이때 특정 날짜를 달력에서 선택했을때 시간대별로 예약가능한지 불가능한지를 알고싶었다.</p><a id="more"></a><p>예를 들어 달력에서 3월 22일 클릭했을때 예약상태가 null이거나 예약취소이면 예약이 가능하고 예약상태가 예약승인경우에 예약이 불가능하다. 예약시간대와 예약상태는 DB 데이터로 존재하므로 쿼리를 잘 짜서 예약가능여부를 출력하고 싶었다.</p><table><thead><tr><th align="center">선택한날짜(searchDate)</th><th align="center">예약시간대</th><th align="center">예약상태</th><th align="center">예약가능여부</th></tr></thead><tbody><tr><td align="center">2022-03-22</td><td align="center">10시</td><td align="center">예약승인</td><td align="center">X</td></tr><tr><td align="center">2022-03-22</td><td align="center">13시</td><td align="center">null</td><td align="center">O</td></tr><tr><td align="center">2022-03-22</td><td align="center">15시</td><td align="center">예약취소</td><td align="center">O</td></tr></tbody></table><p><br><br><br></p><h2 id="내-쿼리"><a href="#내-쿼리" class="headerlink" title="내 쿼리"></a>내 쿼리</h2><p>예약상태 값이 있든 없든 출력되어야하므로 먼저 left join을 생각했었다. 하지만 기준테이블을 뭘로 잡으면 좋을지 고민해봤지만 주니어의 머리속엔 아무것도 떠오르지 않았다.<br>그래서 고민하다가 union이 떠올랐다. union에 관해서는 2번적도 포스팅을 한 적이 있었는데 언젠가 내 머리속에서 버로 떠올랐으면 했었는데 드디어 떠올랐다.  짜릿해😆<br>배운 지식이 머리속에서 떠오르는 건 짜릿한 경험이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">select date</span><br><span class="line">, ifnull(예약시간대, <span class="string">'10:00'</span>)</span><br><span class="line">, ifnull(count(예약상태), <span class="number">0</span>)</span><br><span class="line">from exampletable</span><br><span class="line">where 예약시간대 = <span class="string">'10:00'</span></span><br><span class="line">and date = #&#123;searchDate&#125;</span><br><span class="line">and 예약상태 = <span class="string">'예약승인'</span></span><br><span class="line"></span><br><span class="line">union </span><br><span class="line"></span><br><span class="line">select date </span><br><span class="line">, ifnull(예약시간대, <span class="string">'13:00'</span>)</span><br><span class="line">, ifnull(count(예약상태), <span class="number">0</span>)</span><br><span class="line">from exampletable</span><br><span class="line">where 예약시간대 = <span class="string">'13:00'</span></span><br><span class="line">and date = #&#123;searchDate&#125;</span><br><span class="line">and 예약상태 = <span class="string">'예약승인'</span></span><br><span class="line"></span><br><span class="line">union </span><br><span class="line"></span><br><span class="line">select date</span><br><span class="line">, ifnull(예약시간대, <span class="string">'15:00'</span>)</span><br><span class="line">, ifnull(count(예약상태), <span class="number">0</span>)</span><br><span class="line">from exampletable</span><br><span class="line">where 예약시간대 = <span class="string">'15:00'</span></span><br><span class="line">and date = #&#123;searchDate&#125;</span><br><span class="line">and 예약상태 = <span class="string">'예약승인'</span></span><br></pre></td></tr></table></figure><p>ifnull을 이용하여 예약이 한 번도 되지 않은 날짜인 경우 0이 출력되도록 했다.<br>해당 일자에 예약이 있었던 경우에는 ‘예약승인’상태가 몇 개인지 count했다.<br>즉 count로 1이상 나오는 경우 예약이 불가능하다. 0이면 예약가능하다.</p><p>union이 머리속에 나온건 좋았지만 중복이 너무 많은 쿼리이다.<br>아쉽고도 아쉬웠다.<br>중복을 없앨 수 있지 않을까? 더 좋은 쿼리가 있을건데! 분명히!<br>구글링을 통해 여러 방법을 따라하면서 고민해보다가 결국 팀장님께 여쭤봤다.</p><p><br><br><br></p><h2 id="중복을-제거한-쿼리"><a href="#중복을-제거한-쿼리" class="headerlink" title="중복을 제거한 쿼리"></a>중복을 제거한 쿼리</h2><p>팀장님이 union쿼리도 이해하기 쉽게 잘 짰다고 칭찬해주셨다.<br>난 참 운도 좋아! 매일 칭찬해주시는 팀장님 그저 빛… 칭찬은 주니어를 춤추게 해🕺<br>“음 중복을 없애고 싶다면 이렇게는 어때요?” 하면서 1분만에 중복이 제거된 쿼리를 짜주셨다.😯<br>솔직히 1분도 안 걸린듯하다. 팀장님. 천재. 그저 빛….<br>바쁘신 와중에 도와주셔서 정말 감사했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.v_dt,</span><br><span class="line">   a.v_tm</span><br><span class="line">   b.cnt</span><br><span class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> <span class="comment"># &#123;searchDate&#125; v_dt,</span></span><br><span class="line">               <span class="string">'10:00'</span>         v_tm</span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="comment"># &#123;searchDate&#125;,</span></span><br><span class="line">               <span class="string">'13:00'</span></span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="comment"># &#123;searchDate&#125;,</span></span><br><span class="line">               <span class="string">'15:00'</span>) a</span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">date</span>,</span><br><span class="line">                         예약시간대,</span><br><span class="line">                         <span class="keyword">Count</span>(*) cnt</span><br><span class="line">                  <span class="keyword">FROM</span>   exampletable</span><br><span class="line">                  <span class="keyword">WHERE</span>  예약상태 = <span class="string">'예약승인'</span></span><br><span class="line">                  <span class="keyword">GROUP</span>  <span class="keyword">BY</span> <span class="built_in">date</span>, 예약시간대) b</span><br><span class="line">              <span class="keyword">ON</span> a.v_dt = b.date</span><br><span class="line">                 <span class="keyword">AND</span> a.v_tm = b.예약시간대;</span><br></pre></td></tr></table></figure><p>from절에 서브쿼리를 사용했는데 서브쿼리안에 <code>from 테이블</code>이 없다. 이는 무조건 출력하겠다는 의미이다.<br>선택한 날짜와 예약시간대 3가지는 항상 출력되야하므로 union을 사용했다.<br>특정 시간대에 아무런 예약상태가 없어 null이 나올 수 있도록 left join을 걸었고 이때 where조건인 예약승인을 넣는다.</p><p>서브쿼리가 들어가고 그 안에 join절이 나오면 어떻게 SQL formatting해야 가독성이 좋아지는지 잘모르겠다. Javascript 코드 포맷터인 Pretieer처럼 SQL도 다수가 사용하는 format형식같은 게 있었으면 좋겠다. </p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQLDB/">MySQLDB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/22/220322SQLdiff/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DispatcherSerlvet 씹어먹기</title>
      <link>https://sowon-dev.github.io/2022/03/16/220316DispatcherServlet/</link>
      <guid>https://sowon-dev.github.io/2022/03/16/220316DispatcherServlet/</guid>
      <pubDate>Wed, 16 Mar 2022 05:34:04 GMT</pubDate>
      
      <description>&lt;p&gt;SpringMVC에선 DispatcherSerlvet가 아주 중요한 역할을 한다.&lt;br&gt;잠깐 SpringMVC란 무엇일까?&lt;br&gt;Spring프레임워크에 Model, View, Controller를 븐리한 디자인 패턴을 말한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SpringMVC에선 DispatcherSerlvet가 아주 중요한 역할을 한다.<br>잠깐 SpringMVC란 무엇일까?<br>Spring프레임워크에 Model, View, Controller를 븐리한 디자인 패턴을 말한다.</p><a id="more"></a><p>Spring 프레임워크는 개발을 지원하기 위해 다양한 clas를 제공하는데 그 중 아래 3가지를 이번 글에서 다룰 것이다.</p><ol><li>DispatcherServlet</li><li>HandlerMapping</li><li>ViewResolver</li></ol><table><thead><tr><th align="center">용어</th><th align="center">역할</th><th align="center">예시</th></tr></thead><tbody><tr><td align="center">DispatcherServlet</td><td align="center">클라이언트의 요청을 받아서 HandlerMapping에 넘긴다</td><td align="center"></td></tr><tr><td align="center">HandlerMapping</td><td align="center">Key-Value구조로 URL-메서드를 저장한 table에서 클라이언트의 요청을 처리할 Controller를 찾는 역할</td><td align="center">@RequestMapping(“/url”) annotaion사용하면 Controller URL Mapping한다.</td></tr><tr><td align="center">ViewResolver</td><td align="center">Controller가 리턴한 View Name에 prefix와 suffix를 적용하여 반환한다.</td><td align="center"></td></tr></tbody></table><p><br><br><br></p><h2 id="SpringMVC-요청-처리-과정"><a href="#SpringMVC-요청-처리-과정" class="headerlink" title="SpringMVC 요청 처리 과정"></a>SpringMVC 요청 처리 과정</h2><p><img src="https://docs.spring.io/spring-framework/docs/2.0.8/reference/images/mvc.png" alt="https://docs.spring.io/spring-framework/docs/2.0.8/reference/mvc.html"></p><ol><li>클라이언트가 요청을 한다. <ul><li>ex) /admin/post/add</li></ul></li><li>DispatcherServlet는 어떤 메서드가 좋은지 HandlerMapping에게 물어본다.</li><li>HandlerMapping는 URL매칭테이블에서 뒤져서 해당 url과 일치하는 메서드를 반환한다. <ul><li>ex) add()</li></ul></li><li>DispatcherServlet는 받은 메서드를 가지고 어떤 HandlerAdapter가 처리할 수 있는 지 확인후 특정 HandlerAdapter에 넘겨준다.</li><li>HandlerAdapter가 받은 정보로 Controller에게 전달한다. <ul><li>ex) @RequestMapping(“/admin/post/add”) public String add(){ return “addForm” }</li><li>스프링의 큰 특징은 관심사의 분리이다. DispatcherServlet이 직접 Controller를 호출하는 것보다 HandlerAdapter를 통함으로써 느슨한 연결이 된다.</li><li>느슨한 연결은 어떤 변경에서든지 유리하게 대처할 수 있다. =&gt; 즉, 변경의 유리한 설계</li></ul></li><li>Controller 반환값을 HandlerAdapter에게 넘겨준다.<ul><li>ex) addForm</li></ul></li><li>HandlerAdapter는 그 값을 DispatcherServlet에게 전달한다.<ul><li>ex) addForm</li></ul></li><li>DispatcherServlet는 ViewResolver에게 전달한다. <ul><li>ex) addForm</li></ul></li><li>ViewResolver는 prefix와 suffix를 적용한 뒤 실제 화면을 알아내서 DispatcherServlet에게 반환한다.<ul><li>ex) /WEB-INF/views/addForm.jsp</li></ul></li><li>DispatcherServlet은 해당 뷰를 호출하면서 Model도 함께 전달한다.</li><li>화면은 Model객체를 가져와서 응답결과를 만들고 클라이언트에게 응답결과를 전달한다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/03/16/220316DispatcherServlet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[STS] 자바버전 안 바뀔때 해결! 자바버전 바꾸는 방법(1.8에서 11로)</title>
      <link>https://sowon-dev.github.io/2022/03/11/220311STS-changeJavaVersion/</link>
      <guid>https://sowon-dev.github.io/2022/03/11/220311STS-changeJavaVersion/</guid>
      <pubDate>Fri, 11 Mar 2022 03:54:33 GMT</pubDate>
      
      <description>&lt;p&gt;자바버전을 깔~끔하게 1.8에서 11로 바꿔보자!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바버전을 깔~끔하게 1.8에서 11로 바꿔보자!</p><a id="more"></a><h2 id="1-Preferences-설정"><a href="#1-Preferences-설정" class="headerlink" title="1 Preferences 설정"></a>1 Preferences 설정</h2><p>Window -&gt; Preferences -&gt; 검색어: Compiler -&gt; Java 하위 Compiler클릭 -&gt; JDK Compliance에서 Compiler compliance level에서 1.8을 11로 변경<br><img src="/img/220311javaVersion1.JPG" alt=""></p><p><br><br><br></p><h2 id="2-pom-xml-설정"><a href="#2-pom-xml-설정" class="headerlink" title="2 pom.xml 설정"></a>2 pom.xml 설정</h2><p>pom.xml을 더블클릭하여 연 뒤 아래 2가지를 수정한다.</p><ol><li><p>properties 하위 java-version을 1.8에서 11로 변경<br><img src="/img/220311javaVersion2.JPG" alt=""></p></li><li><p>plugins 하위 artifactId가 maven-compiler-plugin를 찾은 뒤 그 하위 source와 target을 ${java-version} 으로 변경</p><ul><li><code>${java-version}</code>으로 설정해놓으면 1번에서 설정한 java-version을 그대로 따라가므로 11로 변경하든 16으로 변경하든 다시 1.8로 변경하든 동일한 자바 버전을 바라봐서 추후 변경할 필요가 없다.<br><img src="/img/220311javaVersion3.JPG" alt=""></li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/11/220311STS-changeJavaVersion/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>바이너리 파일이란? 텍스트파일이랑 뭐가 다를까? ft.MIME</title>
      <link>https://sowon-dev.github.io/2022/03/09/220309binaryfile/</link>
      <guid>https://sowon-dev.github.io/2022/03/09/220309binaryfile/</guid>
      <pubDate>Wed, 09 Mar 2022 04:05:04 GMT</pubDate>
      
      <description>&lt;p&gt;바이너리 파일이란 무엇일까?&lt;br&gt;바이너리 파일은 텍스트파일과 비교하면 이해가 쉽다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>바이너리 파일이란 무엇일까?<br>바이너리 파일은 텍스트파일과 비교하면 이해가 쉽다.</p><a id="more"></a><p>표로 간단하게 정리해볼 수 있다.</p><table><thead><tr><th align="center"></th><th align="center">Text File</th><th align="center">Binary File</th></tr></thead><tbody><tr><td align="center">정의</td><td align="center">문자만 저장된 파일</td><td align="center">문자와 숫자가 저장된 파일</td></tr><tr><td align="center">읽기 특징</td><td align="center">문자만 읽을 수 있음. 전부 문자로 읽음</td><td align="center">데이터를 있는 그대로 읽음</td></tr><tr><td align="center">쓰기 특징</td><td align="center">문자만 쓸 수 있음. 숫자를 쓴 경우 모두 문자로 변환 후 씀</td><td align="center">데이터를 있는 그대로 씀</td></tr></tbody></table><p>text파일에 숫자를 쓰는 예를 들어보자.<br>앞서 text파일에은 숫자를 문자로 변환 후 쓴다고 했다.<br>만약 숫자 17을 썼다면 text파일은 17을 ‘1’과 ‘7’로 변환 후 저장한다. 이로 인해 메모장(텍스트에디터)으로 특정 문서를 열면 깨지는 경우가 생긴다.</p><p>이렇게 바이너리 데이터를 텍스트기반인 HTTP 프로토콜에 보내려면 방법이 두 가지가 있다.</p><ol><li>MIME 타입으로 바이너리 데이터를 그대로 보내기</li><li>Base64로 바이너리 데이터를 텍스트로 변환하여 보내기<ul><li>장점: 안전하게 전송가능</li><li>단점: 데이터이 사이즈가 커짐</li></ul></li></ol><p><br><br><br></p><h2 id="MIME-Multipurose-Internet-Mail-Extensions"><a href="#MIME-Multipurose-Internet-Mail-Extensions" class="headerlink" title="MIME(Multipurose Internet Mail Extensions)"></a>MIME(Multipurose Internet Mail Extensions)</h2><p>MIME은 마임이라고 읽으며 텍스트기반 프로토콜에서 바이너리 데이터(예를 들어 이미지, 동영상, 파일)를 전송하기 위해 HTTP의 Context-Type 헤더에 데이터 타입을 명시하여 사용한다.<br>마임타입의 형태는 <code>타입/서브타입</code>으로 기입하면 된다.</p><p><img src="https://www.researchgate.net/profile/Max-Kaiser-9/publication/220273642/figure/tbl1/AS:667773340487683@1536220979214/Selection-of-MIME-types-encountered.png" alt="https://www.researchgate.net"></p><p><br><br><br></p><h2 id="인코딩-Base64-vs-ASCII"><a href="#인코딩-Base64-vs-ASCII" class="headerlink" title="인코딩: Base64 vs ASCII"></a>인코딩: Base64 vs ASCII</h2><p>바이너리 데이터를 텍스트 데이터로 변환할때 크게 두 가지 방식이 있다. 아스키코드와 Base64이다.</p><table><thead><tr><th align="center"></th><th align="center">갯수</th><th align="center">진법</th><th align="center">비트</th><th align="center">어떤 텍스트데이터가 있는지?</th></tr></thead><tbody><tr><td align="center">Base64</td><td align="center">64개 = 2^6</td><td align="center">64진법</td><td align="center">6비트</td><td align="center"><a href="https://en.wikipedia.org/wiki/Base64">0-9 a-z A-Z + / 가 포함됨</a></td></tr><tr><td align="center">ASCII</td><td align="center">128개 = 2^7</td><td align="center">128진법</td><td align="center">7비트</td><td align="center"><a href="https://en.wikipedia.org/wiki/ASCII">0-9 a-z A-Z + / 와 특수문자 포함</a></td></tr></tbody></table><p>ASCII는 Base64에서 특수문자가 포함되어있는데 몇몇 특수문자는 출력이 되지않으므로 ASCII로 변환하면 제대로 되지 않을 수 있다.<br>어떤 인코딩이라든지 Base64의 데이터들은 다 있다. 따라서 안정적인 Base64인코딩을 사용하면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/03/09/220309binaryfile/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>톰캣서버란? Tomcat 내부 구조와 설정파일</title>
      <link>https://sowon-dev.github.io/2022/03/07/220307Server-tomcat/</link>
      <guid>https://sowon-dev.github.io/2022/03/07/220307Server-tomcat/</guid>
      <pubDate>Mon, 07 Mar 2022 02:55:29 GMT</pubDate>
      
      <description>&lt;p&gt;클라이언트가 요청을 보내면 톰캣 내부에서는 어떤 일이 일어날까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>클라이언트가 요청을 보내면 톰캣 내부에서는 어떤 일이 일어날까?</p><a id="more"></a><h2 id="톰캣-서버-내부-구조"><a href="#톰캣-서버-내부-구조" class="headerlink" title="톰캣 서버 내부 구조"></a>톰캣 서버 내부 구조</h2><p><img src="https://flylib.com/books/4/15/1/html/2/id_9807/fig21_01.jpg" alt="https://flylib.com/books/4/15/1/html/2/id_9807/fig21_01.jpg"></p><p>Tomcat Server안에 Service가 있고 그 서비스를 처리하는 것이 Engine(Catalina)이다.<br>Engine안에는 Host가 여러 개가 있을 수 있다.<br>Host안에는 여러 개의 Context가 있을 수 있다.<br>여기사 Context란 쉽게 말해 스프링프로젝트라고 생각하면 된다.<br>Context안에 있는 Servlet이 여러개 있는데 각 Servlet은 쉽게 Controller로 생각할 수 있다.</p><p><img src="https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png" alt="https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png"></p><p>클라이언트가 먼저 url을 요청하면 Thread Pool로 간다. Thread Pool은 요청을 받은 후에 만들면 늦으니까 요청을 받기 전 미리 만들어 놓는다.<br>그 중 요청을 처리하고 있지 않은 Thread 하나가 요청을 받게된다.<br>요청 프로토콜에 따라 Connector가 동일한 프로토콜을 연결해주며 보통 HTTP1.1 프로토콜이다.<br>프로토콜이 프로세스를 처리해서 Engline(Catalina)을 거치고 요청 받은 Host안의 Context까지 찾은 다음 해당 Servlet을 호출한다.<br>Dispatcher Servlet이 요청받은 Controller의 method를 찾아 호출한다.</p><p><br><br><br></p><h2 id="설정파일"><a href="#설정파일" class="headerlink" title="설정파일"></a>설정파일</h2><ul><li>톰캣설치경로/conf/server.xml : 톰캣 서버 설정 파일</li><li>톰캣설치경로/conf/web.xml : 톰캣의 모든 프로젝트의 공통설정 파일</li><li>프로젝트이름/WEB-INF/web.xml : 프로젝트(Context)의 개별 설정</li></ul><p>공통설정파일이 먼저 적용된 후 프로젝트 개별 설정파일이 적용된다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://tomcat.apache.org/tomcat-9.0-doc/architecture/overview.html">https://tomcat.apache.org/tomcat-9.0-doc/architecture/overview.html</a></li><li><a href="https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png">https://imgs.developpaper.com/imgs/1195016741-5cf1158dc0127_articlex.png</a></li><li><a href="https://sowon-dev.github.io/2020/10/04/201005jspProcessVSThreadNWebServerVSWAS/#%EC%9B%B9%EC%84%9C%EB%B2%84-WEB-SERVER-VS-%EC%9B%B9%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%84%9C%EB%B2%84-WAS-Web-Application-Server">웹서버(WEB SERVER) VS 웹어플리케이션서버(WAS, Web Application Server)</a></li><li><a href="https://sowon-dev.github.io/2020/08/16/200817jspi/#Servlet%EA%B8%B0%EC%B4%88">Servlet : Servlet용어정리</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Tomcat/">Tomcat</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/07/220307Server-tomcat/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[이클립스/STS] 보기 편하게 code style 설정하기 - 포맷팅설정</title>
      <link>https://sowon-dev.github.io/2022/03/01/220302STS-formatSetting/</link>
      <guid>https://sowon-dev.github.io/2022/03/01/220302STS-formatSetting/</guid>
      <pubDate>Tue, 01 Mar 2022 21:09:29 GMT</pubDate>
      
      <description>&lt;p&gt;이클립스나 STS 기본 코드 스타일은 너무 많은 tab공백 등으로 지저분해보이기도 한다.&lt;br&gt;보기 편하도록 신규 프로젝트 시작시 코드 스타일을 적용하고 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이클립스나 STS 기본 코드 스타일은 너무 많은 tab공백 등으로 지저분해보이기도 한다.<br>보기 편하도록 신규 프로젝트 시작시 코드 스타일을 적용하고 있다.</p><a id="more"></a><p>코드 스타일 적용 단축키: <code>Ctrl + Shift + F</code></p><p>아래는 내가 주로 사용하는 코드 스타일이다.</p><p><br><br></p><h2 id="JAVA-code-style-🎀"><a href="#JAVA-code-style-🎀" class="headerlink" title="JAVA code style 🎀"></a>JAVA code style 🎀</h2><p>자바코드스타일은 구글 스타일을 사용하고 있다.<br>먼저 <a href="https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml">google/styleguide 레포지토리안의 eclipse-java-google-style</a>를 선택하여 xml파일로 다운로드한다.</p><ol><li>이클립스 상단의 Windows &gt; Preferences</li><li>Formatter 검색 후 Java &gt; Code Style &gt; Formatter 클릭 </li><li>Import 버튼 클릭 후 미리 다운로드한 eclipse-java-google-style.xml 파일을 선택한 후 apply 버튼 클릭</li></ol><p>자바 코드 스타일 적용 끝!</p><p><br><br><br></p><h2 id="JavaScript-code-style-🎀"><a href="#JavaScript-code-style-🎀" class="headerlink" title="JavaScript code style 🎀"></a>JavaScript code style 🎀</h2><p>jsp에서 script태그를 이용해 js를 사용하는 경우 이 설정도 함께 해줘야 보기 편하다.</p><ol><li>이클립스 상단의 Windows &gt; Preferences</li><li>Formatter 검색 후 JavaScript &gt; Code Style &gt; Formatter 클릭 </li><li>New 버튼 클릭 후 <code>Profile name: 원하는 이름</code> 기입하고  <code>Initialize settings with the following profile: Eclipse[built-in]</code> 선택 후 OK버튼</li><li>Indentation 에서 <code>Tab policy : Spaces only</code>와 <code>Indentation size : 2</code>, 그리고 <code>Tab size : 2</code>를 기입<ul><li><img src="/img/220302jsCodeStyle1.JPG" alt="Indentation 참고"></li></ul></li><li>Line Wrapping &gt; <code>Maximem line width : 180</code> 기입<ul><li><img src="/img/220302jsCodeStyle2.JPG" alt="Line Wrapping 참고"></li></ul></li></ol><p>자바스크립트 코드 스타일 적용 끝!</p><p><br><br><br></p><h2 id="HTML-code-style-🎀"><a href="#HTML-code-style-🎀" class="headerlink" title="HTML code style 🎀"></a>HTML code style 🎀</h2><ol><li>이클립스 상단의 Windows &gt; Preferences</li><li>html 검색 후  Web &gt; HTML Files &gt; Editor 클릭 <ul><li>Line width : 120</li><li>Indent using spaces 체크</li><li>Indentation size = 2</li><li>Inline Elements &gt; 인라인으로 보이기 싫은 태그들 선택 &gt; Remove<ul><li>나는 주로 select, tr, td를 remove한다.</li></ul></li></ul></li><li>apply 버튼 클릭 후 OK버튼 클릭</li></ol><p><img src="/img/220302jsCodeStyle2.JPG" alt="HTML 설정 참고"></p><p>HTML 코드 스타일 적용 끝!</p><p><br><br><br></p><h2 id="JSP-Validation-OFF-🎀"><a href="#JSP-Validation-OFF-🎀" class="headerlink" title="JSP Validation OFF 🎀"></a>JSP Validation OFF 🎀</h2><p>JSP파일이 많다면 Validation OFF를 하는 게 로딩도 빠르고 보기 편하다.</p><ul><li>Window &gt; Preference &gt; Web &gt; JSP Files &gt; Validation<ul><li>Validate JSP fragemtns 체크해제</li></ul></li></ul><p>끝!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Eclipse/">Eclipse</category>
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/03/01/220302STS-formatSetting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NoSQL이 뭐길래</title>
      <link>https://sowon-dev.github.io/2022/02/26/220226NoSQL/</link>
      <guid>https://sowon-dev.github.io/2022/02/26/220226NoSQL/</guid>
      <pubDate>Sat, 26 Feb 2022 03:46:51 GMT</pubDate>
      
      <description>&lt;p&gt;NoSQL이란 무엇일까?&lt;br&gt;SQL문을 아예 안쓴다는 말일까?&lt;br&gt;Nope!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>NoSQL이란 무엇일까?<br>SQL문을 아예 안쓴다는 말일까?<br>Nope!</p><a id="more"></a><h2 id="🏷️-NoSQL-Not-Only-SQL"><a href="#🏷️-NoSQL-Not-Only-SQL" class="headerlink" title="🏷️ NoSQL = Not Only SQL"></a>🏷️ NoSQL = Not Only SQL</h2><p>스키마없이 데이터를 표현하는 것이 주된 특징인 일련의 데이터베이스들을 의미한다.</p><p><br><br><br></p><h2 id="🏷️-일반적인특징"><a href="#🏷️-일반적인특징" class="headerlink" title="🏷️ 일반적인특징"></a>🏷️ 일반적인특징</h2><ol><li>정해진 스키마가 없다.</li><li>DB종류에 따라 그 특성이 매우 다르다. (RDBMS가 비슷비슷한 것과는 다름)</li></ol><p><br><br><br></p><h2 id="🏷️-장점"><a href="#🏷️-장점" class="headerlink" title="🏷️ 장점"></a>🏷️ 장점</h2><ol><li>높은 수평 확장성<ul><li>더 많은 인스턴스를 만들어 더 큰 로드를 감당할 수 있음</li></ul></li><li>초기 개발의 용이성</li><li>스키마 설계의 유연성</li></ol><p><br><br><br></p><h2 id="🏷️-단점"><a href="#🏷️-단점" class="headerlink" title="🏷️ 단점"></a>🏷️ 단점</h2><ol><li>표준의 부재<ul><li>표준이 없어서 마이그레이션할때 각각 다 맞춰야 함</li></ul></li><li>SQL에 비해 약한 query capability<ul><li>복잡한 쿼리는 힘듬 -&gt; 단순한 쿼리만 가능</li></ul></li><li>스키마가 없기때문에 data consistency를 어플리케이션 레벨에서 보장해야 함</li></ol><p><br><br><br></p><h2 id="🏷️-종류"><a href="#🏷️-종류" class="headerlink" title="🏷️ 종류"></a>🏷️ 종류</h2><ol><li>Key-value<ul><li>예: Redis, AWS DynamoDB</li><li>모든 레코드는 Key-value의 페어이다.</li><li>NoSQL의 가장 단순한 형태</li></ul></li><li>Document-based<ul><li>예: DynamoDB, CouchDB,몽고DB</li><li>각 레코드가 하나의 문서가 된다.</li><li>key-value종류보다 문서가 구조적이기때문에 쿼리 최적화, 활용성 높은 API가 제공됨</li></ul></li><li>Graph<ul><li>예: Neo4j, AWS Neptune</li><li>그래프 이론을 바탕으로 데이터베이스를 그래프로 표현함</li><li>그래프는 node(객체)와 edge(관계) 그리고 property(객체의 속성)로 이루짐</li><li>관계가 first-class citizen이기 때문에 관계 기반 문제(실시간 추천등)에 유리</li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/NoSQL/">NoSQL</category>
      
      
      <comments>https://sowon-dev.github.io/2022/02/26/220226NoSQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[OS]메모리vs드라이브vsCPU 코어 쉽게 이해하자</title>
      <link>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/</link>
      <guid>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/</guid>
      <pubDate>Wed, 23 Feb 2022 17:12:39 GMT</pubDate>
      
      <description>&lt;p&gt;소스코드를 일절 건드리지않았는데 운영서버의 사이트가 500에러가 났다.&lt;br&gt;팀장님은 드라이브 문제일수있다고 하셨다.&lt;br&gt;💾여기서 드라이브란?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>소스코드를 일절 건드리지않았는데 운영서버의 사이트가 500에러가 났다.<br>팀장님은 드라이브 문제일수있다고 하셨다.<br>💾여기서 드라이브란?</p><a id="more"></a><p>스토리지드라이브를 뜻하며 HDD나 SDD가 해딩된다.<br>메모리와 드라이브 개념을 확실히하기 위해 글을 찾아봤는데 비유가 가장 적합한 글을 찾았다.<br>기업소개사이트인데 Aricles폴더 안에 메모리 개념들이 잘 포스팅되어있다.</p><ul><li><a href="https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do">컴퓨터 메모리(RAM)란 무엇이며 어떤 역할을 합니까?</a></li></ul><p>위 글에 따르면 메모리는 책상과 비슷하다고 한다. 책상안에서 서류작성, 파일보관, 업무전화등 다양한 작업을 진행할 수 있다.<br>이때 책상이 크면 클수록 더 많은 작업을 한꺼번에 펼쳐놓고 처리할 수 있어서 서류 보관 캐비넷(드라이브)에 빠르게 접근이 가능하다.<br>책상이 크다면 이미 책상 위에 올려져있을테니까!</p><p><br><br><br></p><h2 id="그렇다면-CPU-코어는-뭘까-😮"><a href="#그렇다면-CPU-코어는-뭘까-😮" class="headerlink" title="그렇다면 CPU 코어는 뭘까? 😮"></a>그렇다면 CPU 코어는 뭘까? 😮</h2><p>코어가 많을수록 메모리가 많을수록 작업이 빨라진다던데 메모리와 코어, 이 둘은 어떻게 다를까?<br>이에 관해 팀장님이 비유적으로 설명해주셨다.<br><strong>CPU 코어는 책상앞의 사람의 수</strong>로 비유할 수 있다고 한다.👍 사람수가 많을수록 작업이 빨라지니까 CPU 코어가 많을수록 속도가 빨라진다.</p><p>와 역시 팀장님이다. 이해 쏙쏙!!!😆</p><p><br><br><br></p><h2 id="정리-📀"><a href="#정리-📀" class="headerlink" title="정리 📀"></a>정리 📀</h2><ul><li>메모리: 책상</li><li>드라이브: 서류 보관 캐비넷</li><li>CPU 코어: 일을 처리하기 위해 책상앞에 앉아있는 사람<ul><li>예를 들어 CPU 6코어면 6명의 사람이 일처리를 위해 책상 앞에 있다고 생각하면 됨</li></ul></li><li>CPU 스레드: 사람의 손<ul><li>예를 들어 CPU 2코어 4스레드이면 2명의 사람이 4가지 작업을 동시에 할 수 있다고 생각하면 됨</li><li>한 손에 한 작업씩 진행중인 느낌.</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do">https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do</a></li><li>팀장님 설명</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Operating-Systeming/">Operating Systeming</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>닷넷프로젝트를 끝내며 코드리뷰가 내게 남긴 것</title>
      <link>https://sowon-dev.github.io/2022/01/19/220119prjtreview/</link>
      <guid>https://sowon-dev.github.io/2022/01/19/220119prjtreview/</guid>
      <pubDate>Wed, 19 Jan 2022 02:32:49 GMT</pubDate>
      
      <description>&lt;p&gt;한 달간 진행되었던 네번째 프로젝트가 끝이 났다!&lt;br&gt;처음 사용하는 C#에다가 닷넷프레임워크, 그리고 Visual Studio, MSSQL, Azure까지!&lt;br&gt;모든 것이 새롭게 다가왔고 정말 열심히 배웠고 큰 성장을 이루어냈다.&lt;br&gt;잠깐만 갑자기 C#에다가 닷넷??!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>한 달간 진행되었던 네번째 프로젝트가 끝이 났다!<br>처음 사용하는 C#에다가 닷넷프레임워크, 그리고 Visual Studio, MSSQL, Azure까지!<br>모든 것이 새롭게 다가왔고 정말 열심히 배웠고 큰 성장을 이루어냈다.<br>잠깐만 갑자기 C#에다가 닷넷??!</p><a id="more"></a><p>그렇게 됐다.<br>회사의 일은 가끔(또는 자주) 내 뜻대로 되지 않는 법. 이번에 맡은 프로젝트는 닷넷 프레임워크를 사용했다.<br>아직 스프링프레임워크도 깊게 보지 못한 내게 새로운 언어와 새로운 프레임워크는 혼돈의 카오스 그 자체였다.<br>절망하기보단 <code>이왕 해야 할 거! 최선을 다해 빨리 성장하자 하나라도 더 알자</code>는 마음가짐으로 열정적으로 임했다.<br>그래서 그런지 정말 많은 것들을 배울 수 있었다.</p><p>DDD도 처음이고 CQRS도 처음이었다. 혼자 부트스트랩으로 페이지도 만들고 저장 프로시저 이용해서 쿼리도 짜고 EF도 이용해봤다.<br>성장하고자하는 마음 하나로 한달<br>닷넷프레임워크의 여러 장점 중 가장 좋았던 점은 시간연산이 굉장히 편하다는 점이다!! 날짜 포맷팅도 <code>.ToString(&quot;yyyy-MM-dd&quot;)</code> 이런식으로 정말 간단하다! 최고</p><p><br><br></p><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li><p>명확한 단어 사용을 위한 단어 합의를 위해 노력했다.<br>기존 4개의 역할(Admin / Owner / Super / Member)이 있었다. 한 눈에 봐도 Super의 역할이 모호했다.<br>프로젝트 구조와 요구사항을 파악하고 나서 역할의 이름을 Super에서 Manager로 변경을 제안했다.<br>몇몇 기능 개발이 되어있던 상태였기때문에 변경에 있어서 고민이 많았지만 “지금이라도 잡아야 나중에 유지보수까지 편해집니다”라는 의견을 피력했고 다행히 내 의견이 받아들여졌고 초반에 합의한 덕분에 후반부 작업이 훨씬 수월해졌다!</p></li><li><p>CSR와 SSR 구분 명확하게 할 수 있다.<br>서버사이드랜더링(SSR)과 클라이언트사이드랜더링(CSR)을 확실하게 구분할 수 있고 나만의 우선순위도 생겼다.</p></li></ol><ul><li>우선순위: SSR &gt; CSR<br>꼭 필요한 경우가 아니면 서버사이드랜더링을 사용하는 것이 좋다.<br>그 이유로는 첫째, 최초 로딩 속도가 빠르다 두번째, SEO최적화, 크롤러에 대응하기 용이하다는 점이 있다.</li></ul><p>닷넷프레임워크에서는 서버사이드랜더링으로 Razor를 사용해보았다. <code>@</code>를 사용하며 간단한 처리는 컨트롤러를 통하지않고 html에서 직접 서비스를 호출하여 처리할 수도 있다.</p><ol start="3"><li>Bootstrap을 자유자재로 구사할 수 있다.<br>항상 템플릿을 가져와서 써봤지 직접 bootstrap으로 화면을 구현한 적은 처음이다.<br>처음에는 내가 원하는 대로 row와 col 나누는 게 너무 어려웠는데 한 번 적응하고 나니 훨씬 편했다.<br>또 기존에는 style속성으로 각 태그에 css를 변경하곤 했으나 비효율적이며 통일성이 떨어졌다. Bootstrap class를 사용하니 훨씬 편했다.</li></ol><ul><li><a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/">참고: Bootstrap Docs</a></li></ul><ol start="4"><li>Auth policy등 enum타입으로 사용하여 휴먼에러를 줄였다.</li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>DDD의 심도깊은 이해와 EF 사용<br>이번에 처음 CQRS를 사용하면서 ORM(object-relational mapper)인 Entity Framework를 사용해봤다.<br>Application Layer는 다루었으나 Domain Layer는 많이 다루지 못해 아쉬움이 있다.<br>EF는 아주 간단한 Include와 Where만을 사용했다. 조금 복잡하다싶으면 나에게 익숙한 저장 프로시저를 이용했다. EF만 잘 사용한다면 효율적인 쿼리를 구현할 수 있었을텐데 아쉬움이 남는다.</li></ol><ul><li><a href="https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/#%F0%9F%86%9ASQL-Mapper-vs-ORM">참고: ORM vs SQL Mappeer</a></li><li><a href="https://incheol-jung.gitbook.io/docs/q-and-a/architecture/ddd">참고: DDD Application Layer란?</a></li></ul><ol start="2"><li>UnitTest를 못한 점<br>프로젝트기한이 촉박해 UnitTest를 거의 하지 못해서 아쉬움이 무척 남는다.</li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li><p>DDD의 여러 사례 공부와 Domain Layer 공부하기<br><a href="https://docs.microsoft.com/en-us/ef/core/querying/">Entity Framework Docs</a></p></li><li><p>UnitTest를 손에 익히기<br>손에 익으면 프로젝트 기한이 촉박해도 빠르게 test code를 짤 수 있다.</p></li></ol><p><br><br><br></p><h2 id="코드리뷰"><a href="#코드리뷰" class="headerlink" title="코드리뷰"></a>코드리뷰</h2><p>이번 코드리뷰는 질문과 답변을 통해 이루어졌다. 회사코드라서 모든 걸 다 적을 수 없고 적을 수 있는 것만 포편적인 예시를 들어 적어보려고 한다.</p><h3 id="페이지-이동할-때-3가지-방식-중-우선순위가-있나요"><a href="#페이지-이동할-때-3가지-방식-중-우선순위가-있나요" class="headerlink" title="페이지 이동할 때 3가지 방식 중 우선순위가 있나요?"></a>페이지 이동할 때 3가지 방식 중 우선순위가 있나요?</h3><p>페이지 이동할 때 3가지 방식이 있다.</p><ol><li>razor : <code>@Url.Action(&quot;Board&quot;, &quot;Admin&quot;, new {id=@id})</code></li><li>asp.net: <code>&lt;a asp-action=&quot;Board&quot; asp-controller=&quot;Admin&quot; asp-route-id=&quot;@id&quot;&gt;</code></li><li>js: <code>location.href=&quot;/Admin/Board/&quot;+@id</code></li></ol><p>이 중 razor와 asp-action을 이용한 방식은 SSR이고 js는 CSL이다.<br>세 가지 방식 중에 우선순위가 있는 방식은 없다. 상황에 맡게 사용하면 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/19/220119prjtreview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Promise 프로미스</title>
      <link>https://sowon-dev.github.io/2022/01/16/220116JS-promise/</link>
      <guid>https://sowon-dev.github.io/2022/01/16/220116JS-promise/</guid>
      <pubDate>Sun, 16 Jan 2022 05:31:03 GMT</pubDate>
      
      <description>&lt;p&gt;프로미스에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로미스에 대해 알아보자.</p><a id="more"></a><h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><p>Promise객체는 자바스크립트에서 비동기 처리에 사용되는 객체이다.</p><p><br><br><br></p><h2 id="프로미스의-3가지-상태"><a href="#프로미스의-3가지-상태" class="headerlink" title="프로미스의 3가지 상태"></a>프로미스의 3가지 상태</h2><table><thead><tr><th align="center">용어</th><th align="center">뜻</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">Pending</td><td align="center">대기</td><td align="center">비동기처리를 하지도, 거부하지도 않은 초기 상태</td></tr><tr><td align="center">Fulfilled</td><td align="center">이행</td><td align="center">비동기처리가 성공적으로 완료됨</td></tr><tr><td align="center">Rejected</td><td align="center">거부</td><td align="center">비동기처리가 실패함</td></tr></tbody></table><p><img src="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise"></p><p><br><br><br></p><h2 id="실무사용"><a href="#실무사용" class="headerlink" title="실무사용"></a>실무사용</h2><p>실무에서는 ajax등의 비동기를 동기화시킬때 사용한다.<br>예를 들어 onclick이벤트시 A메서드를 무조건 실행하고 난 뒤 B메서드를 실행하고 싶다면 콜백함수를 사용하면 되는데 만약 A함수를 호출한 뒤 B함수, 그 뒤 C함수 그 뒤 D함수를 사용해야한다면 콜백지옥이 펼쳐질것이다. 이를 예방하기 위해서 프로미스를 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"a[data-role=formTag]"</span>).click(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> customFormValidation(<span class="string">'성명'</span>, <span class="string">'name'</span>);</span><br><span class="line">    <span class="keyword">await</span> customFormValidation(<span class="string">'연락처'</span>, <span class="string">'mobile'</span>);</span><br><span class="line">    <span class="keyword">await</span> customFormValidation(<span class="string">'나이'</span>, <span class="string">'age'</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'form'</span>).submit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customFormValidation</span>(<span class="params">label, inputName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>($(<span class="string">'form'</span>).find(<span class="string">'input[name='</span>+inputName+<span class="string">']'</span>).val() == <span class="string">''</span> ||   </span><br><span class="line">  $(<span class="string">'form'</span>).find(<span class="string">'input[name='</span>+inputName+<span class="string">']'</span>).val() == <span class="number">0</span>)&#123;</span><br><span class="line">    $(<span class="string">'form'</span>).find(<span class="string">'input[name='</span>+inputName+<span class="string">']'</span>).parents(<span class="string">'dd'</span>).addClass(<span class="string">"reconfirm"</span>);</span><br><span class="line">    $(<span class="string">'form'</span>).find(<span class="string">'input[name='</span>+inputName+<span class="string">']'</span>).focus();</span><br><span class="line">   resolve(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">'input[name='</span>+inputName+<span class="string">']'</span>).parents(<span class="string">'dd'</span>).removeClass(<span class="string">"reconfirm"</span>);</span><br><span class="line">    resolve(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/01/16/220116JS-promise/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>spread operator (...) 점 세 개를 알아보자</title>
      <link>https://sowon-dev.github.io/2022/01/14/220115JS-spreadoperator/</link>
      <guid>https://sowon-dev.github.io/2022/01/14/220115JS-spreadoperator/</guid>
      <pubDate>Fri, 14 Jan 2022 22:12:30 GMT</pubDate>
      
      <description>&lt;p&gt;온점 세 개를 찍어서 표현하는 spread syntax(…)라고 한다.&lt;br&gt;이 spread operator는 S2015에서 새로 추가된 systax으로 병합, 구조 분배 할당(destructuring)등에 다양하게 활용할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>온점 세 개를 찍어서 표현하는 spread syntax(…)라고 한다.<br>이 spread operator는 S2015에서 새로 추가된 systax으로 병합, 구조 분배 할당(destructuring)등에 다양하게 활용할 수 있다.</p><a id="more"></a><h2 id="객체-배열-병합"><a href="#객체-배열-병합" class="headerlink" title="객체/배열 병합"></a>객체/배열 병합</h2><p>객체와 배열의 병합에 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newDBinfo = &#123;</span><br><span class="line">DATABASE_HOST: <span class="string">'나혜석'</span>,</span><br><span class="line">DATABASE_PASSWORD: <span class="string">'나혜석123'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">DATABASE_HOST: <span class="string">'유관순'</span>,</span><br><span class="line">DATABASE_PASSWORD: <span class="string">'유관순123'</span>,</span><br><span class="line">DATABASE_USERNAME: <span class="string">'user'</span>,</span><br><span class="line">... newDBinfo,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">... newDBinfo,</span><br><span class="line">DATABASE_HOST: <span class="string">'유관순'</span>,</span><br><span class="line">DATABASE_PASSWORD: <span class="string">'유관순123'</span>,</span><br><span class="line">DATABASE_USERNAME: <span class="string">'user'</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(config)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">DATABASE_HOST: "나혜석"</span></span><br><span class="line"><span class="comment">DATABASE_PASSWORD: "나혜석123"</span></span><br><span class="line"><span class="comment">DATABASE_USERNAME: "user"</span></span><br><span class="line"><span class="comment">[[Prototype]]: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(config2)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">DATABASE_HOST: "유관순"</span></span><br><span class="line"><span class="comment">DATABASE_PASSWORD: "유관순123"</span></span><br><span class="line"><span class="comment">DATABASE_USERNAME: "user"</span></span><br><span class="line"><span class="comment">[[Prototype]]: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>이 결과값으로 알 수 있듯 spread syntax(…)의 위치에 따라 덮어쓰기가 가능하다.</p><p><br><br><br></p><h2 id="객체-배열-reset"><a href="#객체-배열-reset" class="headerlink" title="객체/배열 reset"></a>객체/배열 reset</h2><p>객체와 배열을 자를 수 있다.</p><h3 id="객체예시"><a href="#객체예시" class="headerlink" title="객체예시"></a>객체예시</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">name: <span class="string">'유관순'</span>,</span><br><span class="line">age: <span class="string">'17'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;age, ...independenceData&#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(independenceData)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;name: "유관순"&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="배열-예시"><a href="#배열-예시" class="headerlink" title="배열 예시"></a>배열 예시</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [one, ...others] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(one) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(others) <span class="comment">// [2,3]</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/01/14/220115JS-spreadoperator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>let과 const와 Var의 차이, 어떻게 쓰면 좋을까?</title>
      <link>https://sowon-dev.github.io/2022/01/14/220115JS-letConstVar/</link>
      <guid>https://sowon-dev.github.io/2022/01/14/220115JS-letConstVar/</guid>
      <pubDate>Fri, 14 Jan 2022 21:56:47 GMT</pubDate>
      
      <description>&lt;p&gt;js에서 변수를 선언할때는 let과 const와 Var를 쓸 수 있다.&lt;br&gt;이들 중 어떨때 무엇을 사용하면 좋을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>js에서 변수를 선언할때는 let과 const와 Var를 쓸 수 있다.<br>이들 중 어떨때 무엇을 사용하면 좋을까?</p><a id="more"></a><p>이는 block scopting에 해답이 있다.</p><h2 id="Block-scopting"><a href="#Block-scopting" class="headerlink" title="Block scopting"></a>Block scopting</h2><p>아래 var로 선언한 예시를 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>var는 block scoping 자체를 갖지 않기 때문에 두번째 x 선언자체가 첫번째 x의 로컬 scope로 가게된다.<br>따라서 var로 선언한 두 변수는 같은 변수가 되고 가장 마지막에 선언한 값으로 결정된다.</p><p>이제 let과 const를 보자.<br>let과 const는 같은 scoping 룰을 따른다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>block 안과 밖을 구분하는 blcok scoping을 따른다.</p><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>위의 예시에서 알 수 있듯 let과 const는 예측 가능성이 높고 유지보수성이 var보다 뛰어나다.<br>따라서, </p><ul><li>const를 기본으로 사용하고 필요한 경우에 let을 사용하자</li><li>var는 절대 쓰지말자.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/01/14/220115JS-letConstVar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>경로(절대경로, 상대경로, ., ~)</title>
      <link>https://sowon-dev.github.io/2022/01/13/220114path/</link>
      <guid>https://sowon-dev.github.io/2022/01/13/220114path/</guid>
      <pubDate>Thu, 13 Jan 2022 16:30:53 GMT</pubDate>
      
      <description>&lt;p&gt;경로란 파일 위치를 알려줘서 연결할 때 사용한다.&lt;br&gt;이번에 &lt;code&gt;~&lt;/code&gt;라는 경로를 보았다. 항상 &lt;code&gt;.&lt;/code&gt;만 보았기때문에 어떤 경로인지 궁금했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>경로란 파일 위치를 알려줘서 연결할 때 사용한다.<br>이번에 <code>~</code>라는 경로를 보았다. 항상 <code>.</code>만 보았기때문에 어떤 경로인지 궁금했다.</p><a id="more"></a><h2 id="경로"><a href="#경로" class="headerlink" title="경로"></a>경로</h2><p>만약 아래와 같인 디렉토리 구조가 있다고 가정하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">│   README.md</span><br><span class="line">│   exam1.txt</span><br><span class="line">│</span><br><span class="line">└───webroot</span><br><span class="line">│   │   favicon.ico</span><br><span class="line">│   │</span><br><span class="line">│   └───css</span><br><span class="line">│   │   │   maim.css</span><br><span class="line">│   │   │   common.css</span><br><span class="line">│   │   │   ...</span><br><span class="line">│   │</span><br><span class="line">│   └───js</span><br><span class="line">│       │   maim.js</span><br><span class="line">│       │   common.js</span><br><span class="line">│       │   ...</span><br><span class="line">│</span><br><span class="line">└───controller</span><br><span class="line">│   │  HomeController</span><br><span class="line">│   │  UserController</span><br><span class="line">│</span><br><span class="line">└───view</span><br><span class="line">│   │ </span><br><span class="line">│   └───Home</span><br><span class="line">│       │   Home.html</span><br><span class="line">│   │ </span><br><span class="line">│   └───User</span><br><span class="line">│       │   Create.html</span><br><span class="line">│       │   Edit.html</span><br><span class="line">│       │   ...</span><br></pre></td></tr></table></figure><p>현재 <code>Create.html</code>에서 경로를 작성한다고 생각한다면 절대경로와 상대경로 예시는 아래 표와 같다.</p><table><thead><tr><th align="center">표현</th><th align="center">의미</th><th align="center">위치예시</th></tr></thead><tbody><tr><td align="center"><code>/</code></td><td align="center">루트, 가장 최상위 디렉토리</td><td align="center">project</td></tr><tr><td align="center"><code>~/</code></td><td align="center">루트, 가장 최상위 디렉토리</td><td align="center">project</td></tr><tr><td align="center"><code>./</code></td><td align="center">현재 위치</td><td align="center">User</td></tr><tr><td align="center"><code>../</code></td><td align="center">현재 위치의 상단 폴더</td><td align="center">view</td></tr><tr><td align="center"><code>../../</code></td><td align="center">현재 위치의 상단 폴더의 상단폴더</td><td align="center">project</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/HTML-CSS/">HTML&amp;CSS</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/HTML-CSS/">HTML&amp;CSS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/13/220114path/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Prototype</title>
      <link>https://sowon-dev.github.io/2022/01/09/220109JS-proto/</link>
      <guid>https://sowon-dev.github.io/2022/01/09/220109JS-proto/</guid>
      <pubDate>Sun, 09 Jan 2022 03:28:18 GMT</pubDate>
      
      <description>&lt;p&gt;js는 프로토타입기반 언어이다.&lt;br&gt;여기서 프로토타입이 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>js는 프로토타입기반 언어이다.<br>여기서 프로토타입이 무엇일까?</p><a id="more"></a><p>java나 python등 객체지향언어에는 Class(클래스)가 존재한다. 클래스를 가지고 상속등의 기능을 구현한다.<br>여기서 중요한 점은 js도 객체지향언어라는 점이다. 하지만 js에는 클래스라는 개념이 없다. 그렇다면 상속등의 기능은 어떻게 할 수 있을까? 이때 프로토타입을 사용한다. 기존의 객체를 clone하여 새로운 객체를 생성하는 것이다.</p><h2 id="프로토타입-상속"><a href="#프로토타입-상속" class="headerlink" title="프로토타입 상속"></a>프로토타입 상속</h2><p>사람(person)객체에는 sleep이라는 값이있다.<br>학생(student)객체에도 sleep이라는 값이 있고 <code>person</code>을 상속한다. 이를 <code>student</code>의 프로토타입은 <code>person</code>이라고 말한다.</p><p>아래 아주 간단한 예시를 보자. 3가지 물음표에는 각각 어떤 값이 나올까?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  sleep: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">  __proto__: person,</span><br><span class="line">  sleep: <span class="literal">true</span>,</span><br><span class="line">  study: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert( student.sleep ); <span class="comment">// ? (1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> student.sleep;</span><br><span class="line"></span><br><span class="line">alert( student.sleep ); <span class="comment">// ? (2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.sleep;</span><br><span class="line"></span><br><span class="line">alert( student.sleep ); <span class="comment">// ? (3)</span></span><br></pre></td></tr></table></figure><p>답은 아래와 같다.</p><ol><li>true</li><li>null</li><li>undefined</li></ol><p>이를 잘 활용하면 효율적인 객체생성이 가능하다. 이를 Class와 비교해보자!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pesrson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sleep = <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>는 자는 중`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.__proto__.constructor(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.study = <span class="function"><span class="keyword">function</span> <span class="title">study</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>는 공부중`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(Student.prototype, Person.prototype) <span class="comment">//set해줘야함</span></span><br></pre></td></tr></table></figure><p>위와 아래는 똑같다!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>()</span>&#123;</span><br><span class="line">constructor(name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep()&#123;</span><br><span class="line"><span class="keyword">return</span> `$&#123;<span class="keyword">this</span>.name&#125;는 자는 중`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Pesrson</span></span>&#123;</span><br><span class="line">constructor(name)&#123;</span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">study()&#123;</span><br><span class="line"><span class="keyword">return</span> `$&#123;<span class="keyword">this</span>.name&#125;는 공부중`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Student(<span class="string">"sowon-dev"</span>);</span><br><span class="line">console.log(me.study());</span><br><span class="line">console.log(me.sleep());</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="유용한-메서드"><a href="#유용한-메서드" class="headerlink" title="유용한 메서드"></a>유용한 메서드</h2><table><thead><tr><th align="center">메서드명</th><th align="center">리턴값</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">a instanceof b</td><td align="center">boolean</td><td align="center">a가 b를 상속하는지 확인할 수 있음</td></tr></tbody></table><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.javascript.info/prototype-inheritance">https://ko.javascript.info/prototype-inheritance</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/09/220109JS-proto/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>사내 101번서버에 접속하세요라는 의미(DNS 정보조회)</title>
      <link>https://sowon-dev.github.io/2022/01/05/220106Server-nslookup/</link>
      <guid>https://sowon-dev.github.io/2022/01/05/220106Server-nslookup/</guid>
      <pubDate>Wed, 05 Jan 2022 16:38:12 GMT</pubDate>
      
      <description>&lt;p&gt;한참 모든 것이 궁금한 시기인 나는 오늘도 궁금한 점이 생겼다.&lt;br&gt;오늘 팀장님이 사내서버에 프로젝트를 올렸으니 101번(임의번호)서버로 접속해서 확인해보라고 하셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>한참 모든 것이 궁금한 시기인 나는 오늘도 궁금한 점이 생겼다.<br>오늘 팀장님이 사내서버에 프로젝트를 올렸으니 101번(임의번호)서버로 접속해서 확인해보라고 하셨다.</p><a id="more"></a><p>사내 서버의 도메인을 이미 알고있었기때문에 해당 도메인인 link.sowonDev.com(임의도메인)으로 접속하니 잘 접속이 되었다.<br>여기서 궁금증한 건 사내도메인 link.sowonDev.com을 왜 101번서버라고 부르는 지였다.</p><p><br><br><br></p><h2 id="도메인-정보를-조회하는-명령어"><a href="#도메인-정보를-조회하는-명령어" class="headerlink" title="도메인 정보를 조회하는 명령어"></a>도메인 정보를 조회하는 명령어</h2><ul><li>nslookup: 도메인 이름에 대한 정보를 조회할 때 사용할 수 있는 명령어이다.</li></ul><p>cmd를 열어 아래와 같이 nslookup명령어를 입력하면 DNS서버에 해당 도메인정보를 요청하는 것이고 응답으로는 도메인정보가 나온다.<br>요청을 끝내고 싶으면 exit을 통해서 명령어작성에서 빠져나오면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;명령어</span><br><span class="line">$ nslookup [정보를알고싶은도메인]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;명령어 예시</span><br><span class="line">$ nslookup link.sowonDev.com</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;응답</span><br><span class="line">권한 없는 응답:</span><br><span class="line">이름: link.sowonDev.com</span><br><span class="line">Address: 123.000.00.101</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;명령종료</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure><p>자 이제 왜 101서버라고 불리는 지 감이 잡혔다.<br>응답을 보면 address부분의 제일 마지막 IP가 101이기 때문이다!<br>다른 사이트들도 궁금해졌다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup naver.com</span><br><span class="line"></span><br><span class="line">권한 없는  응답:</span><br><span class="line">이름: naver.com</span><br><span class="line">Address: 223.130.200.107</span><br><span class="line">223.130.195.200</span><br><span class="line">223.130.200.104</span><br><span class="line">223.130.195.95</span><br></pre></td></tr></table></figure><p>네이버 예시에서 알 수 있듯 네이버급의 규모가 큰 프로젝트는 4개의 서버를 사용한다.<br>신기해👍</p><p>그리고 좀 더 구글링해보니 굳이 cmd가 아니더라도 DNS recode를 조회할 수 있는 사이트를 찾을 수 있었다.<br>IPv4 Address뿐만 아니라 회사위치와 회사명도 나온다!</p><ul><li><a href="https://www.nslookup.io/">https://www.nslookup.io/</a></li></ul><p>위 사이트에서 google.com을 검색하면 IPv4는 물론 AAAA records인 IPv6 address도 확인할 수 있다!<br>재밌다😎</p><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>새로운 지식 습득은 언제나 재밌다.<br>그려려니 넘어가지말고 꼭 구글링해보자!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/05/220106Server-nslookup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>클로저(Closure)란</title>
      <link>https://sowon-dev.github.io/2022/01/05/220105JS-closure/</link>
      <guid>https://sowon-dev.github.io/2022/01/05/220105JS-closure/</guid>
      <pubDate>Wed, 05 Jan 2022 05:44:34 GMT</pubDate>
      
      <description>&lt;p&gt;탄탄한 자바스크립트 기본기를 다지기 위해 클로저에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>탄탄한 자바스크립트 기본기를 다지기 위해 클로저에 대해 알아보자.</p><a id="more"></a><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>closure = function + environment<br>클로저는 외부 변수를 기억하고 이 외부 변수에 접근할 수 있는 함수를 의미한다.<br>함수(function)가 하나 생길때마다 클로저는 하나씩 생성된다.<br>일반적으로 외부 함수의 실행이 끝나면 외부 함수가 소멸된다. 하지만 클로저는 외부 함수가 소멸된 이후에도 내부 함수가 외부함수의 변수에 접근할 수 있는 구조이다.</p><p>아래 문제를 풀어보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 이름부르기(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"나혜석"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"권기옥"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a function</span></span><br><span class="line"><span class="keyword">let</span> 인사 = 이름부르기();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 나혜석과 권기옥 중 누구의 이름이 불리게 될까?</span></span><br><span class="line">인사();</span><br></pre></td></tr></table></figure><p>여기서 정답은 바로 <code>나혜석</code>이다.<br>만약 이름부르기함수에서 <code>let name = &quot;나혜석&quot;;</code>이 없었다면 alert창은 <code>권기옥</code>으로 나올 것이다.</p><p>어떻게 이게 가능한걸까?<br>바로 자바스크립트의 함수는 숨겨진 프로퍼티인 [[Environment]]를 이용해 자신이 어디서 만들어졌는지를 기억하기 때문이다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.javascript.info/closure">https://ko.javascript.info/closure</a></li><li><a href="https://edu.goorm.io/learn/lecture/557/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-node-js/lesson/21731/%ED%81%B4%EB%A1%9C%EC%A0%80">https://edu.goorm.io/learn/lecture/557/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-node-js/lesson/21731/%ED%81%B4%EB%A1%9C%EC%A0%80</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/05/220105JS-closure/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>이벤트루프(Event loop)와 메인스레드(Main thread)</title>
      <link>https://sowon-dev.github.io/2022/01/04/220104JS-eventloop/</link>
      <guid>https://sowon-dev.github.io/2022/01/04/220104JS-eventloop/</guid>
      <pubDate>Tue, 04 Jan 2022 05:31:30 GMT</pubDate>
      
      <description>&lt;p&gt;탄탄한 자바스크립트 기본기를 다지기 위해 이벤트 루프에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>탄탄한 자바스크립트 기본기를 다지기 위해 이벤트 루프에 대해 알아보자.</p><a id="more"></a><h2 id="이벤트루프모델"><a href="#이벤트루프모델" class="headerlink" title="이벤트루프모델"></a>이벤트루프모델</h2><p>이벤트 루프 모델은 여러 스레드를 사용한다.<br>Node.js 프로세스에서 메인 스레드는 1개이며, 한 순간에 한 줄씩만 실행하지만 워커스레드(Worker thread)는 여러개이다.<br>이벤트 루프는 앞에 있는 콜백이 전부 처리가 끝나야 다음 콜백을 처리할 수 있다.</p><h2 id="용어정리"><a href="#용어정리" class="headerlink" title="용어정리"></a>용어정리</h2><ul><li>메인스레드: 자바스크립트 코드가 실행되는 스레드</li><li>워커스레드: 파일입출력스레드, 네트워크스레드등 메인스레드 외의 일을 하는 스레드</li><li>콜스택: 현재까지 불린 함수들의 스택</li><li>스택: 스택자료구조로 후입선출의 특성을 가진다.</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/1280px-Data_stack.svg.png" alt="출처: 위키백과"></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/04/220104JS-eventloop/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DDD는 디자인패턴인가 아키텍처인가?</title>
      <link>https://sowon-dev.github.io/2021/12/31/2201013tier-archVSddd/</link>
      <guid>https://sowon-dev.github.io/2021/12/31/2201013tier-archVSddd/</guid>
      <pubDate>Fri, 31 Dec 2021 22:31:52 GMT</pubDate>
      
      <description>&lt;p&gt;DDD(Domain-driven design)으로 프로젝트를 진행하게 되면서 DDD가 무엇인지 궁금해졌다.&lt;br&gt;DDD는 디자인패턴일까 아키텍처일까?&lt;br&gt;사소한 하나하나 다 궁금할 시기이지. 암암 그렇고말고.&lt;br&gt;구글링을 아무리 해봐도 뚜렷한 구분이 나오지 않았다. 그래서 공부한 내용을 바탕으로 팀장님께 문의를 드렸고 팀장님도 함께 고민해주셨다.&lt;br&gt;참 감사하다!&lt;br&gt;이번 포스팅은 스스로 공부하면서 작성한 포스팅이므로 정답이 아닐 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>DDD(Domain-driven design)으로 프로젝트를 진행하게 되면서 DDD가 무엇인지 궁금해졌다.<br>DDD는 디자인패턴일까 아키텍처일까?<br>사소한 하나하나 다 궁금할 시기이지. 암암 그렇고말고.<br>구글링을 아무리 해봐도 뚜렷한 구분이 나오지 않았다. 그래서 공부한 내용을 바탕으로 팀장님께 문의를 드렸고 팀장님도 함께 고민해주셨다.<br>참 감사하다!<br>이번 포스팅은 스스로 공부하면서 작성한 포스팅이므로 정답이 아닐 수 있다.</p><a id="more"></a><p>나에게 가장 익숙한 프로젝트 구조는 MVC패턴으로 프레젠테이션로직, 비즈니스로직, 데이터베이스 로직을 구분한 구조이다. 이를 3계층 구조라고 부른다고 하셨다.<br>디자인패턴으로 보면 MVC패턴이지만 아키텍처관점에서는 3Tier Architecture라는 것이다.</p><h2 id="디자인-패턴이란-🤠"><a href="#디자인-패턴이란-🤠" class="headerlink" title="디자인 패턴이란? 🤠"></a>디자인 패턴이란? 🤠</h2><ul><li>정의: 어떤걸 해결할려고 할때 효율적인 방법에 대해서 정해놓은 규칙</li><li>문제를 해결하기 위한 방법을 가이드</li><li>크기로 보면 패턴이 좀 더 아키텍쳐 보단 작은 느낌</li></ul><p><br><br><br></p><h2 id="소프트웨어-아키텍처란-🤠"><a href="#소프트웨어-아키텍처란-🤠" class="headerlink" title="소프트웨어 아키텍처란? 🤠"></a>소프트웨어 아키텍처란? 🤠</h2><ul><li>정의: 시스템, 컴포넌트 간의 관계가 어떻게 되어있냐 그런 구조적인 측면에서 정의한 것</li><li>특징: 언어적 혹은 시스템 구조적 등 여러가지 환경에 따라 구조가 달라서 해당 구조에서 사용할 수 있는 패턴도 달라짐</li><li>인프라 아키텍쳐(가장 광범위) -&gt; 시스템 아키텍쳐 -&gt; 소프트웨어 아키텍쳐(좁은범위)</li></ul><p><br><br><br></p><h2 id="디자인패턴-VS-소프트웨어-아키텍처-예시"><a href="#디자인패턴-VS-소프트웨어-아키텍처-예시" class="headerlink" title="디자인패턴 VS 소프트웨어 아키텍처 예시"></a>디자인패턴 VS 소프트웨어 아키텍처 예시</h2><table><thead><tr><th align="center"></th><th align="center">디자인패턴</th><th align="center">아키텍처</th></tr></thead><tbody><tr><td align="center">대표 예시</td><td align="center">MVC모델, Commnad, Factory, DAO</td><td align="center">데이터중심 스타일, 규칙기반스타일, 분산스타일, 파이프와 필터스타일</td></tr></tbody></table><p><br><br><br></p><h2 id="내가-내린-결론"><a href="#내가-내린-결론" class="headerlink" title="내가 내린 결론"></a>내가 내린 결론</h2><p>다시 본래 질문으로 돌아가자.<br>DDD는 디자인패턴일까 아키텍처일까?<br>여기서 내가 내린 결론은 소프트웨어 아키텍처이다.<br>왜냐하면 DDD는 디자인패턴 같으면서도 구조적이다. 비즈니스와 디자인패턴, 아키텍쳐까지 포함하기에 디자인패턴보다는 큰 개념인 아키텍처에 적합하다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>팀장님 지식</li><li><a href="https://incheol-jung.gitbook.io/docs/q-and-a/architecture/ddd">https://incheol-jung.gitbook.io/docs/q-and-a/architecture/ddd</a></li><li><a href="https://m.blog.naver.com/limoremo/220073573980">https://m.blog.naver.com/limoremo/220073573980</a></li><li><a href="http://www.jidum.com/jidums/view.do?jidumId=1002">http://www.jidum.com/jidums/view.do?jidumId=1002</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/">디자인패턴</category>
      
      
      <comments>https://sowon-dev.github.io/2021/12/31/2201013tier-archVSddd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA]@CreatedDate에 날짜가 안 담길때 오류</title>
      <link>https://sowon-dev.github.io/2021/11/29/211130Jpa-auditing/</link>
      <guid>https://sowon-dev.github.io/2021/11/29/211130Jpa-auditing/</guid>
      <pubDate>Mon, 29 Nov 2021 15:57:08 GMT</pubDate>
      
      <description>&lt;p&gt;@CreatedDate를 사용하여 save()메서드로 데이터를 insert하는데 날짜가 null로 나왔다.&lt;br&gt;이런 오류는 대부분 auditing이 제대로 적용되지 않았을때 발생한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>@CreatedDate를 사용하여 save()메서드로 데이터를 insert하는데 날짜가 null로 나왔다.<br>이런 오류는 대부분 auditing이 제대로 적용되지 않았을때 발생한다.</p><a id="more"></a><p><img src="/img/211130jpaAuditing1.PNG" alt="created_at 컬럼이 현재시간이 아닌 null값이다"></p><p><br><br><br></p><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><p> Entity클래스에 @EntityListeners 추가되어있지 않아서 Auditing기능이 작동하지않았다.</p><ul><li>Sample.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy =GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">protected</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ol><li><code>패키지Application.java</code>에 @EnableJpaAuditing 어노테이션 추가<br>JpaAuditing 기능을 사용하기 위해서는 패키지Application.java파일에서 @EnableJpaAuditing 추가해줘야한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableJpaAuditing</span> <span class="comment">// 추가</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 패키지<span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"@아아"</span>);</span><br><span class="line">SpringApplication.run(패키지Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Entity클래스에 @EntityListeners 추가<br>이걸 빼먹으면 @CreatedDate등 Auditing기능이 작동하지않는다.</li></ol><ul><li>Sample.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener<span class="class">.<span class="keyword">class</span>) // 추가</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy =GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">protected</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/211130jpaAuditing2.PNG" alt="정상적으로 날짜값이 isnert되었다."></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/11/29/211130Jpa-auditing/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
