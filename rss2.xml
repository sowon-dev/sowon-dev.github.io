<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Thu, 11 May 2023 04:34:48 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>count(**)와 count(1) 그리고 count(컬럼명) 차이</title>
      <link>https://sowon-dev.github.io/2023/05/10/230511-count/</link>
      <guid>https://sowon-dev.github.io/2023/05/10/230511-count/</guid>
      <pubDate>Wed, 10 May 2023 18:47:21 GMT</pubDate>
      
      <description>&lt;p&gt;SQL에서 count를 셀때 3가지 방법으로 나타낼 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SQL에서 count를 셀때 3가지 방법으로 나타낼 수 있다.</p><a id="more"></a><ol><li>count(*)</li><li>count(1)</li><li>count(컬럼명)</li></ol><h1 id="count-vs-count-1"><a href="#count-vs-count-1" class="headerlink" title="count(*) vs count(1)"></a>count(*) vs count(1)</h1><p>사실 둘 사이에는 아무런 차이도 없다.<br>동일하게 동작하는 걸 알 수 있다.<br>다만 가독성을 위해 <code>count(*)</code> 사용하는 것을 좋다고 한다.</p><p><br><br><br></p><h1 id="count-vs-count-컬럼명"><a href="#count-vs-count-컬럼명" class="headerlink" title="count(*) vs count(컬럼명)"></a>count(*) vs count(컬럼명)</h1><ul><li><code>COUNT(*)</code>는 레코드 갯수 전체를 카운트</li><li><code>COUNT(column_name)</code> 컬럼이 null이 아닌 경우 레코드 갯수를 카운트 </li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      
      <comments>https://sowon-dev.github.io/2023/05/10/230511-count/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Double/Float 변환시 ClassCastException오류 NaN 해결</title>
      <link>https://sowon-dev.github.io/2023/05/09/230509double-NaN/</link>
      <guid>https://sowon-dev.github.io/2023/05/09/230509double-NaN/</guid>
      <pubDate>Tue, 09 May 2023 00:57:24 GMT</pubDate>
      
      <description>&lt;p&gt;화면에서 컨트롤러로 파라미터 &lt;code&gt;HashMap&amp;lt;String, String&amp;gt; map&lt;/code&gt;를 받아 double값을 형변환하려고 하는데 ClassCastException이 발생했다.&lt;br&gt;Java.lang.Integer cannot be case to Java.lang.String 이었고 원인을 찾아보니 NaN가 문제였다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>화면에서 컨트롤러로 파라미터 <code>HashMap&lt;String, String&gt; map</code>를 받아 double값을 형변환하려고 하는데 ClassCastException이 발생했다.<br>Java.lang.Integer cannot be case to Java.lang.String 이었고 원인을 찾아보니 NaN가 문제였다.</p><a id="more"></a><h1 id="기존코드와-원인분석"><a href="#기존코드와-원인분석" class="headerlink" title="기존코드와 원인분석"></a>기존코드와 원인분석</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Double fee = Double.valueOf(map.get(<span class="string">"fee"</span>));</span><br></pre></td></tr></table></figure><p>원인은 바로바로 <code>NaN</code>이다!<br>화면에서 map.get(“fee”)의 값이 없어서 <code>NaN</code>으로 파라미터가 컨트롤러로 넘어왔다.<br>내 의도는 화면에서 주는 값이 없으면 서비스단에서 <code>null</code>을 넣는 거였는데 NaN이라 이를 Double로 형변환하려니까 ClassCastException이 발생한 것이었다. </p><p><br><br><br></p><h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>Double에서는 isNaN을 제공해준다. 이를 이용하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//해결코드</span></span><br><span class="line"><span class="keyword">if</span>(Double.isNaN(Double.valueOf(map.get(<span class="string">"fee"</span>))))&#123;</span><br><span class="line">fee = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fee = Double.Double.valueOf(map.get(<span class="string">"fee"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>오늘도 해결!</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://www.javatpoint.com/java-double-isnan-method">https://www.javatpoint.com/java-double-isnan-method</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/05/09/230509double-NaN/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>팝업(모달)창에서 datepicker 적용 안되는 오류 해결법</title>
      <link>https://sowon-dev.github.io/2023/04/25/230426datepicker-error-in-modal/</link>
      <guid>https://sowon-dev.github.io/2023/04/25/230426datepicker-error-in-modal/</guid>
      <pubDate>Tue, 25 Apr 2023 21:32:46 GMT</pubDate>
      
      <description>&lt;p&gt;화면작업을 하는데 리스트화면에서도 부트스트랩 datepicker를 사용하고 리스트화면의 상세보기 버튼을 눌러 팝업창을 띄우는데 거기서도 datepicker를 써야했다.&lt;br&gt;근데 문제는 리스트화면의 datepicker는 잘 작동하는데 팝업창의 datepicker는 전혀 작동하지않았다.&lt;br&gt;달력아이콘을 클릭해도 달력이 안나오고 input을 클릭해도 포커싱은 되는데 달력이 안나오니 환장할 노릇.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>화면작업을 하는데 리스트화면에서도 부트스트랩 datepicker를 사용하고 리스트화면의 상세보기 버튼을 눌러 팝업창을 띄우는데 거기서도 datepicker를 써야했다.<br>근데 문제는 리스트화면의 datepicker는 잘 작동하는데 팝업창의 datepicker는 전혀 작동하지않았다.<br>달력아이콘을 클릭해도 달력이 안나오고 input을 클릭해도 포커싱은 되는데 달력이 안나오니 환장할 노릇.</p><a id="more"></a><p>오전 내내 이 문제를 가지고 구글링해서 여러 방법을 시도했다.</p><h1 id="원인찾기"><a href="#원인찾기" class="headerlink" title="원인찾기"></a>원인찾기</h1><p>디버깅해보니 캘린더 클릭시 아래 div태그가 disploy:none에서 display:block으로 바뀌지않는 문제였다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ui-datepicker-div"</span> <span class="attr">style</span>=<span class="string">"display=none;"</span>&gt;</span></span><br><span class="line">//중략</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="시도1-팝업화면-show-이벤트-적용"><a href="#시도1-팝업화면-show-이벤트-적용" class="headerlink" title="시도1 : 팝업화면 show 이벤트 적용"></a>시도1 : 팝업화면 show 이벤트 적용</h1><p>리스트화면에 팝업show 이벤트 적용하기 실패했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#modal'</span>).on(<span class="string">'show'</span>, function () &#123;</span><br><span class="line">    $.fn.modal.Constructor.prototype.enforceFocus = function () &#123; &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>혹시몰라서 팝업창 스크립트에서도 아래 코드 적용해봤지만 실패했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.fn.modal.Constructor.prototype.enforceFocus = function () &#123; &#125;;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="시도2-팝업화면-shown-이벤트-적용"><a href="#시도2-팝업화면-shown-이벤트-적용" class="headerlink" title="시도2 : 팝업화면 shown 이벤트 적용"></a>시도2 : 팝업화면 shown 이벤트 적용</h1><p>리스트화면에 팝업 shown 이벤트 적용도 실패했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#modal'</span>).on(<span class="string">'shown'</span>, function () &#123;</span><br><span class="line">    $.fn.modal.Constructor.prototype.enforceFocus = function () &#123; &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="시도3-z-index주기"><a href="#시도3-z-index주기" class="headerlink" title="시도3 : z-index주기"></a>시도3 : z-index주기</h1><p>혹시나하고 z-index를 줘봤지만 역시나 실패했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=<span class="string">"z-index:10000;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="시도4-강제로-div태그-display-block주기"><a href="#시도4-강제로-div태그-display-block주기" class="headerlink" title="시도4 : 강제로 div태그 display:block주기"></a>시도4 : 강제로 div태그 display:block주기</h1><p>팝업창 내에서 달력아이콘에 온클릭이벤트를 걸어 toggle을 줘봤지만 실패했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#달력아이콘'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#ui-datepicker-div"</span>).toggle()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>비흡연자지만 담타를 가시는 차장님을 쫄래쫄래 따라가서 여쭤봤다.<br>이런 에러가 있고 이런 것까지 오전내내했는데 안되는데 뭐가 문제일까요 하고 여쭤봤더니 5분만에 해결해주셨다.</p><p>나의 경우 스크립트와 link를 중복 선언한게 문제였다.<br>그래서 리스트화면의 스크립트태그, link태그는 그대로 두고 팝업창에 선언한 스크립트태그와 link태그를 삭제했더니 잘 작동했다!</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/resources/css/bootstrap.css"</span> /&gt; <span class="comment">//삭제</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/resources/css/base.css"</span> /&gt; <span class="comment">//삭제</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/resources/css/jquery_ui.css"</span> /&gt; <span class="comment">//삭제</span></span><br><span class="line">&lt;script src="/resources/js/jquery_min.js"&gt;&lt;/script&gt; //삭제</span><br><span class="line">&lt;script src="/resources/js/jquery-ui.min.js"&gt;&lt;/script&gt; //삭제</span><br></pre></td></tr></table></figure><p>유레카!<br>감사합니다 차장님!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/04/25/230426datepicker-error-in-modal/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[모바일] deeplink가 뭐길래(개념, 정의)</title>
      <link>https://sowon-dev.github.io/2023/04/10/230411deeplink/</link>
      <guid>https://sowon-dev.github.io/2023/04/10/230411deeplink/</guid>
      <pubDate>Mon, 10 Apr 2023 20:55:17 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 회의를 하다가 부장님이 deeplink를 사용하면된다고 하셨다.&lt;br&gt;deeplink가 뭐지? 처음 듣는 용어라 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 회의를 하다가 부장님이 deeplink를 사용하면된다고 하셨다.<br>deeplink가 뭐지? 처음 듣는 용어라 공부해봤다.</p><a id="more"></a><h1 id="Deeplink"><a href="#Deeplink" class="headerlink" title="Deeplink"></a>Deeplink</h1><ul><li>링크를 클릭하면 특정 앱으로 이동하거나, 앱이 없다면 설치를 유도하거나, 앱이 있다면 앱 내 특정페이지로 이동시킬 수 있다. </li><li>활용: 모바일 마케팅광고에 흔히 사용하는 방식으로 클릭시 앱이 없다면 앱설치 유도하는 페이지로, 앱이 있다면 앱 내 특정페이지로 이동시킨다.</li></ul><p><br><br><br></p><h1 id="Deeplink-3가지-방식"><a href="#Deeplink-3가지-방식" class="headerlink" title="Deeplink 3가지 방식"></a>Deeplink 3가지 방식</h1><ul><li>URI 스킴 방식 : 앱에 URI 스킴(scheme) 값을 등록하여 딥링크 사용</li><li>앱링크(App Link) : Android 제공 - 도메인 주소를 이용한 딥링크 사용</li><li>유니버셜 링크 (Universal Link) : iOS 제공  - 도메인 주소를 이용한 딥링크 사용</li></ul><p><br><br><br></p><h2 id="1-URI-scheme"><a href="#1-URI-scheme" class="headerlink" title="1 URI scheme"></a>1 URI scheme</h2><p><img src="https://assets-global.website-files.com/607008c6d94a9d637e9a1b5e/62fc5889746fed112ae27c78_c7tZQN4hmkM2vGCpnagTHfwLO537kliihBl-zdxePv5t5lAYDjk6JfXipcQbtqW4fAq4nKYLoIIxjoekZzvjrt_oD-LxGR3A6OuR0ufs4uBfE2-5nUaKvIYKlVOROqL5m7EclUM9c_WU6OjmDQISyAU.png" alt="https://www.airbridge.io/blog/deeplink-101-for-marketers-and-developers"></p><p>가장 일반적으로 딥링크를 사용하는 방식은 URI Scheme 방식이다.<br>이 방식의 한계는 점차 앱이 다양해지면서 앱 스킴값이 중복되는 경우가 존재한다는 것이다. 이런 경우 개발자가 원하는 대로 작동하지 않을 수 있다.</p><h2 id="2-유니버셜-링크와-앱-링크"><a href="#2-유니버셜-링크와-앱-링크" class="headerlink" title="2 유니버셜 링크와 앱 링크"></a>2 유니버셜 링크와 앱 링크</h2><p>유니버설 링크(Universal Links)와 앱 링크(App Links)는 각각 iOS와 Android에서 사용되는 딥 링킹 프로토콜이다.<br>도메인은 딱 1개밖에 없기때문에 이들은 URI 스키마의 한계를 극복하기 위해 앱의 도메인 이름을 운영 체제(OS)에 등록하여 소유권을 증명하는 방식을 사용한다.<br>여기서 도메인이름이란? <code>https://sowon-dev.github.io/categories/Android/</code> 에서 domain name은 <code>sowon-dev.github.io</code>이다.</p><p>이 방식에도 한계가 존재한다.<br>유니버셜링크는 구글에서만, 앱링크는 사파리에서만 정상 작동되고 다른 앱이나 브라우저에서 작동이 안될 수 있다.</p><p><img src="https://assets-global.website-files.com/607008c6d94a9d637e9a1b5e/62fc5889bfab9a2428897cee_tMIk_94XMbU_D5iYHKEmxSsZVB4Ei1E8sPF88cajh6AI3Q3YSXwQduYryDxZKEXn0GE1u_t46Pj8exzs9HfHUbNPSle23Q-SbTKG1ntud1ajlXJCzrJL-KW1uwATktTBsPNy3sxiApRfa_9BcckceMg.png" alt="https://www.airbridge.io/blog/deeplink-101-for-marketers-and-developers"></p><p>결론적으로 현재까진 3가지 방식(URI 스킴 방식, 유니버셜링크, 앱링크)을 모두 사용해야한다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://www.airbridge.io/blog/deeplink-101-for-marketers-and-developers">https://www.airbridge.io/blog/deeplink-101-for-marketers-and-developers</a></li><li><a href="https://help.dfinery.io/hc/ko/articles/360039757433-%EB%94%A5%EB%A7%81%ED%81%AC-Deeplink-URI%EC%8A%A4%ED%82%B4-%EC%9C%A0%EB%8B%88%EB%B2%84%EC%85%9C-%EB%A7%81%ED%81%AC-%EC%95%B1%EB%A7%81%ED%81%AC-%EA%B5%AC%EB%B6%84%EA%B3%BC-%EC%9D%B4%ED%95%B4">https://help.dfinery.io/hc/ko/articles/360039757433-딥링크-Deeplink-URI스킴-유니버셜-링크-앱링크-구분과-이해</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2023/04/10/230411deeplink/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kafka(카프카)가 뭐길래(개념, 정의)</title>
      <link>https://sowon-dev.github.io/2023/04/09/230410kafka/</link>
      <guid>https://sowon-dev.github.io/2023/04/09/230410kafka/</guid>
      <pubDate>Sun, 09 Apr 2023 21:30:25 GMT</pubDate>
      
      <description>&lt;p&gt;저번주 회의에서 팀장님과 차장님이 kafka에 대해 짧게 이야기를 나누셨는데 나는 메시지 다루는 시스템인 줄만 알았는데 비동기등 다양한 이야기를 해주셨다. 놓칠수없기에 따로 공부를 해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>저번주 회의에서 팀장님과 차장님이 kafka에 대해 짧게 이야기를 나누셨는데 나는 메시지 다루는 시스템인 줄만 알았는데 비동기등 다양한 이야기를 해주셨다. 놓칠수없기에 따로 공부를 해보았다.</p><a id="more"></a><h1 id="Kafka-카프카"><a href="#Kafka-카프카" class="headerlink" title="Kafka 카프카"></a>Kafka 카프카</h1><p>chatGPT에 문의하니 아래와 같이 답변을 얻었다.</p><blockquote><p>Kafka is an open-source platform used for handling large amounts of data in real-time. It was originally developed by LinkedIn, but is now maintained by the Apache Software Foundation.<br>Think of Kafka as a messaging system that can receive, store, and distribute data streams. It allows you to publish data to a stream or subscribe to a stream to receive data. This makes it useful for applications where data needs to be processed and analyzed as it’s generated, such as in a real-time analytics system.<br>Here’s a super easy example to help illustrate Kafka’s functionality:<br>Let’s say you have a website where users can upload images. Whenever a new image is uploaded, you want to process it in some way (maybe resizing it or running some filters on it) and then store it on your servers. You also want to display a thumbnail of the image on the website so users can see it right away.<br>With Kafka, you could set up a “topic” (a stream of data) called “image-uploads”. Whenever a user uploads an image, your website would send a message to the “image-uploads” topic with the details of the image (e.g. the file name, user ID, etc.). You could have a separate “consumer” application (i.e. a program that subscribes to the “image-uploads” topic) that listens for new messages and processes them accordingly.<br>For example, the consumer application might download the image, resize it, and store it on your servers. It could also generate a thumbnail and send a message to a separate “thumbnails” topic with the details of the thumbnail. Another consumer application could listen for messages on the “thumbnails” topic and display the thumbnail on the website.<br>This is just one simple example, but hopefully it gives you an idea of how Kafka can be used to handle real-time data processing and distribution.<br>출처: chatGPT</p></blockquote><p>카프카 정의 및 특징</p><ul><li>실시간으로 대용량 데이터를 처리하는 오픈소스</li><li>링크드인에서 처음 개발</li><li>데이터 스트림을 수신, 저장 및 배포하는 메시징 시스템</li><li>특징: 데이터를 스트림에 게시하거나 스트림을 구독하여 데이터를 수신할 수 있도록 함</li><li>활용: 실시간 분석 시스템과 같이 데이터가 생성됨과 동시에 처리 및 분석해야 하는 애플리케이션에 유용</li></ul><p>가장 쉬운 예시와 함께 설명해달라고 했더니 chatGPT가 준 사용자 이미지 업로드 웹사이트 예시를 알려줬다.<br>사용자 이미지 업로드와 동시에 썸네일만들어서 올리기, 이미지사이즈 조정하기등 특별한 절차가 존재한다면, Kafka를 통해 <code>사용자이미지업로드</code>라는 토픽을 만든 뒤 토픽을 구독하고 있는 모든 애플리케이션에 실시간으로 상세데이터와 함께 토픽을 전달한다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>chatGPT</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Network/">Network</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/04/09/230410kafka/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Java]List에서 중복값을 제외하는 방법2가지</title>
      <link>https://sowon-dev.github.io/2023/04/06/230407removeduplicatevalueinlist/</link>
      <guid>https://sowon-dev.github.io/2023/04/06/230407removeduplicatevalueinlist/</guid>
      <pubDate>Thu, 06 Apr 2023 15:42:04 GMT</pubDate>
      
      <description>&lt;p&gt;커스텀한 객체를 가지는 List에서 중복된 객체를 제거하고 싶었다. 차장님께 물어보니 2가지 방법을 알려주셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>커스텀한 객체를 가지는 List에서 중복된 객체를 제거하고 싶었다. 차장님께 물어보니 2가지 방법을 알려주셨다.</p><a id="more"></a><h1 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 커스텀한 User 객체</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">":"</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List 선언하기</span></span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"조지"</span>, <span class="number">7</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"휘슬"</span>, <span class="number">8</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"브라이언"</span>, <span class="number">9</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"브라이언"</span>, <span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">userList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과값</span></span><br><span class="line">조지:<span class="number">7</span></span><br><span class="line">휘슬:<span class="number">8</span></span><br><span class="line">브라이언:<span class="number">9</span></span><br><span class="line">브라이언:<span class="number">9</span></span><br></pre></td></tr></table></figure><p>위 userList에서 중복을 제거하는 방법은 2가지이다.<br>생성자를 활용하거나 stream().distinct()를 사용하는 방법이다.</p><p><br><br><br></p><h1 id="1-생성자-활용"><a href="#1-생성자-활용" class="headerlink" title="1 생성자 활용"></a>1 생성자 활용</h1><p>기본 타입이 아닌 참조 타입인 경우 클래스에서 hashCode() 메서드와 equals() 메서드를 재정의 먼저 해줘야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hashCode(), equals() 메서드 추가</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">":"</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == obj) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(getClass() != obj.getClass())&#123;</span><br><span class="line">retyrn <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">User other = (User) obj;</span><br><span class="line"><span class="keyword">return</span> name == other.name &amp;&amp; Objects.equals(age, other.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자활용</span></span><br><span class="line">List&lt;User&gt; distinctUserList = <span class="keyword">new</span> ArrayList&lt;User&gt;(<span class="keyword">new</span> HashSet&lt;User&gt;(userList));</span><br><span class="line">distinctUserList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과값</span></span><br><span class="line">조지:<span class="number">7</span></span><br><span class="line">휘슬:<span class="number">8</span></span><br><span class="line">브라이언:<span class="number">9</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="2-stream-활용"><a href="#2-stream-활용" class="headerlink" title="2 stream 활용"></a>2 stream 활용</h1><p>기본 타입이 아닌 참조 타입인 경우 클래스에서 hashCode() 메서드와 equals() 메서드를 재정의 먼저 해줘야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hashCode(), equals() 메서드 추가</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">":"</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == obj) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(getClass() != obj.getClass())&#123;</span><br><span class="line">retyrn <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">User other = (User) obj;</span><br><span class="line"><span class="keyword">return</span> name == other.name &amp;&amp; Objects.equals(age, other.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream().distinct() 활용</span></span><br><span class="line">List&lt;User&gt; distinctUserList = userList.stream()</span><br><span class="line">                                      .distinct()</span><br><span class="line">                                      .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">distinctUserList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과값</span></span><br><span class="line">조지:<span class="number">7</span></span><br><span class="line">휘슬:<span class="number">8</span></span><br><span class="line">브라이언:<span class="number">9</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li>차장님 지식</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Java/">Java</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/04/06/230407removeduplicatevalueinlist/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CDN이 뭐길래(개념, 정의)</title>
      <link>https://sowon-dev.github.io/2023/03/27/230328cdn/</link>
      <guid>https://sowon-dev.github.io/2023/03/27/230328cdn/</guid>
      <pubDate>Mon, 27 Mar 2023 19:21:42 GMT</pubDate>
      
      <description>&lt;p&gt;CDN이란 뭘까? 서버리스개념을 공부하면서 CDN이 궁금해졌다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>CDN이란 뭘까? 서버리스개념을 공부하면서 CDN이 궁금해졌다.</p><a id="more"></a><h1 id="CDN-Content-Delivery-Network"><a href="#CDN-Content-Delivery-Network" class="headerlink" title="CDN(Content Delivery Network)"></a>CDN(Content Delivery Network)</h1><ul><li>거리상의 문제로 발생하는 페이지로딩속도 향상을 위해서 CDN사용</li><li>웹페이지, 이미지, 폰트 등 정적 콘텐츠를 캐싱할 수 있는 서버</li><li>장점: 페이지로딩속도 향상할 수 있음</li><li>단점: 동적은 CDN에서 처리 불가<ul><li>CDN에서 동적코드 가능하도록 몇몇 함수를 구현할 수 있다.</li></ul></li></ul><p>즉, 특정 국가나 지역만을 타깃으로 하는 웹 서비스를 운영한다면 CDN 서비스를 활용할 필요가 없다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://aws.amazon.com/ko/what-is/cdn/">https://aws.amazon.com/ko/what-is/cdn/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/03/27/230328cdn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[GITHUB]깃허브액션(github action)</title>
      <link>https://sowon-dev.github.io/2023/03/16/230317githubaction/</link>
      <guid>https://sowon-dev.github.io/2023/03/16/230317githubaction/</guid>
      <pubDate>Thu, 16 Mar 2023 15:56:43 GMT</pubDate>
      
      <description>&lt;p&gt;어제 부장님이 젠키스와 깃헙액션을 이용해서 CI/CD에 관한 걸 말씀해주셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>어제 부장님이 젠키스와 깃헙액션을 이용해서 CI/CD에 관한 걸 말씀해주셨다.</p><a id="more"></a><p>젠킨스랑 깃헙액션이 같은 역할을 한다고 생각했는데 아닌거 같아 깃헙액션을 공부하게 되었다.<br>깃헙액션을 가장 잘 소개한 영상이 있다면 바로 드림코딩 엘리님이다.<br>정말 쉽게 잘 설명해주시니까 깃헙액션을 알고싶은 사람이라면 필수 시청해야하는 영상이다!</p><iframe width="100%" height="400px" src="https://www.youtube.com/embed/iLqGzEkusIw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>이번 글은 위 영상을 요약하면서 추가적으로 구글링한 내용을 덧붙였음을 밝혀둔다.<br>😍엘리님 매번 좋은 영상 감사합니다😍</p><p><br><br><br></p><h1 id="깃과-깃헙-깃헙액션의-관계"><a href="#깃과-깃헙-깃헙액션의-관계" class="headerlink" title="깃과 깃헙, 깃헙액션의 관계"></a>깃과 깃헙, 깃헙액션의 관계</h1><p>버전관리시스템에서 가장 많이 사용하는 GIT과 그걸 배포할 수 있는 GITHUB가 있다.<br>여기서 자동화(CI/CD)를 이용하려면 GITHUB의 레포지토리에다가 jenkins, buildkite, circleci 중 하나를 연결해야 가능했다.<br>하지만 2018년에 깃헙액션이 등장하면서 별도의 외부툴없이 자동화프로세스를 만들 수 있다.</p><p><br><br><br></p><h1 id="여기서-잠깐-CI-CD란"><a href="#여기서-잠깐-CI-CD란" class="headerlink" title="여기서 잠깐 CI/CD란?"></a>여기서 잠깐 CI/CD란?</h1><ul><li>CI: 지속적인 통합</li><li>CD: 지속적인 배포</li></ul><p>깃헙 메인 리포지토리에 새롭게 추가되는 기능들을 CI서버에서 자동으로 빌드하고 테스트하고 지속적으로 배포하는 것을 말한다.<br>CI와 CD의 차이점과 데브옵스까지 궁금하다면 <a href="https://sowon-dev.github.io/2020/12/04/201205devOpsandCICD/">블로그 글 - DevOps와 CI/CD차이</a>에 쉽게 작성해두었으니 참고하면 좋다.</p><p><br><br><br></p><h1 id="깃헙액션-개념"><a href="#깃헙액션-개념" class="headerlink" title="깃헙액션 개념"></a>깃헙액션 개념</h1><p>깃헙액션에는 중요한 5가지 개념이 있다.</p><p><img src="https://www.freecodecamp.org/news/content/images/2022/01/build-your-first-github-action_components.png" alt="https://www.freecodecamp.org"></p><h2 id="1-Events"><a href="#1-Events" class="headerlink" title="1 Events"></a>1 Events</h2><p>어떤 일이 발생했는지를 지정하는 곳<br>아래 예시처럼 특정한 이벤트가 일어났을때 그 후로 뭘 해야할지 wrokflows로 지정해줄 수 있다.<br>e.g</p><ul><li>1) main브랜치로 머지했을때</li><li>2) 커밋을 푸쉬했을때</li><li>3) 이슈를 누군가 만든다면</li></ul><p><br><br><br></p><h2 id="2-Workflows"><a href="#2-Workflows" class="headerlink" title="2 Workflows"></a>2 Workflows</h2><p>특정한 이벤트가 발생하면 어떤 걸 해야하는지 순서를 명시하는 곳.<br>Workflows안에는 하나 또는 다수의 job이 있다.</p><p><br><br><br></p><h2 id="3-Job"><a href="#3-Job" class="headerlink" title="3 Job"></a>3 Job</h2><p>무언가를 실행하는 걸 명시하는 곳<br>job안에는 쉘스크립트로 step을 만들어줄수있다.</p><p><br><br><br></p><h2 id="4-Action"><a href="#4-Action" class="headerlink" title="4 Action"></a>4 Action</h2><p>깃헙액션에서 제일 유용한 부분이다.<br>우리가 자주 사용하는 공개적으로 오픈된 Action들이 미리 정해져 제공된다.<br>npm에서 라이브러리 가져다쓰는 것처럼 깃헙액션도 동일한 것이라고 생각하면 된다.</p><p><br><br><br></p><h2 id="5-Runner"><a href="#5-Runner" class="headerlink" title="5 Runner"></a>5 Runner</h2><p>Job을 실행하는 것이 바로 Runner이다.<br>JOB의 갯수만큼 RUNNER가 존재하며 이들은 독립적으로 실행된다.<br>러너는 VM 혹 도커컨테이너라고도 생각할 수 있다.</p><p><br><br><br></p><h1 id="깃헙액션-흐름"><a href="#깃헙액션-흐름" class="headerlink" title="깃헙액션 흐름"></a>깃헙액션 흐름</h1><p><img src="https://engineering.empathy.co/content/images/size/w1000/2022/07/CI-CD-Blog-Graphic-Final_Medium_CI_CD-1200x400---1-.jpg" alt="https://engineering.empathy.co/"></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Version-control/">Version control</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/GIT/">GIT</category>
      
      
      <comments>https://sowon-dev.github.io/2023/03/16/230317githubaction/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[@Autowired에러]no qualifying bean of type available: expected at least 1 bean which qualifies as autowire candidate 오류해결</title>
      <link>https://sowon-dev.github.io/2023/03/12/230313autowirederror/</link>
      <guid>https://sowon-dev.github.io/2023/03/12/230313autowirederror/</guid>
      <pubDate>Sun, 12 Mar 2023 23:29:17 GMT</pubDate>
      
      <description>&lt;p&gt;스트레스를 주는(?) 생성자주입에러! 나는 분명 모든 스프링빈등록을 어노테이션으로 제대로 걸었다고 생각했는데 자꾸 빈등록할 것이 없단다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스트레스를 주는(?) 생성자주입에러! 나는 분명 모든 스프링빈등록을 어노테이션으로 제대로 걸었다고 생각했는데 자꾸 빈등록할 것이 없단다.</p><a id="more"></a><h1 id="1-Controller-Service-Repository-누락-어노테이션-찾기"><a href="#1-Controller-Service-Repository-누락-어노테이션-찾기" class="headerlink" title="1. @Controller, @Service, @Repository 누락 어노테이션 찾기"></a>1. @Controller, @Service, @Repository 누락 어노테이션 찾기</h1><p>구글링해보니 @Controller, @Service, @Repository 어노테이션을 누락된 부분을 찾으라는 글이 많았다.<br>하지만 아무리 찾아도 보이지않았다.<br>프로세스 흐름대로 흘러가도 보이지 않는 누락 어노테이션.</p><p><br><br><br></p><h1 id="2-component-scan에-패키지가-누락되었는지-확인하기"><a href="#2-component-scan에-패키지가-누락되었는지-확인하기" class="headerlink" title="2. component-scan에 패키지가 누락되었는지 확인하기"></a>2. component-scan에 패키지가 누락되었는지 확인하기</h1><p><code>root-context.xml</code> 과 <code>servlet-context.xml</code>에서 해당 패키지가 누락되진않았는지 체크해보자.<br>나의 경우 패키지 <code>com.test.api</code>가 누락되서 발생된 에러였다.<br>추가해주니 정상적으로 빈생성이 되고 server run이 성공했다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.dao"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.service"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.util"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.api"</span> /&gt;</span> <span class="comment">&lt;!-- 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2023/03/12/230313autowirederror/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Gson]MalformedJsonException 에러해결</title>
      <link>https://sowon-dev.github.io/2023/03/02/230303malformedjsonexception/</link>
      <guid>https://sowon-dev.github.io/2023/03/02/230303malformedjsonexception/</guid>
      <pubDate>Thu, 02 Mar 2023 19:12:09 GMT</pubDate>
      
      <description>&lt;p&gt;백단 테스트 중 json을 받을 일이 있어서 그냥 작성했더니 아래와 같은 오류가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>백단 테스트 중 json을 받을 일이 있어서 그냥 작성했더니 아래와 같은 오류가 발생했다.</p><a id="more"></a><h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><ul><li><p>jsp코드</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param = &#123;&#125;;</span><br><span class="line">param.userid = <span class="string">'testuser'</span>;</span><br><span class="line">param.json = <span class="string">'&#123;\"title\":\"테스트제목\", \"detail\":\"테스트1의 설명입니다.\"&#125;'</span>;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"/test/json"</span>,</span><br><span class="line">method: <span class="string">"POST"</span>,</span><br><span class="line">data: param,</span><br><span class="line">callback: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>testVO코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>컨트롤러코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test/json"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TestVO <span class="title">testControl</span><span class="params">(@ResquestParam HashMap&lt;String, String&gt; param)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">TestVO test = <span class="keyword">new</span> TestVO();</span><br><span class="line">test = <span class="keyword">new</span> Gson().fromJson(param.get(<span class="string">"json"</span>), TestVO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>에러메시지</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.google.gson.stream.MalformedJsonException: Expected &#39;:&#39; at line 1 column 8 path $.&amp;quot</span><br></pre></td></tr></table></figure></li></ul><p>언제나 에러메시지 안에 답이 있다.</p><p><br><br><br></p><h1 id="해결1-공백-특수문자-제거"><a href="#해결1-공백-특수문자-제거" class="headerlink" title="해결1: 공백, 특수문자 제거"></a>해결1: 공백, 특수문자 제거</h1><p><a href="https://everydayidid.tistory.com/69">com.google.gson.stream.MalformedJsonException - juno.log</a>을 참고하면 특수문자를 제거하는 방법이 있다.<br>내 상황에선 json형태가 깨지기에 사용할 수 없었다. </p><p><br><br><br></p><h1 id="해결2-setter-사용"><a href="#해결2-setter-사용" class="headerlink" title="해결2: setter 사용"></a>해결2: setter 사용</h1><p>jsp코드와 컨트롤러 코드를 수정했다.</p><ul><li>jsp코드<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param = &#123;&#125;;</span><br><span class="line">param.userid = <span class="string">"testuser"</span>;</span><br><span class="line">param.title = <span class="string">"테스트제목"</span>;</span><br><span class="line">param.detail = <span class="string">"테스트1의 설명입니다"</span>;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"/test/json"</span>,</span><br><span class="line">method: <span class="string">"POST"</span>,</span><br><span class="line">data: param,</span><br><span class="line">callback: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>컨트롤러코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test/json"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TestVO <span class="title">testControl</span><span class="params">(@ResquestParam HashMap&lt;String, String&gt; param)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">TestVO test = <span class="keyword">new</span> TestVO();</span><br><span class="line">test.setTitle(param.get(<span class="string">"title"</span>));</span><br><span class="line">test.setDetail(param.get(<span class="string">"detail"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그냥 받았다… 더 좋은 방법이 있다면 댓글로 알려주시면 감사하겠습니다. </p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Gson/">Gson</category>
      
      
      <comments>https://sowon-dev.github.io/2023/03/02/230303malformedjsonexception/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[요약]이제야 NFT가 궁금해진 너에게 - 박근모</title>
      <link>https://sowon-dev.github.io/2023/03/01/230302whatisnft/</link>
      <guid>https://sowon-dev.github.io/2023/03/01/230302whatisnft/</guid>
      <pubDate>Wed, 01 Mar 2023 16:42:30 GMT</pubDate>
      
      <description>&lt;p&gt;현재 진행중인 프로젝트에서 블록체인과 NFT 개념이 자주 나온다. 정확히 이해하고 싶어서 글을 찾아보다 토스에서 발행한 좋은 글이 있길래 요약해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>현재 진행중인 프로젝트에서 블록체인과 NFT 개념이 자주 나온다. 정확히 이해하고 싶어서 글을 찾아보다 토스에서 발행한 좋은 글이 있길래 요약해봤다.</p><a id="more"></a><p>이 글은 원문<a href="https://blog.toss.im/article/nft-study-club-1">이제야 NFT가 궁금해진 너에게 - 박근모</a>의 요약을 바탕으로 필자의 생각을 추가한 것이다. 원문을 읽을 것을 강력 추천한다!<br>NFT를 이야기하면 항상 블록체인이 나온다. 왜 둘은 같이 나올까?</p><h1 id="블록체인"><a href="#블록체인" class="headerlink" title="블록체인"></a>블록체인</h1><p>먼저 블록체인이라는 기술을 이해하고, 거기에 암호화폐와 NFT를 연결해서 이해하면 쉽다.<br>블록체인은 <code>블록</code>과 <code>체인</code>이 결합된 단어이다. 여기서 <code>블록</code>은 데이터(정보)를 뜻한다. 즉, <code>블록체인</code>은 데이터를 연결하는 기술을 의미한다.</p><p><br><br><br></p><h2 id="데이터를-연결하는-기술이-왜-필요할까"><a href="#데이터를-연결하는-기술이-왜-필요할까" class="headerlink" title="데이터를 연결하는 기술이 왜 필요할까?"></a>데이터를 연결하는 기술이 왜 필요할까?</h2><p>블록체인 기술은 데이터를 연결하는 시스템을 만들어서 모든 사람이 확인할 수 있게 하고, 그래서 조작할 수 없게 만드는 것이다.<br>블록체인을 이용하면 정부나 은행 등 권력을 가진 기관 없이 중요한 거래가 가능해진다. 이를 <code>탈중앙화</code>라고 한다.<br>탈중앙화를 통해, 금융 기관의 안정성과 투명성을 믿을 수 없게 된 사람들이 어디에도 특권을 주지 않고(탈중앙화) 금융 거래를 가능케한다.</p><p><br><br><br></p><h1 id="그래서-NFT는-뭘까"><a href="#그래서-NFT는-뭘까" class="headerlink" title="그래서 NFT는 뭘까?"></a>그래서 NFT는 뭘까?</h1><p>NFT는 Non-Fungible Token의 약어로 추가 설명은 원문이 너무 좋아 그대로 가지고왔다.</p><blockquote><p>암호화폐가 블록체인을 이용해서 만든 돈이라면 NFT는 블록체인을 이용해 만든 증명서입니다.<br>본격적으로 NFT를 알아보기에 앞서 딱 3가지만 기억하세요.<br>❶ NFT는 유일하다(대체 불가능하다).<br>❷ 그걸 증명할 수 있다.<br>❸ 디지털 세상에는 그게 필요했다. </p><ul><li>암호화폐=가상화폐=코인=크립토 커런시(crypto currency)=크립토는 모두 암호화폐를 지칭하는 단어예요.<br>출처: 원문<a href="https://blog.toss.im/article/nft-study-club-1">이제야 NFT가 궁금해진 너에게 - 박근모</a></li></ul></blockquote><p>NFT는 어떻게 증명서가 될 수 있을까? 이를 알려면 토큰 개념을 알아야한다.</p><p><br><br><br></p><h2 id="토큰"><a href="#토큰" class="headerlink" title="토큰"></a>토큰</h2><p>토큰(token)은 현금 대신 쓸 수 있는 교환권이라는 뜻으로 블록체인에서 토큰은 <code>블록체인에 등록된(진짜라는 것이 증명된) 자산</code>이다.<br>NFT는 이름 그대로 대체불가능한 토큰(Non-Fungible Token)으로 <code>블록체인이 부여한 고유한 번호를 가진, 대체 불가능한 자산</code>이다. </p><p><br><br><br></p><h2 id="왜-대체-불가능할까-조작할-수-있지-않을까"><a href="#왜-대체-불가능할까-조작할-수-있지-않을까" class="headerlink" title="왜 대체 불가능할까? 조작할 수 있지 않을까?"></a>왜 대체 불가능할까? 조작할 수 있지 않을까?</h2><blockquote><p>NFT를 적용하면 생성 이력과 데이터가 기록되고 이를 수만~수십만 개로 분산 저장하기 때문에 함부로 조작할 수 없다.<br>블록체인에 기록된 정보는 누구나 열람할 수 있고, 전체 참여자의 51% 이상이 허락하지 않는 한 변경할 수 없다.<br>출처: 원문<a href="https://blog.toss.im/article/nft-study-club-1">이제야 NFT가 궁금해진 너에게 - 박근모</a></p></blockquote><p><br><br><br></p><h1 id="NFT-구성요소-3가지"><a href="#NFT-구성요소-3가지" class="headerlink" title="NFT 구성요소 3가지"></a>NFT 구성요소 3가지</h1><ol><li>NFT 미디어 데이터(NFT media data): 원본데이터</li><li>NFT 메타데이터(NFT metadata): 원본데이터 설명, 생성자정보, 원본데이터가 저장되어있는 주소</li><li>NFT 스마트 계약(NFT smart contract): NFT의 소유권자, 거래 내역, 조건, 가격 등이 기록</li></ol><p>스마트계약이 복잡하기 때문에 NFT를 조작하기는 어렵다.</p><p><br><br><br></p><h1 id="NFT-구매방법"><a href="#NFT-구매방법" class="headerlink" title="NFT 구매방법"></a>NFT 구매방법</h1><p>NFT전용 온라인 플랫폼에서 암호화폐로 구매할 수 있다.</p><ul><li>NFT전용 온라인 플랫폼<ul><li>국내: 카카오-클립 드롭스, 두나무-업비트 NFT 등</li><li>해외: 세계 최대 NFT 거래소-오픈시나 슈퍼레어(SuperRare), 라리블(Rarible) 등</li></ul></li></ul><p>암호화폐를 사용하려면 암호화폐 전용지갑이 필요하고, 이 지갑에 구매한 NFT를 보관한다.</p><p><br><br><br></p><h1 id="공짜-NFT를-구매해도-돈을-낸다고"><a href="#공짜-NFT를-구매해도-돈을-낸다고" class="headerlink" title="공짜 NFT를 구매해도 돈을 낸다고?"></a>공짜 NFT를 구매해도 돈을 낸다고?</h1><p>NFT가 무료여도 가스비(수수료)가 발생한다.</p><blockquote><p>오픈시에서 직접 무료인 NFT를 구매해 봤어요. NFT 가격은 무료지만, 약 43달러(약 5만 2000원)의 가스비를 냈습니다. 가스비는 이더리움, 클레이튼, 솔라나 등 NFT가 만들어진 플랫폼마다 다르고, 거래 시점에 따라서도 약간씩 달라져요.<br>출처: 원문<a href="https://blog.toss.im/article/nft-study-club-1">이제야 NFT가 궁금해진 너에게 - 박근모</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/03/01/230302whatisnft/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MVC패턴과 MVP패턴 차이</title>
      <link>https://sowon-dev.github.io/2023/02/16/230217MVPpattern/</link>
      <guid>https://sowon-dev.github.io/2023/02/16/230217MVPpattern/</guid>
      <pubDate>Thu, 16 Feb 2023 17:17:38 GMT</pubDate>
      
      <description>&lt;p&gt;박부장님과 김팀장님 셋이서 함께 치맥을 하던 중 부장님이 요즘은 무슨 공부를 하느냐고 물으셨다.&lt;br&gt;그때그때 궁금한 것들을 공부하고 있지만 디자인 패턴이 흥미롭다고 말씀드렸더니 MVP패턴에 대해 알려주셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>박부장님과 김팀장님 셋이서 함께 치맥을 하던 중 부장님이 요즘은 무슨 공부를 하느냐고 물으셨다.<br>그때그때 궁금한 것들을 공부하고 있지만 디자인 패턴이 흥미롭다고 말씀드렸더니 MVP패턴에 대해 알려주셨다.</p><a id="more"></a><p>흘려들을 순 없지! 바로 공부를 해보았다.<br>아무리 봐도 MVC와 차이가 느껴지지 않아 한참을 찾아보았다.</p><h1 id="MVP이란"><a href="#MVP이란" class="headerlink" title="MVP이란"></a>MVP이란</h1><p>Model - View - Presenter로 이뤄진 디자인 패턴이다.<br>MVC에서 Controller가 하는 역할을 Presenter가 한다고 보면 되는데 여기서 궁금증이 생긴다.<br>그러면 MVC 쓰면 되지 왜 MVP를 쓸까?</p><p><br><br><br></p><h2 id="MVC-Pattern과의-차이"><a href="#MVC-Pattern과의-차이" class="headerlink" title="MVC Pattern과의 차이"></a>MVC Pattern과의 차이</h2><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/800px-MVC-Process.svg.png" alt="위키피디아" style="width: 60%;"><p>MVC패턴에서는 Model과 View가 서로 연결되어 있어 의존관계를 가지고 있다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/d/dc/Model_View_Presenter_GUI_Design_Pattern.png" alt="위키피디아"><br>MVP패턴은 Model과 View는 서로 연결되지 않고 Presenter를 통해서 변화를 알 수 있게 된다.<br>이렇게 화면과 비즈니스로직이 완전히 분리되면서 테스트가 용이해진다.</p><ul><li>장점: View와 Model을 분리시켜 MVC나 Apple의 MVC에서 하기 힘들었던 테스트가 용이</li><li>단점: View와 Presenter의 의존관계가 강해지고 Controller 대신 Presenter가 복잡해짐</li></ul><p><br><br><br></p><h1 id="MVP패턴에서-뷰가-업데이트-되는-과정"><a href="#MVP패턴에서-뷰가-업데이트-되는-과정" class="headerlink" title="MVP패턴에서 뷰가 업데이트 되는 과정"></a>MVP패턴에서 뷰가 업데이트 되는 과정</h1><p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*8ps4RHy13puZY4dK.png" alt="https://medium.com/android-news/mvp-depp-dive-c6bb1903ace1"></p><ol><li>사용자가 View에서 액션을 한다.</li><li>View는 Presenter에 액션이 들어왔다고 전달한다.</li><li>Presenter는 View 액션대로 Model이나 Service를 구성한다.</li><li>Update된 Presenter의 데이터를 View에 업데이트 한다.</li></ol><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>팀장님 지식</li><li><a href="https://ykss.netlify.app/web/design_pattern/">https://ykss.netlify.app/web/design_pattern/</a></li><li><a href="https://medium.com/android-news/mvp-depp-dive-c6bb1903ace1">https://medium.com/android-news/mvp-depp-dive-c6bb1903ace1</a></li><li><a href="https://fomaios.tistory.com/entry/Design-Pattern-MVP-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80">https://fomaios.tistory.com/entry/Design-Pattern-MVP-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/">디자인패턴</category>
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      
      <comments>https://sowon-dev.github.io/2023/02/16/230217MVPpattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ClassCastException발생 Java.lang.Integer cannot be case to Java.lang.String 해결방법(ft. ChatGPT)</title>
      <link>https://sowon-dev.github.io/2023/02/13/230214integervalueof/</link>
      <guid>https://sowon-dev.github.io/2023/02/13/230214integervalueof/</guid>
      <pubDate>Mon, 13 Feb 2023 23:37:19 GMT</pubDate>
      
      <description>&lt;p&gt;String을 int로 변환하는 과정에서 cast 에러가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>String을 int로 변환하는 과정에서 cast 에러가 발생했다.</p><a id="more"></a><h1 id="문제상황"><a href="#문제상황" class="headerlink" title="문제상황"></a>문제상황</h1><p>내가 원했던 건 DB에서 가져온 balance정보를 int로 바꿔주고싶었다. 쿼리가 아주 길지만 간략하게 요약해보면 아래와 같다.</p><ul><li>컬럼 정의<ul><li>balance int(11) 잔액</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBalance"</span> <span class="attr">resultType</span>=<span class="string">"HashMap"</span>&gt;</span></span><br><span class="line">select balance from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = dao.getBalance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> curBalance = Integer.parseInt(map.get(<span class="string">"balance"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="comment">// ClassCastException발생 Java.lang.Integer cannot be case to Java.lang.String</span></span><br></pre></td></tr></table></figure><p>컴파일 에러는 안나지만 ClassCastException이 발생했다.<br>이상했다.<br>HashMap 데이터타입을 String으로 정의했는데 왜 Integer to String으로 캐스팅을 하는걸까? </p><p><br><br><br></p><h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>일단 해결부터! 아래로 캐스팅하니 바로 해결되었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> curBalance = Integer.valueOf(String.valueOf(map.get(<span class="string">"balance"</span>)));</span><br></pre></td></tr></table></figure><p>해결 방법은 금방 찾았으나 원인이 너무 궁금했다.<br>다시 질문으로 돌아가보자. HashMap 데이터타입을 String으로 정의했는데 왜 Integer to String으로 캐스팅을 하는걸까? </p><p><br><br><br></p><h1 id="원인찾기"><a href="#원인찾기" class="headerlink" title="원인찾기"></a>원인찾기</h1><p>데이터타입이 무엇인지 정확히 알기위해 <code>getClass()</code>를 하니 Integer가 나왔다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.get(<span class="string">"balance"</span>).getClass();</span><br><span class="line"><span class="comment">// 결과 Java.lang.Integer</span></span><br></pre></td></tr></table></figure><p>이게 말이 되는 건가?<br>HashMap의 데이터타입을 String으로 정의했는데 어떻게 Integer가 들어간걸까?<br>구글링해도 도저히 찾지 못하겠어서 팀장님께 질문드리니 팀장님이 아래와 같은 예제 코드를 주셨다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap test = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">test.put(<span class="string">"test"</span>, <span class="number">123</span>);</span><br><span class="line">HashMap&lt;String, String&gt; test2 = test;</span><br><span class="line"></span><br><span class="line">System.out.println(test2.get(<span class="string">"test"</span>).getClass());</span><br><span class="line"><span class="comment">// 결과값 jva.lang.Integer</span></span><br></pre></td></tr></table></figure><p>컴파일 에러없이 서버런해도 정상 작동해버리는 코드! 뭐야?<br>팀장님께서는 자바8 제네릭에 대해 찾아보라는 조언을 주셨다. 역시 팀장님은 천재야…!</p><p><br><br><br></p><h1 id="제네릭-타입소거-ft-ChatGPT"><a href="#제네릭-타입소거-ft-ChatGPT" class="headerlink" title="제네릭 타입소거 (ft.ChatGPT)"></a>제네릭 타입소거 (ft.ChatGPT)</h1><p>요즘 유행인 ChatGPT에게 물어봤다.</p><blockquote><p>This code will result in a compilation error because test is declared as a HashMap with a key of type String and a value of type Integer, while test2 is declared as a HashMap with a key and value of type String. Therefore, you cannot assign test to test2 as the two types are not compatible.<br>Assuming that test2 is declared correctly with the same key and value types as test, and test.put(“test”, 123) has been fixed to use a String value, the output of System.out.println(test2.get(“test”).getClass()) would be java.lang.Integer, since the value associated with the key “test” is an Integer. The getClass() method returns the runtime class of an object, which in this case is Integer since that’s the type of the value associated with the “test” key in the HashMap.</p></blockquote><p>하지만 이 케이스는 컴파일에러가 발생하지 않기에 다시 물어봤다.</p><blockquote><p>Me: But there is no compilation error in java 8. how can you explain this?<br>ChatGPT: You are correct that in Java 8, the code you provided will compile without error.<br>In Java 8 and earlier versions, the generic types of a variable were not enforced by the compiler in all situations. This is known as type erasure, where the generic type information is removed during compilation and is not available at runtime. As a result, it was possible to assign a variable of type HashMap to a variable of type HashMap&lt;String, String&gt; or vice versa, even if the generic types were not the same.<br>However, this type of assignment is not recommended as it can result in runtime errors if the wrong types of data are inserted or retrieved from the map. Starting from Java 9, the compiler will issue a warning for this kind of unchecked conversion, and it is recommended to use generics correctly to avoid any potential issues.<br>So, while the code you provided will compile in Java 8, it is not considered good programming practice and may result in unexpected behavior if the wrong data types are used with the map.</p></blockquote><p>요약해보자면, Java 8에서 제네릭타입은 컴파일 중 타입 소거(Type Erasure)되어 HashMap 타입의 변수를 <code>HashMap&lt;String, String&gt;</code> 타입의 변수에 할당하거나 그 반대의 경우에도 할당할 수 있게 된 것 이다.<br>너무 신기하잖아😲<br>ChatGPT에게 자바8 타입 소거(Type Erasure)에 대해 지금 예시로 알려달라고 요청했다.</p><blockquote><p>Me: Can you explain more about Type Erasure in this case?<br>ChatGPT: Sure, I’d be happy to explain type erasure in this case.<br>In Java, generic types were introduced in order to provide stronger type checking and to avoid class cast exceptions. A generic type is a type that can be parameterized with other types. For example, <code>List&lt;T&gt;</code> is a generic type that can be parameterized with another type, such as <code>List&lt;String&gt;</code>.<br>However, at runtime, Java’s virtual machine (JVM) doesn’t have access to the generic type information. This is where type erasure comes in. Type erasure is the process by which the JVM replaces the generic type parameters with their upper bounds or with Object, depending on the type’s use.<br>For example, in the code you provided, the HashMap is declared with a generic type of HashMap&lt;String, Integer&gt;. However, at runtime, the JVM replaces the type parameters with their upper bounds, which means that the HashMap object will be treated as if it were of type HashMap&lt;Object, Object&gt;. This is why, in Java 8 and earlier versions, it is possible to assign a variable of type HashMap to a variable of type HashMap&lt;String, String&gt; or vice versa, as the generic type information is not used to enforce the type compatibility between the two variables.<br>In summary, type erasure is a process by which the JVM removes the generic type information from a class or method, and replaces it with its upper bounds or with Object. This can lead to unchecked type conversions and potential runtime errors, which is why it is recommended to use generics correctly and to avoid unchecked conversions.</p></blockquote><p>요약해보자면 아래와 같다.</p><p><br><br><br></p><h2 id="타입-소거-Type-Erasure-란"><a href="#타입-소거-Type-Erasure-란" class="headerlink" title="타입 소거(Type Erasure)란?"></a>타입 소거(Type Erasure)란?</h2><p>Type Erasure(타입 소거)란 제네릭 타입에 사용된 타입 정보를 컴파일 타임에만 사용하고 런타임에는 소거하는 것을 말한다.<br>자바 컴파일러는 모든 타입 파라미터를 Object 타입으로 교체한다. 제네릭 타입을 제거한 후 타입이 일치하지 않으면 타입 캐스팅을 추가한다. </p><p><br><br><br></p><h3 id="왜-Object-타입으로-바꿀까"><a href="#왜-Object-타입으로-바꿀까" class="headerlink" title="왜 Object 타입으로 바꿀까?"></a>왜 Object 타입으로 바꿀까?</h3><p>런타임시 Java 가상 머신(JVM)은 제네릭 타입 정보에 접근할 수 없다. 그래서 타입 소거(Type Erasure)가 필요하다.<br>즉, 타입 소거는 JVM이 제네릭 타입 매개변수를 상한값으로 또는 Object로 대체하는 과정이다.<br>런타임에서 JVM은 상한값으로 타입 매개변수를 대체하므로 HashMap 객체는 HashMap&lt;Object, Object&gt; 타입인 것처럼 처리된다. 그래서 Java 8 이전 버전에서 HashMap 타입의 변수를 HashMap&lt;String, String&gt; 타입의 변수에 할당할 수 있게 된 것이다.<br>즉, 제네릭 타입 정보가 두 변수 간의 타입 호환성을 강제하기 위해 사용되지 않기 때문입니다.</p><p><br><br><br></p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>타입 소거는 JVM이 클래스 또는 메서드에서 제네릭 타입 정보를 제거하고 상한값으로 또는 Object로 대체하는 과정이다. 이는 검사되지 않은 타입 변환 및 잠재적인 런타임 오류를 발생시킬 수 있기 때문에 올바른 제네릭 사용을 권장하고 검사되지 않은 변환을 피해야 한다.</p><p>ChatGPT 진짜 천재다.😲</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>김팀장님 지식</li><li>ChatGPT</li><li><a href="https://wisdom-and-record.tistory.com/134">https://wisdom-and-record.tistory.com/134</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://sowon-dev.github.io/2023/02/13/230214integervalueof/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>String.valueOf() vs toString() 차이 알고쓰자</title>
      <link>https://sowon-dev.github.io/2023/02/06/230207stringvalueof-vs-tostring/</link>
      <guid>https://sowon-dev.github.io/2023/02/06/230207stringvalueof-vs-tostring/</guid>
      <pubDate>Mon, 06 Feb 2023 16:41:56 GMT</pubDate>
      
      <description>&lt;p&gt;비슷한 역할을 하지만 결과는 다른 두 메서드 String.valueOf()와 Object.toString()의 차이에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>비슷한 역할을 하지만 결과는 다른 두 메서드 String.valueOf()와 Object.toString()의 차이에 대해 알아보자.</p><a id="more"></a><h1 id="차이점-Null처리"><a href="#차이점-Null처리" class="headerlink" title="차이점: Null처리"></a>차이점: Null처리</h1><p>가장 큰 차이점은 null처리이다. null처리때문에 보통 Object.toString()을 많이 쓴다. 클라이언트는 null을 볼 필요가 없기때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object testObj = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">System.out.println(String.valueOf(testObj)); </span><br><span class="line"><span class="comment">// 결과: null</span></span><br><span class="line"></span><br><span class="line">System.out.println(testObj.toString()); </span><br><span class="line"><span class="comment">// 결과: NullPointerException 오류 발생</span></span><br></pre></td></tr></table></figure><ul><li>String.valueOf(): null인 경우 문자열null을 만들어서 출력<ul><li>null체크: “null”.equals(string) 확인 필수</li></ul></li><li>Object.toString(): null인 경우 NPE 발생<ul><li>Onject의 값이 String타입이 아니어도 출력한다.</li></ul></li></ul><p><br><br><br></p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>NPE를 방지하고 싶다면 String.valueOf()를 사용하고 널체크를 꼭 해줘야한다. </p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      
      <comments>https://sowon-dev.github.io/2023/02/06/230207stringvalueof-vs-tostring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자료구조DataStructure]B-Tree(비트리)란, 개념,정의(최대한 쉽게)</title>
      <link>https://sowon-dev.github.io/2023/02/02/230203Btree/</link>
      <guid>https://sowon-dev.github.io/2023/02/02/230203Btree/</guid>
      <pubDate>Thu, 02 Feb 2023 16:34:12 GMT</pubDate>
      
      <description>&lt;p&gt;DB 카디널리티 관련해서 구글링하다보니 B-Tree구조를 반복해서 보게되었다. 듣기만 들었지 정확히 어떤 것인지 궁금해서 정리해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>DB 카디널리티 관련해서 구글링하다보니 B-Tree구조를 반복해서 보게되었다. 듣기만 들었지 정확히 어떤 것인지 궁금해서 정리해보았다.</p><a id="more"></a><p>카디널리티가 궁금하다면 <a href="https://sowon-dev.github.io/2023/02/01/230202db-cardinality/">블로그 글 - 카디널리티 개념,정의</a>을 참고하면 된다.</p><h1 id="B-Tree-B트리-가-뭐길래"><a href="#B-Tree-B트리-가-뭐길래" class="headerlink" title="B-Tree(B트리)가 뭐길래"></a>B-Tree(B트리)가 뭐길래</h1><p><img src="https://commons.wikimedia.org/wiki/File:B-tree.svg" alt="출처:위키백과"></p><blockquote><p>전산학에서 B-트리(B-tree)는 데이터베이스와 파일 시스템에서 널리 사용되는 트리 자료구조의 일종으로, 이진 트리를 확장해 하나의 노드가 가질 수 있는 자식 노드의 최대 숫자가 2보다 큰 트리 구조이다.<br>방대한 양의 저장된 자료를 검색해야 하는 경우 검색어와 자료를 일일이 비교하는 방식은 비효율적이다. B-트리는 자료를 정렬된 상태로 보관하고, 삽입 및 삭제를 대수 시간으로 할 수 있다. 대부분의 이진 트리는 항목이 삽입될 때 하향식으로 구성되는 데 반해, B-트리는 일반적으로 상향식으로 구성된다.<br>출처: <a href="https://ko.wikipedia.org/wiki/B_%ED%8A%B8%EB%A6%AC">위키백과</a></p></blockquote><p>뭐? 한글인데 너무 어렵다. 차근차근 살펴보자.<br>위키백과에 따르면 B-Tree(이하 B트리)는 트리 자료구조 중 이진트리를 확장한 구조이다.</p><p><br><br><br></p><h1 id="자료구조란"><a href="#자료구조란" class="headerlink" title="자료구조란?"></a>자료구조란?</h1><p>먼저 자료구조란 무엇일까?</p><ul><li>자료구조(data structure) : 데이터를 효율적으로 사용하기 틀이다. 이러한 효율성은 시간 복잡도(time complexity)와 공간 복잡도(space complexity) 기준으로 평가된다.</li></ul><p>추가로 <a href="https://sowon-dev.github.io/2020/12/06/201207dataStructure1/">블로그 글 - 자료구조와 알고리즘 차이</a>를 참고하면 좋다.</p><p><br><br><br></p><h1 id="트리자료구조란"><a href="#트리자료구조란" class="headerlink" title="트리자료구조란?"></a>트리자료구조란?</h1><p>B트리는 이름에서도 알수있듯 트리 자료구조이다. 자료구조는 알았는데 트리자료구조는 또 뭘까?</p><blockquote><p>트리 구조란 그래프의 일종으로, 한 노드에서 시작해서 다른 정점들을 순회하여 자기 자신에게 돌아오는 순환이 없는 연결 그래프이다.<br>트리에서 최상위 노드를 루트 노드(root node 뿌리 노드[<code>*</code>])라고 한다.<br>또한 노드 A가 노드 B를 가리킬 때 A를 B의 부모 노드(parent node), B를 A의 자식 노드(child node)라고 한다.<br>자식 노드가 없는 노드를 잎 노드(leaf node 리프 노드[<code>*</code>]) 또는 말단 노드 (terminal node)라고 한다. 잎 노드가 아닌 노드를 내부 노드(internal node)라고 한다.<br>출처: <a href="https://ko.wikipedia.org/wiki/%ED%8A%B8%EB%A6%AC_%EA%B5%AC%EC%A1%B0#:~:text=%ED%8A%B8%EB%A6%AC%20%EA%B5%AC%EC%A1%B0(tree%20%E6%A7%8B%E9%80%A0%2C%20%EB%AC%B8%ED%99%94%EC%96%B4,%EC%9D%B4%20%EC%97%86%EB%8A%94%20%EC%97%B0%EA%B2%B0%20%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%8B%A4.">위키백과</a></p></blockquote><p><br><br></p><h2 id="트리구조의-특징"><a href="#트리구조의-특징" class="headerlink" title="트리구조의 특징"></a>트리구조의 특징</h2><ol><li>트리는 하나의 루트 노드를 갖는다.</li><li>루트 노드는 0개 이상의 자식 노드를 갖는다.</li><li>자식 노드 또한 0개 이상의 자식 노드를 갖는다.</li><li>노드(Node)들과 노드들을 연결하는 간선(Edge)들로 구성되어 있다.</li></ol><p><br><br></p><h2 id="트리구조-중-유명한-트리구조로는"><a href="#트리구조-중-유명한-트리구조로는" class="headerlink" title="트리구조 중 유명한 트리구조로는"></a>트리구조 중 유명한 트리구조로는</h2><ul><li>자가 균형 이진 탐색 트리</li><li>최소 비용 신장 트리</li><li>B-트리, 2-3 트리, B+ 트리, B*-트리</li></ul><p><br><br><br></p><h1 id="이진트리자료구조란"><a href="#이진트리자료구조란" class="headerlink" title="이진트리자료구조란?"></a>이진트리자료구조란?</h1><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/1024px-Binary_tree.svg.pnghttps://commons.wikimedia.org/wiki/File:Binary_tree.svg" alt="크기가 9이고, 높이가 3인 이진 트리"></p><blockquote><p>컴퓨터 과학에서 이진 트리(二進-, 영어: binary tree)는 각각의 노드가 최대 두 개의 자식 노드를 가지는 트리 자료 구조로, 자식 노드를 각각 왼쪽 자식 노드와 오른쪽 자식 노드라고 한다.<br>출처: <a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%ED%8A%B8%EB%A6%AC">위키백과</a></p></blockquote><p>즉, 이진트리는 각 노드가 최대 두 개의 자식을 갖는 트리를 뜻한다. 따라서 각 노드는 자식이 없거나 한 개 이거나 두 개만을 가질 수 있다.</p><p>이진트리종류</p><ul><li>정이진트리(full binary tree)</li><li>완전이진트리(complete binary tree)</li><li>균형이진트리(balanced binary tree) 등</li></ul><p><br><br><br></p><h1 id="B트리자료구조란"><a href="#B트리자료구조란" class="headerlink" title="B트리자료구조란?"></a>B트리자료구조란?</h1><p>보통 B트리라고 하면 B-트리를 의미한다. B-트리는 이진트리에서 발전되어 모든 리프노드들이 같은 레벨을 가질 수 있도록 자동으로 벨런스를 맞추는 트리이다.</p><p>B트리구조특징</p><ul><li>하나의 노드가 가질 수 있는 자식 노드의 최대 숫자가 2보다 크다.</li><li>내부 노드는 M/2 ~ M개의 자식을 가질 수 있다. 최대 M개의 자식을 가질 수 있는 B 트리를 M차 B트리라고 한다.</li><li>정렬된 순서 보장</li><li>멀티레벨 인덱싱을 통한 빠른 검색 가능</li></ul><p>실제 MySQLDB,MariaDB에서는 B트리에서 발전한 B+트리를 실제로 사용한다.</p><p><br><br><br></p><h2 id="B-트리"><a href="#B-트리" class="headerlink" title="B+트리"></a>B+트리</h2><p><img src="https://velog.velcdn.com/images%2Femplam27%2Fpost%2Fbcbce100-d475-4cda-aebe-946d1813949c%2FB%ED%94%8C%EB%9F%AC%EC%8A%A4%20%ED%8A%B8%EB%A6%AC%20%EA%B8%B0%EB%B3%B8%20%ED%98%95%ED%83%9C.jpg" alt="출처: https://velog.velcdn.com/"></p><p>왜 B+트리가 나왔을까? B-트리의 단점때문이다. B-트리는 삽입, 수정, 삭제에 따라 트리의 균형을 맞추는 작업이 필요해 성능에 문제가 발생할 수 있다.<br>이를 해결하고자 B+트리는 Leaf node끼리는 linked list을 사용해 최적화했다.</p><p>아래 사이트를 통해 B+트리구조를 직접 만들어볼 수 있다. 재밌다!</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://ratsgo.github.io/data%20structure&amp;algorithm/2017/10/21/tree/">https://ratsgo.github.io/data%20structure&amp;algorithm/2017/10/21/tree/</a></li><li><a href="https://velog.io/@emplam27/자료구조-그림으로-알아보는-B-Tree">https://velog.io/@emplam27/자료구조-그림으로-알아보는-B-Tree</a></li><li><a href="https://code-lab1.tistory.com/217">https://code-lab1.tistory.com/217</a></li><li><a href="https://velog.io/@emplam27/자료구조-그림으로-알아보는-B-Plus-Tree">https://velog.io/@emplam27/자료구조-그림으로-알아보는-B-Plus-Tree</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/DataStructure/">DataStructure</category>
      
      
      <comments>https://sowon-dev.github.io/2023/02/02/230203Btree/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>카디널리티(Cardinality) 개념, 정의</title>
      <link>https://sowon-dev.github.io/2023/02/01/230202db-cardinality/</link>
      <guid>https://sowon-dev.github.io/2023/02/01/230202db-cardinality/</guid>
      <pubDate>Wed, 01 Feb 2023 20:04:48 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 팀장님에게 sql 작성할때 where에 PK컬럼뿐만 아니라 다른 컬럼을 추가로 조건을 걸면 조회성능에 더 좋은지 문의드렸다.&lt;br&gt;PK컬럼은 항상 우선순위로 검색이 되기에 이외 컬럼을 추가한다고해서 조회성능이 좋아지지않는다고 알려주셨다. 그리고 카디널리티 개념을 알려주셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 팀장님에게 sql 작성할때 where에 PK컬럼뿐만 아니라 다른 컬럼을 추가로 조건을 걸면 조회성능에 더 좋은지 문의드렸다.<br>PK컬럼은 항상 우선순위로 검색이 되기에 이외 컬럼을 추가한다고해서 조회성능이 좋아지지않는다고 알려주셨다. 그리고 카디널리티 개념을 알려주셨다.</p><a id="more"></a><p>카디널리티 개념이 흥미로워서 정리해보았다.</p><h1 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h1><p>카디널리티(Cardinality)는 전체 행에 대한 특정 컬럼의 중복 수치를 나타내는 지표이다.</p><ul><li>중복도가 낮으면 카디널리티가 높다 e.g. 휴대전화번호, 주민등록번호</li><li>중복도가 높으면 카디널리티가 낮다 e.g. 이름(동명이인)</li></ul><p>여기서 중요한 개념은 카디널리티는 상대적이라는 것이다. 카디널리티는 데이터에 따라 상대적이기때문에 개발DB에서는 카디널리티가 낮아도 운영DB에서는 카디널리티가 높을 수 있다. </p><p><br><br><br></p><h1 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h1><p>DB에서 인덱스를 걸 때 최대한 많은 데이터가 걸러져야 성능이 좋다.<br>인덱스로 선택된 데이터가 많을수록 full scan이 되므로 성능이 좋지않다.<br><br><br>즉, 여러 컬럼을 동시에 인덱싱할때는 카디널리티가 높은 컬럼을(중복이 적은 컬럼을) 우선순위로 두는 것이 인덱싱 전략에 유리하다.<br>다만, 인덱스 키를 많이 사용하게 되면 공간 효울이 낮아지게 된다.</p><p><br><br><br></p><h1 id="공간효율이-무엇일까"><a href="#공간효율이-무엇일까" class="headerlink" title="공간효율이 무엇일까?"></a>공간효율이 무엇일까?</h1><p>여기서 인덱스(index)란 DB테이블의 검색속도를 향상시키기위한 자료구조로 책 뒤편의 단어와 쪽수를 기재한 색인과 비슷하다.<br>색인이 책에서 어느정도 비중을 차지할 수 있듯 인덱스를 관리하기 위해선 DB의 약 10%에 해당하는 저장공간이 필요하다.<br>따라서, 인덱스키를 많이 걸수록 공간효율이 좋지않다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>팀장님 지식</li><li><a href="https://soft.plusblog.co.kr/87#:~:text=%EC%B9%B4%EB%94%94%EB%84%90%EB%A6%AC%ED%8B%B0(Cardinality)%EB%8A%94%20%ED%8A%B9%EC%A0%95%20%EB%8D%B0%EC%9D%B4%ED%84%B0,%EA%B2%BD%EC%9A%B0%20%EC%B9%B4%EB%94%94%EB%84%90%EB%A6%AC%ED%8B%B0%EB%8A%94%202%EB%8B%A4">https://soft.plusblog.co.kr/87#:~:text=%EC%B9%B4%EB%94%94%EB%84%90%EB%A6%AC%ED%8B%B0(Cardinality)%EB%8A%94%20%ED%8A%B9%EC%A0%95%20%EB%8D%B0%EC%9D%B4%ED%84%B0,%EA%B2%BD%EC%9A%B0%20%EC%B9%B4%EB%94%94%EB%84%90%EB%A6%AC%ED%8B%B0%EB%8A%94%202%EB%8B%A4</a>.</li><li><a href="https://itholic.github.io/database-cardinality/">https://itholic.github.io/database-cardinality/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/02/01/230202db-cardinality/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IaaS, PaaS, SaaS 차이</title>
      <link>https://sowon-dev.github.io/2023/01/30/230131iaas-paas-saas/</link>
      <guid>https://sowon-dev.github.io/2023/01/30/230131iaas-paas-saas/</guid>
      <pubDate>Mon, 30 Jan 2023 22:58:49 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트에서 사용중인 클라우드네이티브 서비스가 있는데 PaaS서비스이다. 예전에 이와 관련해서 공부한 적이 있는데 기록하지 않으니 벌써 기억이 가물가물하다. 이참에 다시 정리해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트에서 사용중인 클라우드네이티브 서비스가 있는데 PaaS서비스이다. 예전에 이와 관련해서 공부한 적이 있는데 기록하지 않으니 벌써 기억이 가물가물하다. 이참에 다시 정리해보았다.</p><a id="more"></a><p>참고로 클라우드네이티브가 무엇인지 궁금하다면 블로그 글 <a href="https://sowon-dev.github.io/2023/01/17/230118cloudnative/">클라우드 네이티브(Cloud Native)란? 개념,정의</a>을 참조하면 된다.</p><h1 id="한눈에-비교하기"><a href="#한눈에-비교하기" class="headerlink" title="한눈에 비교하기"></a>한눈에 비교하기</h1><p><img src="https://www.redhat.com/cms/managed-files/iaas-paas-saas-diagram3-1638x1046.png" alt="출처: redhat"></p><p><br><br><br></p><h1 id="IaaS-Infrastructure-as-a-Service"><a href="#IaaS-Infrastructure-as-a-Service" class="headerlink" title="IaaS(Infrastructure as a Service)"></a>IaaS(Infrastructure as a Service)</h1><ul><li>정보시스템의 모든 인프라를 인터넷상에서 제공한다. </li><li>언뜻 호스팅 서비스같아오이지만 IaaS의 경우,서버를 이용할 때에 필요한 하드웨어의 스펙이나 OS등을 사용자가 자유롭게 선정할 수 있다.</li><li>장점: 환경 구축 자유도가 높다, 시스템관리자의 부하가 적다.</li><li>단점: 환경 구축에 전문성 필요, 유지보수 범위가 넓다. </li></ul><p><br><br><br></p><h1 id="PaaS-Platform-as-a-Service"><a href="#PaaS-Platform-as-a-Service" class="headerlink" title="PaaS(Platform as a Service)"></a>PaaS(Platform as a Service)</h1><ul><li>정의: 개발 환경이 플랫폼화되어있는 서비스<ul><li>플랫폼화란? 클라우드 환경의 서버, OS, 미들웨어, 데이터베이스 등 애플리케이션 개발에 필요한 환경이 플랫폼으로 갖추어져 있음.</li></ul></li><li>장점: 개발환경의 플랫폼화로 인해 서비스·어플리케이션의 개발에 전념 가능, 초기 비용 및 시간 비용 절감 가능</li><li>단점: 개발환경의 커스텀마이징이 낮다.</li></ul><p><br><br><br></p><h1 id="SaaS-Software-as-a-Service"><a href="#SaaS-Software-as-a-Service" class="headerlink" title="SaaS(Software as a Service)"></a>SaaS(Software as a Service)</h1><ul><li>정의: 패키지 제품으로 아예 서비스를 제공<ul><li>예시: Office365, Gmail 등등</li></ul></li><li>장점: 필요한 서비스를 월별요금제 등으로 결제해서 즉시 사용 가능</li><li>단점: 커스터마이징 불가, 데이터마이그레이션 어려움.</li></ul><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://www.redhat.com/ko/topics/cloud-computing/what-is-paas">https://www.redhat.com/ko/topics/cloud-computing/what-is-paas</a></li><li><a href="https://tagilog.tistory.com/1138">https://tagilog.tistory.com/1138</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Network/">Network</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/30/230131iaas-paas-saas/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>유저테이블의 PK에 휴대전화번호를 쓰면 안되는 이유</title>
      <link>https://sowon-dev.github.io/2023/01/29/230130userpk/</link>
      <guid>https://sowon-dev.github.io/2023/01/29/230130userpk/</guid>
      <pubDate>Sun, 29 Jan 2023 20:28:59 GMT</pubDate>
      
      <description>&lt;p&gt;가장 메인이 되는 User테이블을 만들때 PK로 휴대전화번호를 써도 될까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>가장 메인이 되는 User테이블을 만들때 PK로 휴대전화번호를 써도 될까?</p><a id="more"></a><h1 id="실무에서-user테이블의-pk는-뭐로-쓸까"><a href="#실무에서-user테이블의-pk는-뭐로-쓸까" class="headerlink" title="실무에서 user테이블의 pk는 뭐로 쓸까?"></a>실무에서 user테이블의 pk는 뭐로 쓸까?</h1><p>가장 메인이 되는 user테이블의 pk가 개인정보(전화번호 등)이 되어서는 안된다.<br>개인정보보호법에 따라 DB에 저장할때 비밀번호처럼 항상 암호화해서 저장해야한다.<br>따라서 UUID, 일련번호, 이메일을 PK로 주로 사용한다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/01/29/230130userpk/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]RestTemplate(레스트템플릿)과 Websocket(웹소켓)차이점</title>
      <link>https://sowon-dev.github.io/2023/01/26/230127resttemplate-vs-websocket/</link>
      <guid>https://sowon-dev.github.io/2023/01/26/230127resttemplate-vs-websocket/</guid>
      <pubDate>Thu, 26 Jan 2023 19:43:38 GMT</pubDate>
      
      <description>&lt;p&gt;RestTemplate은 간편하게 Rest 방식 API를 호출할 수 있는 라이브러리이고 Spring 3.0부터 지원한다.&lt;br&gt;따라서 RestTemplate과 Websocket 차이점은 결국 REST API와 Websocket API 차이점이라고 볼 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>RestTemplate은 간편하게 Rest 방식 API를 호출할 수 있는 라이브러리이고 Spring 3.0부터 지원한다.<br>따라서 RestTemplate과 Websocket 차이점은 결국 REST API와 Websocket API 차이점이라고 볼 수 있다.</p><a id="more"></a><p>가장 잘 알고 있는 차이점은 REST API는 클라이언트의 요청이 없으면 서버는 먼저 말을 걸 수 없지만 웹소켓은 서버가 클라이언트에게 먼저 말(메세지)을 걸수있다.<br>즉, REST API는 클라이언트의 요청이 있어야 서버 응답이 있는 반면에 Websocket API는 클라이언트 요청없이도 서버가 클라이언트에 응답할 수 있다.<br>실무자입자에서는 어떠한 차이가 있을까?</p><p><br><br><br></p><h1 id="REST-API와-Websocket-API-차이점"><a href="#REST-API와-Websocket-API-차이점" class="headerlink" title="REST API와 Websocket API 차이점"></a>REST API와 Websocket API 차이점</h1><ul><li>REST API: <ul><li>동기, 비동기 둘다 지원. </li><li>프레임워크가 에러보드까지 구현을 다 해놓아서 커넥션이 안정적이라고 하는편</li></ul></li><li>Websocket API: <ul><li>동기, 비동기 둘다 지원. </li><li>빠른 응답이 장점. </li><li>서버리소스가 많이 든다.</li><li>커넥션 안정성(커넥션 끊을때까지 커넥션이 안 끊김)</li><li>웹소켓을 쓰면 커멘드패턴에 따라서 규칙을 다 맞춰줘야함. 사람이 직접 해야하는 게 많아서 난이도가 있고 서버 리소스가 많이 들지만 커넥션이 매우 안정적임</li></ul></li></ul><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>부장님 지식</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      <category domain="https://sowon-dev.github.io/tags/RestTemplate/">RestTemplate</category>
      
      <category domain="https://sowon-dev.github.io/tags/Websocket/">Websocket</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/26/230127resttemplate-vs-websocket/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[디자인패턴] 옵저버 패턴(observer pattern)이란? 개념,정의</title>
      <link>https://sowon-dev.github.io/2023/01/24/230125ObserverPattern/</link>
      <guid>https://sowon-dev.github.io/2023/01/24/230125ObserverPattern/</guid>
      <pubDate>Tue, 24 Jan 2023 22:13:16 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 김팀장님 코드를 보다가 옵저버 패턴을 만났다. 디자인패턴을 잘 모르기때문에 이참에 공부해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 김팀장님 코드를 보다가 옵저버 패턴을 만났다. 디자인패턴을 잘 모르기때문에 이참에 공부해보았다.</p><a id="more"></a><p>여담으로, 공부해봤지만 디자인 패턴은 여전히 어렵다.</p><h1 id="옵저버-패턴-Observer-pattern-이란"><a href="#옵저버-패턴-Observer-pattern-이란" class="headerlink" title="옵저버 패턴(Observer pattern)이란?"></a>옵저버 패턴(Observer pattern)이란?</h1><p>영단어 observer 뜻 그대로 관찰자와 관련된 패턴이다. 객체의 상태 변화를 관찰하는 관찰자들(옵저버)을 목록에 등록해놓고 상태 변화가 있을때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지(notify)하는 디자인 패턴이다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/8/8d/Observer.svg" alt="출처 - 나무위키"></p><ul><li>주로 분산 이벤트 핸들링 시스템을 구현하는 데 사용된다. </li><li>발행/구독 모델로 알려져 있기도 하다.</li><li>코틀린에서는 Observer(옵저버)대신 Listener(리스너) 용어를 사용한다.</li></ul><p>자바에서는 옵저버패턴을 위한 클래스와 인터페이스를 제공한다.</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/Observer.html">docs.oracle - Interface Observer</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/Observable.html">docs.oracle - Class Observable</a></li></ul><p>쉽게 이해할 수 있는 예시는 유튜브 채널(Subject)과 구독자들(Observer)간의 관계이다.<br>유튜브 채널 관리자가 영상을 업로드하면 구독자들에게만 알람이가 가고 구독자가 아닌 사람들에게는 아무런 영향을 끼치지않는다.<br>즉, 객체(Subject)의 상태가 변화하면 Observer 목록에 있는 각 Observer에게 통지(notify)한다.</p><p><br><br><br></p><h1 id="리액트도-옵저버"><a href="#리액트도-옵저버" class="headerlink" title="리액트도 옵저버?"></a>리액트도 옵저버?</h1><p>옵저버패턴을 알수록 리액트가 자꾸 떠올랐다.<br><a href="https://medium.com/@shlee1353/리액트-리덕스-redux-와-observer-패턴-a4aae3468a25">Seungho Lee - 리덕스(Redux)와 Observer 패턴</a>에서 왜 자꾸 리액트가 떠올랐는지 확인할 수 있었다.</p><blockquote><p>리액트 사용시 데이터 관리를 손쉽게 하기 위해 리덕스(redux)를 사용하며, 이는 옵저버 패턴을 기반으로 제작되었습니다. 리덕스 스토어(store)는 애플리케이션의 상태트리(state tree)를 관리하고 있습니다. 스토어 내부에서 상태값이 변하면 그것에 대한 액션을 보내줘야합니다.<br>출처: <a href="https://medium.com/@shlee1353/리액트-리덕스-redux-와-observer-패턴-a4aae3468a25">Seungho Lee - 리덕스(Redux)와 Observer 패턴</a></p></blockquote><p>리액트의 리덕스는 옵저버패턴으로 디자인된 것이었다!<br>지식이 연결되는 느낌! 재밌다!</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://ko.wikipedia.org/wiki/%EC%98%B5%EC%84%9C%EB%B2%84_%ED%8C%A8%ED%84%B4">위키백과 - 옵서버 패턴</a></li><li><a href="https://velog.io/@haero_kim/옵저버-패턴-개념-떠먹여드립니다">haero_kim - 옵저버 패턴 개념 떠먹여드립니다</a></li><li><a href="https://velog.io/@hanna2100/디자인패턴-2.-옵저버-패턴-개념과-예제-observer-pattern">hanna2100 - 디자인패턴 2.옵저버 패턴 개념과 예제</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/">디자인패턴</category>
      
      
      <comments>https://sowon-dev.github.io/2023/01/24/230125ObserverPattern/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
