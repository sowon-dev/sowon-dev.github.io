<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Mon, 05 Apr 2021 02:12:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Algorithm전체목록List</title>
      <link>https://sowon-dev.github.io/2021/12/29/algorithmList/</link>
      <guid>https://sowon-dev.github.io/2021/12/29/algorithmList/</guid>
      <pubDate>Wed, 29 Dec 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌊코드업&quot;&gt;&lt;a href=&quot;#🌊코드업&quot; class=&quot;headerlink&quot; title=&quot;🌊코드업&quot;&gt;&lt;/a&gt;🌊&lt;a href=&quot;https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100&quot;&gt;코드업&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-1/&quot;&gt;1011 : 문자 한 개 입력받아 그대로 출력하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al/&quot;&gt;1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/12/27/201227al-c1014/&quot;&gt;1014 : 문자 2개 입력받아 순서 바꿔 출력하기, Scanner vs BufferedReader 차이&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/29/200930al-2/&quot;&gt;1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌊코드업"><a href="#🌊코드업" class="headerlink" title="🌊코드업"></a>🌊<a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/codeup100">코드업</a></h2><ol><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-1/">1011 : 문자 한 개 입력받아 그대로 출력하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al/">1012 : 실수 한 개 입력받아 그대로 출력하기, float실수소수점 표현하기</a></li><li><a href="https://sowon-dev.github.io/2020/12/27/201227al-c1014/">1014 : 문자 2개 입력받아 순서 바꿔 출력하기, Scanner vs BufferedReader 차이</a></li><li><a href="https://sowon-dev.github.io/2020/09/29/200930al-2/">1018 : 시간 입력받아 그대로 출력하기, next()와 nextLine()차이, parseInt, valueOf의 차이</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/10/05/201006al/">1023 : 실수 1개 입력받아 부분별로 출력하기, split대신 StringTokenizer사용하기</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201007al-c1034/">1034 : 8진 정수 1개 입력받아 10진수로 출력하기(설명), Scanner로 2진수, 8진수 16진수 받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201008al-c1041/">1041 : 문자 1개 입력받아 다음 문자 출력하기(설명), Scanner로 char받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/11/201012al-c1059/">1059 : 비트단위로 NOT 하여 출력하기(설명), Scanner로 2진수받기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1064/">1064 : 정수 3개 입력받아 가장 작은 수 출력하기(설명), 삼항연산자로 최소값찾기</a></li><li><a href="https://sowon-dev.github.io/2020/10/12/201012al-c1066/">1066 : 정수 3개 입력받아 짝/홀 출력하기(설명), Scanner 기본구분자, whitespace(화이트스페이스)뜻</a></li><li><a href="https://sowon-dev.github.io/2020/10/13/201014al-c1071/">1071 : 0 입력될 때까지 무한 출력하기1, goto말고while문사용</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1082/">1082 : 16진수 구구단?</a></li><li><a href="https://sowon-dev.github.io/2020/10/14/201015al-c1084/">1084 : 빛 섞어 색 만들기(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/10/18/201019al-c1093/">1093 : 이상한 출석 번호 부르기1(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/11/20/201121al-c1097/">1097 : 바둑알 십자 뒤집기(설명)</a></li><li><a href="https://sowon-dev.github.io/2020/11/20/201121al-c1099/">1099 : 성실한 개미(설명)</a></li></ol><p><br><br><br></p><h2 id="🌊leetcode-Easy레벨-전체"><a href="#🌊leetcode-Easy레벨-전체" class="headerlink" title="🌊leetcode Easy레벨 전체"></a>🌊<a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/leetcodeEasyLevel">leetcode Easy레벨 전체</a></h2><ol><li><a href="https://sowon-dev.github.io/2020/12/06/201206al-l0013/">13. Roman to Integer</a></li><li><a href="https://sowon-dev.github.io/2020/12/06/201206al-l0014/">14. Longest Common Prefix</a></li><li><a href="https://sowon-dev.github.io/2021/01/09/210110replacevsreplaceall/">125. Valid Palindrome</a></li><li><a href="https://sowon-dev.github.io/2021/01/11/210111al-l0136/">136. Single Number</a></li><li><a href="https://sowon-dev.github.io/2021/01/18/210118al-l0172/">172. Factorial Trailing Zeroes</a></li><li><a href="https://sowon-dev.github.io/2021/01/21/210122al-l0190/">190. Reverse Bits</a></li></ol><p><br><br><br></p><h2 id="🌊Hackker-Rank-Easy레벨"><a href="#🌊Hackker-Rank-Easy레벨" class="headerlink" title="🌊Hackker Rank Easy레벨"></a>🌊<a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/hackerrank">Hackker Rank Easy레벨</a></h2><ol><li><a href="https://sowon-dev.github.io/2021/02/14/210214al-hackerrank-between-two-sets/">Between Two Sets</a></li><li><a href="https://sowon-dev.github.io/2021/02/17/210217al-hackerrank-Picking-Numbers/">Picking Numbers</a></li><li><a href="https://sowon-dev.github.io/2021/02/18/210218al-hakkerrank-Sherlock-and-Squares/">Sherlock and Squares</a></li><li><a href="https://sowon-dev.github.io/2021/02/27/210228al-hackerrank-Two-Characters/">Two Characters</a></li><li><a href="https://sowon-dev.github.io/2021/03/01/210302al-hackerrank-Separate-the-Numbers/#more">Separate the Numbers</a></li><li><a href="https://sowon-dev.github.io/2021/03/07/210307al-hackerrank-MissingNumbers/">Missing Numbers</a></li><li><a href="https://sowon-dev.github.io/2021/03/07/210307al-hackkerrank-bigsorting/">Big Sorting</a></li><li><a href="https://sowon-dev.github.io/2021/03/13/210314al-HackerRank-Grid-Challenge/">Grid Challenge</a></li><li><a href="https://sowon-dev.github.io/2021/03/13/210314al-HackerRank-Luck-Balance/">Luck Balance</a></li><li><a href="https://sowon-dev.github.io/2021/03/13/210314al-HackerRank-Maximum-Perimeter-Triangle/">Maximum Perimeter Triangle</a></li></ol><p><br><br><br></p><h2 id="🌊백준"><a href="#🌊백준" class="headerlink" title="🌊백준"></a>🌊백준</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/18/201018al-b11005/">11005번 진법 변환2</a></li><li><a href="https://sowon-dev.github.io/2021/04/04/210404al-backjoon-2562/">2562번 최댓값</a></li><li><a href="https://sowon-dev.github.io/2021/04/04/210404al-backjoon-10818/">10818번 최소, 최대</a></li><li><a href="https://sowon-dev.github.io/2021/04/04/210404al-backjoon-1110/">1110번 더하기 사이클</a></li></ol><p><br><br><br></p><h2 id="🌊프로그래머스"><a href="#🌊프로그래머스" class="headerlink" title="🌊프로그래머스"></a>🌊프로그래머스</h2><ol><li><a href="https://sowon-dev.github.io/2021/02/27/210228al-programmers-The-Number-of-pandy-in-String/">문자열 내 p와 y의 개수</a></li><li><a href="https://sowon-dev.github.io/2021/03/07/210307al-programmers-thesmallestnum/">제일 작은 수 제거하기</a></li></ol><p><br><br><br><br><span style="color:white;display:none;"><br>모든 코드업(codeup)(CodeUp)100제 자바(java)(JAVA) 풀이 : 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999<br></span></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2021/12/29/algorithmList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링부트 리액트]학사프로그램01 프로젝트 구상 및 구조</title>
      <link>https://sowon-dev.github.io/2021/04/06/210407swlms1/</link>
      <guid>https://sowon-dev.github.io/2021/04/06/210407swlms1/</guid>
      <pubDate>Tue, 06 Apr 2021 22:40:06 GMT</pubDate>
      
      <description>&lt;p&gt;Springboot와 React를 쓰는 학사프로그램을 토이프로젝트로 만들어보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Springboot와 React를 쓰는 학사프로그램을 토이프로젝트로 만들어보자.</p><a id="more"></a><p><br><br><br></p><h2 id="기술스택"><a href="#기술스택" class="headerlink" title="기술스택"></a>기술스택</h2><ul><li>spring-boot 2.4.4</li><li>Maven</li><li>java 1.8</li><li>Spring Security</li><li>Mybatis 2.1.4</li><li>MySQL</li><li>React</li></ul><p><br><br><br></p><h2 id="프레임워크-및-라이브러리"><a href="#프레임워크-및-라이브러리" class="headerlink" title="프레임워크 및 라이브러리"></a>프레임워크 및 라이브러리</h2><p>|라이브러리명|정의|선택한 이유|<br>|:—:|:—:|<br>|<a href="https://axios-http.com/docs/example/">axios</a>|브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리|Ajax말고 axios를 선택한 이유는 브라우저호환성이 좋고 편리하다|<br>|<a href="https://material-ui.com/">material-ui</a>| 리액트 개발에서 쉽게 사용할 수 있는 UI Framework||</p><p><br><br><br></p><h2 id="FLow-chart"><a href="#FLow-chart" class="headerlink" title="FLow chart"></a>FLow chart</h2><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/sowon-dev/SWLMS">SW LMS 깃헙레포지토리</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Project/">Project</category>
      
      <category domain="https://sowon-dev.github.io/categories/Project/Springboot-React/">Springboot+React</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%95%99%EC%82%AC%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">학사프로그램프로젝트</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/06/210407swlms1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]백준 1110 더하기 사이클 풀이</title>
      <link>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-1110/</link>
      <guid>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-1110/</guid>
      <pubDate>Sun, 04 Apr 2021 06:43:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. </p><a id="more"></a><p>다음 예를 보자.<br>26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.<br>위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.<br>N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.</p><ul><li><a href="https://www.acmicpc.net/problem/1110">https://www.acmicpc.net/problem/1110</a></li></ul><ul><li>입출력예시1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>입출력예시2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>입출력예시3</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">60</span></span><br></pre></td></tr></table></figure><ul><li>입출력예시4</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드1-Scanner-사용"><a href="#풀이코드1-Scanner-사용" class="headerlink" title="풀이코드1: Scanner 사용"></a>풀이코드1: Scanner 사용</h2><ul><li>memory 18356 runtime 228</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 입력 수가 10미만이면 n에 10을 곱함</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>)</span><br><span class="line">      n *= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> 첫째자리수 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> 둘째자리수 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      첫째자리수 = sum / <span class="number">10</span>;</span><br><span class="line">      둘째자리수 = sum % <span class="number">10</span>;</span><br><span class="line">      sum = 첫째자리수 + 둘째자리수;</span><br><span class="line"></span><br><span class="line">      sum = 둘째자리수 * <span class="number">10</span> + sum % <span class="number">10</span>; <span class="comment">// 10이상의 수가 나왔을때 마지막 자리 수로 해야하기 때문</span></span><br><span class="line">      cnt++;</span><br><span class="line">      <span class="keyword">if</span> (sum == n)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(cnt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드2-BufferedReader-사용"><a href="#풀이코드2-BufferedReader-사용" class="headerlink" title="풀이코드2: BufferedReader 사용"></a>풀이코드2: BufferedReader 사용</h2><ul><li>memory 11500 runtime 84</li></ul><p>메모리와 런타임에서 모두 버퍼리더가 스캐너보다 효율적이다.<br>앞으로 버퍼리더로만 문제를 풀어봐야겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tens = <span class="number">0</span>; <span class="comment">//십의 자리의 수</span></span><br><span class="line">    <span class="keyword">int</span> units = <span class="number">0</span>; <span class="comment">//일의 자리의 수</span></span><br><span class="line">    <span class="keyword">int</span> sum = n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      tens = sum/<span class="number">10</span>;</span><br><span class="line">      units = sum%<span class="number">10</span>;</span><br><span class="line">      sum = tens + units;</span><br><span class="line"></span><br><span class="line">      sum = units*<span class="number">10</span> + sum%<span class="number">10</span>;</span><br><span class="line">      cnt++;</span><br><span class="line">      <span class="keyword">if</span>(n == sum)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(cnt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="백준의-다른-문제-풀이가-보고싶다면"><a href="#백준의-다른-문제-풀이가-보고싶다면" class="headerlink" title="백준의 다른 문제 풀이가 보고싶다면?"></a>백준의 다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/backjoon">백준 java 풀이 모음</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-1110/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]백준 10818 최소, 최대 풀이</title>
      <link>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-10818/</link>
      <guid>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-10818/</guid>
      <pubDate>Sun, 04 Apr 2021 06:38:45 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;N개의 정수가 주어진다. 이때, 최솟값과 최댓값을 구하는 프로그램을 작성하시오.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10818&quot;&gt;https://www.acmicpc.net/problem/10818&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>N개의 정수가 주어진다. 이때, 최솟값과 최댓값을 구하는 프로그램을 작성하시오.</p><ul><li><a href="https://www.acmicpc.net/problem/10818">https://www.acmicpc.net/problem/10818</a><a id="more"></a></li></ul><ul><li>입출력예시</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">20</span> <span class="number">10</span> <span class="number">35</span> <span class="number">30</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">7</span> <span class="number">35</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드1-Math함수-사용하기"><a href="#풀이코드1-Math함수-사용하기" class="headerlink" title="풀이코드1: Math함수 사용하기"></a>풀이코드1: Math함수 사용하기</h2><ul><li>memory 116352 runtime 420 </li><li>만약 br.close() 추가하면 memory 116588 runtime 404</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">    StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sol1 Math함수 사용하기</span></span><br><span class="line">    <span class="comment">// memory 116352 runtime 420 -&gt; br.close()하면 memory 116588 runtime 404</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> min = Integer.parseInt(st.nextToken());</span><br><span class="line">    <span class="keyword">int</span> max = min;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123; <span class="comment">//i가 0이 아닌 1인 이유는 min, max 선언할때 5개의 숫자중 첫번째 토큰을 사용했기때문</span></span><br><span class="line">      <span class="keyword">int</span> num = Integer.parseInt(st.nextToken());</span><br><span class="line">      min = Math.min(min, (num));</span><br><span class="line">      max = Math.max(max, (num));</span><br><span class="line">    &#125;</span><br><span class="line">    br.close();</span><br><span class="line">    System.out.println(min+<span class="string">" "</span>+max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드2-배열정렬로-풀기"><a href="#풀이코드2-배열정렬로-풀기" class="headerlink" title="풀이코드2: 배열정렬로 풀기"></a>풀이코드2: 배열정렬로 풀기</h2><ul><li>memory 114572 runtime 1000</li><li>br.close()추가 하면 memory 115624    runtime 1016</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">    StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sol2 배열정렬로 풀기 </span></span><br><span class="line">    <span class="comment">// memory 114572 runtime 1000 -&gt; br.close()하면 memory 115624runtime 1016</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">while</span>(st.hasMoreTokens()) &#123;</span><br><span class="line">      arr[i] = Integer.parseInt(st.nextToken());</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>] + <span class="string">" "</span> + arr[n-<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드3-배열없이-받은-문자-즉시-비교하기"><a href="#풀이코드3-배열없이-받은-문자-즉시-비교하기" class="headerlink" title="풀이코드3: 배열없이 받은 문자 즉시 비교하기"></a>풀이코드3: 배열없이 받은 문자 즉시 비교하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">    StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sol3 배열없이 받은 문자 즉시 비교하기</span></span><br><span class="line">    <span class="comment">// memory 107004 runtime 472</span></span><br><span class="line">    <span class="keyword">int</span> max = -<span class="number">1000001</span>;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(st.hasMoreTokens()) &#123;</span><br><span class="line">      <span class="keyword">int</span> val = Integer.parseInt(st.nextToken());</span><br><span class="line">      <span class="keyword">if</span>(val&gt;max) &#123;</span><br><span class="line">        max = val;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(val&lt;min) &#123;</span><br><span class="line">        min = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(min + <span class="string">" "</span> + max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="백준의-다른-문제-풀이가-보고싶다면"><a href="#백준의-다른-문제-풀이가-보고싶다면" class="headerlink" title="백준의 다른 문제 풀이가 보고싶다면?"></a>백준의 다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/backjoon">백준 java 풀이 모음</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-10818/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]백준 2562 최댓값 풀이</title>
      <link>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-2562/</link>
      <guid>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-2562/</guid>
      <pubDate>Sun, 04 Apr 2021 06:20:41 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;9개의 서로 다른 자연수가 주어질 때, 이들 중 최댓값을 찾고 그 최댓값이 몇 번째 수인지를 구하는 프로그램을 작성하시오.&lt;br&gt;예를 들어, 서로 다른 9개의 자연수 &lt;code&gt;3, 29, 38, 12, 57, 74, 40, 85, 61&lt;/code&gt; 이 주어지면, 이들 중 최댓값은 85이고, 이 값은 8번째 수이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2562&quot;&gt;https://www.acmicpc.net/problem/2562&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>9개의 서로 다른 자연수가 주어질 때, 이들 중 최댓값을 찾고 그 최댓값이 몇 번째 수인지를 구하는 프로그램을 작성하시오.<br>예를 들어, 서로 다른 9개의 자연수 <code>3, 29, 38, 12, 57, 74, 40, 85, 61</code> 이 주어지면, 이들 중 최댓값은 85이고, 이 값은 8번째 수이다.</p><ul><li><a href="https://www.acmicpc.net/problem/2562">https://www.acmicpc.net/problem/2562</a></li></ul><a id="more"></a><ul><li>입출력예시</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">38</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">57</span></span><br><span class="line"><span class="number">74</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">85</span></span><br><span class="line"><span class="number">61</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line"><span class="number">85</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드1"><a href="#풀이코드1" class="headerlink" title="풀이코드1"></a>풀이코드1</h2><ul><li>memory 11476 runtime 76</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>; <span class="comment">//자연수가 주어지므로 선언을 Integer.MIN_VALUE이 아닌 0으로 함</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//인덱스값</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>]; <span class="comment">//서로 다른 9개의 자연수를 넣을 배열</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sol1 memory 11476 runtime 76</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//배열에 숫자넣기 -&gt; 배열이 있어야지 index값을 구할 수 있음</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">      arr[i] = Integer.parseInt(br.readLine());</span><br><span class="line">      max = Math.max(arr[i], max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//배열 인덱스 구하기</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] == max)&#123;</span><br><span class="line">        i = j+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(max);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="풀이코드2-for문-한번만-사용하기"><a href="#풀이코드2-for문-한번만-사용하기" class="headerlink" title="풀이코드2 : for문 한번만 사용하기"></a>풀이코드2 : for문 한번만 사용하기</h2><ul><li>memory 11444 runtime 76</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>; <span class="comment">//자연수가 주어지므로 선언을 Integer.MIN_VALUE이 아닌 0으로 함</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//인덱스값</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>]; <span class="comment">//서로 다른 9개의 자연수를 넣을 배열</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sol2 for문 한번만 사용하기</span></span><br><span class="line">    <span class="comment">// memory 11444 runtime 76</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length;j++) &#123;</span><br><span class="line">      arr[j] = Integer.parseInt(br.readLine());</span><br><span class="line">      <span class="keyword">if</span>(max &lt; arr[j]) &#123;</span><br><span class="line">        max = arr[j];</span><br><span class="line">        i = j+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(max);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="백준의-다른-문제-풀이가-보고싶다면"><a href="#백준의-다른-문제-풀이가-보고싶다면" class="headerlink" title="백준의 다른 문제 풀이가 보고싶다면?"></a>백준의 다른 문제 풀이가 보고싶다면?</h2><ul><li><a href="https://github.com/sowon-dev/AlgorithmStudy_Java/tree/master/src/backjoon">백준 java 풀이 모음</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Backjoon/">Backjoon</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/04/210404al-backjoon-2562/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSON데이터를 어떻게 DB에 넣을까?</title>
      <link>https://sowon-dev.github.io/2021/04/01/210402jsondataDBmodeling/</link>
      <guid>https://sowon-dev.github.io/2021/04/01/210402jsondataDBmodeling/</guid>
      <pubDate>Thu, 01 Apr 2021 23:53:08 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;오늘 또 못알아듣고 말았습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;xAPI를 사용하기위해서는 JSON데이터를 LRS에 수집해야한다. JSON데이터를 어떻게 저장할 수 있을까?&lt;br&gt;내가 알고있는 건 &lt;code&gt;데이터 저장 = DB&lt;/code&gt;이기때문에 DB에 테이블을 생성하여 어떻게 JSON데이터의 KEY, VALUE, DEPTH를 잘 넣을 수 있는 지 고민했다.&lt;br&gt;xAPI에서 필수적인 데이터들로만 이루어져있는 JSON데이터 예시가 있다.&lt;br&gt;이 데이터를 어떻게 수집해야 추후에 편하게 DB분석하고 쿼리로 꺼내쓸 수 있을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>오늘 또 못알아듣고 말았습니다.</strong></p><p>xAPI를 사용하기위해서는 JSON데이터를 LRS에 수집해야한다. JSON데이터를 어떻게 저장할 수 있을까?<br>내가 알고있는 건 <code>데이터 저장 = DB</code>이기때문에 DB에 테이블을 생성하여 어떻게 JSON데이터의 KEY, VALUE, DEPTH를 잘 넣을 수 있는 지 고민했다.<br>xAPI에서 필수적인 데이터들로만 이루어져있는 JSON데이터 예시가 있다.<br>이 데이터를 어떻게 수집해야 추후에 편하게 DB분석하고 쿼리로 꺼내쓸 수 있을까?</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "id": "12345678-1234-5678-1234-567812345678",</span><br><span class="line">    "actor":&#123;</span><br><span class="line">        "mbox":"mailto:xapi@adlnet.gov"</span><br><span class="line">    &#125;,</span><br><span class="line">    "verb":&#123;</span><br><span class="line">        "id":"http://adlnet.gov/expapi/verbs/created",</span><br><span class="line">        "display":&#123;</span><br><span class="line">            "en-US":"created"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "object":&#123;</span><br><span class="line">        "id":"http://example.adlnet.gov/xapi/example/activity"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일단은 DEPTH랑 상관없이 모든 키를 컬럼으로 만들면 어떨까 생각해보았다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">컬럼</span><br><span class="line">id, actor, mbox, verb, id, display, en-US, object, id</span><br></pre></td></tr></table></figure><p>그렇게되면 key가 추가되는 경우에는 어떻게 할까하는 생각이 들었다.<br>xAPI는 구성요소의 유연성이 있기때문에 필요에 따라 Property가 추가 될 수 있어야했다.</p><p><br><br><br></p><h2 id="오늘의-대화"><a href="#오늘의-대화" class="headerlink" title="오늘의 대화"></a>오늘의 대화</h2><p>오늘 팀장님과의 대화를 요약했다. 이 대화에서 모르는 부분들을 속속들이 알아보자!</p><table><thead><tr><th align="center">팀장님</th><th align="center">나</th></tr></thead><tbody><tr><td align="center"></td><td align="center">팀장님 JSON데이터를 DB에 넣고싶은데 이러이러합니다. 괜찮을까요?</td></tr><tr><td align="center">음 JSON 데이터는 한 컬럼에 집어 넣는게 좋습니다.</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">그럼 데이터타입이 엄청 커져야하지않을까요?</td></tr><tr><td align="center"></td><td align="center">한 컬럼에 JSON데이터를 넣으면 최대값을 가뿐히 넘길 수도 있을 것 같은데 그럴경우 어떻게 해야할까요?</td></tr><tr><td align="center">VARCHAR말고 CLOB, BLOB같은 다른 데이터 타입을 알아보세요</td><td align="center"></td></tr><tr><td align="center">하지만 해당 데이터타입은 쿼리짤때 상그러울수있어요. 마이그레이션하기도 골치아프고, 바이너리데이터가 들어가서 데이터 분석이 힘들기도하구요.</td><td align="center"></td></tr></tbody></table><p><br><br><br></p><h2 id="배움포인트"><a href="#배움포인트" class="headerlink" title="배움포인트"></a>배움포인트</h2><ol><li>MySQL기준 VARCHAR를 데이터타입으로 지정할때 최대값은 4000이다. 즉, VARCHAR(4000)까지 가능</li><li>CLOB, BLOB이란</li><li>DB 마이그레이션: 여러 DB를 하나의 DB로 합치거나, 기존의 DB를 다른 DB로 옮기는 경우 등 DB를 이동시키는 작업을 의미함.</li><li>바이너리데이터: 이진수로 표시한 데이터</li></ol><p><br><br></p><h2 id="CLOB-VS-BLOB-차이"><a href="#CLOB-VS-BLOB-차이" class="headerlink" title="CLOB VS BLOB 차이"></a>CLOB VS BLOB 차이</h2><table><thead><tr><th align="center">VARCHAR</th><th align="center">CLOB(Character Large Object)</th><th align="center">BLOB(Binary Large Object)</th></tr></thead><tbody><tr><td align="center">문자열을 표현할때 사용하는 데이터 타입</td><td align="center">사이즈가 큰 데이터를 외부 파일로 저장하기 위한 데이터 타입</td><td align="center">바이너리 데이터를 DB외부에 저장하기 위한 타입</td></tr><tr><td align="center">최대 4000BYTE</td><td align="center">문자열 -변환-&gt; CLOB타입 경우, 최대 길이: 외부 저장소에서 생성 가능한 파일 크기(최대 4GB)</td><td align="center">문자열 -변환-&gt; BLOB타입 경우, 최대 길이: 외부 저장소에서 생성 가능한 파일 크기(최대 4GB)</td></tr><tr><td align="center">가변길이 문자열 저장</td><td align="center">가변길이 문자열 저장</td><td align="center">가변길이 문자열 저장</td></tr><tr><td align="center"></td><td align="center">큰 텍스트 데이터 ( text ) 용</td><td align="center">바이너리 데이터 ( 비디오, 이미지, 문서, 기타 ) 용</td></tr><tr><td align="center"></td><td align="center">SQL문에서 문자열 타입으로 입출력 값을 표현함</td><td align="center">SQL문에서 비트열 타입으로 입출력 값을 표현함</td></tr></tbody></table><p><br><br><br></p><h2 id="standard-xAPI-DB-Architechture-나-schema가-있을까"><a href="#standard-xAPI-DB-Architechture-나-schema가-있을까" class="headerlink" title="standard xAPI DB Architechture 나 schema가 있을까?"></a>standard xAPI DB Architechture 나 schema가 있을까?</h2><blockquote><p>아니요, 표준 LRS데이터베이스 스키마가 없으며, LRS 구현자는 자신의 데이터 스토리지 아키텍처를 자유롭게 선택할 수 있습니다.<br>보통은 아래 두 가지로 초기 LRS를 구현합니다.</p><ul><li>traditional relational structures를 사용하여 구현</li><li>NoSQL data stores를 사용하여 구현<br>다행히도 xAPI를 사용하면 이기종간의 표준화된 데이터베이스 스키마가 필요하지 않습니다.<br>xAPI 그 자체로도 LRS간의 pull 또는 push가 자유롭게 가능합니다<br><a href="https://support.scorm.com/hc/en-us/articles/206164976-Is-there-a-standard-xAPI-database-architecture-or-schema-">답변의 출처 바로가기</a><br>만약 xAPI를 처음 시작하는 개발자라면 스키마 구현이 어려울 수 있습니다. 파이썬을 활용한 예시(<a href="https://github.com/adlnet/ADL_LRS/blob/master/lrs/models.py">바로가기</a>)를 참고하셔도 좋습니다.<br>CouchDB를 backing store LRS로 고려해볼 수 있습니다. CouchDB는 NoSQL JSON document store로 http API가 내장되어있고  JS 함수(map, reduce 등)를 사용하여 쿼리를 만들 수 있습니다.</li></ul></blockquote><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/adlnet/xAPI-Spec/blob/master/xAPI-Data.md#24-statement-properties">https://github.com/adlnet/xAPI-Spec/blob/master/xAPI-Data.md#24-statement-properties</a></li><li><a href="https://jeonggi.tistory.com/45">https://jeonggi.tistory.com/45</a></li><li><a href="https://m.blog.naver.com/PostView.nhn?blogId=rlasksdud53&amp;logNo=220595010315&amp;proxyReferer=https:%2F%2Fwww.google.com%2F">https://m.blog.naver.com/PostView.nhn?blogId=rlasksdud53&amp;logNo=220595010315&amp;proxyReferer=https:%2F%2Fwww.google.com%2F</a></li><li><a href="https://lottoking.tistory.com/3938">https://lottoking.tistory.com/3938</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/tags/%EC%8B%A0%EC%9E%85%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8B%A4%EB%AC%B4%EB%BF%8C%EC%8B%9C%EA%B8%B0/">신입개발자실무뿌시기</category>
      
      <category domain="https://sowon-dev.github.io/tags/JSON/">JSON</category>
      
      <category domain="https://sowon-dev.github.io/tags/xAPI/">xAPI</category>
      
      
      <comments>https://sowon-dev.github.io/2021/04/01/210402jsondataDBmodeling/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트] reducer, action, dispatch의 관계</title>
      <link>https://sowon-dev.github.io/2021/03/29/210330React-Redux/</link>
      <guid>https://sowon-dev.github.io/2021/03/29/210330React-Redux/</guid>
      <pubDate>Mon, 29 Mar 2021 18:00:26 GMT</pubDate>
      
      <description>&lt;p&gt;리액트는 기본적으로 하나의 루트 컴포넌트(보통 App.js)에서 상태를 관리한다.&lt;br&gt;리액트의 컴포넌트가 많아지면 컴포넌트간의 교류가 빈번해진다. 중앙에 데이터 저장소를 만들고 관리하면 더 편하다. 그것이 바로 Redux이다.&lt;br&gt;리덕스의 데이터가 변경되면 관련된 모든 컴포넌트에 영향을 미친다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트는 기본적으로 하나의 루트 컴포넌트(보통 App.js)에서 상태를 관리한다.<br>리액트의 컴포넌트가 많아지면 컴포넌트간의 교류가 빈번해진다. 중앙에 데이터 저장소를 만들고 관리하면 더 편하다. 그것이 바로 Redux이다.<br>리덕스의 데이터가 변경되면 관련된 모든 컴포넌트에 영향을 미친다.</p><a id="more"></a><h2 id="reducer-action-dispatch의-관계"><a href="#reducer-action-dispatch의-관계" class="headerlink" title="reducer, action, dispatch의 관계"></a>reducer, action, dispatch의 관계</h2><ul><li>state안에 데이터가 있다면 → 직접 수정 불가능</li><li>수정하고 싶으면 action을 만들어서 수정해야함</li><li>action을 만든 후 dispatch에 하면 state 수정가능<ul><li>action은 기본적으로 대문자+스네이크표기법 사용</li></ul></li><li>reducer : state를 어떻게 바꾸는 지를 switch 문을 사용하여 적으면 됨</li></ul><p><img src="/img/210330redux.PNG" alt="제로초 리액트 무료강좌(웹게임)"></p><p><br><br><br></p><h2 id="Dispatch-방법"><a href="#Dispatch-방법" class="headerlink" title="Dispatch 방법"></a>Dispatch 방법</h2><ol><li>props 사용<ul><li>단점 : 부모-자식 컴포넌트 구조에서는 계속 dispatch를 넘겨줘야하므로 번거롭다.</li><li>즉, List → Table → Tr → Td 구조에서 Td에서 dispatch를 사용하고 싶다면 불필요하게 Table, Tr에도 dispatch를 넘겨줘야한다.</li></ul></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List에서 Td로 바로 dispatch넘겨줄수가 없으므로 Table로 넘겨주기</span></span><br><span class="line">&lt;Table dispatch=&#123;dispatch&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Table에서 Tr로 넘겨주기</span></span><br><span class="line">&lt;Tr dispatch=&#123;dispatch&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tr에서 Td로 넘겨주고 </span></span><br><span class="line">&lt;Td dispatch=&#123;dispatch&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Td에서 dispatch 사용하기</span></span><br><span class="line"><span class="keyword">const</span> onClickForm = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">dispatch(&#123; <span class="attr">type</span>: CLICK_CELL, <span class="attr">row</span>: rowIndex, <span class="attr">cell</span>: cellIndex &#125;);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><ol start="2"><li>context API사용</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//초기값</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TableContext = createContext(&#123;</span><br><span class="line">  tableData: [],</span><br><span class="line">  halted: <span class="literal">true</span>,</span><br><span class="line">  dispatch: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Minesweeper = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  <span class="keyword">const</span> value = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">tableData</span>: state.tableData, dispatch &#125;), [</span><br><span class="line">state.tableData,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"><span class="comment">// 자식컴포넌트들이 tableData와 dispatch에 접근 가능</span></span><br><span class="line">&lt;TableContext.Provider value=&#123;value&#125;&gt;</span><br><span class="line">  &lt;Form /&gt;</span><br><span class="line">  &lt;div&gt;&#123;timer&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Table /</span>&gt;</span><br><span class="line">  &lt;div&gt;&#123;result&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>TableContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 자식 컴포넌트에서 사용하는 법</span></span><br><span class="line"><span class="keyword">const</span> onClickBtn = userCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">dispatch(&#123; <span class="attr">type</span>: START_GAME, row, cell, mine &#125;);</span><br><span class="line">  &#125;, [row, cell, mine]);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtube.com/playlist?list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn">제로초 리액트 무료강좌(웹게임)</a></li><li><a href="https://velopert.com/3528">리덕스(Redux)를 왜 쓸까? 그리고 리덕스를 편하게 사용하기 위한 발악 (i)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/29/210330React-Redux/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트] 반복문map, import와 require차이, 자잘한 팁</title>
      <link>https://sowon-dev.github.io/2021/03/29/210330React-tip/</link>
      <guid>https://sowon-dev.github.io/2021/03/29/210330React-tip/</guid>
      <pubDate>Mon, 29 Mar 2021 17:02:15 GMT</pubDate>
      
      <description>&lt;p&gt;리액트의 자잘한 팁을 정리해보았다.&lt;/p&gt;
&lt;h2 id=&quot;자잘한-팁&quot;&gt;&lt;a href=&quot;#자잘한-팁&quot; class=&quot;headerlink&quot; title=&quot;자잘한 팁&quot;&gt;&lt;/a&gt;자잘한 팁&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;state에 객체 구조를 안쓰는 것이 좋다&lt;/li&gt;
&lt;li&gt;render안에는 절대 setState()를 쓰지않는다 → setState()되면 랜더링이 실행되기때문에 랜더링이 실행되면 또 setState()가 실행되고 이 부분이 무한 반복되기때문.&lt;/li&gt;
&lt;li&gt;부모한테서 받은 props를 바꾸고싶을때는 useState()를 이용하여 state로 만들고 그 state를 바꿔준다 → 자식이 props를 바꾸면 부모 props도 바뀌기때문.&lt;/li&gt;
&lt;li&gt;Props는 상속이다. Props를 보면 항상 그 부모 컴포넌트를 생각해야한다. 그 부모 컴토넌트의 조상 컴포넌트가 있을 수 있다.&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트의 자잘한 팁을 정리해보았다.</p><h2 id="자잘한-팁"><a href="#자잘한-팁" class="headerlink" title="자잘한 팁"></a>자잘한 팁</h2><ul><li>state에 객체 구조를 안쓰는 것이 좋다</li><li>render안에는 절대 setState()를 쓰지않는다 → setState()되면 랜더링이 실행되기때문에 랜더링이 실행되면 또 setState()가 실행되고 이 부분이 무한 반복되기때문.</li><li>부모한테서 받은 props를 바꾸고싶을때는 useState()를 이용하여 state로 만들고 그 state를 바꿔준다 → 자식이 props를 바꾸면 부모 props도 바뀌기때문.</li><li>Props는 상속이다. Props를 보면 항상 그 부모 컴포넌트를 생각해야한다. 그 부모 컴토넌트의 조상 컴포넌트가 있을 수 있다.</li></ul><a id="more"></a><p><br><br><br></p><h2 id="리액트의-반복문"><a href="#리액트의-반복문" class="headerlink" title="리액트의 반복문"></a>리액트의 반복문</h2><ul><li>리액트의 반복문은 map을 사용할 것<br>배열을 1대1로 짝짓는 것이 map이다.<br>map은 입력과 출력의 값이 동일해야한다 → 배열의 요소를 지우고 싶다면 filter를 써야한다.</li></ul><p><br><br><br></p><h2 id="import와-require차이"><a href="#import와-require차이" class="headerlink" title="import와 require차이"></a>import와 require차이</h2><p>외부라이브러리를 불러오는 방법은 2가지가 있다.<br>외부라이브러리인 MomentJS를 불러온다고 가정해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1번방법</span></span><br><span class="line"><span class="comment">//노드의 문법으로 require써야한다.</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">"moment"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2번방법</span></span><br><span class="line"><span class="comment">//바벨이 import 쓴 부분을 자동으로 require로 바꿔주기때문에 require와 import 리액트에서는 둘 다 쓸 수 있다</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">require 방법</th><th align="center">import 방법</th></tr></thead><tbody><tr><td align="center">NodeJS에서 사용되고 있는 CommonJS 키워드</td><td align="center">ES6(ES2015)에서 새롭게 도입된 키워드</td></tr><tr><td align="center">복수객체내보내기: <code>exports.객체명 = 객체명</code></td><td align="center">복수객체내보내기: <code>export { 객체명 }</code></td></tr><tr><td align="center">단일객체내보내기: <code>module.exports = 객체명</code></td><td align="center">단일객체내보내기: <code>export default</code>키워드사용</td></tr><tr><td align="center"><a href="https://www.daleseo.com/js-module-require/">자바스크립트 CommonJS 모듈 내보내기/불러오기 (require) 예시</a></td><td align="center"><a href="https://www.daleseo.com/js-module-import/">자바스크립트 ES6 모듈 내보내기/불러오기 (import) 예시</a></td></tr></tbody></table><p>두 방법 중 실무에서 더 많이 사용하는 방법은 import 방법이다.<br>아무래도 ES6 모듈 시스템이 좀 더 최신이므로 CommonJS 방식 대비 여러 강점이 있다.</p><ul><li>CommonJS 대비 ES6모듈 시스템의 강점<ul><li>모듈관리 전용 키워드 사용(import,from,export,default)하여 코드 가독성 높음</li><li>비동기방식으로 성능과 메모리부분이 유리</li><li>Named Parameter기능지원</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtube.com/playlist?list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn">제로초 리액트 무료강좌(웹게임)</a></li><li><a href="https://www.zerocho.com/category/ECMAScript/post/579dca4054bae71500727ab9">제로초 ES2015(ES6) 모듈 시스템</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/29/210330React-tip/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트] this.state 귀찮을땐 구조분해</title>
      <link>https://sowon-dev.github.io/2021/03/29/210330React-Destructuringassignment/</link>
      <guid>https://sowon-dev.github.io/2021/03/29/210330React-Destructuringassignment/</guid>
      <pubDate>Mon, 29 Mar 2021 15:46:15 GMT</pubDate>
      
      <description>&lt;p&gt;리액트를 클래스형 컴포넌트로 사용하게되면 계속 this.state를 써줘야하는 불편함이 있다.&lt;br&gt;이를 구조분해문법으로 해결할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트를 클래스형 컴포넌트로 사용하게되면 계속 this.state를 써줘야하는 불편함이 있다.<br>이를 구조분해문법으로 해결할 수 있다.</p><a id="more"></a><h2 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//기존</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">&lt;h1&gt;&#123;<span class="keyword">this</span>.state.value&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1&gt;&#123;this.state.answer&#125;&lt;/</span>h1&gt;</span><br><span class="line">&lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="구조분해문법사용-코드"><a href="#구조분해문법사용-코드" class="headerlink" title="구조분해문법사용 코드"></a>구조분해문법사용 코드</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//구조분해문법사용</span></span><br><span class="line"><span class="keyword">const</span> &#123; value, answer &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">&lt;h1&gt;&#123;value&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;&#123;answer&#125;&lt;/</span>h1&gt;</span><br><span class="line">&lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtube.com/playlist?list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn">제로초 리액트 무료강좌(웹게임)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/29/210330React-Destructuringassignment/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>컨테이너, 도커, 쿠버네티스</title>
      <link>https://sowon-dev.github.io/2021/03/28/210329Container/</link>
      <guid>https://sowon-dev.github.io/2021/03/28/210329Container/</guid>
      <pubDate>Sun, 28 Mar 2021 15:45:39 GMT</pubDate>
      
      <description>&lt;p&gt;새로운 프로젝트를 진행하면서 팀장급 회의가 있었다. 신규 프로젝트는 어떻게 구성하는 지, 의사결정은 어떻게 이루어지는 지 너무너무 궁금해서 팀장님들 회의에 서기로라도 참석하고싶었지만… 나는 신입이기때문에… 참여할 수 없었다. 하지만 팀전체에 공유된 회의 참고자료를 볼 수 있었고 내가 들어만 봤던 도커와 쿠버네티스라는 단어가 보였다. 이참에 완전히 정리해보려고한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>새로운 프로젝트를 진행하면서 팀장급 회의가 있었다. 신규 프로젝트는 어떻게 구성하는 지, 의사결정은 어떻게 이루어지는 지 너무너무 궁금해서 팀장님들 회의에 서기로라도 참석하고싶었지만… 나는 신입이기때문에… 참여할 수 없었다. 하지만 팀전체에 공유된 회의 참고자료를 볼 수 있었고 내가 들어만 봤던 도커와 쿠버네티스라는 단어가 보였다. 이참에 완전히 정리해보려고한다.</p><a id="more"></a><h2 id="컨테이너-Container"><a href="#컨테이너-Container" class="headerlink" title="컨테이너(Container)"></a>컨테이너(Container)</h2><p>쿠버네티스를 알려면 도커를 알아야하고 그럴러면 컨테이너를 알아야한다.</p><ul><li>컨테이너란 다양한 프로그램, 실행환경을 패키지로 묶어 추상화하여 격리 환경을 만드는 것</li></ul><p>컨테이너를 통해 동일한 인터페이스를 제공할 수 있어 프로그램의 배포 및 관리를 단순하게 해준다.<br>컨테이너는 가상머신(VM)과 비교할 수 있다. VM의 경우 Guest OS가 올라가기때문에 컨테이너보다 훨씬 무겁다.</p><p><img src="https://miro.medium.com/max/2400/1*wOBkzBpi1Hl9Nr__Jszplg.png" alt="https://medium.com/@darkrasid/docker%EC%99%80-vm-d95d60e56fdd"></p><table><thead><tr><th align="center">가상머신 서버</th><th align="center">컨테이너서버</th></tr></thead><tbody><tr><td align="center">가상 머신의 모든 자원을 사용</td><td align="center">운영체제의 자원을 필요한 만큼 격리하여 컨테이너에 할당</td></tr></tbody></table><p><br><br><br></p><h2 id="도커-Docker"><a href="#도커-Docker" class="headerlink" title="도커(Docker)"></a>도커(Docker)</h2><ul><li>컨테이너기반의 오픈소스 가상화 플랫폼</li></ul><p><img src="https://tech.osci.kr/assets/images/91690167/20.png" alt="https://tech.osci.kr/2020/03/03/91690167/#2-docker"></p><ul><li>도커의 작동 순서<ol><li>코드개발</li><li>Dockerfile 생성: Image파일만 생성하면 변경사항을 확인할 수 없기때문에 이미지내용을 코드화함</li><li>Dockerfile Image 생성: 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것을 이미지화한다.(Immutable)</li><li>Container Orchestrator를 통한 배포 : Kubernetes, Docker Swarm, Rancher, Apache Mesos등의 컨테이너 오케스트레이션 툴을 사용</li><li>Container run</li><li>Container image Push</li></ol></li></ul><p><br><br><br></p><h2 id="쿠버네티스-Kubernetes"><a href="#쿠버네티스-Kubernetes" class="headerlink" title="쿠버네티스(Kubernetes)"></a>쿠버네티스(Kubernetes)</h2><ul><li><p>컨테이너를 관리를 위해 나온 오픈소스 플랫폼<br>컨테이너 역시 그 수가 많아지게 되면 관리와 운영에 있어서 어려움이 따르는데 이를 관리하고 조율하는 시스템 중 하나가 바로 쿠버네티스이다.</p></li><li><p><a href="https://subicura.com/2019/05/19/kubernetes-basic-1.html">쿠버네티스 시작하기 - Kubernetes란 무엇인가?</a></p></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>참고라고 적어놓고 필독이라고 읽는다. 하나하나 꼭 읽어봐야한다.<br>특히 Container 시리즈는 정말 주옥같다. </p><ul><li><a href="https://tech.osci.kr/2020/03/03/91690167/">Container 시리즈 전체</a></li><li><a href="https://zzsza.github.io/development/2018/04/17/docker-kubernetes/">Docker와 쿠버네티스의 이해</a></li><li><a href="https://hwan-shell.tistory.com/116">Linux) Doker와 Container의 탄생과 설명, 차이점</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Linux/">Linux</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/28/210329Container/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[특강후기]JS로 디스코드 봇만들기</title>
      <link>https://sowon-dev.github.io/2021/03/25/210226JS-discordchatbot/</link>
      <guid>https://sowon-dev.github.io/2021/03/25/210226JS-discordchatbot/</guid>
      <pubDate>Thu, 25 Mar 2021 16:51:28 GMT</pubDate>
      
      <description>&lt;p&gt;좋은 기회로 디스코드 챗봇을 만드는 온라인 특강을 듣게되었다.&lt;br&gt;정말 재미있었다!&lt;/p&gt;
&lt;h1 id=&quot;순서&quot;&gt;&lt;a href=&quot;#순서&quot; class=&quot;headerlink&quot; title=&quot;순서&quot;&gt;&lt;/a&gt;순서&lt;/h1&gt;&lt;h2 id=&quot;vs-code에-npm-설치하기&quot;&gt;&lt;a href=&quot;#vs-code에-npm-설치하기&quot; class=&quot;headerlink&quot; title=&quot;vs code에 npm 설치하기&quot;&gt;&lt;/a&gt;vs code에 npm 설치하기&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;: npm을 설치한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt;: 설치한 npm을 실행한다.</description>
      
      
      
      <content:encoded><![CDATA[<p>좋은 기회로 디스코드 챗봇을 만드는 온라인 특강을 듣게되었다.<br>정말 재미있었다!</p><h1 id="순서"><a href="#순서" class="headerlink" title="순서"></a>순서</h1><h2 id="vs-code에-npm-설치하기"><a href="#vs-code에-npm-설치하기" class="headerlink" title="vs code에 npm 설치하기"></a>vs code에 npm 설치하기</h2><ol><li><code>npm install</code>: npm을 설치한다.</li><li><code>npm run dev</code>: 설치한 npm을 실행한다.<a id="more"></a></li></ol><p><br><br><br></p><h2 id="디스코드-디벨로퍼에서-챗봇등록하기"><a href="#디스코드-디벨로퍼에서-챗봇등록하기" class="headerlink" title="디스코드 디벨로퍼에서 챗봇등록하기"></a><a href="https://discord.com/developers/applications">디스코드 디벨로퍼</a>에서 챗봇등록하기</h2><ol><li><code>new appication</code> 클릭</li><li><code>add bot</code> 클릭 후 <code>yes do it</code> 후 토큰을 복사</li></ol><p><img src="/img/210226discordbot1.png" alt=""><br><img src="/img/210226discordbot2.png" alt=""><br>토큰을 통해서 채팅을 CR할 수 있기때문에 실제 서버에 배포한다면 토큰은 절대 공개되서는 안된다.</p><ol start="3"><li>vs code의 터미널에서 config.json에 복사한 토큰을 붙여넣는다.</li></ol><p><img src="/img/210226discordbot3.png" alt=""></p><ol start="4"><li><a href="https://discord.com/developers/applications">디스코드 디벨로퍼 포털</a>에서 생성한 채널을 클릭한 뒤 General Information에서 CLIENT ID 토큰 복사</li></ol><p><img src="/img/210226discordbot4.png" alt=""></p><ol start="5"><li><p><a href="https://finitereality.github.io/permissions-calculator/?v=8">디스코드 permissions calculator</a>에서 권한주기</p><ul><li>add 클릭 → 승인<br><img src="/img/210226discordbot5.png" alt=""></li></ul></li><li><p><a href="https://discord.com/channels/@me">디스코드</a>에서 채널이 생성된 것을 확인하기</p></li></ol><p><br><br></p><h2 id="vs-code에서-코딩하기"><a href="#vs-code에서-코딩하기" class="headerlink" title="vs code에서 코딩하기"></a>vs code에서 코딩하기</h2><p><code>!투표</code>를 이용해서 제목과 투표지를 띄어쓰기로 입력하면 해당 입력값으로 투표하기를 생성해주는 챗봇을 만들어보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">vote</span>(<span class="params">message, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> voteEmojis = [<span class="string">"1️⃣"</span>, <span class="string">"2️⃣"</span>, <span class="string">"3️⃣"</span>, <span class="string">"4️⃣"</span>, <span class="string">"5️⃣"</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> question = args.shift();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (args.length &lt; <span class="number">1</span> || args.length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    message.reply(<span class="string">"One to five options are required. 선택 항목은 1-5개만 지원합니다."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> embed = <span class="keyword">new</span> MessageEmbed();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> description = <span class="string">""</span>;</span><br><span class="line">  args.forEach(<span class="function">(<span class="params">arg, i</span>) =&gt;</span> &#123;</span><br><span class="line">    description += <span class="string">`<span class="subst">$&#123;voteEmojis[i]&#125;</span>: <span class="subst">$&#123;arg&#125;</span>\n`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  embed.setTitle(<span class="string">"🗳 "</span> + question);</span><br><span class="line">  embed.setDescription(description);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> vote = <span class="keyword">await</span> message.reply(<span class="string">"Vote"</span>, &#123; <span class="attr">embed</span>: embed &#125;);</span><br><span class="line">  args.forEach(<span class="keyword">async</span> (arg, i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> vote.react(voteEmojis[i]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/210226discordbot6.png" alt="완성된 모습"></p><ul><li><a href="https://github.com/sowon-dev/simple-discord-chatbot-js">전체 소스코드</a> </li></ul><p><br><br><br></p><h1 id="웹소캣-vs-HTTP"><a href="#웹소캣-vs-HTTP" class="headerlink" title="웹소캣 vs HTTP"></a>웹소캣 vs HTTP</h1><p>HTTP의 경우 클라이언트의 요청이 없으면 서버는 먼저 말을 걸 수 없다.<br>웹소켓은 서버가 클라이언트에게 먼저 말(메세지)을 걸수있다.</p><p><img src="http://www.secmem.org/assets/images/websocket-socketio/websocket.png" alt="http://www.secmem.org/blog/2019/08/17/websocket-socketio/"></p><p><br><br><br></p><h1 id="서버-확인하는-사이트"><a href="#서버-확인하는-사이트" class="headerlink" title="서버 확인하는 사이트"></a>서버 확인하는 사이트</h1><p>서버가 정상적인지 확인하는 사이트 : <a href="https://isitup.org/">https://isitup.org/</a></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Discord/">Discord</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/25/210226JS-discordchatbot/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[오류일지]React에러 Warning: Failed prop type: The prop `open` is marked</title>
      <link>https://sowon-dev.github.io/2021/03/24/210325React-err-failedproptype/</link>
      <guid>https://sowon-dev.github.io/2021/03/24/210325React-err-failedproptype/</guid>
      <pubDate>Wed, 24 Mar 2021 15:52:27 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;상황&quot;&gt;&lt;a href=&quot;#상황&quot; class=&quot;headerlink&quot; title=&quot;상황&quot;&gt;&lt;/a&gt;상황&lt;/h2&gt;&lt;p&gt;스프링부트와 리액트 MySQL를 사용하여 학사프로그램을 만들고 있다.&lt;br&gt;리액트 작업 도중 Warning: Failed prop type: The prop &lt;code&gt;open&lt;/code&gt; is marked as required in &lt;code&gt;ForwarRef(Menu)&lt;/code&gt;, but its value is &lt;code&gt;undefined&lt;/code&gt; 에러가 계속 발생했다.&lt;br&gt;Menu인 부분이 뭐있을까 검색하면서 찾아보니 정말 어이없는 실수를 발견했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><p>스프링부트와 리액트 MySQL를 사용하여 학사프로그램을 만들고 있다.<br>리액트 작업 도중 Warning: Failed prop type: The prop <code>open</code> is marked as required in <code>ForwarRef(Menu)</code>, but its value is <code>undefined</code> 에러가 계속 발생했다.<br>Menu인 부분이 뭐있을까 검색하면서 찾아보니 정말 어이없는 실수를 발견했다.</p><a id="more"></a><p><img src="/img/210324ReactErr.PNG" alt="에러발생"></p><p><br><br><br></p><h2 id="원인-및-해결"><a href="#원인-및-해결" class="headerlink" title="원인 및 해결"></a>원인 및 해결</h2><p>import시 @material-ui/icons/Menu를 해야했는데 @material-ui/core/Menu를 해놓은 것을 발견했다.<br>core가 아닌 icons로 하니 에러가 더이상 발생하지 않았다.</p><p><img src="/img/210324ReactErr2.PNG" alt="에러해결"></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/24/210325React-err-failedproptype/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트] Hooks API로 생명주기 관리</title>
      <link>https://sowon-dev.github.io/2021/03/23/210324React-Hooks/</link>
      <guid>https://sowon-dev.github.io/2021/03/23/210324React-Hooks/</guid>
      <pubDate>Tue, 23 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Hooks-컴포넌트-상태관리-함수&quot;&gt;&lt;a href=&quot;#Hooks-컴포넌트-상태관리-함수&quot; class=&quot;headerlink&quot; title=&quot;Hooks 컴포넌트 상태관리 함수&quot;&gt;&lt;/a&gt;Hooks 컴포넌트 상태관리 함수&lt;/h2&gt;&lt;p&gt;리액트에는 클래스형 컴포넌트와 함수형 컴포넌트가 있다. 클래스 컴포넌트는 state를 가지고 다니는 반면에 함수형 컴포넌트는 그렇지않다.&lt;br&gt;리액트 Hooks를 통해 함수형 컴포넌트에서 상태관리를 할 수 있게 되었다.&lt;br&gt;즉, 리액트 Hooks란 함수형 컴포넌트에서 생명주기 관리를 도와주는 기능이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Hooks-컴포넌트-상태관리-함수"><a href="#Hooks-컴포넌트-상태관리-함수" class="headerlink" title="Hooks 컴포넌트 상태관리 함수"></a>Hooks 컴포넌트 상태관리 함수</h2><p>리액트에는 클래스형 컴포넌트와 함수형 컴포넌트가 있다. 클래스 컴포넌트는 state를 가지고 다니는 반면에 함수형 컴포넌트는 그렇지않다.<br>리액트 Hooks를 통해 함수형 컴포넌트에서 상태관리를 할 수 있게 되었다.<br>즉, 리액트 Hooks란 함수형 컴포넌트에서 생명주기 관리를 도와주는 기능이다.</p><a id="more"></a><p><br><br><br></p><h2 id="기본적인-Hooks"><a href="#기본적인-Hooks" class="headerlink" title="기본적인 Hooks"></a><a href="https://ko.reactjs.org/docs/hooks-reference.html#basic-hooks">기본적인 Hooks</a></h2><table><thead><tr><th align="center">useState</th><th align="center">useEffect</th><th align="center">useContext</th></tr></thead><tbody><tr><td align="center">컴포넌트 상태 관리</td><td align="center">컴포넌트가 렌더링될 때마다 어떠한 작업을 수행하도록 개입</td><td align="center">컴포넌트 간의 전역 상태를 관리</td></tr><tr><td align="center">-</td><td align="center">클래스형컴포넌트의 componentDidMout+componentDidUpdate기능을 합친 형태</td><td align="center">-</td></tr></tbody></table><p><img src="https://media.vlpt.us/images/gwak2837/post/491f1b4b-1a5c-4140-89c6-2d61cce066fc/image.png" alt="https://velog.io/@gwak2837/React-Hooks%EC%9D%98-%EC%9D%B4%ED%95%B4"></p><p><br><br><br></p><h2 id="추가-Hooks"><a href="#추가-Hooks" class="headerlink" title="추가 Hooks"></a><a href="https://ko.reactjs.org/docs/hooks-reference.html#additional-hooks">추가 Hooks</a></h2><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><ul><li>state갯수를 줄여주는 역할</li><li>테이블구조에서 Td 넘겨줄 데이터가 많기 때문에 useReducer를 이용하여 한번에 넘겨줄 수 있다.</li><li>state변경시 불변성이 중요하기때문에 얕은 복사를 사용한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  winner: <span class="string">""</span>,</span><br><span class="line">  turn: <span class="string">"O"</span>,</span><br><span class="line">  tableData: [</span><br><span class="line">    [<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>],</span><br><span class="line">    [<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>],</span><br><span class="line">    [<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>],</span><br><span class="line">  ],</span><br><span class="line">  recentCell: [<span class="number">-1</span>, <span class="number">-1</span>], <span class="comment">//초기화는 없는 칸으로 설정</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TictactoeHooks = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ul><li>일반 값을 기억</li><li>값이 바뀌어도 랜더링하고 싶지않은 값들은 useRef 넣어서 사용한다. -&gt; 성능 최적화.</li><li>값이 바뀌기는 하지만 화면에 영향을 미치지않을때 useRef 사용</li><li>useRef를 사용하면 변한 값이 저장은 되지만 랜더링 되지않는다 → useRef뒤에 setState()로 호출하는 순간 랜더링이 된다.</li></ul><p><br><br></p><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><ul><li>복잡한 함수 결과값(리턴값)을 기억</li></ul><p><br><br></p><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><ul><li>함수 자체를 기억</li><li>함수 생성 자체가 비용이 클때 사용</li><li>함수 자체를 기억하기때문에 변경값이 있는 경우에 인지하지 못한다. 따라서 [] input에 변경되는 state를 넣어줘야 정상적으로 변경값을 인지한다.</li></ul><p><br><br><br></p><h2 id="useEffect-과-useLayoutEffect-차이"><a href="#useEffect-과-useLayoutEffect-차이" class="headerlink" title="useEffect 과 useLayoutEffect 차이"></a>useEffect 과 useLayoutEffect 차이</h2><p>둘의 가장 중요한 차이는 실행시점이다.</p><table><thead><tr><th align="center">useEffect</th><th align="center">useLayoutEffect</th></tr></thead><tbody><tr><td align="center">컴포넌트 렌더링 → 화면 업데이트 → useEffect실행</td><td align="center">컴포넌트 렌더링 → useLayoutEffect 실행 → 화면 업데이트</td></tr><tr><td align="center">화면resize등 화면이 완전히 바뀌고 난 후에 실행</td><td align="center">화면resize등 전에 실행</td></tr><tr><td align="center">비동기적으로 실행됨</td><td align="center">동기적으로 실행됨</td></tr><tr><td align="center"></td><td align="center">렌더링 직후 DOM요소의 값을 읽을 때 유용함(scroll position등)</td></tr><tr><td align="center">DOM과 인터렉션이 없는 경우에 사용(대부분 경우)</td><td align="center">DOM을 mutate할 경우에 사용 but 실무에서 사용할 경우가 드물다</td></tr></tbody></table><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://velog.io/@snowman39/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%95%8C%EA%B3%A0-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0-pt.2-Hooks%EB%8A%94-%EC%93%B0%EB%A0%88%EA%B8%B0">리액트, 제대로 알고 개발하기 pt.2 ( Hooks는 쓰레기? )</a></li><li><a href="https://youtube.com/playlist?list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn">제로초 리액트 무료강좌(웹게임)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/23/210324React-Hooks/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트] state나 props 변경시 성능향상 방법</title>
      <link>https://sowon-dev.github.io/2021/03/23/210324React-managementofcomponent/</link>
      <guid>https://sowon-dev.github.io/2021/03/23/210324React-managementofcomponent/</guid>
      <pubDate>Tue, 23 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;React어플리케이션-성능향상-방법&quot;&gt;&lt;a href=&quot;#React어플리케이션-성능향상-방법&quot; class=&quot;headerlink&quot; title=&quot;React어플리케이션 성능향상 방법&quot;&gt;&lt;/a&gt;React어플리케이션 성능향상 방법&lt;/h2&gt;&lt;p&gt;React에서 state나 props가 변경되었을때 render가 진행되는데 값이 없는 setState() 호출에도 rendering이 된다.&lt;br&gt;이게 쌓이면 성능이 저하된다. 이를 해결하는 방법을 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="React어플리케이션-성능향상-방법"><a href="#React어플리케이션-성능향상-방법" class="headerlink" title="React어플리케이션 성능향상 방법"></a>React어플리케이션 성능향상 방법</h2><p>React에서 state나 props가 변경되었을때 render가 진행되는데 값이 없는 setState() 호출에도 rendering이 된다.<br>이게 쌓이면 성능이 저하된다. 이를 해결하는 방법을 알아보자.</p><a id="more"></a><p><br><br><br></p><h3 id="class인-경우"><a href="#class인-경우" class="headerlink" title="class인 경우"></a>class인 경우</h3><p>state나 props가 변경되었을때 성능을 위해 shouldComponentUpdate(){} 또는 PureComponent를 쓸 수 있다.<br>PureComponent란 shouldComponentUpdate()를 구현해놓은 컴포넌트이다.<br>shouldComponentUpdate()는 배열이나 객체에 변경이 있는 경우 변경사항을 인지하지 못할 수 도 있다. → 새로운 배열을 만들고 싶다면 <code>[...기존arr, 1]</code> 복사해서 사용해야한다.<br>따라서 shouldComponentUpdate()보다는 PureComponent 를 쓰는 것이 좋다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.data !== prevProps.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//더 편하게</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Hooks인-경우"><a href="#Hooks인-경우" class="headerlink" title="Hooks인 경우"></a>Hooks인 경우</h3><p>PureComponent와 shouldComponentUpdate가 없다. 그대신 memo(memoization의 약자)를 사용한다.<br>훅스할때는 state들을 최상위로 빼야한다. 그렇지 않고 if조건문에 state를 넣으면 에러가 발생한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//함수 컴포넌트. 이건 그냥 함수 컴포넌트</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; memo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ball = memo(<span class="function">(<span class="params">&#123; number &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> background;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    background = <span class="string">"red"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    background = <span class="string">"green"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hooks :  useRef, useState, useCallback등을 사용하고 함수 컴포넌트인 것</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef, useState, useCallback &#125; <span class="keyword">from</span> <span class="string">"react"</span>; </span><br><span class="line"><span class="keyword">const</span> Ball = memo(<span class="function">(<span class="params">&#123; number &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> background;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    background = <span class="string">"red"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    background = <span class="string">"green"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/23/210324React-managementofcomponent/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트]컴포넌트 생명주기</title>
      <link>https://sowon-dev.github.io/2021/03/22/210323React-componentLifeCycle/</link>
      <guid>https://sowon-dev.github.io/2021/03/22/210323React-componentLifeCycle/</guid>
      <pubDate>Mon, 22 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;컴포넌트-라이프-사이클-순서&quot;&gt;&lt;a href=&quot;#컴포넌트-라이프-사이클-순서&quot; class=&quot;headerlink&quot; title=&quot;컴포넌트 라이프 사이클 순서&quot;&gt;&lt;/a&gt;컴포넌트 라이프 사이클 순서&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;constructor → componentWillMount → render → ref → componentDidMount&lt;/li&gt;
&lt;li&gt;componentWillMount 는 실무에서 잘 쓰지않는다.’&lt;/li&gt;
&lt;li&gt;위의 순서 끝난 뒤 setState/props 바뀌는 경우 → shouldComponentUpdate(true) → render → componentDidUpdate&lt;/li&gt;
&lt;li&gt;부모컴포넌트가 나를 없앤 경우 → componentWillUnmount → 소멸</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="컴포넌트-라이프-사이클-순서"><a href="#컴포넌트-라이프-사이클-순서" class="headerlink" title="컴포넌트 라이프 사이클 순서"></a>컴포넌트 라이프 사이클 순서</h2><ul><li>constructor → componentWillMount → render → ref → componentDidMount</li><li>componentWillMount 는 실무에서 잘 쓰지않는다.’</li><li>위의 순서 끝난 뒤 setState/props 바뀌는 경우 → shouldComponentUpdate(true) → render → componentDidUpdate</li><li>부모컴포넌트가 나를 없앤 경우 → componentWillUnmount → 소멸<a id="more"></a></li></ul><p><img src="https://gseok.gitbooks.io/react/content/assets/react-life-cycle-2.png" alt="https://gseok.gitbooks.io/react/content/bd80-bd84-bd80-bd84-c9c0-c2dd-b4e4/react-component-lifecycle-api-c815-b9ac.html"></p><p><br><br><br></p><h2 id="component함수"><a href="#component함수" class="headerlink" title="component함수"></a>component함수</h2><p><img src="https://cdn.filestackcontent.com/ApNH7030SAG1wAycdj3H" alt="https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955"></p><ul><li><code>componentDidMount()</code> : render가 <code>처음</code> 성공적으로 실행된 후 바로 <code>componentDidMount()</code> 가 실행된다. 리랜더링일땐 실행되지 않는다.<ul><li>비동기 요청</li><li>eX) setInterval()</li></ul></li><li><code>componentDidUpdate()</code> : 리랜더링된 후 실행.</li><li><code>componentWillUnmount()</code>: 컴포넌트가 제거되지 직전 비동기요청을 <code>componentWillUnmount()</code> 로 할 수 있다.<ul><li>비동기 요청 정리</li><li>완료되지않은 비동기요청을 여기서 정리해줘야함.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class버전</span></span><br><span class="line"></span><br><span class="line">interval;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123; <span class="comment">// 컴포넌트가 첫 렌더링된 후, 여기에 비동기 요청을 많이 해요</span></span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="keyword">this</span>.changeHand, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123; <span class="comment">// 컴포넌트가 제거되기 직전, 비동기 요청 정리를 많이 해요</span></span><br><span class="line">    clearInterval(<span class="keyword">this</span>.interval); <span class="comment">// 완료되지않은 비동기요청을 여기서 정리해줘야한다</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hooks버전</span></span><br><span class="line"><span class="keyword">const</span> interval = useRef();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//useEffect는 componentDidMount, componentDidUpdate, componentWillUnmount에 대해 1대1대응은 아니지만 셋의 역할을 하나로 합쳤다고 할수있다.</span></span><br><span class="line">  <span class="comment">//componentDidMount, componentDidUpdate역할</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    interval.current = setInterval(changeHand, <span class="number">100</span>); <span class="comment">//0.1초</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//componentWillUnmount역할</span></span><br><span class="line">      clearInterval(interval.current);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [imgCoord]); <span class="comment">//빈 배열이면 componentDidMount역할만 수행</span></span><br><span class="line"><span class="comment">//배열에 다시 실행 할 값을 넣어주면componentDidMount + componentDidUpdate역할</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hooks버전에서 componentDidMount만 사용하고 싶다면?</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//ajax</span></span><br><span class="line">  &#125;, []); <span class="comment">//빈배열로 놔두기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hooks버전에서 componentDidMount 말고 componentDidUpdate만 사용하고 싶다면?</span></span><br><span class="line"><span class="keyword">const</span> mounted = useRef(fasle);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounted.current) &#123;</span><br><span class="line">      mounted.current = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//ajax 처리</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []); <span class="comment">//배열에는 바뀌는 값입력</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtube.com/playlist?list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn">제로초 리액트 무료강좌(웹게임)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/03/22/210323React-componentLifeCycle/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Hexo]헥소블로그 방문자수 조회수 간단하게 처리하기(초간단)</title>
      <link>https://sowon-dev.github.io/2021/03/22/210323hexo-visitcunt/</link>
      <guid>https://sowon-dev.github.io/2021/03/22/210323hexo-visitcunt/</guid>
      <pubDate>Mon, 22 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;블로그를 운영하다보면 조회수가 궁금해지기마련이다.&lt;br&gt;구글서치콘솔로 조회수를 확인할 수 있지만 블로그에서 바로 확인하면 더욱 좋을 것이다. 헥소블로그는 지킬블로그보다 정보가 많이 없어서 구글링을 좀 많이 했다. 그랬더니 내가 쓰고 있는 hexo-icarus테마는 busuanzi플러그인을 통하여 초간단하게 조회수와 방문자수를 처리할 수 있었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>블로그를 운영하다보면 조회수가 궁금해지기마련이다.<br>구글서치콘솔로 조회수를 확인할 수 있지만 블로그에서 바로 확인하면 더욱 좋을 것이다. 헥소블로그는 지킬블로그보다 정보가 많이 없어서 구글링을 좀 많이 했다. 그랬더니 내가 쓰고 있는 hexo-icarus테마는 busuanzi플러그인을 통하여 초간단하게 조회수와 방문자수를 처리할 수 있었다.</p><a id="more"></a><ul><li>사용중인 hexo테마 : <a href="https://github.com/ppoffice/hexo-theme-icarus">icarus</a></li></ul><p><br><br><br></p><h2 id="조회수-기능-등록-방법"><a href="#조회수-기능-등록-방법" class="headerlink" title="조회수 기능 등록 방법"></a>조회수 기능 등록 방법</h2><p><a href="http://busuanzi.ibruce.info/">busuanzi</a>플러그인은 중국어지만 구글의 힘을 빌려서 사용가능하다. 간단하게 스크립트코드와 html태그를 넣어서 조회수를 처리할 수 있다.<br>하지만 내가 사용중인 hexo icarus테마는 true/false만으로도 적용이 가능하다! 세상 간편!<br>물론 커스텀하고 싶다면 <a href="http://ibruce.info/2015/04/04/busuanzi/">공식사이트</a>를 통해 원하는 대로 적용할 수 있다.</p><ol><li>프로젝트에서 <code>themes/hexo-theme-icarus/_config.yml</code> 파일을 연다.</li><li><code>busuanzi</code>를 검색하여 false를 true로 변경해준다.</li><li>끝!</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># BuSuanZi site/page view counter</span><br><span class="line"># https://busuanzi.ibruce.info</span><br><span class="line">busuanzi: true</span><br><span class="line"># CNZZ statistics</span><br><span class="line"># https://www.umeng.com/web</span><br></pre></td></tr></table></figure><p>true로 바꿔주기만하면 블로그 footer에 전체 방문자수와 조회수가 출력될뿐아니라 각 포스팅의 조회수도 확인 가능하다!</p><p><img src="/img/210323postvisitercmt.png" alt=""></p><p>초간단!</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Plugins/Analytics/icarus-user-guide-web-analytics-plugins/#BuSuanZi-Web-Counter">https://blog.zhangruipeng.me/hexo-theme-icarus/Plugins/Analytics/icarus-user-guide-web-analytics-plugins/#BuSuanZi-Web-Counter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Hexo/">Hexo</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/22/210323hexo-visitcunt/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JPA VS JDBC</title>
      <link>https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/</link>
      <guid>https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/</guid>
      <pubDate>Mon, 22 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;오늘 또 못알아듣고 말았습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;회의시간만되면 신입개발자인 나는 참 바쁘다. 모르는 용어들이 쏟아지기때문에 볼펜을 놓쳐선 안된다. 회의 중 모르는 용어들은 다 적어놨다가 회의가 끝나고 혼자 구글링해보곤한다. 그럴때마다 아 그렇구나하고 뒤돌아선 까먹기 일수!&lt;br&gt;그래서 아예 포스팅을 하기로 했다. 역시 기억보단 기록이지!&lt;br&gt;TAGS는 &lt;code&gt;신입개발자실무뿌시기&lt;/code&gt;로 정해봤다.&lt;br&gt;언젠가 내가 회의를 다 알아들으며 주도하는 그 날이 올때까지 열심히 공부해야겠다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>오늘 또 못알아듣고 말았습니다.</strong></p><p>회의시간만되면 신입개발자인 나는 참 바쁘다. 모르는 용어들이 쏟아지기때문에 볼펜을 놓쳐선 안된다. 회의 중 모르는 용어들은 다 적어놨다가 회의가 끝나고 혼자 구글링해보곤한다. 그럴때마다 아 그렇구나하고 뒤돌아선 까먹기 일수!<br>그래서 아예 포스팅을 하기로 했다. 역시 기억보단 기록이지!<br>TAGS는 <code>신입개발자실무뿌시기</code>로 정해봤다.<br>언젠가 내가 회의를 다 알아들으며 주도하는 그 날이 올때까지 열심히 공부해야겠다.</p><a id="more"></a><p><br><br><br></p><h2 id="오늘의-물음표"><a href="#오늘의-물음표" class="headerlink" title="오늘의 물음표"></a>오늘의 물음표</h2><p>신규프로젝트 회의 중에 팀장님이 말씀하셨다.</p><blockquote><p>JPA를 사용하면 비즈니스 로직이 복잡해져서 사용하지 않을거예요</p></blockquote><p>이 말의 뜻을 이해하지 못했기에 회의끝나고 찾아볼 요량으로 회의 중에 후다닥 노트에 적었다. </p><p><br><br><br></p><h2 id="JPA-Java-Persistent-API-란-뭘까-그전에-역사부터"><a href="#JPA-Java-Persistent-API-란-뭘까-그전에-역사부터" class="headerlink" title="JPA(Java Persistent API)란 뭘까? 그전에 역사부터!"></a>JPA(Java Persistent API)란 뭘까? 그전에 역사부터!</h2><p>그 이름에 답이있다. </p><ul><li>Persistent(영속성)이란 데이터를 생성한 프로그램의 실행이 종료되더라도 사라지지않는 데이터의 특성이다.</li></ul><p>기술은 발전된 순서로 공부하는 것이 이해하기 편하다.<br>왜냐하면 이전 기술의 불편한 점을 보완하여 새로운 기술인 나왔기때문이다. 그래서 불편한 점이 무엇이었고 그것을 어떻게 해결했는지가 두 기술의 차이점이 된다.<br>그럼 JPA전에는 뭐가 있었을까?<br>바로 JDBC이다.</p><p><br><br><br></p><h2 id="JDBC는-DB연결할때-쓰는-거아냐"><a href="#JDBC는-DB연결할때-쓰는-거아냐" class="headerlink" title="JDBC는 DB연결할때 쓰는 거아냐?"></a>JDBC는 DB연결할때 쓰는 거아냐?</h2><p>JDBC(Java Database Connectivity)도 그 이름에 답이 있다. </p><ul><li>DB에 접근(Connectivity)할 수 있도록 Java에서 제공하는 API이다.</li></ul><p><img src="https://media.vlpt.us/images/seculoper235/post/d1758470-aa23-489f-965f-b205c245f30a/JDBC%20%EA%B5%AC%EC%A1%B0.PNG" alt="https://velog.io/@seculoper235/DB-%EC%9E%91%EC%97%85-JDBC"></p><p>JDBC API가 있고 JDBC DriverManager가 DB제품에 따른 드라이버를 생성하여 JDBC API에 맞게 동작할 수 있게 처리해준다.<br>따라서 우리는 JDBC API 변경없이 JDBC 드라이버만 바꿔주면 어떤 제품의 DB든 연결할 수 있다.</p><p><img src="https://media.vlpt.us/images/seculoper235/post/a2277b92-85a2-4c40-992d-762e5871a923/JDBC%20%EA%B3%BC%EC%A0%95.PNG" alt="https://velog.io/@seculoper235/DB-%EC%9E%91%EC%97%85-JDBC"></p><p>위 사진처럼 쿼리를 실행하기 전과 후에 연결 생성, 명령문, ResultSet 닫기등과 같은 많은 코드를 작성해야한다.<br>또 connection 관리, 예외처리등에 불편함이 있어 나온게 Spring JDBC이다.</p><p><br><br><br></p><h2 id="Spring-JDBC는-또-뭐야"><a href="#Spring-JDBC는-또-뭐야" class="headerlink" title="Spring JDBC는 또 뭐야?"></a>Spring JDBC는 또 뭐야?</h2><ul><li>핵심 : JdbcTemplate</li></ul><p>Spring JDBC는 JDBC에서 DriveManager가 하는 일들을 JdbcTemplate에게 맡긴다. 따라서 개발자는 메서드에 쿼리를 직접 매핑한다.<br>쿼리작성이 줄어들고(여전히 쿼리를 적지만…) 불편한 점들을 추상화시켜놓았다.<br>SQL Query 직접 사용하여 데이터 조작하므로 JdbcTemplate은 SQL Mapper 중 하나이다</p><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcibMem%2FbtqDJf5WUpi%2FCoMEm3JcjkF5SamoI5Xk81%2Fimg.png" alt="https://skyblue300a.tistory.com/7"></p><p><br><br></p><h2 id="SQL-Mapper는-또-뭐야"><a href="#SQL-Mapper는-또-뭐야" class="headerlink" title="SQL Mapper는 또 뭐야?"></a>SQL Mapper는 또 뭐야?</h2><p>SQL Mapper는 SQL 문장으로 직접 데이터베이스 데이터를 다룬다.<br>그럼 직접 데이터를 다루지 않는 것도 있을까?<br>직접 다루지 않는 것을 ORM(Object-Relational Mapping)이라고 부른다.</p><p><br><br></p><h2 id="SQL-Mapper-vs-ORM"><a href="#SQL-Mapper-vs-ORM" class="headerlink" title="SQL Mapper vs ORM"></a>SQL Mapper vs ORM</h2><table><thead><tr><th align="center">SQL Mapper</th><th align="center">ORM</th></tr></thead><tbody><tr><td align="center">SQL 문장으로 직접 데이터베이스 데이터를 조작함</td><td align="center">객체를 통해 간접적으로 데이터베이스 데이터를 조작함</td></tr><tr><td align="center">SQL Query 직접 사용하여 데이터 조작</td><td align="center">SQL Query가 아닌 메서드로 데이터 조작</td></tr><tr><td align="center">SQL이 java코드와 분리되어 있기 때문에 유지보수가 편하지만 분리되어있기에 객체와 쿼리문 모두 관리해주어야 함</td><td align="center">객체 중심으로 개발가능</td></tr><tr><td align="center">복잡한 쿼리, 다이나믹 쿼리 이점</td><td align="center">프로시저등 복잡한 쿼리는 해결이 까다로움, 자동으로 생성되는 쿼리가 많기 때문에 성능저하의 가능성이 있어 최적화 필요</td></tr><tr><td align="center">비슷한 쿼리 남발, 자주쓰는 CRUD 메소드를 직접 다 작성필수</td><td align="center">CURD 메소드를 기본적으로 제공</td></tr><tr><td align="center">특정 DB에 종속적</td><td align="center">설정파일에서 어떤 DB를 사용하고 있는지 알려주기만 하면 얼마든지 DB를 변경가능</td></tr><tr><td align="center">MyBatis, Spring JDBC</td><td align="center">JPA, Hibernate</td></tr></tbody></table><p><br><br><br></p><h2 id="그럼-MyBatis는"><a href="#그럼-MyBatis는" class="headerlink" title="그럼 MyBatis는?"></a>그럼 MyBatis는?</h2><p>MyBatis도 SQL Mapper 중 하나이다.<br>MyBatis는 Plain JDBC의 문제점을 Spring JDBC와 다르게 보았다.<br>MyBatis는 자바코드에서 SQL을 쓰는 것을 문제라고 생각했고 SQL을 분리하고자했다. 따라서 SQL쿼리를 Java에서 XML로 옮겼서 적는다.</p><ul><li><a href="https://sowon-dev.github.io/2020/10/13/201014spring/">MyBatis(iBatis) 적용순서 및 사용방법 3가지, 예시</a></li></ul><p>Mybatis는 쿼리가 수정되어 데이터 정보가 바뀌면 그에 사용되고있던 DTO와 함께 수정해주어야하는 불편함이 생긴다. 즉, 물리적으로 분리시켜놨지만 논리적으로는 서로 강한 의존관계가 있다.<br>이 불편함을 해결하기 위해 나온 것이 ORM이다.<br>ORM은 객체만 바꾸어주면 된다. 즉, 객체 중심으로 개발가능해진다.</p><p><br><br><br></p><h2 id="SQL-Mapper은-알았으니-이제-ORM이-뭔지-알려줘"><a href="#SQL-Mapper은-알았으니-이제-ORM이-뭔지-알려줘" class="headerlink" title="SQL Mapper은 알았으니 이제 ORM이 뭔지 알려줘"></a>SQL Mapper은 알았으니 이제 ORM이 뭔지 알려줘</h2><p>ORM(Object-Relational-Mapping)의 이름 그대로 객체와 관계형데이터베이스의 데이터를 자동으로 매핑(연결)해준다. </p><p>ORM의 구조는 아래와 같다.</p><p><img src="https://i.stack.imgur.com/4sVPQ.png" alt="https://stackoverflow.com/questions/4477082/what-is-a-jpa-implementation/21719070"></p><p>ORM기준 표준인터페이스인 JPA가 있고, 그 구현체로는 제일 유명한 Hibernate, EclipseLink, DataNucleus등이 있다.<br>ORM의 핵심은 <a href="https://ict-nroo.tistory.com/130">엔티티매니저</a>이다.</p><p><br><br><br></p><h2 id="드디어-JPA가-나오네"><a href="#드디어-JPA가-나오네" class="headerlink" title="드디어 JPA가 나오네"></a>드디어 JPA가 나오네</h2><p>직접적인 SQL 문을 사용하지 않고 자바 코드를 사용해서 DB에 접근, 조작할 수 있는 기술이다. JPA 역시 내부적으로 JDBC를 사용한다.</p><ul><li>자바 ORM 기술에 대한 API 표준 명세로, Java에서 제공하는 API이다.</li><li>장점<ul><li>SQL문을 직접 java application내에서 적을 경우가 적어진다.</li><li>SQL구조를 java application내에서 적용하지 않아도 된다. =&gt; 어노테이션을 사용한다 EX) @Id, @ManyToOne …등</li></ul></li></ul><p>JPA를 쓰는데 EntityManager를 쓴적없다면 그것은 Spring Data JPA를 사용했기 때문일 것이다.</p><p><br><br><br></p><h2 id="Spring-Data-JPA는-또-뭐야"><a href="#Spring-Data-JPA는-또-뭐야" class="headerlink" title="Spring Data JPA는 또 뭐야?"></a>Spring Data JPA는 또 뭐야?</h2><p>Spring Data JPA는 JPA를 쓰기 편하게 만들어놓은 모듈이다.<br>Spring Data JPA의 핵심은 Repository이다.<br>이 JpaRepository를 뜯어보면 안에 EntityManager가 있다는 것을 알 수있다.</p><p><br><br><br></p><h2 id="분류"><a href="#분류" class="headerlink" title="분류"></a>분류</h2><table><thead><tr><th align="center">JDBC</th><th align="center">SQLMAPPER</th><th align="center">ORM</th></tr></thead><tbody><tr><td align="center">JDBC API</td><td align="center">MyBatis</td><td align="center">JPA</td></tr><tr><td align="center"></td><td align="center">Spring JDBC</td><td align="center">Hibernate</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">Spring JDBC/JPA</td></tr></tbody></table><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://thefif19wlsvy.tistory.com/249">https://thefif19wlsvy.tistory.com/249</a></li><li><a href="https://youtu.be/Ppqc3qN75EE">https://youtu.be/Ppqc3qN75EE</a></li><li><a href="https://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html">https://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html</a></li><li><a href="https://youtu.be/mezbxKGu68Y">https://youtu.be/mezbxKGu68Y</a></li><li><a href="https://velog.io/@seculoper235/DB-%EC%9E%91%EC%97%85-JDBC">https://velog.io/@seculoper235/DB-%EC%9E%91%EC%97%85-JDBC</a></li><li><a href="https://bk-investing.tistory.com/35">https://bk-investing.tistory.com/35</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/tags/%EC%8B%A0%EC%9E%85%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8B%A4%EB%AC%B4%EB%BF%8C%EC%8B%9C%EA%B8%B0/">신입개발자실무뿌시기</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[제코베ICT특강 후기]정규표현식 Python으로 톺아보기</title>
      <link>https://sowon-dev.github.io/2021/03/16/210317pythonRegularExpression/</link>
      <guid>https://sowon-dev.github.io/2021/03/16/210317pythonRegularExpression/</guid>
      <pubDate>Tue, 16 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;특강-소개-및-후기&quot;&gt;&lt;a href=&quot;#특강-소개-및-후기&quot; class=&quot;headerlink&quot; title=&quot;특강 소개 및 후기&quot;&gt;&lt;/a&gt;특강 소개 및 후기&lt;/h1&gt;&lt;p&gt;톺아보기란 &lt;code&gt;샅샅이 더듬어 뒤지면서 찾아본다&lt;/code&gt;는 순 우리말이다.&lt;br&gt;파이썬을 잘 알지는 못하지만 정규표현식을 배우고싶은 마음에 듣게 된 특강이다. 파이썬을 잘 몰라도 충분히 들을 수 있는 강의였다!&lt;/p&gt;
&lt;p&gt;사실 정규식에 대한 자료는 인터넷에 참 많다.&lt;br&gt;하지만 개발자로서 공부할 게 많다보니 정규식은 사용에 의해… 꼭 필요한 때만 급하게 공부하게 되어버린다.&lt;br&gt;언젠가 공부해야지라고 생각만했었는데 이호준대표님의 특강덕분에 정규식에 한 발 가까워졌다.&lt;br&gt;물론 자유자재로 사용하려면 한참 멀었지만 기초를 다질 수 있어 참 유익했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="특강-소개-및-후기"><a href="#특강-소개-및-후기" class="headerlink" title="특강 소개 및 후기"></a>특강 소개 및 후기</h1><p>톺아보기란 <code>샅샅이 더듬어 뒤지면서 찾아본다</code>는 순 우리말이다.<br>파이썬을 잘 알지는 못하지만 정규표현식을 배우고싶은 마음에 듣게 된 특강이다. 파이썬을 잘 몰라도 충분히 들을 수 있는 강의였다!</p><p>사실 정규식에 대한 자료는 인터넷에 참 많다.<br>하지만 개발자로서 공부할 게 많다보니 정규식은 사용에 의해… 꼭 필요한 때만 급하게 공부하게 되어버린다.<br>언젠가 공부해야지라고 생각만했었는데 이호준대표님의 특강덕분에 정규식에 한 발 가까워졌다.<br>물론 자유자재로 사용하려면 한참 멀었지만 기초를 다질 수 있어 참 유익했다.</p><a id="more"></a><p><img src="/img/210317pythonReg1.png" alt=""></p><ul><li>노션 교안 : <a href="https://www.notion.so/1c57fc683c33468d95e7a490b6f66c95">https://www.notion.so/1c57fc683c33468d95e7a490b6f66c95</a><br>교안 목차를 차근차근따라가다보면 어느새 카카오 코딩테스트와 비슷한 문제까지 풀어본 게 된다!<br>정말 좋은 자료이다!</li></ul><p><br><br><br></p><h1 id="정규표현식"><a href="#정규표현식" class="headerlink" title="정규표현식"></a>정규표현식</h1><ul><li>실습사이트: <a href="https://regexr.com/5nvc2">https://regexr.com/5nvc2</a><br>이호준대표님이 미리 넣어주신 데이터를 가지고 정규표현식을 연습할 수 있는 실습사이트이다.<br>왼쪽 메뉴바의 Cheatsheet을 통해서 각 정의 및 기능을 확인할 수 있다.<br>교안의 실전부분을 실습사이트에서 직접 진행해보면서 정규표현식 기초를 익힐 수 있다.</li></ul><p><br><br><br></p><h2 id="팁"><a href="#팁" class="headerlink" title="팁"></a>팁</h2><p>강의 중의 기억하고싶은 팁들이다.</p><ul><li><code>/^문자/gm</code> : 문자로 시작하는것 </li><li><code>/문자$/gm</code> : 문자로 끝나는것</li><li><code>/^문자$/gm</code> 주로 위의 둘을 함께 사용한다.</li><li><code>/... .../gm</code> : 3글자와 띄어쓰고 그다음 3글자를 찾을 수 있다. </li><li><code>/h[ea]llo/gm</code> : 택일 기능으로 hello와 hallo 두 개 다 찾는다.</li><li><code>[a-z].a</code>: 총 3글자이고 첫번째글자는 a-z, 두번째는 모든 글자, 마지막글자는 a인 문자열을 찾는다</li><li><code>?</code>는 위치에 따라 의미가 다르다.</li></ul><p><br><br><br></p><h2 id="서브패턴"><a href="#서브패턴" class="headerlink" title="서브패턴"></a>서브패턴</h2><p>제일 재미있던 부분은 서브패턴이었다.</p><table><thead><tr><th align="center">grouping 규칙</th><th align="center">사용법</th><th align="center">예시</th></tr></thead><tbody><tr><td align="center">(?:abc)</td><td align="center">캐치는 되지만 그룹을 사용하지 않음</td><td align="center"></td></tr><tr><td align="center">(?=abc)</td><td align="center">(Positive 매칭) 그룹으로 설정(Lookahead)</td><td align="center">hello(?=world)/gm 뒤에 world가 오는 hello를 찾음</td></tr><tr><td align="center">(?!abc)</td><td align="center">(Negative 매칭) 그룹으로 설정(Lookbehind)</td><td align="center">hello(?!world)/gm 뒤에 world가 오지않는 hello를 찾음</td></tr></tbody></table><p><br><br><br></p><h1 id="Google-Colab"><a href="#Google-Colab" class="headerlink" title="Google Colab"></a>Google Colab</h1><p>주실습은 코랩을 사용했다.<br>코랩은 예전에 한국코드페어 특강때 잠깐 다뤄본 적이 있다.<br>만약 파이썬을 아예 모른다면 <a href="https://www.notion.so/1c57fc683c33468d95e7a490b6f66c95#94ae53ae50a7450bbb0a32c537271205">자바스크립트를 이용하는 실습 방법</a>도 노션 교안에 다 나와있다! 교안이 잘되어있었기에 따로 필기를 할 필요가 없었다. 세상친절!</p><p><br><br><br></p><h2 id="팁-1"><a href="#팁-1" class="headerlink" title="팁"></a>팁</h2><p>강의 중의 기억하고싶은 팁들이다.</p><ul><li>가장 많이 사용하는 메서드는 <code>re.compile(&#39;패턴&#39;).findall(문자열)</code> 이다. 정규식에 매칭되는 리스트를 반환한다.</li><li>교안의 연습문제 중 주사위문제가 2018년 카카오 코딩테스트와 비슷한 수준의 문제이다.</li><li>교안의 연습문제에 대한 답은 주피터노트북에 나와있다.</li></ul><p><br><br><br></p><h1 id="압축-문제"><a href="#압축-문제" class="headerlink" title="압축 문제"></a>압축 문제</h1><p>재미있던 문제는 압축문제였다.<br>for와 if를 이용하여 풀 수 있지만 정규표현식으로 더욱더 간단하게 풀 수 있었다.<br>그리고 또 한 번 느끼는 건데 코테할때는 파이썬이 짱이다. 이렇게 간단할수가!</p><ul><li>문제: aaabbccc는 a3b2c3로 압축된다. 압축된 문자열을 정규표현식을 사용하여 다시 풀어보시오</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//풀이<span class="number">1</span></span><br><span class="line"></span><br><span class="line">정규표현식 = re.compile(<span class="string">'([a-z])([1-9])'</span>)</span><br><span class="line">문자열 = <span class="string">'a3b2c3'</span></span><br><span class="line"></span><br><span class="line">결과 = 정규표현식.findall(문자열)</span><br><span class="line">결과</span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> 결과 :</span><br><span class="line">  s += i *int(j)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">//출력</span><br><span class="line">aaabbccc</span><br></pre></td></tr></table></figure><p>위를 더 간단하게 한 줄로 풀수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//풀이<span class="number">2</span> : 한줄버전 한줄버전</span><br><span class="line"><span class="string">''</span>.join([i * int(j) <span class="keyword">for</span> i, j <span class="keyword">in</span> 결과])</span><br><span class="line"></span><br><span class="line">//출력</span><br><span class="line">aaabbccc</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="추가-자료"><a href="#추가-자료" class="headerlink" title="추가 자료"></a>추가 자료</h1><p><a href="https://sowon-dev.github.io/2020/08/09/200810javai2/">정규표현식, 자주 사용하는 정규식</a></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Lectures-Seminars/">Lectures &amp; Seminars</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Review/">Review</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/16/210317pythonRegularExpression/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[웨비나후기]3월 우아한테크세미나 : 우아한 ATDD</title>
      <link>https://sowon-dev.github.io/2021/03/15/210316woowatechATDD/</link>
      <guid>https://sowon-dev.github.io/2021/03/15/210316woowatechATDD/</guid>
      <pubDate>Mon, 15 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;웨비나-소개-및-후기&quot;&gt;&lt;a href=&quot;#웨비나-소개-및-후기&quot; class=&quot;headerlink&quot; title=&quot;웨비나 소개 및 후기&quot;&gt;&lt;/a&gt;웨비나 소개 및 후기&lt;/h1&gt;&lt;p&gt;테스트의 중요성은 익히 알고 있지만 코드를 짜기 급급한 나는 테스트 주도 개발을 해본 적이 없다.&lt;br&gt;이번 웨비나를 통해 간접적으로나마 우아한형제들에서는 어떻게 ATDD를 하는지 알 수 있어서 유익했다.&lt;br&gt;또 인수 테스트와 단위테스트에 대한 비교를 실제 사례로 들어볼 수 있어서 이해가 쏙쏙 되었다.&lt;br&gt;너무 재밌다! 토이프로젝트에 꼭 넣어보고싶다!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="웨비나-소개-및-후기"><a href="#웨비나-소개-및-후기" class="headerlink" title="웨비나 소개 및 후기"></a>웨비나 소개 및 후기</h1><p>테스트의 중요성은 익히 알고 있지만 코드를 짜기 급급한 나는 테스트 주도 개발을 해본 적이 없다.<br>이번 웨비나를 통해 간접적으로나마 우아한형제들에서는 어떻게 ATDD를 하는지 알 수 있어서 유익했다.<br>또 인수 테스트와 단위테스트에 대한 비교를 실제 사례로 들어볼 수 있어서 이해가 쏙쏙 되었다.<br>너무 재밌다! 토이프로젝트에 꼭 넣어보고싶다!</p><a id="more"></a><iframe src="https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2FwoowahanTech%2Fposts%2F2827708750803045&width=500&show_text=false&height=497&appId" width="100%" height="497" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowfullscreen="true" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share"></iframe><p><br><br><br></p><h1 id="ATDD-인수테스트-란"><a href="#ATDD-인수테스트-란" class="headerlink" title="ATDD (인수테스트) 란?"></a>ATDD (인수테스트) 란?</h1><p>TDD(단위테스트) 수행시 어떻게 시작하고 언제 끝나는 지가 모호한 경우가 많고 각 단위들이 잘 통합하는 지 확인하기 어렵다.<br>만약 인수테스트가 없다면 배포해서 기능 동작을 확인해야하며 페이지에서 테스트를 해야하고 수동으로 변경사항을 확인해야한다.<br>하지만 인수테스트가 있으면 배포없이 테스트로 대부분 검증이 가능해지며 인수 테스트로 스펙표현까지 가능하다.</p><ul><li>시나리오(사용자 스토리) 기반으로 기능 테스트</li><li>장점<ul><li>배포없이 받는 빠른 피드백</li><li>새로운 팀의 도메인과 서비스 흐름 파악에 큰 도움이 됨</li><li>도메인 이해에 예상보다는 짧은 시간이 소요</li></ul></li></ul><p><br><br><br></p><h1 id="ATDD-개발-프로세스"><a href="#ATDD-개발-프로세스" class="headerlink" title="ATDD 개발 프로세스"></a>ATDD 개발 프로세스</h1><ul><li>ATDD 개발 프로세스: 시나리오 기반 표현 방식(Given:사전조건/When:검증대상/Then:기대결과)을 통한 인수 조건 정의 -&gt; 인수 테스트 작성 -&gt; 기능구현</li><li>즉 예제로 명세하기 -&gt; 예제로 정제하기 -&gt; 실행가능한 명세만들기</li></ul><p><br><br><br></p><h2 id="인수조건"><a href="#인수조건" class="headerlink" title="인수조건"></a>인수조건</h2><p>인수조건 작성시 검증하고자하는 when 구문을 먼저 작성 후 기대 결과를 의미하는 then구문 작성하고 when과 then에서 필요한 정보를 given을 통해서 마련한다.</p><ul><li><p>인수조건 예시1 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">기능 : 강의 수강 대기 신청</span><br><span class="line"></span><br><span class="line">인수조건:</span><br><span class="line">- given: 강사는 강의를 생성했다. 강사는 강의를 신청 가능 상태로 변경했다. 강의 모집인원만큼 신청을 받았다.</span><br><span class="line">- when: 회원이 수강 대기 신청을 요청한다.</span><br><span class="line">- then: 회원은 강의의 수강 대기자로 등록되었다.</span><br><span class="line"></span><br><span class="line">인수테스트: 실제 요청/응답하는 환경과 유사하게 테스트 환경을 구성</span><br><span class="line"></span><br><span class="line">기눙구현: 코드작성. TDD로 진행할 수 있음</span><br></pre></td></tr></table></figure></li><li><p>인수조건 예시2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">기능 : 강의 수강 대기 신청</span><br><span class="line"></span><br><span class="line">인수조건:</span><br><span class="line">- given: 수강생이 수강 신청을 하였다. 과정의 남은 기간이 절반 이상이다.</span><br><span class="line">- when: 강사는 특정 수강생의 수강 상태를 취소 요청을 한다.</span><br><span class="line">- then: 특정 수강생의 수강 상태가 취소된다. 특정 수강생의 결제 내역이 환불된다.</span><br><span class="line"></span><br><span class="line">인수테스트: 실제 요청/응답하는 환경과 유사하게 테스트 환경을 구성</span><br><span class="line"></span><br><span class="line">기눙구현: 코드작성. TDD로 진행할 수 있음</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="인수테스트"><a href="#인수테스트" class="headerlink" title="인수테스트"></a>인수테스트</h2><ul><li>특징: Black Box 테스트(내부 구조나 작동과 연관이 없는 테스트)</li><li>UI레벨 대신 API 레벨 인수테스트를 추천: 백엔드 개발자 입장에서 공수가 너무 많이 들기때문.</li></ul><p><br><br><br></p><h1 id="테스트도구"><a href="#테스트도구" class="headerlink" title="테스트도구"></a>테스트도구</h1><ul><li>테스트 서버(환경): @SpringBootTest<ul><li>실제 웹 환경과 유사한 RANDOM_PORT 설정 선택</li></ul></li><li>테스트 클라이언트: MockMVC, WebTestClient, RestAssured </li><li>테스트 환경+테스트클라이언트 조합<ul><li>@SpringBootTest / Mock + MockMVC</li><li>@SpringBootTest / RANDOM_PORT + RestAssured (연사님 픽)</li></ul></li></ul><p><br><br><br></p><h1 id="TDD-강연-추천"><a href="#TDD-강연-추천" class="headerlink" title="TDD 강연 추천"></a>TDD 강연 추천</h1><iframe width="100%" height="400" src="https://www.youtube.com/embed/bIeqAlmNRrA" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><br><br><br></p><h1 id="성공적인-ATDD-도입하기"><a href="#성공적인-ATDD-도입하기" class="headerlink" title="성공적인 ATDD 도입하기"></a>성공적인 ATDD 도입하기</h1><ol><li>나혼자 ATDD<ul><li>토이 프로젝트로 충분히 경험 쌓기</li><li>간단한 기능부터 적용해보기</li><li>경험해보면서 상황에 맞는 방법 찾기</li></ul></li><li>실전 프로젝트 적용시<ul><li>아주 쉽게 시작할 수 있는 부분, 기본적인 기능부터 도입</li></ul></li><li>레거시 기반 인수 테스트 작성하기<ul><li>먼저 인수 테스트를 작성하여 기존에 구현된 기능을 보호하기</li></ul></li><li>인수 가이드 작성<ul><li>지속적인 리뉴얼, 버전업</li></ul></li><li>지속적인 피드백</li></ol><p><br><br><br></p><h1 id="기획-amp-QA와-함께하는-ATDD"><a href="#기획-amp-QA와-함께하는-ATDD" class="headerlink" title="기획 &amp; QA와 함께하는 ATDD"></a>기획 &amp; QA와 함께하는 ATDD</h1><ul><li>기획 &amp; QA 담당자에게 장점을 소개하며 설득하기<ul><li>개발 친화적인 용어는 제외하고 설명하기<ul><li>EX) 추가적인 커뮤니케이션비용이 절약될거다.</li><li>EX) 테스트시간이 단축된다.</li></ul></li><li>기존 방식과 비교하여 장점 이야기하기</li></ul></li><li>다같이 만드는 요구사항<ul><li>화면 기반으로 작성할 경우 이해도가 높음</li><li>모든 인수 조건을 다같이 만드는 건 비효율적</li></ul></li></ul><p><br><br><br></p><h1 id="실제-적용사례-후기"><a href="#실제-적용사례-후기" class="headerlink" title="실제 적용사례 후기"></a>실제 적용사례 후기</h1><p>실제로 처음 조직에 적용했을때의 피드백</p><ul><li>장점: Common Understanding 다른 포지션의 관점은 물론 업무 프로세스도 간접적으로 익힐 수 있음</li><li>단점: 인수 조건 정의가 어렵고 문서를 어떻게 관리해야할 지에 대한 고민이 필요</li></ul><p><br><br><br></p><h1 id="질의응답"><a href="#질의응답" class="headerlink" title="질의응답"></a>질의응답</h1><p>Q. RestAssured를 사용하신다고 하셨는데 TestRestTemplate를 사용해서 백엔드만의 테스트를 가능하다고 생각하는데 RestAssured를 따로 사용하신 이유가 있으실까요?</p><blockquote><p>TestRestTemplate 객체를 사용하지않는 이유는 공식문서에 다른 객체를 사용해라는 말이 있어서 곧 없어지겠구나생각을 했고 사용하는 면에 있어서도 RestAssured가 편했기에 사용했다. 각각 장단점이 있으니 직접 사용한 뒤 상황에 맞게 적용하면 될 것같다.</p></blockquote><br>Q. 세미나를 들으면서 문득 궁금점이 생겼는데 어떤 기능 하나를 개발하고자 할 때 인수 테스트부터 작성하려고 하면 유닛 테스트에 비해 해결해야 하는 문제가 커서 TDD가 주는 빠른 피드백과 설계에 도움을 주는 장점이 많이 희석될 것 같다는 생각이 드는데요.<blockquote><p>인수테스트 작성 비용과 사이클을 도는 데까지 드는 시간도 오래걸린다. 인수테스트 하나를 만든다면 그 안에 TDD가 포함되어있다. 도메인단위테스트만 만들어도 되지만 인수테스트는 요청과 응답이 명확하다는 장점이 있다.<br>인수테스트가 빠른 피드백을 주기는 힘들지만 해당 기능을 배포하지않고도 확인할 수 있다는 장점이 있다.</p></blockquote><br>Q. 한글/영어로 각 테스트 메소드 작성하실때 어떤 컨벤션을 지키시는 중이신가요?<blockquote><p>핵심이 되는 도메인이름작성후 when과 같이 요청을 하는 부분은 요청이라는 컨벤션을 넣어서 진행중이다. 언더바를 사용해서 처리하고 있고 팀원들과 회의하면서 진행하고 있다.</p></blockquote><br>Q. ATDD를 작성 후 어떤 사이클로 실행하나요? 배포 전에? pr날릴 때??<blockquote><p>인수테스트를 만들고 내부 기능을 TDD로 만든다. 기능 구현이 어느정도 끝나면 인수테스트를 한번 돌리고 배포전에는 모든 인수테스트를 통과해야 배포가 되게끔 하고있다. PR날릴때는 실행하지않는다. </p></blockquote><br>Q. 테스트 커버리지를 수시로 확인하시나요?<blockquote><p>불안감이 적은 수준으로 테스트코드를 작성하려고 노력하고 있고 코드리뷰라는 장치가 있기때문에 테스트 커버리지를 따로 확인하지 않고 있다.</p></blockquote><br>Q.TDD도 아직 잘 안되는 팀인데, ATDD를 하기는 버거울 것 같은데 TDD를 먼저 도입을 하고 그 후에 ATDD를 도입하는게 괜찮을까요?<blockquote><p>TDD보다 ATDD를 도입하는 것이 더 쉽게 접근할 수 있다고 생각한다. 적용하기 쉬운 부분부터 차근차근 적용하는 것을 추천한다. API 요청과 응답이 명확하기때문에 ATDD가 더 접근하기 쉽다. 우리 서비스의 핵심부분에 대해서만이라도 ATDD를 적용하여 경험을 쌓으면서 점차 확대하는 것이 좋을 것 같다.</p></blockquote><br>Q. 설득하는 방법<blockquote><p>변화를 만들기위해서는 본인이 인수테스트에 대한 자신감이 있어야한다. 생각치도 못한 예외상황을 빠르게 해결해야한다. 이를 위해서 토이프로젝트를 통해 기술을 쌓아야한다. 변화를 원하는 사람이 가장 늦게까지 야근한다. 그 속에서 가장 많이 성장하는 사람은 바로 나 자신이다. 개발자는 사라져도 리더는 사라지지않는다. 미래지향적인 생각을 가졌으면 좋겠다.</p></blockquote><p><br><br><br></p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p>아래는 ATDD이해를 위해 내가 추가적으로 학습한 자료이다.</p><ul><li><a href="https://github.com/msbaek/atdd-example#atdd-%EA%B8%B0%EB%B0%98-web-application-%EA%B0%9C%EB%B0%9C">ATDD 개념</a></li><li><a href="https://youtu.be/CL8oR2afTIY?t=461">인수테스트 주도 개발 (Acceptance Test Driven Development) </a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Lectures-Seminars/">Lectures &amp; Seminars</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Review/">Review</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/15/210316woowatechATDD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[오류일지]Error creating bean with name 에러 해결 PropertySourcesPlaceholderConfigurer</title>
      <link>https://sowon-dev.github.io/2021/03/14/210315springBeanerror/</link>
      <guid>https://sowon-dev.github.io/2021/03/14/210315springBeanerror/</guid>
      <pubDate>Sun, 14 Mar 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-PropertySourcesPlaceholderConfigurer&quot;&gt;&lt;a href=&quot;#문제-PropertySourcesPlaceholderConfigurer&quot; class=&quot;headerlink&quot; title=&quot;문제 : PropertySourcesPlaceholderConfigurer&quot;&gt;&lt;/a&gt;문제 : PropertySourcesPlaceholderConfigurer&lt;/h2&gt;&lt;p&gt;svn에서 import한 프로젝트를 셋팅하는 과정에서 톰캣을 실행하니 아래와 같은 오류가 발생했다. &lt;/p&gt;
&lt;p&gt;Error creating bean with name ‘org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0’: Cannot resolve reference to bean ‘properties’ while setting bean property ‘properties’; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named ‘properties’ available     at&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-PropertySourcesPlaceholderConfigurer"><a href="#문제-PropertySourcesPlaceholderConfigurer" class="headerlink" title="문제 : PropertySourcesPlaceholderConfigurer"></a>문제 : PropertySourcesPlaceholderConfigurer</h2><p>svn에서 import한 프로젝트를 셋팅하는 과정에서 톰캣을 실행하니 아래와 같은 오류가 발생했다. </p><p>Error creating bean with name ‘org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0’: Cannot resolve reference to bean ‘properties’ while setting bean property ‘properties’; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named ‘properties’ available     at</p><a id="more"></a><h2 id="원인과-해결"><a href="#원인과-해결" class="headerlink" title="원인과 해결"></a>원인과 해결</h2><p>properties를 찾지못해서 bean을 생성하지 못한 경우로 톰캣서버에 연결해줘서 환경별 설정이 가능하도록 해주면 된다.</p><ol><li>톰캣서버를 더블클릭한 후 General Information 에서 아래 이미지처럼 <code>Open launch configuration</code>을 클릭한다</li></ol><p><img src="/img/210315springBeanError1.PNG" alt=""></p><ol start="2"><li>Arguments 탭에서 아래 부분을 복붙하여 넣어준 뒤 Apply하고 OK하면 끝!</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=local</span><br></pre></td></tr></table></figure><p><img src="/img/210315springBeanError2.PNG" alt=""></p><p>해결!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Eclipse/">Eclipse</category>
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2021/03/14/210315springBeanerror/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
