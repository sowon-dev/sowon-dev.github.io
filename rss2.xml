<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Sat, 09 Jul 2022 14:33:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>스프링부트에 ModelMapper 적용하기(ft.더블콜론::)</title>
      <link>https://sowon-dev.github.io/2022/07/07/220708DouleColonOperator/</link>
      <guid>https://sowon-dev.github.io/2022/07/07/220708DouleColonOperator/</guid>
      <pubDate>Thu, 07 Jul 2022 19:36:01 GMT</pubDate>
      
      <description>&lt;p&gt;책 &lt;a href=&quot;http://www.acornpub.co.kr/book/reactjs-springboot#toc&quot;&gt;React.js, 스프링 부트, AWS로 배우는 웹 개발 101&lt;/a&gt;을 가지고 5주 스터디를 진행중이다. 책 내용이 정말 좋다! 강력추천&lt;br&gt;서버API 실습과정에서 DTO를 Entity로 변경하기 위해 &lt;a href=&quot;https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/&quot;&gt;Builder패턴&lt;/a&gt;을 사용했지만 나는 ModelMapper를 사용해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>책 <a href="http://www.acornpub.co.kr/book/reactjs-springboot#toc">React.js, 스프링 부트, AWS로 배우는 웹 개발 101</a>을 가지고 5주 스터디를 진행중이다. 책 내용이 정말 좋다! 강력추천<br>서버API 실습과정에서 DTO를 Entity로 변경하기 위해 <a href="https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/">Builder패턴</a>을 사용했지만 나는 ModelMapper를 사용해보았다.</p><a id="more"></a><p><br><br></p><h2 id="ModelMapper-추가하기"><a href="#ModelMapper-추가하기" class="headerlink" title="ModelMapper 추가하기"></a>ModelMapper 추가하기</h2><p>책의 코드에서는 builder를 사용했는데 나는 ModelMapper를 사용하고 싶어서 바꿨다.<br>TodoDTO의 toEntity메서드는 없애주고 Gadle에 ModelMapper를 임포트했다.</p><ul><li>build.gradle<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">//중략</span><br><span class="line">implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.4.2'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>그 다음 config 패키지를 추가하고 ModelMapperConfig.java파일을 생성했다.</p><ul><li>ModelMapperConfig.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.modelmapper.ModelMapper;</span><br><span class="line"><span class="keyword">import</span> org.modelmapper.convention.MatchingStrategies;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelMapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelMapper <span class="title">modelMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();</span><br><span class="line">modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);</span><br><span class="line"><span class="keyword">return</span> modelMapper;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br></p><h2 id="기존-코드"><a href="#기존-코드" class="headerlink" title="기존 코드"></a>기존 코드</h2><p>책의 코드는 <a href="https://github.com/fsoftwareengineer/todo-application">도서 공식 리포지토리</a>에서 확인할 수 있다.</p><ul><li><p>TodoDTO.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> done;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TodoDTO</span><span class="params">(<span class="keyword">final</span> TodoEntity entity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = entity.getId();</span><br><span class="line"><span class="keyword">this</span>.title = entity.getTitle();</span><br><span class="line"><span class="keyword">this</span>.done = entity.isDone();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TodoEntity <span class="title">toEntity</span><span class="params">(<span class="keyword">final</span> TodoDTO dto)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> TodoEntity.builder()</span><br><span class="line">.id(dto.getId())</span><br><span class="line">.title(dto.getTitle())</span><br><span class="line">.done(dto.isDone())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TodoController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"todo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TodoService service;</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; createTodo(<span class="meta">@RequestBody</span> TodoDTO dto) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String temporaryUserId = <span class="string">"temporary-user"</span>; <span class="comment">// temporary user id.</span></span><br><span class="line"><span class="comment">// (1) TodoEntity로 변환한다.</span></span><br><span class="line">TodoEntity entity = TodoDTO.toEntity(dto);</span><br><span class="line"><span class="comment">// (2) id를 null로 초기화 한다. 생성 당시에는 id가 없어야 하기 때문이다.</span></span><br><span class="line">entity.setId(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// (3) 임시 유저 아이디를 설정 해 준다. 이 부분은 4장 인증과 인가에서 수정 할 예정이다. 지금은 인증과 인가 기능이 없으므로 한 유저(temporary-user)만 로그인 없이 사용 가능한 어플리케이션인 셈이다</span></span><br><span class="line">entity.setUserId(temporaryUserId);</span><br><span class="line"><span class="comment">// (4) 서비스를 이용해 Todo엔티티를 생성한다.</span></span><br><span class="line">List&lt;TodoEntity&gt; entities = service.create(entity);</span><br><span class="line"><span class="comment">// (5) 자바 스트림을 이용해 리턴된 엔티티 리스트를 TodoDTO리스트로 변환한다.</span></span><br><span class="line">List&lt;TodoDTO&gt; dtos = entities.stream().map(TodoDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line"><span class="comment">// (6) 변환된 TodoDTO리스트를 이용해ResponseDTO를 초기화한다.</span></span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().data(dtos).build();</span><br><span class="line"><span class="comment">// (7) ResponseDTO를 리턴한다.</span></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok().body(response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// (8) 혹시 예외가 나는 경우 dto대신 error에 메시지를 넣어 리턴한다.</span></span><br><span class="line">String error = e.getMessage();</span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().error(error).build();</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.badRequest().body(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>컨트롤러의 create메서드를 확인하다가 생소한 더블콜론(::)을 만났다.<br>더블콜론(::)이 뭐지?</p><p><br><br></p><h2 id="더블콜론-이-뭐지-물고기-대신-물고기-잡는-법"><a href="#더블콜론-이-뭐지-물고기-대신-물고기-잡는-법" class="headerlink" title="더블콜론(::)이 뭐지? 물고기 대신 물고기 잡는 법"></a>더블콜론(::)이 뭐지? 물고기 대신 물고기 잡는 법</h2><p>모르는 걸 만났을때 어떻게 검색해야할까?<br>구글링해도 사용법만 나올뿐 더블콜론이 뭐하는 애다~라는 정의가 없었다.<br>답답해하다가 팀장님께 살포시 질문을 들으니 물고기가 아닌 물고기 잡는 법을 알려주셨다.<br>감사합니다 팀장님👍</p><blockquote><p>언어를 사용하다 모르는 걸 만나면 <code>언어 + 언어버전 + Language Specification</code>의 조합으로 검색해보세요. 원하는 정보를 기본부터 얻을 수 있을 거예요<br>From 팀장님</p></blockquote><p>Language Specification을 검색할 생각은 전혀 못하고 있었는데 팀장님이 알려주신 덕에 얼른 <a href="https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf">java 1.8 language specification ::</a>을 검색해서 찾아냈다! 내가 궁금했던 근본적인 정보가 다 들어있었다!<br>이렇게 찾는 거구나! 또 하나 배웠다! 재밌어!😻</p><p><br><br></p><h2 id="그래서-더블콜론이-뭔데"><a href="#그래서-더블콜론이-뭔데" class="headerlink" title="그래서 더블콜론이 뭔데?"></a>그래서 더블콜론이 뭔데?</h2><p>더블콜론은 Method Reference Expressions(메소드 참조 표현식)의 하나로 실제로 호출을 수행하지 않고 특정 형식의 메서드를 참조하는 역할을 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MethodReference:</span><br><span class="line">ExpressionName :: [TypeArguments] Identifier</span><br><span class="line">ReferenceType :: [TypeArguments] Identifier</span><br><span class="line">Primary :: [TypeArguments] Identifier</span><br><span class="line">super :: [TypeArguments] Identifier</span><br><span class="line">TypeName . super :: [TypeArguments] Identifier</span><br><span class="line">ClassType :: [TypeArguments]</span><br></pre></td></tr></table></figure><p>간단한 예시(<a href="https://www.geeksforgeeks.org/double-colon-operator-in-java/">예시 더 공부하기</a>)로 println을 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the stream</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"치킨"</span>, <span class="string">"이랑"</span>, <span class="string">"여행"</span>, <span class="string">"가"</span>, <span class="string">"고싶다"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the stream</span></span><br><span class="line">stream.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><p>위의 결과값은 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;결과값</span><br><span class="line">치킨</span><br><span class="line">이랑</span><br><span class="line">여행</span><br><span class="line">가</span><br><span class="line">고싶다</span><br></pre></td></tr></table></figure><p>이를 더블콜론으로 간단하게 표현할수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach( System.out::println);</span><br></pre></td></tr></table></figure><p>결과값은? 당연히 위와 동일하다!</p><p><br><br></p><h2 id="완성된-내-코드"><a href="#완성된-내-코드" class="headerlink" title="완성된 내 코드"></a>완성된 내 코드</h2><p>짠! 서버도 잘 동작한다!<br>공부해서 하나하나 알아가는 게 즐겁다!</p><ul><li><p>TodoDTO.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TodoController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"todo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span>  ModelMapper modelMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TodoService service;</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; createTodo(<span class="meta">@RequestBody</span> TodoDTO dto) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String temporaryUserId = <span class="string">"temporary-user"</span>; <span class="comment">// temporary user id.</span></span><br><span class="line"><span class="comment">// (1) TodoEntity로 변환한다.</span></span><br><span class="line">TodoEntity entity = modelMapper.map(dto, TodoEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// (2) id를 null로 초기화 한다. 생성 당시에는 id가 없어야 하기 때문이다.</span></span><br><span class="line">entity.setId(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// (3) 임시 유저 아이디를 설정 해 준다. 이 부분은 4장 인증과 인가에서 수정 할 예정이다. 지금은 인증과 인가 기능이 없으므로 한 유저(temporary-user)만 로그인 없이 사용 가능한 어플리케이션인 셈이다</span></span><br><span class="line">entity.setUserId(temporaryUserId);</span><br><span class="line"><span class="comment">// (4) 서비스를 이용해 Todo엔티티를 생성한다.</span></span><br><span class="line">List&lt;TodoEntity&gt; entities = service.create(entity);</span><br><span class="line"><span class="comment">// (5) 자바 스트림을 이용해 리턴된 엔티티 리스트를 TodoDTO리스트로 변환한다.</span></span><br><span class="line">List&lt;TodoDTO&gt; dtos = entities.stream().map(e -&gt; modelMapper.map(e, TodoDTO<span class="class">.<span class="keyword">class</span>)).<span class="title">collect</span>(<span class="title">Collectors</span>.<span class="title">toList</span>())</span>;</span><br><span class="line"><span class="comment">// (6) 변환된 TodoDTO리스트를 이용해ResponseDTO를 초기화한다.</span></span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().data(dtos).build();</span><br><span class="line"><span class="comment">// (7) ResponseDTO를 리턴한다.</span></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok().body(response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// (8) 혹시 예외가 나는 경우 dto대신 error에 메시지를 넣어 리턴한다.</span></span><br><span class="line">String error = e.getMessage();</span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().error(error).build();</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.badRequest().body(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>재밌다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Java/">Java</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/07/220708DouleColonOperator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Vue]computed를 찾다가 명령형프로그래밍과 선언형 프로그래밍 차이점까지 알게된 썰</title>
      <link>https://sowon-dev.github.io/2022/06/27/220628Vuejs-computed/</link>
      <guid>https://sowon-dev.github.io/2022/06/27/220628Vuejs-computed/</guid>
      <pubDate>Mon, 27 Jun 2022 21:35:59 GMT</pubDate>
      
      <description>&lt;p&gt;VueJS로 화면을 구성하다가 computed와 watch를 사용하는 데 있어 차이점이 궁금했다.&lt;br&gt;둘이 역할이 비슷한 거 같은데 어떤 차이가 있을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>VueJS로 화면을 구성하다가 computed와 watch를 사용하는 데 있어 차이점이 궁금했다.<br>둘이 역할이 비슷한 거 같은데 어떤 차이가 있을까?</p><a id="more"></a><p><a href="https://kr.vuejs.org/v2/guide/computed.html#computed-%EC%86%8D%EC%84%B1-vs-watch-%EC%86%8D%EC%84%B1">Vue.js 한글 공식문서</a>에도 이와 관련해서 자세히 설명되어있다.</p><h2 id="computed-속성"><a href="#computed-속성" class="headerlink" title="computed 속성"></a>computed 속성</h2><p>원래 computed 속성은 계산이 필요한 속성이 반복 호출될때 사용하는 속성이다.<br>아래 코드와 같이 표현식으로 간단한 계산을 할 수 있지만 저 코드가 반복되서 사용되어야한다면? 여러 코드에 반복사용될수록 소스 코드가 지저분해질것이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 간단한 계산</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;책을 가지고 있다:&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;&#123;&#123; author.books.length &gt; 0 ? 'Yes' : 'No' &#125;&#125;&lt;/</span>span&gt;</span><br></pre></td></tr></table></figure><p>이때 computed 속성을 사용할 수 있다.<br>Vue코드에서 아래처럼 호출한 뒤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      author: &#123;</span><br><span class="line">        name: <span class="string">'John Doe'</span>,</span><br><span class="line">        books: [</span><br><span class="line">          <span class="string">'Vue 2 - Advanced Guide'</span>,</span><br><span class="line">          <span class="string">'Vue 3 - Basic Guide'</span>,</span><br><span class="line">          <span class="string">'Vue 4 - The Mystery'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 계산된 값을 반환하는 속성</span></span><br><span class="line">    publishedBooksMessage() &#123;</span><br><span class="line">      <span class="comment">// `this`는 컴포넌트 인스턴스를 가리킵니다.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.author.books.length &gt; <span class="number">0</span> ? <span class="string">'Yes'</span> : <span class="string">'No'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>화면에서는 아래처럼 간단하게 쓸 수 있어 가독성이 좋아진다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>책을 가지고 있다:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>watch속성은 직관적인 이름에서 알 수 있듯 특정데이터의 변화를 감지하고 지정한 함수를 실행하는 속성이다.</p><p>아래 예제는 firstName이나 LastName이 바뀌면 이를 각각 감지하고 fullName에 바뀐 부분을 반영해준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>여기엔 어떤 문제점이 있을까?</p><ol><li>firstName과 lastName안의 코드는 동일하게 바뀐 함수를 조합해 fullname을 리턴하는 데 불필요하게 코드를 반복한다. </li><li>명령형 프로그래밍이다. </li></ol><p>watch속성대신 computed속성을 사용하면 위 두 문제를 해결할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>깔끔하긴 한데 왜 명령형 프로그래밍과 선언형 프로그래밍이 무엇이고 왜 선언형 프로그래밍이 더 좋다고 하는걸까?</p><p><br><br><br></p><h2 id="명령형-프로그래밍-vs-선언형-프로그래밍"><a href="#명령형-프로그래밍-vs-선언형-프로그래밍" class="headerlink" title="명령형 프로그래밍 vs 선언형 프로그래밍"></a>명령형 프로그래밍 vs 선언형 프로그래밍</h2><p>일반적으로 선언형 프로그래밍이 명령형 프로그래밍보다 코드 반복이 적어서 좋다고 한다.<br>명령평 프로그래밍과 선언형 프로그래밍을 검색하면 아래와 같은 정의를 마주하게 된다.</p><ul><li>명령형 프로그래밍: How you do something 어떻게 할 것인지에 초점</li><li>선언형 프로그래밍: What you do 무엇을 할지에 초점.</li></ul><p>머리로는 알겠는데(?) 언뜻 잘 와닿지 않는다!<br>예시를 들으면 쉽게 와닿는다. 식당에 들어갔다고 생각해보자.</p><ul><li>선언형 프로그래밍: 두사람이요~라고 말한다.</li><li>명령형 프로그래밍: 식당 내부 전체를 둘러본다 -&gt; 오른쪽 두번째 창가자리가 비어있음을 확인한다 -&gt; 거기까지 걸어간다 -&gt; 자리에 앉는다.</li></ul><p>이렇듯 선언형 프로그래밍은 How를 알 필요가 없다. 결과만 잘 받으면 된다. 결과에만 신경쓰려면 뭐가 준비되어있어야할까?<br>바로 잘 훈련된 종업원 즉, 명령형으로 이미 추상화가 되어있어야한다!<br>선언형 프로그래밍은 추상화 된 코드는 독립적으로 사용할 수 있기때문에 재사용성이 높고 코드반복이 적다!</p><ul><li>선언형 프로그래밍 언어 예시: SQL, HTML</li><li>명령형 프로그래밍 언어 예시: C, C++, JAVA</li><li>선언형과 명령형이 섞인 프로그래밍 언어 예시: JavaScript, C#, Python</li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ui.dev/imperative-vs-declarative-programming">https://ui.dev/imperative-vs-declarative-programming</a></li><li><a href="https://v3-docs.vuejs-korea.org/guide/essentials/computed.html#basic-example">https://v3-docs.vuejs-korea.org/guide/essentials/computed.html#basic-example</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVASCRIPT/">JAVASCRIPT</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/VueJS/">VueJS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/27/220628Vuejs-computed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[요약/후기]The End Of Localhost</title>
      <link>https://sowon-dev.github.io/2022/06/26/220627Article-TheEndOfLocalhost/</link>
      <guid>https://sowon-dev.github.io/2022/06/26/220627Article-TheEndOfLocalhost/</guid>
      <pubDate>Sun, 26 Jun 2022 21:46:42 GMT</pubDate>
      
      <description>&lt;p&gt;구독중인 GeekNews에서 아주 흥미로운 글을 봤다. 제목부터가 &lt;a href=&quot;https://news.hada.io/topic?id=6799&amp;utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=202226&quot;&gt;Localhost시대의 종말&lt;/a&gt;이다.&lt;br&gt;GeekNews에서는 친절하게 한글번역 요약을 해주지만 원문이 궁금해서 원문을 읽고 나름 요약해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>구독중인 GeekNews에서 아주 흥미로운 글을 봤다. 제목부터가 <a href="https://news.hada.io/topic?id=6799&utm_source=weekly&utm_medium=email&utm_campaign=202226">Localhost시대의 종말</a>이다.<br>GeekNews에서는 친절하게 한글번역 요약을 해주지만 원문이 궁금해서 원문을 읽고 나름 요약해봤다.</p><a id="more"></a><ul><li><a href="https://dx.tips/the-end-of-localhost">원문 바로가기</a><br>글쓴이는 어떻게 Localhost가 종말한다는 걸까?</li></ul><h2 id="클라우드-덕분에"><a href="#클라우드-덕분에" class="headerlink" title="클라우드 덕분에!"></a>클라우드 덕분에!</h2><ul><li>미래에는 모든 환경은 클라우드가 될 것이고, 모든 노트북은 클라이언트가 될 것</li><li>2030년대 개발자가 위시리스트를 보면 로컬호스트가 아닌 클라우드 환경이 요구됨</li><li>dev환경과 prod환경간에 낭비되는 시간을 단축시킬 수 있음</li></ul><p><br><br><br></p><h2 id="The-“Future-is-Just-Not-Evenly-Distributed”-Argument"><a href="#The-“Future-is-Just-Not-Evenly-Distributed”-Argument" class="headerlink" title="The “Future is Just Not Evenly Distributed” Argument"></a>The “Future is Just Not Evenly Distributed” Argument</h2><ul><li>이미 빅테크 기업들은 전적으로 클라우드 환경에서 일하고 있음.</li></ul><blockquote><p>Google Cider : 구글의 웹 IDE. 거대한 Piper 파일 시스템을 탑재하고 코드리뷰/빌드/테스팅을 통합. 로컬머신에 코드를 내려받을 필요 없음<br>FB On-Demand : 로컬보다 더 충실하게 실시간 기능 프리뷰가 가능하게 “On-Demand”로 환경을 프로비저닝. FB에선 “로컬 개발” 자체가 없음<br>Etsy : 모든 개발이 Cloud VM에서 진행 “VSCode가 VM으로 SSH해서 동작하기 때문에, VM 외부로 코드를 체크아웃 해본 적이 없음”<br>Tesla : 자동차 OS 개발을 로컬에서 클라우드로 전환 (그 전엔 개발자에게 빌드용 비싼 데스크탑을 제공했었다고)<br>Palantir : Coder(리모트 개발환경 SaaS)와 EKS를 사용하는 Remote Ephemeral Workspace로 옮겨감<br>Shopify : 대부분의 개발자가 Spin 이라 불리는 클라우드 개발환경으로 이전 (xhyve 위에서 실행되는 경량 VM)<br>GitHub : 깃헙의 개발의 대부분을 Codespaces로 이관<br>출처: <a href="https://news.hada.io/topic?id=6799&amp;utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=202226">https://news.hada.io/topic?id=6799&amp;utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=202226</a></p></blockquote><ul><li>“sure, but does it work for my small team?” 위 예시 기업들은 이미 큰 회사들이니까 가능한거고 작은 기업에는 그게 가능할까?<ul><li>맞는 말임. 클라우드로 환경변화는 상당한 규모의 내부 투자가 이루어진 후에야 그 이득을 취할 수 있음. 하지만 기술이 상용화되면 점점 클라우드환경으로의 이동은 점점 더 확산될 것임</li></ul></li></ul><p><br><br><br></p><h2 id="Jobs-to-Be-Done-of-Localhost"><a href="#Jobs-to-Be-Done-of-Localhost" class="headerlink" title="Jobs to Be Done of Localhost"></a>Jobs to Be Done of Localhost</h2><ul><li>이미 많은 프로그램에서 로컬을 실행하지 않고 원격으로 코드를 수정하고 실행하고 있음.</li></ul><p><br><br><br></p><h2 id="The-Inevitability-Argument"><a href="#The-Inevitability-Argument" class="headerlink" title="The Inevitability Argument"></a>The Inevitability Argument</h2><ul><li>클라우드로의 이동을 피할 수 없는 일임. 언젠가는 일어날 일임.</li></ul><p><br><br><br></p><h2 id="The-Potential-of-Edge-Compute"><a href="#The-Potential-of-Edge-Compute" class="headerlink" title="The Potential of Edge Compute"></a>The Potential of Edge Compute</h2><ul><li>CRDT 및 에지 컴퓨팅과 같은 기술의 부상은 우리가 실제로 “로컬”이라고 생각하는 것의 경계를 흐리게 할 가능성이 더 높음.</li></ul><p><br><br><br></p><h2 id="Pushback-It’s-Still-Not-Good-Enough"><a href="#Pushback-It’s-Still-Not-Good-Enough" class="headerlink" title="Pushback: It’s Still Not Good Enough"></a>Pushback: It’s Still Not Good Enough</h2><ul><li>김칫국은 ㄴㄴ 아직 충분하지 않음.</li><li>개발자들이 습관처럼 Preview가 빠른 로컬호스트를 사용함</li></ul><p><br><br><br></p><h2 id="내생각"><a href="#내생각" class="headerlink" title="내생각"></a>내생각</h2><p>개발환경으로 더이상 로컬호스트를 사용하지 않을 수 있다는 사실이 흥미로웠다.<br>작은 업체에서 여전히 가능할까 의문이지만 그래도 클라우드환경으로의 변화는 막을 수 없을 것으로 보인다.<br>그쪽으로 공부를 열심히 해봐야지</p><p><br><br><br></p><h2 id="재밌는-표현"><a href="#재밌는-표현" class="headerlink" title="재밌는 표현"></a>재밌는 표현</h2><ul><li>going the way of the Dodo: 인간에 의해 멸종된 도도새처럼 멸종된다는 의미이다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/GeekNews/">GeekNews</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/26/220627Article-TheEndOfLocalhost/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>findAsync와 find의 차이점</title>
      <link>https://sowon-dev.github.io/2022/06/11/220611findAsyncvsfind/</link>
      <guid>https://sowon-dev.github.io/2022/06/11/220611findAsyncvsfind/</guid>
      <pubDate>Sat, 11 Jun 2022 05:34:55 GMT</pubDate>
      
      <description>&lt;p&gt;닷넷프레임워크를 사용하다보면서 find 메서드를 사용했는데 비주얼스튜디오가 FindAsync를 추천해줬다.&lt;br&gt;사용해보니 둘 다 동일한 결과가 나왔는데 둘의 차이점이 궁금해서 공부해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>닷넷프레임워크를 사용하다보면서 find 메서드를 사용했는데 비주얼스튜디오가 FindAsync를 추천해줬다.<br>사용해보니 둘 다 동일한 결과가 나왔는데 둘의 차이점이 궁금해서 공부해보았다.</p><a id="more"></a><h2 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h2><p>비교적 간단한 구문이다.<br>모든 문서를 한 번에 조회한다.<br>따라서 데이터양이 작을 때 사용하면 좋다. 가져오는 데이터양이 클때 Find를 쓸 경우 뷰단이 멈춰버릴 수 있다. 이럴때 비동기인 FindAsync로 처리해야한다.</p><p><br><br></p><h2 id="FindAsync"><a href="#FindAsync" class="headerlink" title="FindAsync"></a>FindAsync</h2><p>모든 DB를 한 번에 조회하지 않는다. return값이 cursor라서 DB cursor에서 문서를 하나씩 검색할 수 있는 interface를 제공한다.<br>따라서 데이터양이 클 때 사용하면 좋다. </p><p>여기서 DB cursor란?<br>쿼리문에 의해서 반환되는 결과값들을 저장하는 메모리공간을 말한다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.entity.dbset.findasync?view=entity-framework-6.2.0">https://docs.microsoft.com/en-us/dotnet/api/system.data.entity.dbset.findasync?view=entity-framework-6.2.0</a></li><li><a href="https://stackoverflow.com/questions/30650722/difference-between-find-and-findasync">https://stackoverflow.com/questions/30650722/difference-between-find-and-findasync</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/NET/">.NET</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/C/">C#</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/11/220611findAsyncvsfind/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DOM과 가상DOM</title>
      <link>https://sowon-dev.github.io/2022/06/05/220605VitualDOM/</link>
      <guid>https://sowon-dev.github.io/2022/06/05/220605VitualDOM/</guid>
      <pubDate>Sun, 05 Jun 2022 05:17:57 GMT</pubDate>
      
      <description>&lt;p&gt;React나 Vue.js를 쓸때 가상돔을 많이 얘기한다.&lt;br&gt;가상돔을 제대로 알고 싶어 DOM이 뭔지 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>React나 Vue.js를 쓸때 가상돔을 많이 얘기한다.<br>가상돔을 제대로 알고 싶어 DOM이 뭔지 공부해봤다.</p><a id="more"></a><h2 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM(Document Object Model)"></a>DOM(Document Object Model)</h2><p>HTML태그들을 작성하면 자바스크립트는 어떻게 읽을까? 한 번쯤 궁금했을 것이다.<br>자바스크립트는 HTML, head, body등의 요소를 구조화 한다. 구조화에는 다양한 방식이 있다. 이때 DOM은 트리구조를 형성한다. 즉 상위 노드와 하위 노드가 트리처럼 연결되어 있는데 여기서 만약 서른마흔다섯번째 노드를 update시키면 어떻게 될까?<br>DOM은 수많은 노드들 중에서 특정 노드를 찾는 과정에서 비용이 발생한다. 만약 한 번의 update가 연결된 다른 500개의 노드들에 변경을 일으킨다면? 점점 더 많은 비용이 발생하게 된다.</p><p>이를 해결하기 위해 등장한 것이 바로 가상돔(Virtual DOM)이다.</p><p><br><br><br></p><h2 id="가상돔-Virtual-DOM"><a href="#가상돔-Virtual-DOM" class="headerlink" title="가상돔(Virtual DOM)"></a>가상돔(Virtual DOM)</h2><p>가상돔은 이름 그대로 실제DOM이 아닌 가짜DOM(HTML돔의 추상화)이다.<br>웹페이지에서 사용자에 의해 이벤트가 발생된다면(update) 실제돔을 바로 수정하지않고, 가상돔을 랜더링한 뒤 이전의 돔과 비교해서 변경된 부분만 실제돔에 반영한다. 이로써 실제돔의 변경을 최소화하여 성능을 향상시킬 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVASCRIPT/">JAVASCRIPT</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/06/05/220605VitualDOM/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Vue]체크박스 모두 선택 기능 구현하기</title>
      <link>https://sowon-dev.github.io/2022/06/02/220603VueJS-checkall/</link>
      <guid>https://sowon-dev.github.io/2022/06/02/220603VueJS-checkall/</guid>
      <pubDate>Thu, 02 Jun 2022 23:25:35 GMT</pubDate>
      
      <description>&lt;p&gt;Vue.js를 이용하여 체크박스의 모두선택기능 기능을 만들어보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Vue.js를 이용하여 체크박스의 모두선택기능 기능을 만들어보자.</p><a id="more"></a><h2 id="화면코드"><a href="#화면코드" class="headerlink" title="화면코드"></a>화면코드</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkAll"</span> <span class="attr">v-model</span>=<span class="string">"isCheckAll"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>고유번호<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">"mainDataset.getRowCount() == 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"8"</span>&gt;</span>조회 된 데이터가 없습니다.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item, idx) in mainDataset.data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"userList"</span> <span class="attr">:value</span>=<span class="string">item.userNo</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.userNo&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.userNm&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="스크립트-코드"><a href="#스크립트-코드" class="headerlink" title="스크립트 코드"></a>스크립트 코드</h2><p>모달창을 열때마다 isCheckAll를 false로 초기화해주고 watch로 isCheckAll의 value가 변할때 메서드 checkAll()를 실행한다.<br>여기서 핵심은 watch로 기존 값과 변경된 값을 지켜보고있다는 점이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#userPopup'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">searchParams: &#123;</span><br><span class="line">searchText: <span class="string">""</span>,</span><br><span class="line">pageNumber: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line">isCheckAll: <span class="literal">false</span>,</span><br><span class="line">userList: [],</span><br><span class="line">mainDataset: <span class="keyword">new</span> Dataset(),</span><br><span class="line">mainDatasetPaging: <span class="keyword">new</span> PagingSet(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="string">"isCheckAll"</span>: &#123;</span><br><span class="line">handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.checkAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">$(<span class="keyword">this</span>.$refs.userPopup).on(<span class="string">"shown.bs.modal"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">self.isCheckAll = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//중략</span></span><br><span class="line"> methods: &#123;</span><br><span class="line"> checkAll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">app.userList = [];</span><br><span class="line"><span class="keyword">if</span> (self.isCheckAll) &#123;</span><br><span class="line">_.forEach(self.mainDataset.data, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">app.userList.push(obj.userNo);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>이렇게해면 체크박스 전체선택시 각 체크박스의 userNo값이 userList배열에 담긴다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVASCRIPT/">JAVASCRIPT</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/VueJS/">VueJS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/02/220603VueJS-checkall/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[닷넷] Url.Action사용해서 원하는 URL연결하기</title>
      <link>https://sowon-dev.github.io/2022/05/24/220525dotnet-Urlhelper/</link>
      <guid>https://sowon-dev.github.io/2022/05/24/220525dotnet-Urlhelper/</guid>
      <pubDate>Tue, 24 May 2022 19:22:47 GMT</pubDate>
      
      <description>&lt;p&gt;cshtml에서 Url.Action으로 a태그 href를 변경하고 싶었다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>cshtml에서 Url.Action으로 a태그 href를 변경하고 싶었다. </p><a id="more"></a><p>파일구조 </p><ul><li>Areas<ul><li>Student<ul><li>Controller<ul><li>LearningController.cs</li></ul></li><li>View<ul><li>Index.cshtml</li></ul></li></ul></li><li>Professor<ul><li>Controller <ul><li>StudyController.cs</li></ul></li><li>View<ul><li>Index.cshtml</li></ul></li></ul></li></ul></li></ul><p>내가 원하는 것은 아래처럼 2개의 a태그에 각각 다른 컨트롤러의 url이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; url결과</span><br><span class="line">&#x2F;Student&#x2F;Learning</span><br><span class="line">&#x2F;Professor&#x2F;Study</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>","<span class="attr">Learning</span>")" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>","<span class="attr">Study</span>")" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url결과는 아래와 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; url결과</span><br><span class="line">&#x2F;Student&#x2F;Learning</span><br><span class="line">&#x2F;Student&#x2F;Study</span><br></pre></td></tr></table></figure><p><code>Action(string, string)</code>은 처음 URI를 잡고있기때문에 Professor의 Study가 아니라 Student에서 Study를 찾는다.</p><p><br><br><br></p><h2 id="해결법-Action-String-String-Object"><a href="#해결법-Action-String-String-Object" class="headerlink" title="해결법 Action(String, String, Object)"></a>해결법 Action(String, String, Object)</h2><p>routeValues를 사용해서 area를 지정해주었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>", "<span class="attr">Learning</span>", <span class="attr">new</span> &#123; <span class="attr">area</span> = <span class="string">"Student"</span> &#125;)" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>", "<span class="attr">Study</span>", <span class="attr">new</span> &#123; <span class="attr">area</span> = <span class="string">"Professor"</span> &#125;)" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>new 연산자로 area를 지정했기에 해당 area아래의 Url을 각각찾느다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; url결과</span><br><span class="line">&#x2F;Student&#x2F;Learning</span><br><span class="line">&#x2F;Professor&#x2F;Study</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>MS사의 docs는 예시도 많이 없고 UI자체도 가독성이 많이 떨어진다. 그래도 docs 질은 괜찮은 건지 블로그글이 많이 없다. 닷넷개발자들은 영어고수인게 틀림없다.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.urlhelper.action?view=aspnet-mvc-5.2#system-web-mvc-urlhelper-action(system-string-system-string-system-object)">https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.urlhelper.action?view=aspnet-mvc-5.2#system-web-mvc-urlhelper-action(system-string-system-string-system-object)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/NET/">.NET</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/C/">C#</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/24/220525dotnet-Urlhelper/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트]Error: Cannot find module loader에러 해결</title>
      <link>https://sowon-dev.github.io/2022/05/22/220523ReactLoaderError/</link>
      <guid>https://sowon-dev.github.io/2022/05/22/220523ReactLoaderError/</guid>
      <pubDate>Sun, 22 May 2022 20:05:32 GMT</pubDate>
      
      <description>&lt;p&gt;리액트가 궁금해 정적사이트를 하나 만들고 있다.&lt;br&gt;script를 정의하고 &lt;code&gt;npm run start&lt;/code&gt;를 했는데 아래와 같은 오류가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트가 궁금해 정적사이트를 하나 만들고 있다.<br>script를 정의하고 <code>npm run start</code>를 했는데 아래와 같은 오류가 발생했다.</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">node:internal/modules/cjs/loader:<span class="number">361</span></span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line"><span class="built_in">Error</span>: Cannot find <span class="built_in">module</span> <span class="string">'/workspace/프로젝트명/node_modules/finalhandler/node_modules/debug/src/index.js'</span>. Please verify that the package.json has a valid <span class="string">"main"</span> entry</span><br><span class="line">    at tryPackage (node:internal/modules/cjs/loader:<span class="number">353</span>:<span class="number">19</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.Module._findPath (node:internal/modules/cjs/loader:<span class="number">566</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.Module._resolveFilename (node:internal/modules/cjs/loader:<span class="number">919</span>:<span class="number">27</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.Module._load (node:internal/modules/cjs/loader:<span class="number">778</span>:<span class="number">27</span>)</span><br><span class="line">    at Module.require (node:internal/modules/cjs/loader:<span class="number">1005</span>:<span class="number">19</span>)</span><br><span class="line">    at <span class="built_in">require</span> (node:internal/modules/cjs/helpers:<span class="number">102</span>:<span class="number">18</span>)</span><br><span class="line">  code: <span class="string">'MODULE_NOT_FOUND'</span>,</span><br><span class="line">  path: <span class="string">'/workspace/프로젝트명/node_modules/finalhandler/node_modules/debug/package.json'</span>,</span><br><span class="line">  requestPath: <span class="string">'debug'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>에러를 보면 알수있듯 loader에서 err가 잡혔다.<br>구글링하니 nodejs 레포의 이슈<a href="https://github.com/nodejs/help/issues/2644">(링크)</a>로 많은 개발자들이 해결방법을 주고받은 걸 확인할 수 있었다.<br>이 여러 방법중 나는 아래의 방법으로 해결했다.</p><p><br><br><br></p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><ol><li><code>npm cache clean --force</code> 명령어로 캐시를 삭제한다.</li><li>node_modules 폴더를 삭제한다.</li><li>package-lock.json 파일을 삭제한다.</li><li><code>npm install</code> 명령어를 입력하면 node_modules와 package-lock.json가 다시 설치된다.</li></ol><p>위 조치를 취한 후 <code>npm run start</code>를 하니 잘 실행된다.<br>해결!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/22/220523ReactLoaderError/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS]scope 스코프</title>
      <link>https://sowon-dev.github.io/2022/05/16/220517JSscope/</link>
      <guid>https://sowon-dev.github.io/2022/05/16/220517JSscope/</guid>
      <pubDate>Mon, 16 May 2022 19:12:43 GMT</pubDate>
      
      <description>&lt;p&gt;이번에 프로젝트를 진행하면서 버그가 발생했는데 알고보니 스코프문제였다.&lt;br&gt;이번 기회에 스코프에 대해 확실히 정리해보고자 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번에 프로젝트를 진행하면서 버그가 발생했는데 알고보니 스코프문제였다.<br>이번 기회에 스코프에 대해 확실히 정리해보고자 한다.</p><a id="more"></a><h2 id="스코프란"><a href="#스코프란" class="headerlink" title="스코프란?"></a>스코프란?</h2><p>w3school에 따르면<a href="https://www.w3schools.com/js/js_scope.asp">(링크)</a> Scope란 변수의 유효한 범위이다.</p><p>&lt; 스코프종류 &gt;</p><ol><li>Global scope</li><li>Local Scope<ol><li>Block scope</li><li>Function scope</li></ol></li></ol><p>ES6이전에는 js는 Global Scope and Function Scope만 있었다.<br>ES6전에는 var만 있었는데 ES6이후로 let과 const가 생겨나면서 block scope 개념도 함께 생겨났다.</p><p><br><br><br></p><h2 id="1-Global-scope-블록스코프"><a href="#1-Global-scope-블록스코프" class="headerlink" title="1 Global scope 블록스코프"></a>1 Global scope 블록스코프</h2><p>이름그대로 변수가 전역에 선언된 경우이다.<br>어디서든 접근이 가능하다. 어디서나 접근가능하기때문에 편리한 장점이 있지만 코드가 길어질수록 휴먼에러가 날 확률이 높아진다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> carName = <span class="string">"Volvo"</span>;</span><br><span class="line"><span class="comment">// code here can use carName</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// code here can also use carName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="2-Block-scope-블록스코프"><a href="#2-Block-scope-블록스코프" class="headerlink" title="2 Block scope 블록스코프"></a>2 Block scope 블록스코프</h2><p>블록스코는 <code>브라켓{}</code>블록안에서만 변수가 유효할때를 뜻한다. 아래 비교예시를 보자.</p><ul><li><p>var 키워드 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x CAN be used here</span></span><br></pre></td></tr></table></figure></li><li><p>let 또는 const 키워드 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x can NOT be used here</span></span><br></pre></td></tr></table></figure></li></ul><p>위 두 예시의 차이에서 알 수 있듯이 <code>브라켓 {}</code>을 벗어나도 선언한 변수를 호출할 수 있는지 없는지로 블록스코프인지를 확인할 수 있다.<br>var변수는 블록스코프가 아니기때문에 변수관리에 있어 문제를 초래하기도 한다.</p><p><br><br><br></p><h2 id="3-Function-Scope-로컬스코프"><a href="#3-Function-Scope-로컬스코프" class="headerlink" title="3 Function Scope 로컬스코프"></a>3 Function Scope 로컬스코프</h2><p>말그대로 함수 안에서 선언한 변수로 함수안에서만 호출가능하고 함수 밖에서는 호출할 수 없다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// code here can NOT use carName</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> carName = <span class="string">"Volvo"</span>;</span><br><span class="line">  <span class="comment">// code here CAN use carName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// code here can NOT use carName</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Static-Scoping-Lexical-Scoping"><a href="#Static-Scoping-Lexical-Scoping" class="headerlink" title="Static Scoping (Lexical Scoping)"></a>Static Scoping (Lexical Scoping)</h2><p>JavaScropt, C, Java 등에서는  Static Scoping을 따른다. 즉, 함수를 어디서 선언했는지에 따라 상위 스코프를 결정하는 것이다.<br>var를 사용하여 변수를 선언했을때 어떻게 값이 나올까?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">17</span>;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">a(); <span class="comment">//값은?</span></span><br><span class="line">b(); <span class="comment">//값은?</span></span><br></pre></td></tr></table></figure><ul><li>output</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>a()의 호출값이 17이 아니고 왜 7인 걸까?</p><p>함수가 언제 호출되는지에 따르는 게 아니라 함수를 어디에 선언했냐에 따라 상위 스코프가 결정되기 때문이다.<br>num은 이미 두 함수보다 먼저 선언했으므로 7은 17로 덮어써지지않고 그대로 7로 출력된다.</p><blockquote><p>참고로 함수 호출에 따라 스코프가 결정되는 것을 Dynamic Scope라고 한다. Perl, Bash Shell 등에서 사용된다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/05/16/220517JSscope/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSP에서 엑셀다운로드할때 한글깨짐현상을 해결하는 가장 간단한 방법</title>
      <link>https://sowon-dev.github.io/2022/05/10/220511ExcelKoreanError/</link>
      <guid>https://sowon-dev.github.io/2022/05/10/220511ExcelKoreanError/</guid>
      <pubDate>Tue, 10 May 2022 21:48:42 GMT</pubDate>
      
      <description>&lt;p&gt;JSP에서 엑셀다운로드를 할때 한글깨짐 현상이 나타났다. 이를 해결할 수 있는 가장 간단한 방법이 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JSP에서 엑셀다운로드를 할때 한글깨짐 현상이 나타났다. 이를 해결할 수 있는 가장 간단한 방법이 있다.</p><a id="more"></a><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><p>이럴때는 meta태그에 utf-8이 잘 설정되어있는지 확인하면 된다.<br>만약 utf-8설정을 찾을 수 없다면 코드를 head사이에 추가하면 된다.</p><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">// (중략)</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'Content-Type'</span> <span class="attr">content</span>=<span class="string">'application/vnd.ms-excel; charset=utf-8'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/05/10/220511ExcelKoreanError/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>전자정부프레임워크프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/</link>
      <guid>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/</guid>
      <pubDate>Mon, 09 May 2022 04:12:10 GMT</pubDate>
      
      <description>&lt;p&gt;전자정부프레임워크&lt;a href=&quot;https://www.egovframe.go.kr/home/ntt/nttRead.do?menuNo=76&amp;bbsId=171&amp;nttId=1576&quot;&gt;(링크)&lt;/a&gt;는 이번 프로젝트에서 처음 사용해보았다. 사실 특별히 새로울 건 없었다. 왜냐하면 Spring프레임워크와 거의 똑같기 때문이다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>전자정부프레임워크<a href="https://www.egovframe.go.kr/home/ntt/nttRead.do?menuNo=76&bbsId=171&nttId=1576">(링크)</a>는 이번 프로젝트에서 처음 사용해보았다. 사실 특별히 새로울 건 없었다. 왜냐하면 Spring프레임워크와 거의 똑같기 때문이다. </p><a id="more"></a><p>전자정부프레임워크란 “효율적인 정보시스템 개발을 위한 코드 라이브러리, 인터페이스규약, 설정정보 등의 뼈대를 제공하는 표준프레임워크”라고 한다.<br>즉, egovframework는 Spring프레임워크 + MyBatis + MySql + Jsp + Jquery 조합에다가 전자정부프레임워크가 제공하는 라이브러리나 클래스가 추가되어있다고 보면 된다.</p><p><br><br><br></p><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li>가능한 많은 기능을 담당하고자 한 것!<br>팀장님이 일이 많아서 팀장님이 담당하시는 기능 중 일부를 받아냈다. 덕분에 하나의 프로젝트에서 다양한 기능을 담당하여 개발할 수 있었다! 야근도 꽤 했지만 많이 성장했다! 뿌듯해!</li><li>프로젝트 설정을 추가한 것!<br>프로젝트 진행 중 CSRF 방어가 필요했는데 여러 방법으로 해결할 수 있었다. 각 페이지마다 하거나 form태그마다 할수도 있었지만 프로젝트 차원에서 해결하는 방법이 가장 좋다고 판단이 들어 Spring Security도입을 건의했다. 다행히 잘 받아들여져서 프로젝트 설정을 직접 추가하는 경험을 할 수 있었다. 프로젝트 진행 중간에 프로젝트 셋팅을 건든다는 게 살짝 두려웠던 건 사실이다. 혹시나 내가 추가한 설정들때문에 잘되던 동작들이 꼬일까봐 걱정했는데 다행히 잘 작동해서 정말 뿌듯했다. </li><li>XSS와 CSRF의 차이를 명확히 안 것!<br>CSRF<a href="https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/">(링크)</a>는 사이트 간 요청 위조 약자로 공격대상이 Server이다.<br>XSS<a href="https://sowon-dev.github.io/2022/04/20/220420XSS/">(링크)</a>는 사이트 간 스크립팅의 약자로 공격대상이 Client이다.</li><li>ES5와 ES6 차이를 정확히 안 것!<br>브라우저 호환성과 ES5와 ES6 차이<a href="https://sowon-dev.github.io/2022/04/18/220418ECMAScript/">(링크)</a>를 확실히 알게되었다.</li><li>검색조건 유지를 위해 return url을 사용 한 것!<br>필수기능이라고도 할 수 있는 검색조건 유지기능 시작 전에는 어려울 줄 알았는데 막상해보니 간단하게 끝났다! return url을 사용하여 목록화면에서 상세화면으로 들어갔다가 뒤로 가기를 해도 페이징과 검색조건이 그대로 유지되도록 구현했다.</li><li>달력 라이브러리를 커스텀해서 썼다.<br>디자인팀에서 퍼블을 하는데 달력을 넣기 힘들다고 지원요청을 받았다. 달력 라이브러리를 구글링하며 제일 적합하고 커스텀할 수 있는 라이브러리를 선택해서 적용하고 특정 날짜를 클릭하지 못하게 막는다던지, DB에 저장된 날짜는 클릭안되게 달력에 처리한다든지 등 프론트와 백을 넘나들며 기능을 완성했다. library docs가 충분하지않아서 영어로도 엄청 검색을 하면서 구현했는데 꽤나 재미있는 경험이었다.</li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>트리구조 메뉴를 개발하는데 쿼리로 애를 많이 먹었다. 서버로 재귀호출을 돌리면서 tree데이터를 json으로 만들어 화면에 던진 뒤에 jsTree라이브러리<a href="https://www.jstree.com/">(링크)</a>를 사용해 개발을 완료할 수 있었다. 고급 SQL에 대한 공부가 필요하다.</li><li>egovframework를 충분히 활용하지 못했다. 시간도 없을뿐더라 기존 CMS를 건들이지 않는 선에서 다루느라 egovframework의 많은 기능을 활용하지못해 아쉽다.</li><li>프로젝트 전체 흐름을 이해하는 데 꽤나 시간이  걸렸다. 중간중간에 고객사 요구사항이 바뀌기도 했고 내가 담당해야하는 페이지가 계정 권한별로 달라서 초반에 헷갈렸다. 이윽고 적응했지만 더 빠르게 프로젝트 전체 그림을 파악하고 싶다.</li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>recursive등 고급 SQL을 더 깊게 공부할 것</li><li>프로젝트셋팅때부터 질문을 미친듯이 할 것 </li><li>프로젝트를 한 눈에 빨리 파악하기 위해서는 역시 다양한 프로젝트를 접해본 경험이 중요하다. 앞으로도 성장할 수 있는 기회가 보인다면 미리 걱정하지말고 기회를 잡을 것.</li></ol><p><br><br><br></p><h2 id="코드리뷰-및-질의응답"><a href="#코드리뷰-및-질의응답" class="headerlink" title="코드리뷰 및 질의응답"></a>코드리뷰 및 질의응답</h2><p>팀장님께 부탁드려서 코드리뷰를 진행했다! 바쁘신 와중에도 코드리뷰와 프로젝트리뷰 제안을 흔쾌히 수락해주셨다. 감사합니다 팀장님😀<br>코드리뷰시간을 알차게 사용하기 위해서는 준비를 철저히 해야한다. 팀장님이 구현한 기능들을 쭈욱 살피고 궁금했던 점들과 구글링을 통해 나오지 않는 질문들, 그리고 구현하던 중 궁금했던 모든 것들을 미리 한 데 모아 노션에 정리했다.</p><ol><li>pathvariable보다는 query parameter를 사용하는 게 더 나은가요?<br>이번에 디테일페이지를 들어갈때 pathvariable를 사용했는데 중간에 로직수정이 필요한 바람에 전부 query parameter를 사용하게 되었다.<br>그럼 처음부터 query parameter를 사용하는 게 나았을까하는 의문이 들었다. 네이버나 다음같은 대형사이트들도 대부분 query parameter를 사용하길래 pathvariable은 덜 사용되는 건지 궁금해서 문의드렸다.<br>팀장님이 답변해주시길 RESTful API에 맞게 설계하려면 pathvariable를 사용하면 되고 그게 아니라면 query parameter가 더 나은 프로젝트들도 있다고 답변해주셨다!</li><li>async await는 비동기일때 사용할 것!<br>이번에 async await를 이용하여 코드를 구현했는데 팀장님이 코드개선을 한 번해주셨다. 비동기작업이 없는 경우 async await보다는 flag변수를 선언해서 사용하면 빠르고 간단하게 동기작업을 할 수 있다!</li><li>HashMap 사용시 파라미터 정리를 쉽게할 수 있다.<br>파라미터가 많지 않은 경우 HashMap을 사용하여 DAO내에서 파라미터를 제대로 분리해주면 편리하게 사용할 수 있고 각 클래스의 역할도 완벽히 나눌수있다!</li><li>MariaDB나 MySQL에서는 group by 사용시 모든 select 컬럼을 넣지 않아도 되는 이유?<br>기본적으로 group by 사용시 select절의 모든 컬럼을 넣어줘야하는데 MariaDB나 MySQL에서는 넣지 않아도 정상작동한다.<br>그 이유가 무엇일까? 바로 sql_mode에 only_full_group_by속성을 on한 경우<a href="https://velog.io/@heumheum2/ONLYFULLGROUPBY">(참고글)</a> 모든 컬럼을 넣지않아도 DB가 알아서 group by시 필요한 컬럼들을 챙긴다.<br>하지만 select절의 모든 컬럼을 넣지 않은 쿼리를 다른 DB에서 실행시 오류가 발행하므로 웬만하면 모든 컬럼을 다 기입하는 버릇을 들이는 것이 좋다.</li><li>구글링을 통해 알게된 정보들 중 좋은 글을 어떻게 판단할까요?<br>프로젝트를 할때마다 구글링을 정말 많이하게되는데 관련 글을 읽다보면 서로 반대되는 주장을 하는 글이나 뭐보단 뭐가 더 좋다는 비교글이 많이 있다. 이때 어떤 것이 옳은 것인지 판단이 잘 안 설때가 종종 있어 팀장님께 정보글 판단 기준에 대해 여쭤보았다.<br>팀장님의 경우 <code>일단 수용  → 직접 테스트코드 작성 → 겪어봐야 알게 됨</code> 주로 이 루트로 판단한다고 하셨다. 나도 글만 읽지말고 Test Unit등을 작성해보는 습관을 들여야겠다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>괄호가 &amp;#41;로 자동으로 바뀌어버릴때 해결법(ft.EscapeHtml)</title>
      <link>https://sowon-dev.github.io/2022/05/05/220506EscapeHtml/</link>
      <guid>https://sowon-dev.github.io/2022/05/05/220506EscapeHtml/</guid>
      <pubDate>Thu, 05 May 2022 22:02:04 GMT</pubDate>
      
      <description>&lt;p&gt;jsp페이지에서 검색을 하는데 자동으도 괄호가 escape되어 쿼리에서 where 조건절이 검색되지않았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>jsp페이지에서 검색을 하는데 자동으도 괄호가 escape되어 쿼리에서 where 조건절이 검색되지않았다.</p><a id="more"></a><h2 id="🥨-문제-상황"><a href="#🥨-문제-상황" class="headerlink" title="🥨 문제 상황"></a>🥨 문제 상황</h2><p>아래 예시를 보자. option의 value값에 괄호가 들어가있다. 그결과 브라우저가 자동으로  </p><ul><li><p>jsp페이지</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(코드 생략)</span><br><span class="line">&lt;form name=<span class="string">"searchFrm"</span> method=<span class="string">"get"</span> action=<span class="string">"/example"</span>&gt;</span><br><span class="line">  &lt;select name=<span class="string">"calType"</span>&gt;</span><br><span class="line">&lt;option value=""&gt;:: 전체 ::&lt;/option&gt;</span><br><span class="line">&lt;option value="달력(움력)" &lt;c:if test="$&#123;searchInfo.calType eq '달력(움력)'&#125;"&gt;selected&lt;/c:if&gt;&gt;달력(움력)&lt;/option&gt;</span><br><span class="line">&lt;option value="달력(양력)" &lt;c:if test="$&#123;searchInfo.calType eq '달력(양력)'&#125;"&gt;selected&lt;/c:if&gt;&gt;달력(양력)&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">(코드 생략)</span><br></pre></td></tr></table></figure></li><li><p>sql쿼리</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">   tb_example</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span>USE_AT = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span>CAL_TYPE = <span class="comment">#&#123;calType&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>실행결과 CAL_TYPE 조건이 <code>달력(음력)</code>이 아닌 <code>달력&amp;#40;음력&amp;#41;</code>으로 where 조건절이 들어갔기에 원하는 데이터가 나오지않았다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">   *</span><br><span class="line">FROM</span><br><span class="line">   tb_example</span><br><span class="line">WHERE</span><br><span class="line">1 = 1</span><br><span class="line">ANDUSE_AT = 1</span><br><span class="line">ANDCAL_TYPE = '달력&amp;#40;음력&amp;#41;'</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="🥨-원인"><a href="#🥨-원인" class="headerlink" title="🥨 원인"></a>🥨 원인</h2><p>이는 브라우저에서 자동으로 문자열 escape를 하기 때문이다.</p><ul><li>문자열 escape란? 브라우저에서 get방식 전송시 브라우저 자체적으로 UTF-8문자를 escape한다.</li></ul><p><br><br><br></p><h2 id="🥨-해결방법"><a href="#🥨-해결방법" class="headerlink" title="🥨 해결방법"></a>🥨 해결방법</h2><p>따라서 unescape를 해주면 해결된다.<br>크게 3가지 방법이 있다.</p><ol><li>org.springframework.web.util.HtmlUtils.htmlUnescape</li><li>org.apache.commons.lang.StringEscapeUtils.escapeHtml</li><li>replace메서드 사용</li></ol><p><br><br><br></p><h3 id="1-HtmlUtils-htmlUnescape-사용"><a href="#1-HtmlUtils-htmlUnescape-사용" class="headerlink" title="1 HtmlUtils.htmlUnescape 사용"></a>1 HtmlUtils.htmlUnescape 사용</h3><p>컨트롤러에서 받은 파라미터를 unescape한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">param.setCalType(HtmlUtils.htmlUnescape(param.getCalType()));</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="2-StringEscapeUtils-escapeHtml-사용"><a href="#2-StringEscapeUtils-escapeHtml-사용" class="headerlink" title="2 StringEscapeUtils.escapeHtml 사용"></a>2 StringEscapeUtils.escapeHtml 사용</h3><p>컨트롤러에서 받은 파라미터를 unescape한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">param.setCalType(StringEscapeUtils.escapeHtml(param.getCalType());</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="3-replace-사용"><a href="#3-replace-사용" class="headerlink" title="3 replace() 사용"></a>3 replace() 사용</h3><p>컨트롤러에서 받은 특정 파라미터를 replace메서드를 이용해 바꿔준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">param.getCalType().replace(<span class="string">"&amp;#40;"</span>, <span class="string">"("</span>);</span><br><span class="line">param.getCalType().replace(<span class="string">"&amp;#41;"</span>, <span class="string">")"</span>);</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="🥨-선택"><a href="#🥨-선택" class="headerlink" title="🥨 선택"></a>🥨 선택</h2><p>현재 전자정부프레임워크3.8환경이므로 스프링프레임워크에서 제공하는 htmlUnescape메서드를 사용했다.<br>내 상황에서는 escape가 1번했는데도 정상출력이 되지않아 찾아보니 escape가 2번 되어있었다. 왜일까…?<br>암튼 unescape를 2번해서 해결했다.</p><ul><li>Controller.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(중략)</span><br><span class="line">String calTypeUnescape = HtmlUtils.htmlUnescape(param.getCalType());</span><br><span class="line">param.setCalType(HtmlUtils.htmlUnescape(calTypeUnescape));</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p>적용한 뒤 콘솔을 보니 아래처럼 쿼리가 원하는대로 정상출력됐다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">   *</span><br><span class="line">FROM</span><br><span class="line">   tb_example</span><br><span class="line">WHERE</span><br><span class="line">1 = 1</span><br><span class="line">ANDUSE_AT = 1</span><br><span class="line">ANDCAL_TYPE = '달력(음력)'</span><br></pre></td></tr></table></figure><p>해결!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/05/220506EscapeHtml/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>전자정부프레임워크3.8에 CSRF 설정하기</title>
      <link>https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/</link>
      <guid>https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/</guid>
      <pubDate>Mon, 02 May 2022 05:23:27 GMT</pubDate>
      
      <description>&lt;p&gt;CSRF란 Cross Site Request Forgery로 보안 이슈이기때문에 꼭 해결해야한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>CSRF란 Cross Site Request Forgery로 보안 이슈이기때문에 꼭 해결해야한다.</p><a id="more"></a><p>스프링부트로는 CORS 설정을 한 적이 있는데 이번 프로젝트는 전자정부프레임워크를 사용해야해서 조금 새로웠다.<br>전자정부프레임워크 공식문서<a href="https://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte3:fdl:server_security:xmlschema_v3_8">(링크)</a>에 spring security CSRF 간편설정이 있지만 왜인지 설정이 잘 되지않아 그냥 spring security를 pom.xml에 추가했다.</p><h2 id="pom-xml-에-의존성-추가"><a href="#pom-xml-에-의존성-추가" class="headerlink" title="pom.xml 에 의존성 추가"></a>pom.xml 에 의존성 추가</h2><p>프로젝트에 spring security를 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.maven.artifact.version</span>&gt;</span>4.3.16.RELEASE<span class="tag">&lt;/<span class="name">spring.maven.artifact.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">egovframework.rte.version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">egovframework.rte.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security.version</span>&gt;</span>4.2.13.RELEASE<span class="tag">&lt;/<span class="name">security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">(중략)</span><br><span class="line"><span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="web-xml-추가"><a href="#web-xml-추가" class="headerlink" title="web.xml 추가"></a>web.xml 추가</h2><p>아래 필터를 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="context-security-xml-생성"><a href="#context-security-xml-생성" class="headerlink" title="context-security.xml 생성"></a>context-security.xml 생성</h2><p>context 설정에 따라 이름에 맞는 시큐리티 config xml파일을 생성한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:sec</span>=<span class="string">"http://www.springframework.org/schema/security"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/security/spring-security.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:authentication-manager</span> <span class="attr">alias</span>=<span class="string">"authenticationManager"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 인증예외처리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/admin/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/uploads/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">pattern</span>=<span class="string">"/file/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 접근경로 권한처리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">use-expressions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 로그인 페이지 정보 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sec:form-login</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sec:csrf</span> <span class="attr">disabled</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sec:http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form-login 로그인 페이지를 연결하면 CSRF를 방어할 수 있다.<br>커스텀한 로그인 로직을 사용하기때문에 <code>&lt;sec:form-login  /&gt;</code>해당 부분을 빼고 싶었는데 해당 코드를 빼면 서버 에러가 나서 입력만 하고 연결하지 않았다.<br>참고로 disabled=”false”가 CSRF를 사용하겠다는 의미이다.</p><p><br><br><br></p><h2 id="토큰을-jsp화면에-넣기"><a href="#토큰을-jsp화면에-넣기" class="headerlink" title="토큰을 jsp화면에 넣기"></a>토큰을 jsp화면에 넣기</h2><p>form태그 아래에 넣어주면 된다!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sec:csrfToken</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/CSRF/">CSRF</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ajax랑 axios는 무슨 차이가 있을까?</title>
      <link>https://sowon-dev.github.io/2022/04/30/220430JS-axiosVsajax/</link>
      <guid>https://sowon-dev.github.io/2022/04/30/220430JS-axiosVsajax/</guid>
      <pubDate>Sat, 30 Apr 2022 05:20:43 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트를 진행하다보면 클라이언트와 서버간의 데이터를 요청응답받기 위해 HTTP통신을 하게 된다.&lt;br&gt;이때 자주 사용하는 라이브러리로는 jQuery.ajax와 axios가 있다.&lt;br&gt;이 둘의 차이점은 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트를 진행하다보면 클라이언트와 서버간의 데이터를 요청응답받기 위해 HTTP통신을 하게 된다.<br>이때 자주 사용하는 라이브러리로는 jQuery.ajax와 axios가 있다.<br>이 둘의 차이점은 무엇일까?</p><a id="more"></a><h2 id="ajax는-라이브러리인가"><a href="#ajax는-라이브러리인가" class="headerlink" title="ajax는 라이브러리인가?"></a>ajax는 라이브러리인가?</h2><p>wikipedia<a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29">(링크)</a>에 따르면 ajax는 라이브러리가 아니라 비동기 통신 웹 개발 기술이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ajax (also AJAX /ˈeɪdʒæks/; short for "Asynchronous JavaScript and XML")[1][2] is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. </span><br><span class="line">With Ajax, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behaviour of the existing page. </span><br><span class="line">By decoupling the data interchange layer from the presentation layer, Ajax allows web pages and, by extension, web applications, to change content dynamically without the need to reload the entire page.</span><br><span class="line">[3] In practice, modern implementations commonly utilize JSON instead of XML.</span><br><span class="line"></span><br><span class="line">Ajax is not a technology, but rather a programming concept. </span><br><span class="line">HTML and CSS can be used in combination to mark up and style information. </span><br><span class="line">The webpage can be modified by JavaScript to dynamically display—and allow the user to interact with the new information. </span><br><span class="line">The built-in XMLHttpRequest object is used to execute Ajax on webpages, allowing websites to load content onto the screen without refreshing the page. </span><br><span class="line">Ajax is not a new technology, nor is it a new language. Instead, it is existing technologies used in a new way.</span><br><span class="line"></span><br><span class="line">by wikipedia ajax</span><br></pre></td></tr></table></figure><p>이 기술을 구현한 라이브러리가 바로 jQuery.ajax()와 axios이다.</p><p><br><br><br></p><h2 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax()"></a>jQuery.ajax()</h2><p>사용법은 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"some.php"</span>,</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">location</span>: <span class="string">"Boston"</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">"Data Saved: "</span> + msg );</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios 공식문서<a href="https://axios-http.com/docs/intro">(링크)</a>에 따르면 axios는 node.js와 브라우저를 위한 프로미스기반의 HTTP통신 라이브러리이다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Axios is a promise-based HTTP Client for node.js and the browser. </span><br><span class="line">It is isomorphic (= it can run in the browser and nodejs with the same codebase). </span><br><span class="line">On the server-side it uses the native node.js http module, while on the client (browser) it uses XMLHttpRequests.</span><br></pre></td></tr></table></figure><p>사용법 예시는 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a request for a user with a given ID</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// always executed</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optionally the request above could also be done as</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// always executed</span></span><br><span class="line">  &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Want to use async/await? Add the `async` keyword to your outer function/method.</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">'/user?ID=12345'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="fetch도-있던데"><a href="#fetch도-있던데" class="headerlink" title="fetch도 있던데?"></a>fetch도 있던데?</h2><p>fetch는 axios와 마찬가지로 promise기반 비동기 HTTP 클라이언트이다. 모던 브라우저에 내장되어있기에 바로 사용할 수 있다.<br>사용법은 axios와 거의 유사하고 성능은 fetch가 조금 빠르다고 한다<a href="https://meticulous.ai/blog/fetch-vs-axios/">(링크)</a>.<br>실무에선 아직 한 번도 사용해본적이 없는데 fetch는 몇몇 브라우저에선 지원이 안되기때문이다<a href="https://caniuse.com/fetch">(링크)</a>. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">  method: <span class="string">'GET'</span>, <span class="comment">// other options: POST, PUT, DELETE, etc.</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;&#125;),</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고하면-좋은-글"><a href="#참고하면-좋은-글" class="headerlink" title="참고하면 좋은 글"></a>참고하면 좋은 글</h2><ul><li><a href="https://velog.io/@leehaeun0/Ajax-%EB%8A%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%9D%B8%EA%B0%80%EC%9A%94">Ajax 는 라이브러리 인가요?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/30/220430JS-axiosVsajax/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker는 어떻게 HostOS와 다른 운영체제에서 돌아갈까?</title>
      <link>https://sowon-dev.github.io/2022/04/27/220427DockerDefinition/</link>
      <guid>https://sowon-dev.github.io/2022/04/27/220427DockerDefinition/</guid>
      <pubDate>Wed, 27 Apr 2022 02:22:51 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 VM에 대해 팀장님과 이야기하다가 문득 Docker로 어떻게 리눅스OS를 쓸 수 있는지가 궁금해졌다.&lt;br&gt;HostOS가 원도우 환경에서 VM은 GuestOS를 원하는 대로 설치할 수 있으니 리눅스든 우분투든 원하는 OS를 쓸 수 있다.&lt;br&gt;하지만 Docker는? &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 VM에 대해 팀장님과 이야기하다가 문득 Docker로 어떻게 리눅스OS를 쓸 수 있는지가 궁금해졌다.<br>HostOS가 원도우 환경에서 VM은 GuestOS를 원하는 대로 설치할 수 있으니 리눅스든 우분투든 원하는 OS를 쓸 수 있다.<br>하지만 Docker는? </p><a id="more"></a><p>Docker는 GuestOS를 설치하지 않고 HostOS를 활용한다. 그래서 VM보다 훨씬 가볍고 빠르다.<br><img src="https://miro.medium.com/max/2400/1*wOBkzBpi1Hl9Nr__Jszplg.png" alt="https://medium.com/@darkrasid/docker%EC%99%80-vm-d95d60e56fdd"></p><h2 id="HostOS가-원도우-환경인-Docker에서-어떻게-리눅스OS를-사용할-수-있을까"><a href="#HostOS가-원도우-환경인-Docker에서-어떻게-리눅스OS를-사용할-수-있을까" class="headerlink" title="HostOS가 원도우 환경인 Docker에서 어떻게 리눅스OS를 사용할 수 있을까?"></a>HostOS가 원도우 환경인 Docker에서 어떻게 리눅스OS를 사용할 수 있을까?</h2><p>여러 구글링을 끝에 내가 내린 결론이다. 따라서 정확하지않을 수 있다. (잘못된 부분은 댓글로 알려주시면 이 글을 읽는 모두에게 도움이 됩니다. 감사하겠습니다!)<br><a href="https://www.docker.com/products/docker-desktop/">Docker Desktop for Windows(링크)</a>를 다운로드 받으면 리눅스 엔진이 함께 설치된다.<br>이 리눅스엔진을 통해서 리눅스OS나 우분투OS를 사용할 수 있다!</p><p><br><br></p><h2 id="같이-읽으면-좋은-글"><a href="#같이-읽으면-좋은-글" class="headerlink" title="같이 읽으면 좋은 글"></a>같이 읽으면 좋은 글</h2><ul><li><a href="https://sowon-dev.github.io/2021/03/28/210329Container/">컨테이너, 도커, 쿠버네티스</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Docker/">Docker</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/27/220427DockerDefinition/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title> el태그 대신 &lt;c:out&gt; 사용하는 이유</title>
      <link>https://sowon-dev.github.io/2022/04/26/220426-xssCout/</link>
      <guid>https://sowon-dev.github.io/2022/04/26/220426-xssCout/</guid>
      <pubDate>Tue, 26 Apr 2022 03:25:00 GMT</pubDate>
      
      <description>&lt;p&gt;jsp에서 다양한 방식으로 서버사이드 데이터를 출력할 수 있다.&lt;br&gt;그 중 가장 많이 쓰는건 el태그인데 그 이유는 el태그 사용법이 &lt;code&gt;${}&lt;/code&gt;로 매우 간단하기때문이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>jsp에서 다양한 방식으로 서버사이드 데이터를 출력할 수 있다.<br>그 중 가장 많이 쓰는건 el태그인데 그 이유는 el태그 사용법이 <code>${}</code>로 매우 간단하기때문이다.</p><a id="more"></a><p>el태그만 써도 화면에 값이 잘 출력되는데 왜 굳이 <code>&lt;c:out&gt;</code>를 사용할까?</p><h2 id="결론-XSS-방어하기-위해"><a href="#결론-XSS-방어하기-위해" class="headerlink" title="결론: XSS 방어하기 위해!"></a>결론: XSS 방어하기 위해!</h2><p> <code>&lt;c:out&gt;</code>를 사용하면 escapeXml속성을 활용할 수 있다.<br> escapeXml를 true로 설정함으로써 가장 간단하게 XSS<a href="https://sowon-dev.github.io/2022/04/20/220420XSS/#XSS란">(링크)</a>를 방어할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.escapeXml = true 인 경우(디폴트)</span></span><br><span class="line">&lt;c:out value=<span class="string">"&lt;script type='text/javascript'&gt;alert('테스트');&lt;/script&gt;"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.escapeXml = false 인 경우 == el태그와 동일</span></span><br><span class="line">&lt;c:out value=<span class="string">"&lt;script type='text/javascript'&gt;alert('테스트');&lt;/script&gt;"</span> escapeXml=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></table></figure><ol><li><code>escapeXml = true</code>의 경우, text 그대로 출력된다.</li><li><code>escapeXml = false</code> 인 경우나 el태그인 경우, alert창이 실행된다.</li></ol><p>따라서 XSS 방어하기 위해서는 <code>&lt;c:out&gt;</code>을 사용하는 게 좋다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/26/220426-xssCout/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Async await를 Deferred로 걷어내기</title>
      <link>https://sowon-dev.github.io/2022/04/24/220424AwaitToDeferred/</link>
      <guid>https://sowon-dev.github.io/2022/04/24/220424AwaitToDeferred/</guid>
      <pubDate>Sun, 24 Apr 2022 05:01:06 GMT</pubDate>
      
      <description>&lt;p&gt;ES6문법으로 작업한 내용을 다 걷어내고 ES5문법에 맞춰 작업할 일이 생겼다.&lt;br&gt;Async await를 쓴 것들을 싹 걷어냈다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>ES6문법으로 작업한 내용을 다 걷어내고 ES5문법에 맞춰 작업할 일이 생겼다.<br>Async await를 쓴 것들을 싹 걷어냈다.</p><a id="more"></a><p>ES6에서 ES5로 바로 문법을 변환해주는 사이트<a href="https://es6console.com/">(링크)</a>도 있다.<br>이런 일은 사실 생기면 안 되는건데… 인생은 어쩔수없다.</p><h2 id="Async-await-사용"><a href="#Async-await-사용" class="headerlink" title="Async await 사용"></a>Async await 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSelectBox</span>(<span class="params">nextSelectTagId, parntsId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  $.<span class="keyword">get</span>("/admin/tree?parntsId=" + parntsId, function(data, status) &#123;</span><br><span class="line"><span class="comment">// 코드생략</span></span><br><span class="line">resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 함수는 아래처럼 사용가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> checkedDateset = e.dataset;</span><br><span class="line"><span class="keyword">await</span> setSelectBox(<span class="string">'lev2ClId'</span>, checkedDateset.clid1);</span><br><span class="line"><span class="keyword">await</span> setSelectBox(<span class="string">'lev3ClId'</span>, checkedDateset.clid2);</span><br><span class="line"><span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Deferred"><a href="#Deferred" class="headerlink" title="Deferred"></a>Deferred</h2><p>Promise 선언한 부분은 Deferred로 대체했다.<br>Deferred는 제이쿼리에서 프로미스를 사용할때 쓰는 객체이다.<br>먼저 <code>$.Deferred()</code>로 deferred 객체를 만들고 성공시 resolve호출하면 프로미스의 done이 연결되고, 실패시 reject를 호출하면 fail로 연결된다.<br>그리고 함수의 리턴은 항상 <code>dfd.promise();</code>로 해야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSelectBox</span>(<span class="params">nextSelectTagId, parntsId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = $.Deferred();</span><br><span class="line">$.<span class="keyword">get</span>("/admin/tree?parntsId=" + parntsId, function(data, status) &#123;</span><br><span class="line"><span class="comment">// 코드생략</span></span><br><span class="line">dfd.resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dfd.promise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 함수를 아래처럼 사용하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> checkedDateset = e.dataset;</span><br><span class="line">setSelectBox(<span class="string">'lev2ClId'</span>, checkedDateset.clid1).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> setSelectBox(<span class="string">'lev3ClId'</span>, checkedDateset.clid2); </span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/24/220424AwaitToDeferred/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>input태그에 스크립트 방지하는 방법(XSS 방지)</title>
      <link>https://sowon-dev.github.io/2022/04/20/220420XSS/</link>
      <guid>https://sowon-dev.github.io/2022/04/20/220420XSS/</guid>
      <pubDate>Wed, 20 Apr 2022 02:03:49 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트 테스트기간이라 몇가지 수정해달라는 요청받았다.&lt;br&gt;엑셀로 받았는데 수정사항 내용이 &lt;code&gt;글제목에 태그가 입력됨.&lt;/code&gt; 으로 왔길래 무슨 말일까 고민하고있었다.&lt;br&gt;팀장님이 “XSS방어하면 돼요~”라고 말씀해준 뒤에야 이해할 수 있었다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트 테스트기간이라 몇가지 수정해달라는 요청받았다.<br>엑셀로 받았는데 수정사항 내용이 <code>글제목에 태그가 입력됨.</code> 으로 왔길래 무슨 말일까 고민하고있었다.<br>팀장님이 “XSS방어하면 돼요~”라고 말씀해준 뒤에야 이해할 수 있었다. </p><a id="more"></a><p>아 html태그를 말하는 거였구나.<br>태그가 입력된다는 말이 진짜 html태그가 들어간다는 말이었구나.</p><h2 id="XSS란"><a href="#XSS란" class="headerlink" title="XSS란?"></a>XSS란?</h2><p>XSS란 Cross-site scriptiong에 약어로 input태그에 자바스크립트 함수등의 실행코드를 고의로 작동시켜 해당 사이트를 마음대로 컨트롤하며 Data등을 빼내갈 수 있는 공격법이다.<br>예를 들어 게시글을 수정할때 input태그에 <code>&lt;script&gt;alert(&#39;XSS테스트&#39;);&lt;/script&gt;</code> 를 입력한 뒤 글 수정버튼을 클릭하면 서버사이드랜더링으로 출력되는 값을 그대로 실행하기 때문에 XSS되어 alert창이 실행된다.<br>간단한 alert창이어서 망정이지 DB를 접근하거나 아예 사이트를 제어하는 스크립트를 실행시키는 경우 보안상 큰 문제가 발생할 수 있다.</p><p><br><br><br></p><h2 id="1-Service에서-XSS-방어하기"><a href="#1-Service에서-XSS-방어하기" class="headerlink" title="1 Service에서 XSS 방어하기"></a>1 Service에서 XSS 방어하기</h2><p>XSS를 방어하기 위해서 서버측에서 필터링을 걸어야한다.<br>구글링을 통해 다양한 방법을 찾을 수 있다.<br>보통 script, iframe, embed는 보안에 취약할 수 있기에 꼭 삭제해줘야한다.</p><ul><li>XssUtil.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">cleanXSS</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    String returnVal = value;</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>).replaceAll(<span class="string">"&gt;"</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"\\("</span>, <span class="string">"&amp;#40;"</span>).replaceAll(<span class="string">"\\)"</span>, <span class="string">"&amp;#41;"</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"'"</span>, <span class="string">"&amp;#39;"</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"eval\\((.*)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span>, <span class="string">"\"\""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"script"</span>, <span class="string">""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"iframe"</span>, <span class="string">""</span>);</span><br><span class="line">    returnVal = returnVal.replaceAll(<span class="string">"embed"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> returnVal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>그리고 호출은 서비스에서 진행하면된다.</p><ul><li>BoardServiceImpl.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBoard</span><span class="params">(BoardInfo info)</span> </span>&#123;</span><br><span class="line">info.setSubject(XssUtil.cleanXSS(info.getSubject()));</span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line">boardDao.updateBoard(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="2-JAVA-fILTER를-통해-XSS-방어"><a href="#2-JAVA-fILTER를-통해-XSS-방어" class="headerlink" title="2 JAVA fILTER를 통해 XSS 방어"></a>2 JAVA fILTER를 통해 XSS 방어</h2><ul><li><p>XSSFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XSSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> FilterConfig filterConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filterConfig = filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filterConfig = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        chain.doFilter(<span class="keyword">new</span> RequestWrapper((HttpServletRequest) request), response);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RequestWrapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestWrapper</span><span class="params">(HttpServletRequest servletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(servletRequest);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String parameter) &#123;</span><br><span class="line"> </span><br><span class="line">      String[] values = <span class="keyword">super</span>.getParameterValues(parameter);</span><br><span class="line">      <span class="keyword">if</span> (values==<span class="keyword">null</span>)  &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      <span class="keyword">int</span> count = values.length;</span><br><span class="line">      String[] encodedValues = <span class="keyword">new</span> String[count];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                 encodedValues[i] = cleanXSS(values[i]);</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">return</span> encodedValues;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">          String value = <span class="keyword">super</span>.getParameter(parameter);</span><br><span class="line">          <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">          <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String value = <span class="keyword">super</span>.getHeader(name);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cleanXSS</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">String returnVal = value;</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>).replaceAll(<span class="string">"&gt;"</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"\\("</span>, <span class="string">"&amp;#40;"</span>).replaceAll(<span class="string">"\\)"</span>, <span class="string">"&amp;#41;"</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"'"</span>, <span class="string">"&amp;#39;"</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"eval\\((.*)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span>, <span class="string">"\"\""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"script"</span>, <span class="string">""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"iframe"</span>, <span class="string">""</span>);</span><br><span class="line">returnVal = returnVal.replaceAll(<span class="string">"embed"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>web.xml 에 필터설정 추가<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.test.api.XSSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="3-lucy-라이브러리-사용"><a href="#3-lucy-라이브러리-사용" class="headerlink" title="3 lucy 라이브러리 사용"></a>3 lucy 라이브러리 사용</h2><p>네이버에서 만든 lucy-xss-filter<a href="https://github.com/naver/lucy-xss-servlet-filter">(링크)</a> 라이브러리가 있다.<br>링크에 접속하면 한국어로 친절히 설명되어있다.<br>pom.xml파일과 web.xml파일, lucy-xss-servlet-filter-rule.xml파일을 설정해주면 된다!<br>가장 사용하기 좋은 방법이 아닐까한다. 실제로 1번 방식으로 했다가 3번방식으로 바꿨다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/04/20/220420XSS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>input 공백 입력방지하는 가장 쉬운 방법</title>
      <link>https://sowon-dev.github.io/2022/04/19/220419trim/</link>
      <guid>https://sowon-dev.github.io/2022/04/19/220419trim/</guid>
      <pubDate>Tue, 19 Apr 2022 05:32:21 GMT</pubDate>
      
      <description>&lt;p&gt;input태그의 value가 공백일 경우 유효성체크를 해야한다.&lt;br&gt;머릿속에는 여러 가지 방법이 둥둥 떠올랐다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>input태그의 value가 공백일 경우 유효성체크를 해야한다.<br>머릿속에는 여러 가지 방법이 둥둥 떠올랐다.</p><a id="more"></a><p>정규표현식으로 아예 패턴을 만들까? 그냥 trim을 쓸까? validation 라이브러리를 쓸까?<br>이 중 가장 접근이 빠른 방법은 무엇일까?<br>프로젝트는 이미 제이쿼리를 쓰고 있었기에 그냥 trim을 쓰는 것이 에너지를 아껴 다른 코드를 더 집중해서 볼 수 있는 길이라고 판단했다. </p><h2 id="기존-코드"><a href="#기존-코드" class="headerlink" title="기존 코드"></a>기존 코드</h2><p>기존 코드는 value가 빈 값인지만 확인하기 때문에 공백을 입력할 경우 if 조건절에 걸리지 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button[data-role=submit]"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">      <span class="keyword">if</span>($(<span class="string">'input[name="nm"]'</span>).val() == <span class="string">''</span>)&#123;</span><br><span class="line">        toastr.info(<span class="string">'이름은 필수 입력입니다.'</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).val(<span class="string">''</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).focus();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="공백-입력시-유효성-체크-코드"><a href="#공백-입력시-유효성-체크-코드" class="headerlink" title="공백 입력시 유효성 체크 코드"></a>공백 입력시 유효성 체크 코드</h2><p>trim()만 넣어주면 해결!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button[data-role=submit]"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">      <span class="keyword">if</span>($(<span class="string">'input[name="nm"]'</span>).val().trim() == <span class="string">''</span>)&#123;</span><br><span class="line">        toastr.info(<span class="string">'이름은 필수 입력입니다.'</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).val(<span class="string">''</span>);</span><br><span class="line">        $(<span class="string">'input[name="nm"]'</span>).focus();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/jQuery/">jQuery</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/19/220419trim/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ECMAScript</title>
      <link>https://sowon-dev.github.io/2022/04/18/220418ECMAScript/</link>
      <guid>https://sowon-dev.github.io/2022/04/18/220418ECMAScript/</guid>
      <pubDate>Mon, 18 Apr 2022 02:49:53 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 고객사로부터 사이트의 달력이 제대로 작동되지 않는다는 연락을 받았다. 내 머신에서는 잘만 되는데 왜그럴까? 유심히 찾아보고있는데 팀장님께서 호환성 문제라고 말씀해주셨다.&lt;br&gt;요구사항을 구현하면서 Promise를 사용했는데 IE는 해당 기능을 지원하지 않아서 제대로 작동하지 않았던 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 고객사로부터 사이트의 달력이 제대로 작동되지 않는다는 연락을 받았다. 내 머신에서는 잘만 되는데 왜그럴까? 유심히 찾아보고있는데 팀장님께서 호환성 문제라고 말씀해주셨다.<br>요구사항을 구현하면서 Promise를 사용했는데 IE는 해당 기능을 지원하지 않아서 제대로 작동하지 않았던 것이다.</p><a id="more"></a><p>이번 프로젝트에서는 IE는 지원하지 않기로 이미 협의했는데 고객사 담당자가 모르고 있었던 것! 이번 기회에 팀장님이 ES6에 대해 설명해주셨는데 더 궁금해서 찾아봤다.</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>ES6이란 ECMAScript 2015 의 약어로 ES2015라고도 불린다.<br>European Computer Manufacturer’s Association(이하 ECMA)에서 js와 Node.js의 기초가 되는 범용 프로그래밍 언어인 ECMAScript를 제정한다. 즉, 스크립트 언어<a href="https://sowon-dev.github.io/2020/05/27/200528javai/#스크립트언어">(링크)</a>가 어떻게 생겨야 하는 지에 관한 기준이다.</p><ul><li>대표적인 ES6문법<ol><li>const변수와 let변수</li><li>화살표 함수</li><li>템플릿 리터럴:백틱을 사용해 문자열 내 변수 사용가능<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 화살표함수와 템플릿 리터럴 예시</span></span><br><span class="line"><span class="keyword">const</span> myIntro = <span class="function">(<span class="params">name, mobile</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`안녕하세요. 이름은 <span class="subst">$&#123;name&#125;</span>이고 제 연락처는 <span class="subst">$&#123;mobile&#125;</span>입니다.`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>프로미스(Promise)</li><li>객체 비구조화: 배열 또는 객체의 값을 새 변수에 쉽게 할당 가능<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 비구조화 예시</span></span><br><span class="line"><span class="keyword">let</span> &#123;name, mobile&#125; = user;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><br><br><br></p><h2 id="JavaScript와-ECMAScript-관계"><a href="#JavaScript와-ECMAScript-관계" class="headerlink" title="JavaScript와 ECMAScript 관계"></a>JavaScript와 ECMAScript 관계</h2><p>실상 두 용어는 혼용되곤 한다.<br>왜냐하면 JavaScript는 1996년에 만들어졌고 이를 표준화하기 위해 ECMAScript가 1997년에 만들어졌다. 그 후 ECMAScript를 준수하면서 JavaScript가 발전해왔다.<br>즉 서로가 서로를 바라보고 있는 셈이다.</p><p><br><br><br></p><h2 id="배운점"><a href="#배운점" class="headerlink" title="배운점"></a>배운점</h2><p>사실 어떤 기능을 사용하건 다양한 브라우저의 호환성 문제를 항상 먼저 확인해야한다.<br>크롬브라우저에서 된다고 모든 브라우저에서 다 되는 게 아니니까! 따라서 프로젝트기획때부터 어떤 브라우저 버전까지 지원할지를 명확히 하는 습관이 필요하다!<br>난중에 시니어가 된 후 프로젝트 계약시 꼭 호환성 문제를 특약으로 명시해야겠다.</p><p>그나저나 만약 호환성문제가 있다면 사용했던 ES6기능을 눈물을 머금고 싹 다 걷어내야하는걸까??<br>NOPE!<br>세상에는 천재들이 많고 그 천재들이 이미 호환성 문제를 해결해주는 라이브러리들을 만들어놨기때문이다.<br>예를 들어 IE에서 Promise를 사용하고 싶은 경우 bluebirdjs<a href="http://bluebirdjs.com/docs/getting-started.html">(링크)</a>라는 라이브러리를 사용하면 된다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://en.wikipedia.org/wiki/ECMAScript">https://en.wikipedia.org/wiki/ECMAScript</a></li><li><a href="https://www.educative.io/edpresso/what-is-ecmascript">https://www.educative.io/edpresso/what-is-ecmascript</a></li><li><a href="https://wormwlrm.github.io/2018/10/03/What-is-the-difference-between-javascript-and-ecmascript.html">https://wormwlrm.github.io/2018/10/03/What-is-the-difference-between-javascript-and-ecmascript.html</a></li><li><a href="https://www.freecodecamp.org/news/write-less-do-more-with-javascript-es6-5fd4a8e50ee2/">https://www.freecodecamp.org/news/write-less-do-more-with-javascript-es6-5fd4a8e50ee2/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/04/18/220418ECMAScript/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
