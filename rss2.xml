<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Fri, 29 Nov 2024 08:44:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[블로그]헥소테마에서 댓글기능 facebook에서 utterances로 변경하기</title>
      <link>https://sowon-dev.github.io/2024/11/28/241129utterances/</link>
      <guid>https://sowon-dev.github.io/2024/11/28/241129utterances/</guid>
      <pubDate>Thu, 28 Nov 2024 23:23:25 GMT</pubDate>
      
      <description>&lt;p&gt;헥소블로그에서 기존 제공하는 페이스북 댓글기능을 사용하고 있었는데 더이상 페이스북을 사용하지않아 삭제하고 싶었다.&lt;br&gt;그러다 우연히 전회사 팀장님 개발블로그에 깃헙아이디로 로그인하여 쓸 수 있는 댓글기능을 보고 유레카를 외쳤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>헥소블로그에서 기존 제공하는 페이스북 댓글기능을 사용하고 있었는데 더이상 페이스북을 사용하지않아 삭제하고 싶었다.<br>그러다 우연히 전회사 팀장님 개발블로그에 깃헙아이디로 로그인하여 쓸 수 있는 댓글기능을 보고 유레카를 외쳤다.</p><a id="more"></a><p>팀장님께 여쭤보니 손수 보기편한 링크를 주셔서 쉽게 적용가능했다. (감사합니다 팀장님!)</p><h1 id="참고한-블로그"><a href="#참고한-블로그" class="headerlink" title="참고한 블로그"></a>참고한 블로그</h1><ul><li><a href="https://velog.io/@outstandingboy/Github-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-%EB%8C%93%EA%B8%80-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0-ft.-Utterances">아웃스탠딩보이님의 블로그에 댓글 기능 추가하기 (ft. Utterances)</a></li><li><a href="https://baek.dev/post/4/">BAEKDEV님의 utterances를 블로그 댓글로 적용하기</a></li></ul><p>위 두 포스팅에서 친절하게 잘 설명되어있어 금방 적용가능하다.<br>다른 점이 있다면 헥소블로그테마는 리액트 jsx기반이다.</p><p><br><br><br></p><h1 id="댓글넣기"><a href="#댓글넣기" class="headerlink" title="댓글넣기"></a>댓글넣기</h1><p>comment.jsx 파일에서 utterances를 추가해줘야한다</p><ul><li>파일위치: layout/common/cpmment.jsx</li></ul><p>아래는 기존 코드를 주석처리하고 utteranc코드를 추가한 모습이다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; config, page, helper &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> &#123; __ &#125; = helper;</span><br><span class="line">        <span class="keyword">const</span> &#123; comment &#125; = config;</span><br><span class="line">        <span class="keyword">if</span> (!comment || <span class="keyword">typeof</span> comment.type !== <span class="string">'string'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line">            &lt;div class="card-content"&gt;</span><br><span class="line">                &#123;/*</span><br><span class="line">&lt;h3 class="title is-5"&gt;&#123;__('article.comments')&#125;&lt;/h3&gt; </span><br><span class="line">&#123;(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        let Comment = view.require('comment/' + comment.type);</span><br><span class="line">                        Comment = Comment.Cacheable ? Comment.Cacheable : Comment;</span><br><span class="line">                        return &lt;Comment config=&#123;config&#125; page=&#123;page&#125; helper=&#123;helper&#125; comment=&#123;comment&#125; /&gt;;</span><br><span class="line">                    &#125; catch (e) &#123;</span><br><span class="line">                        logger.w(`Icarus cannot load comment "$&#123;comment.type&#125;"`);</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)()&#125;</span><br><span class="line">*/&#125;</span><br><span class="line">&lt;script src="https://utteranc.es/client.js"</span><br><span class="line">repo="리포지토리 이름"</span><br><span class="line">issue-term="pathname"</span><br><span class="line">theme="github-light"</span><br><span class="line">crossorigin="anonymous"</span><br><span class="line">async&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="페이스북-연결해제하기"><a href="#페이스북-연결해제하기" class="headerlink" title="페이스북 연결해제하기"></a>페이스북 연결해제하기</h1><ul><li>파일위치: theme/hexo-theme-icarus/_config.yml</li></ul><p>위 파일에서 </p><ol><li><code>fb_app_id</code>를 검색하여 지워준다.</li><li><code>comment:</code>를 검색하여 facebook을 지우면 안된다. 지우게되면 comment자체가 비활성화된다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Hexo/">Hexo</category>
      
      
      <comments>https://sowon-dev.github.io/2024/11/28/241129utterances/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JAVA] Gmail SMTP 다중 메일 예제</title>
      <link>https://sowon-dev.github.io/2024/11/28/241129javax-mail/</link>
      <guid>https://sowon-dev.github.io/2024/11/28/241129javax-mail/</guid>
      <pubDate>Thu, 28 Nov 2024 17:10:28 GMT</pubDate>
      
      <description>&lt;p&gt;java.util.Properties 와 javax.mail 패키지를 이용하여 여러 사람에게 메일을 보내보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>java.util.Properties 와 javax.mail 패키지를 이용하여 여러 사람에게 메일을 보내보자.</p><a id="more"></a><h1 id="구글-gmail-인증을-위한-Class"><a href="#구글-gmail-인증을-위한-Class" class="headerlink" title="구글 gmail 인증을 위한 Class"></a>구글 gmail 인증을 위한 Class</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailAuthenticator</span> <span class="keyword">extends</span> <span class="title">Authenticator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String pw;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailAuthenticator</span><span class="params">(String id, String pw)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.pw = pw; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(id, pw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="구글-gmail-발송-코드"><a href="#구글-gmail-발송-코드" class="headerlink" title="구글 gmail 발송 코드"></a>구글 gmail 발송 코드</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">// 발신자정보</span></span><br><span class="line"><span class="keyword">private</span> String user = <span class="string">"test@gmail.com"</span>;</span><br><span class="line"><span class="keyword">private</span> String passwd = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Session mailSession;</span><br><span class="line"><span class="keyword">private</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.gmail.com"</span>);      <span class="comment">// smtp 서버 주소</span></span><br><span class="line">props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);        <span class="comment">// 자바 메일 API가 사용자 이름과 비밀번호를 제공하여 SMTP 서버에 인증을 시도하겠다는 의미(gmail은 무조건 true 고정)</span></span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.starttls.enable"</span>, <span class="string">"true"</span>);     <span class="comment">// TLS라는 보안인증서 활성화(SSL)(gmail은 무조건 true 고정)</span></span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.port"</span>, <span class="string">"587"</span>);                 <span class="comment">// gmail포트587, 네이버 메일포트465</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMail</span><span class="params">(List&lt;InternetAddress&gt; to, String subject, StringBuffer content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(to == <span class="keyword">null</span> || to.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//구글 계정 인증</span></span><br><span class="line">Authenticator authenticator = <span class="keyword">new</span> MailAuthenticator(user, passwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//세션</span></span><br><span class="line">mailSession = Session.getDefaultInstance(props, authenticator);</span><br><span class="line">MimeMessage msg = <span class="keyword">new</span> MimeMessage(mailSession);</span><br><span class="line"></span><br><span class="line"><span class="comment">//보내는사람</span></span><br><span class="line">InternetAddress from = <span class="keyword">new</span> InternetAddress();</span><br><span class="line">String fromName = <span class="string">"발신자 닉네임"</span>;</span><br><span class="line">from = <span class="keyword">new</span> InternetAddress(<span class="keyword">new</span> String(fromName.getBytes(charSet), <span class="string">"8859_1"</span>) + <span class="string">"&lt;발신자 구글 이메일@gmail.com&gt;"</span>);</span><br><span class="line">msg.setFrom(from);</span><br><span class="line"></span><br><span class="line"><span class="comment">//받는사람(여러명)</span></span><br><span class="line">InternetAddress[] address = <span class="keyword">new</span> InternetAddress[to.size()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; to.size(); i++) &#123;</span><br><span class="line">address[i] = to.get(i);</span><br><span class="line">&#125;</span><br><span class="line">msg.setRecipients(Message.RecipientType.TO, address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//제목</span></span><br><span class="line">msg.setSubject(subject, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//내용</span></span><br><span class="line">msg.setContent(content.toString(), <span class="string">"text/html; charset=UTF-8"</span>); <span class="comment">// HTML 형식</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//보내는날짜</span></span><br><span class="line">msg.setSentDate(<span class="keyword">new</span> java.util.Date());</span><br><span class="line"></span><br><span class="line"><span class="comment">//전송</span></span><br><span class="line">Transport.send(msg);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2024/11/28/241129javax-mail/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JAVA] java.util.properties 개념과 예시, properties파일과 차이점</title>
      <link>https://sowon-dev.github.io/2024/11/28/241129java-util-properties/</link>
      <guid>https://sowon-dev.github.io/2024/11/28/241129java-util-properties/</guid>
      <pubDate>Thu, 28 Nov 2024 17:05:27 GMT</pubDate>
      
      <description>&lt;p&gt;레거시를 분석하던 중 이메일전송 서비스에서 java.util.Properties 객체를 발견했다.&lt;br&gt;처음보는 객체라서 무엇인지 확인해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>레거시를 분석하던 중 이메일전송 서비스에서 java.util.Properties 객체를 발견했다.<br>처음보는 객체라서 무엇인지 확인해보았다.</p><a id="more"></a><h1 id="java-util-Properties"><a href="#java-util-Properties" class="headerlink" title="java.util.Properties"></a>java.util.Properties</h1><ul><li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html">오라클 java.util.Properties</a><br>오라클문서에 따르면 Properties객체는 (String, String)을 가진 객체로 Hashtable에서 상속했다.<br>따라서 Hashtable의 메서드인 put(), putAll()을 사용할 수 있으나 setProperty() 사용을 권장한다.<br>그 이유는 put(), putAll()에는 String이외의 값이 들어갈 수 있기 때문에 에러 발생활률이 높다.</li></ul><p><br><br><br></p><h1 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h1><ul><li><p>장점</p><table><thead><tr><th><strong>장점</strong></th><th><strong>설명</strong></th></tr></thead><tbody><tr><td><strong>간단한 키-값 관리</strong></td><td>문자열 기반의 키-값 쌍을 쉽게 관리할 수 있습니다.</td></tr><tr><td><strong>파일 입출력 지원</strong></td><td><code>.properties</code> 파일을 간편하게 읽고 쓸 수 있습니다.</td></tr><tr><td><strong>기본값 제공 기능</strong></td><td>다른 <code>Properties</code> 객체를 기본값으로 설정할 수 있어 유연합니다.</td></tr><tr><td><strong>국제화 (i18n) 지원</strong></td><td>다국어 지원을 위한 리소스 번들과 통합이 용이합니다.</td></tr><tr><td><strong>동적 설정 변경</strong></td><td>실행 중에도 설정 값을 동적으로 변경할 수 있습니다.</td></tr></tbody></table></li><li><p>단점</p><table><thead><tr><th><strong>단점</strong></th><th><strong>설명</strong></th></tr></thead><tbody><tr><td><strong>문자열 기반 한계</strong></td><td>복잡한 데이터 구조를 저장하기 어렵고 문자열로만 저장됩니다.</td></tr><tr><td><strong>보안 취약성</strong></td><td>설정 파일이 평문으로 저장되므로 민감한 정보 노출 위험이 있습니다.</td></tr><tr><td><strong>데이터 형 변환 필요</strong></td><td>숫자, 불리언 등 다른 데이터 타입은 변환 코드가 필요합니다.</td></tr><tr><td><strong>스레드 안전성 부족</strong></td><td>스레드 안전하지 않아 여러 스레드에서 접근 시 동기화가 필요합니다.</td></tr></tbody></table></li></ul><p><br><br><br></p><h1 id="사용예시"><a href="#사용예시" class="headerlink" title="사용예시"></a>사용예시</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//선언</span></span><br><span class="line"><span class="keyword">private</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="comment">//입력 </span></span><br><span class="line">props.put(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.gmail.com"</span>);      <span class="comment">// smtp 서버 주소</span></span><br><span class="line">props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);        <span class="comment">// 자바 메일 API가 사용자 이름과 비밀번호를 제공하여 SMTP 서버에 인증을 시도하겠다는 의미(gmail은 무조건 true 고정)</span></span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.starttls.enable"</span>, <span class="string">"true"</span>);     <span class="comment">// TLS라는 보안인증서 활성화(SSL)(gmail은 무조건 true 고정)</span></span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.port"</span>, <span class="string">"587"</span>);                 <span class="comment">// gmail포트587, 네이버 메일포트465</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력</span></span><br><span class="line">properties.getProperty(<span class="string">"mail.smtp.host"</span>);</span><br><span class="line">properties.getProperty(<span class="string">"mail.smtp.starttls.enable"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//아웃풋</span></span><br><span class="line">smtp.gmail.com</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="그동안-왜-몰랐을까"><a href="#그동안-왜-몰랐을까" class="headerlink" title="그동안 왜 몰랐을까?"></a>그동안 왜 몰랐을까?</h1><p>속성들 관리를 <code>.properties</code>에서 했기때문에 몰랐었다!</p><p><br><br><br></p><h2 id="사용예시-1"><a href="#사용예시-1" class="headerlink" title="사용예시"></a>사용예시</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 스프링부트인 경우 application.properties에 동일하게 선언</span><br><span class="line">mail.smtp.host=smtp.gmail.com         # smtp 서버 주소</span><br><span class="line">mail.smtp.auth=true                   # 자바 메일 API가 사용자 이름과 비밀번호를 제공하여 SMTP 서버에 인증을 시도하겠다는 의미</span><br><span class="line">mail.smtp.starttls.enable=true        # TLS라는 보안 인증서 활성화 (SSL)</span><br><span class="line">mail.smtp.port=587                    # gmail 포트 587, 네이버 메일 포트 465</span><br><span class="line"></span><br><span class="line">// 사용</span><br><span class="line">@Value("\$&#123;mail.smtp.port:465&#125;") //만약 properties에 지정된 값이 없을 경우 465</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="java-util-Properties-클래스와-properties주요-차이점"><a href="#java-util-Properties-클래스와-properties주요-차이점" class="headerlink" title="java.util.Properties 클래스와 .properties주요 차이점:"></a>java.util.Properties 클래스와 <code>.properties</code>주요 차이점:</h1><ol><li>파일과 코드의 역할:<ul><li><code>.properties</code> 파일: 외부 파일로서 애플리케이션의 설정 정보를 저장합니다.</li><li><code>java.util.Properties</code> 클래스: 이 파일을 읽고 쓰기 위한 자바의 내부 메모리 표현입니다.</li></ul></li><li>데이터 접근:<ul><li>파일: 사람이 읽기 쉽고, 외부에서 직접 수정할 수 있습니다.</li><li>클래스: 프로그램 내에서 동적으로 프로퍼티를 읽거나 설정할 수 있습니다.</li></ul></li><li>동적 변경:<ul><li>파일: 파일을 수정하고 저장해야만 값이 바뀝니다.</li><li>클래스: 런타임에 setProperty() 메서드로 변경이 가능합니다.</li></ul></li><li>로드 및 저장:<ul><li><code>.properties</code> 파일은 주로 애플리케이션 시작 시 설정값을 불러올 때 사용됩니다.</li><li>Properties 객체는 메모리 내에서 이 설정 값을 관리하며, 필요 시 다시 파일에 저장할 수도 있습니다.</li></ul></li></ol><p>이외에도 싱글톤패턴일때 java.util.Properties를 사용한다고한다.<br>프로젝트에 적합한 방법을 선택하면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2024/11/28/241129java-util-properties/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[오라클]GROUP BY쿼리를 PIVOT쿼리로 바꿔보자</title>
      <link>https://sowon-dev.github.io/2024/10/22/241023oracle-query-pivot/</link>
      <guid>https://sowon-dev.github.io/2024/10/22/241023oracle-query-pivot/</guid>
      <pubDate>Tue, 22 Oct 2024 16:10:17 GMT</pubDate>
      
      <description>&lt;p&gt;GORUP BY로 해결하려고 노력했지만 잘 되지않아서 PIVOT 쿼리를 처음 사용하게 되었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>GORUP BY로 해결하려고 노력했지만 잘 되지않아서 PIVOT 쿼리를 처음 사용하게 되었다.</p><a id="more"></a><h1 id="PIVOT-VS-GROUP-BY"><a href="#PIVOT-VS-GROUP-BY" class="headerlink" title="PIVOT VS GROUP BY"></a>PIVOT VS GROUP BY</h1><table><thead><tr><th align="center"></th><th align="left">GROUP BY</th><th align="left">PIVOT</th></tr></thead><tbody><tr><td align="center">목적</td><td align="left">특정 열을 기준으로 그룹화하여 각 그룹에 대해 집계(합계, 평균, 최대값 등)된 결과를 계산</td><td align="left">데이터를 열로 변환하여 요약된 데이터를 테이블 형태로 표현</td></tr><tr><td align="center">결과</td><td align="left">각 그룹별로 집계된 값이 행 단위로 출력</td><td align="left">행 데이터를 열로 변환하여 각 카테고리(예: 부서, 제품 종류 등)에 대한 요약 정보를 한눈에 출력</td></tr><tr><td align="center">사용 용도</td><td align="left">열로 변환하는 것이 아니라, 그룹별로 집계한 데이터를 행으로 출력할때 사용</td><td align="left">특정 컬럼 값을 기준으로 데이터를 회전(pivot) 시켜 집계한 값을 여러 열로 표현할때 사용</td></tr></tbody></table><p><br><br><br></p><h1 id="내-코드-GROUP-BY-사용"><a href="#내-코드-GROUP-BY-사용" class="headerlink" title="내 코드: GROUP BY 사용"></a>내 코드: GROUP BY 사용</h1><p>요구사항은 학생별로 과목코드100,200,300의 점수와 세 과목의 점수합계를 보고싶었다.<br>그래서 먼저 그룹핑을 떠올렸다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">A.YR     </span><br><span class="line">, A.USERNO   </span><br><span class="line">, A.USERNM                                     </span><br><span class="line">, <span class="keyword">SUBSTR</span>(A.IDENTITY_NO, <span class="number">1</span>, <span class="number">6</span>) <span class="keyword">AS</span> BRDT<span class="comment">/*생년월일*/</span>     </span><br><span class="line">, NVL(<span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> C.TEST_CD = <span class="string">'100'</span> <span class="keyword">THEN</span> C.SCR <span class="keyword">END</span>),<span class="number">0</span>) <span class="keyword">AS</span> SCORE1 <span class="comment">/* TEST_CD가 100인 점수 */</span></span><br><span class="line">, NVL(<span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> C.TEST_CD = <span class="string">'200'</span> <span class="keyword">THEN</span> C.SCR <span class="keyword">END</span>),<span class="number">0</span>) <span class="keyword">AS</span> SCORE2 <span class="comment">/* TEST_CD가 200인 점수 */</span></span><br><span class="line">, NVL(<span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> C.TEST_CD = <span class="string">'300'</span> <span class="keyword">THEN</span> C.SCR <span class="keyword">END</span>),<span class="number">0</span>) <span class="keyword">AS</span> SCORE3 <span class="comment">/* TEST_CD가 300인 점수 */</span></span><br><span class="line">, D.TOTAL_SCR <span class="comment">/*산출점수*/</span></span><br><span class="line"><span class="keyword">FROM</span> EE_USER_INFO A  </span><br><span class="line"><span class="keyword">JOIN</span> EE_TEST_SCORE C    </span><br><span class="line"><span class="keyword">ON</span> A.YR = C.YR   </span><br><span class="line"><span class="keyword">AND</span> A.USERNO = C.USERNO</span><br><span class="line"><span class="keyword">JOIN</span> EE_TEST_RESLUT D</span><br><span class="line"><span class="keyword">ON</span> A.YR = D.YR</span><br><span class="line"><span class="keyword">AND</span> A.USERNO = D.USERNO</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> A.YR, A.USERNO, A.USERNM, <span class="keyword">SUBSTR</span>(A.IDENTITY_NO), <span class="number">1</span>, <span class="number">6</span>), D.TOTAL_SCR</span><br></pre></td></tr></table></figure><p>여기서 문제는 TEST_CD가 100,200,300으로 고정되지 않았다는 것이다.<br>TEST_CD가 공통코드로 이루어져있어서 연도에 따라 특정연도에는  400,500,600을 쓸 수도 있었다.<br>연도별 과목코드 3개만 추출하면 되는데… 난감한 상황!<br>이럴때는 어떻게 해야할까? </p><p>팀장님은 PIVOT을 사용해보라고 조언해주셨다.</p><p><br><br><br></p><h1 id="잠깐-GROUP-BY-절에-집계함수를-안-넣어도-되는지"><a href="#잠깐-GROUP-BY-절에-집계함수를-안-넣어도-되는지" class="headerlink" title="잠깐) GROUP BY 절에 집계함수를 안 넣어도 되는지?"></a>잠깐) GROUP BY 절에 집계함수를 안 넣어도 되는지?</h1><p><code>GROUP BY</code> 절에는 집계 함수에 포함되지 않은 모든 필드 또는 표현식을 포함해야한다.<br>CASE WHEN과 MAX 함수는 그룹화된 데이터에 대해 집계를 수행하는 부분이므로 <code>GROUP BY</code> 절에 포함되지 않아도 된다.<br>집계되지 않는 필드들은 각 그룹에 대해 고유한 값을 가져야 하므로, 그룹핑 조건으로 추가되어야 한다. </p><p><br><br><br></p><h1 id="팀장님-코드-PIVOT-사용"><a href="#팀장님-코드-PIVOT-사용" class="headerlink" title="팀장님 코드 : PIVOT 사용"></a>팀장님 코드 : PIVOT 사용</h1><p>팀장님 수정해주신 쿼리는 아래와 같다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    A.YR,</span><br><span class="line">    A.USERNO,</span><br><span class="line">    A.USERNM,</span><br><span class="line">    <span class="keyword">SUBSTR</span>(A.IDENTITY_NO, <span class="number">1</span>, <span class="number">6</span>) <span class="keyword">AS</span> BRDT,    <span class="comment">/* 생년월일 */</span></span><br><span class="line">    A.SCR1,          </span><br><span class="line">    A.SCR2,          </span><br><span class="line">    A.SCR3,          </span><br><span class="line">    D.TOTAL_SCR  <span class="comment">/*산출점수*/</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        A.YR,</span><br><span class="line">        A.USERNO,</span><br><span class="line">        TO_CHAR(RANK_1) <span class="keyword">AS</span> SCR1,</span><br><span class="line">        TO_CHAR(RANK_2) <span class="keyword">AS</span> SCR2, </span><br><span class="line">        TO_CHAR(RANK_3) <span class="keyword">AS</span> SCR3</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">            A.YR</span><br><span class="line">            , A.USERNO           </span><br><span class="line">            , A.SCR            </span><br><span class="line">            , <span class="string">'RANK'</span> || <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> A.YR, A.USERNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.TEST_CD) <span class="keyword">AS</span> RANK_CD</span><br><span class="line">        <span class="keyword">FROM</span> </span><br><span class="line">            EE_TEST_SCORE A</span><br><span class="line">        <span class="keyword">WHERE</span> </span><br><span class="line">            A.YR = <span class="comment">#&#123;YR&#125;</span></span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">            A.USERNO</span><br><span class="line">)</span><br><span class="line"> <span class="keyword">PIVOT</span> (</span><br><span class="line">    <span class="keyword">SUM</span>(SCR) </span><br><span class="line">    <span class="keyword">FOR</span> RANK_CD <span class="keyword">IN</span> (</span><br><span class="line">            <span class="string">'RANK1'</span> <span class="keyword">AS</span> RANK_1,</span><br><span class="line">            <span class="string">'RANK2'</span> <span class="keyword">AS</span> RANK_2,</span><br><span class="line">            <span class="string">'RANK3'</span> <span class="keyword">AS</span> RANK_3</span><br><span class="line">        )</span><br><span class="line">)</span><br><span class="line">) A</span><br><span class="line"><span class="keyword">JOIN</span> EE_TEST_RESLUT D</span><br><span class="line"><span class="keyword">ON</span> A.YR = D.YR</span><br><span class="line"><span class="keyword">AND</span> A.USERNO = D.USERNO</span><br></pre></td></tr></table></figure><p>PIVOT을 사용하여 각 과목 점수를 가로로 변환하고, 최종적으로 합계 점수는 다른 테이블(EE_TEST_RESLUT)에서 가져와 출력했다.</p><p>쿼리결과 예시는 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YRUSERNOUSERNMBRDTSCORE1SCORE2SCORE3TOTAL_SCR1</span><br><span class="line">2024101John900101908570245</span><br><span class="line">2024102Alice920202958060235</span><br><span class="line">2024103Bob880303887865231</span><br></pre></td></tr></table></figure><p>두 쿼리는 동일한 데이터를 출력하지만,<br>PIVOT 쿼리는 데이터 피봇팅을 사용해 TEST_CD 값에 따라 자동으로 점수를 열로 변환하므로 코드가 훨씬 간결하고 명확하다.</p><p>아는 것만 보인다고…<br>PIVOT과도 친해지자.</p><p><br><br><br></p><h1 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h1><ul><li>팀장님 지식</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      
      <comments>https://sowon-dev.github.io/2024/10/22/241023oracle-query-pivot/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>오라클DB에서 프로시저 출력값 보는 방법</title>
      <link>https://sowon-dev.github.io/2024/10/22/241023oracleDB-call-procedure/</link>
      <guid>https://sowon-dev.github.io/2024/10/22/241023oracleDB-call-procedure/</guid>
      <pubDate>Tue, 22 Oct 2024 15:46:18 GMT</pubDate>
      
      <description>&lt;p&gt;프로시저를 작성하다가 오라클DB에서 바로 출력값을 보고 싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로시저를 작성하다가 오라클DB에서 바로 출력값을 보고 싶었다.</p><a id="more"></a><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SERVEROUTPUT <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">    V_RSLT <span class="built_in">VARCHAR</span>(<span class="number">1</span>);</span><br><span class="line">    V_MSG VARCHAR(1000);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   PKG_TEST.P_TEST</span><br><span class="line">  (</span><br><span class="line">    IN_YR   =&gt; <span class="string">'2024'</span></span><br><span class="line">  , IN_CD   =&gt; <span class="string">'100110'</span></span><br><span class="line">  , IN_NM   =&gt; <span class="string">'나혜석'</span></span><br><span class="line">  , O_RSLT  =&gt; V_RSLT</span><br><span class="line">  , O_MSG   =&gt; V_MSG</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  DBMS_OUTPUT.PUT_LINE('RESULT: '|| V_RSLT);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE('MSG: '|| V_MSG);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>기본적으로 Oracle 서버는 DBMS_OUTPUT.PUT_LINE에서 생성된 메시지를 자동으로 보여주지 않는다.<br>이를 활성화하기 위해 <code>SET SERVEROUTPUT ON</code>을 선언해줘야한다.<br><code>SET SERVEROUTPUT ON</code>이 없으면 PL/SQL 블록에서 출력된 메시지는 콘솔에 나타나지 않는다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      
      <comments>https://sowon-dev.github.io/2024/10/22/241023oracleDB-call-procedure/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BookReview]모두의 네트워크 기초 BY 서지영</title>
      <link>https://sowon-dev.github.io/2024/05/18/240519bookreview001/</link>
      <guid>https://sowon-dev.github.io/2024/05/18/240519bookreview001/</guid>
      <pubDate>Sat, 18 May 2024 21:08:34 GMT</pubDate>
      
      <description>&lt;p&gt;네트워크가 부족하다고 생각해서 단편적인 유튜브 지식이 아닌 연결된 책에서 정보를 찾고싶었다.&lt;br&gt;그렇게 읽게된 10일만에 모두의 네트워크!&lt;br&gt;각 장마다 목표가 있어서 읽고 시작하면 훨씬 도움이 되며 그림이 많아서 이해가 쉽고 설명이 잘되어있다.&lt;br&gt;연습문제도 있어서 스스로 학습엔 최고!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>네트워크가 부족하다고 생각해서 단편적인 유튜브 지식이 아닌 연결된 책에서 정보를 찾고싶었다.<br>그렇게 읽게된 10일만에 모두의 네트워크!<br>각 장마다 목표가 있어서 읽고 시작하면 훨씬 도움이 되며 그림이 많아서 이해가 쉽고 설명이 잘되어있다.<br>연습문제도 있어서 스스로 학습엔 최고!</p><a id="more"></a><h1 id="진짜-10일만에-읽을-수-있다"><a href="#진짜-10일만에-읽을-수-있다" class="headerlink" title="진짜 10일만에 읽을 수 있다."></a>진짜 10일만에 읽을 수 있다.</h1><p>총 9장으로 구성되어있고 총 225장이다. 가벼운 단편소설수준이라서 차근차근 읽기만 하면 된다.<br>10일이기때문에 작심3일 3번반복하다보면 어느샌가 다 읽게 된다.</p><p><br><br><br></p><h1 id="추천학습방법"><a href="#추천학습방법" class="headerlink" title="추천학습방법"></a>추천학습방법</h1><p>학습서이기때문에 학습방법이 중요하다.<br>나는 아래와 같이 진행했다.</p><ol><li>하루에 한장읽기</li><li>목표읽기 -&gt; 내용 정독 -&gt; 복습하기(빈칸채우기)</li></ol><p><img src="/img/240519_145206907_01.jpg" alt="목표"></p><p>각 장마다 목표가 있어서 읽고 시작하면 훨씬 도움이 된다.</p><p>각 내용에는 그림이 많아서 이해가 쉽고 설명이 잘되어있다.<br>다만, 케이블등의 실사 사진은 흑백이 아닌 컬러였으면 더 좋았을듯하다.</p><p><img src="/img/240519_145206907_02.jpg" alt="빈칸퀴즈"></p><p>마지막에는 복습을 위한 빈칸퀴즈가 있다.<br>빈칸퀴즈가 있으니 중요 단어가 쏙쏙 정리된다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/Review/">Review</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/BookReview/">BookReview</category>
      
      
      <comments>https://sowon-dev.github.io/2024/05/18/240519bookreview001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SVN에서 사내 GITLAB으로 변경하기(ft.migration)</title>
      <link>https://sowon-dev.github.io/2024/04/02/240403svn-to-git/</link>
      <guid>https://sowon-dev.github.io/2024/04/02/240403svn-to-git/</guid>
      <pubDate>Tue, 02 Apr 2024 20:29:32 GMT</pubDate>
      
      <description>&lt;p&gt;현재 SVN을 사용하고있는데 사내 GITLAB서버로 변경하는 업무를 맡게되었다.&lt;br&gt;GITHUB는 익숙하지만 GITLAB은 익숙하지않아 초반에 삽질한 시간이 있었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>현재 SVN을 사용하고있는데 사내 GITLAB서버로 변경하는 업무를 맡게되었다.<br>GITHUB는 익숙하지만 GITLAB은 익숙하지않아 초반에 삽질한 시간이 있었다.</p><a id="more"></a><h1 id="1-gitlab에-new-프로젝트-생성"><a href="#1-gitlab에-new-프로젝트-생성" class="headerlink" title="1 gitlab에 new 프로젝트 생성"></a>1 gitlab에 new 프로젝트 생성</h1><p>사내 gitlab 원격서버에 신규 프로젝트를 생성한다.</p><p><br><br><br></p><h1 id="2-gitlab에-SSH키를-등록하기"><a href="#2-gitlab에-SSH키를-등록하기" class="headerlink" title="2 gitlab에 SSH키를 등록하기"></a>2 gitlab에 SSH키를 등록하기</h1><p>SSH 키가 등록되지않으면 COMMIT, PUSH등을 못한다.</p><ol><li><p>SSH 키 생성은 cmd / gitbash 에서 진행가능하다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"sowon-dev@example.com"</span></span><br></pre></td></tr></table></figure><p>암호 설정은 선택 사항으로 암호설정을 원하지 않는다면 Enter키를 계속 누르면 된다.</p></li><li><p>사용자 홈 디렉토리의 .ssh 폴더에 id_rsa (개인 키) 및 id_rsa.pub (공개 키) 총 2개의 파일이 생성된다.</p></li><li><p>SSH 키 읽기    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>위 명령어로 공개키를 콘솔을 통해서 확인할 수 있다.<br>복사해서 사내 gitlab 원격서버에 신규 프로젝트에서 계정별로 <code>SSH 키 등록</code>에 붙여넣는다.</p></li></ol><p><br><br><br></p><h1 id="3-로컬에-gitlab환경조성"><a href="#3-로컬에-gitlab환경조성" class="headerlink" title="3 로컬에 gitlab환경조성"></a>3 로컬에 gitlab환경조성</h1><p>gitlab의 code에서 <code>Clone with HTTP</code>로 http://아이피/testprjt.git 를 clone하여 로컬에 환경 조성</p><p><br><br><br></p><h1 id="4-SVN-커밋-살리기위한-user-txt-파일-만들기"><a href="#4-SVN-커밋-살리기위한-user-txt-파일-만들기" class="headerlink" title="4 SVN 커밋 살리기위한 user.txt 파일 만들기"></a>4 SVN 커밋 살리기위한 user.txt 파일 만들기</h1><p>원하는 곳에 users.txt 파일에 다음과 같은 내용을 작성한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user1 &#x3D; user1 &lt;user1@email.com&gt;</span><br><span class="line">user2 &#x3D; user2 &lt;user2@email.com&gt;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="5-svn을-git으로-clone하기"><a href="#5-svn을-git으로-clone하기" class="headerlink" title="5 svn을 git으로 clone하기"></a>5 svn을 git으로 clone하기</h1><pre><code class="bash">git svn <span class="built_in">clone</span> &lt;SVN 저장소 URL&gt; --no-metadata -A D:/workspace/svn-gitlab/users.txt D:/workspace/svn-gitlab<span class="built_in">cd</span> D:/workspace/svn-gitlabgit remote add origin &lt;gitlab의 원격 저장소 URL&gt;git pull origin main --allow-unrelated-historiesgit push -u origin main</code></pre><p>여기서 절대경로 D:/workspace/svn-gitlab는 gitlab 로컬저장소경로이다.</p><p><br><br><br></p><h1 id="회사에선-왜-GitLab을-쓰라고-할까"><a href="#회사에선-왜-GitLab을-쓰라고-할까" class="headerlink" title="회사에선 왜 GitLab을 쓰라고 할까?"></a>회사에선 왜 GitLab을 쓰라고 할까?</h1><p>가장 근본적인 질문이었다.<br>SVN은 중앙집중 버전 관리 시스템이고 Git은 분산 버전 관리 시스템이다.<br>중앙집중 버전 관리 시스템은 편하지만 commit한 내용에 실수가 있을 시에 서버에(다른 개발자에게) 바로 영향을 미치게 되고 만약 중앙 서버에 문제가 생기면 협업 불가능해진다.<br>그렇다면 익숙한 GitHub보다 왜 GitLab을 사용하라고 하는 것일까?<br>GitHub는 소스가 GitHub에 있다보니 보안에 취약하다.<br>따라서, 아예 내부에서 관리하는 GitLab이나 SVN을 고객사는 더 선호한다.</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://sowon-dev.github.io/2020/12/27/201228svn/">SVN과 GIT 차이 포스팅</a></li><li><a href="https://scvspace.kr/1385">Gitlab으로 소스 이관하기(SVN 혹은 신규생성)</a></li><li><a href="https://garve32.tistory.com/43">SVN을 Git으로 Migration 하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Version-control/">Version control</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/GIT/">GIT</category>
      
      <category domain="https://sowon-dev.github.io/tags/SVN/">SVN</category>
      
      
      <comments>https://sowon-dev.github.io/2024/04/02/240403svn-to-git/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SSO(Single Sign-On) 프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2024/04/02/240403prjtreview11/</link>
      <guid>https://sowon-dev.github.io/2024/04/02/240403prjtreview11/</guid>
      <pubDate>Tue, 02 Apr 2024 20:23:06 GMT</pubDate>
      
      <description>&lt;p&gt;이번 프로젝트에서는 개인정보관리페이지(마이페이지)를 주 업무로 맡았다.&lt;br&gt;편리함과 어려움이 공존한 프로젝트였는데 아래와 같다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번 프로젝트에서는 개인정보관리페이지(마이페이지)를 주 업무로 맡았다.<br>편리함과 어려움이 공존한 프로젝트였는데 아래와 같다.</p><a id="more"></a><p>편리함</p><ol><li>스프링부트의 편리함에 감탄했다. 작업하는 동안 서버때문에 불편한 일이 거의 없었다.</li><li>Thymeleaf 간편함에 감탄했다. JSTL과 EL사용하던데 손에 익어서 초반에 조금 버벅거렸지만 이내 Thymeleaf의 가독성 높은 표현방법에 반해버렸다.</li></ol><p>어려움</p><ol><li>이번 작업은 꽤나 어려웠는데 그 이유는 클라이언트의 비협조로 레거시의 조각조각난 쿼리를 받아서 작업해야했기 때문이다. 테이블과 컬럼, 데이터도 알려주지않아서, 테이블과 프로시저를 상상하고 유추하면서 작업을 진행해야했다. 덕분에 정보가 불충분한 상황에서도 요구사항대로 기능을 구현하는 능력을 키울 수 있었다. </li></ol><p>이렇게 프로젝트 경험치가 차곡차곡 쌓이고 있다. 좋은 거맞지..?!</p><p><br><br><br></p><h1 id="keep"><a href="#keep" class="headerlink" title="keep"></a>keep</h1><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li>Thymeleaf 적극 활용<ul><li><code>th:block</code> 를 사용하여 논리적 코드 블록화하여 가독성 높였으며 Thymeleaf만의 formatting utilities를 사용하여 편리하게 작업할 수 있었다.<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//자주 사용했던 formatting utilities</span><br><span class="line">$&#123;#strings.isEmpty()&#125;</span><br><span class="line">$&#123;#calendars.format()&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>사용자별 권한별 바로가기 메뉴 구현<ul><li>바로가기 메뉴를 만드는데 사용자별로 원하는 메뉴들을 순서대로 지정할 수 있고 사용자가 자신의 바로가기메류를 지정하지않았다면 시스템관리자가 권한(role)별로 설정해놓은 바로가기를 순서대로 보여주는 것을 구현했다. 순서대로를 어떻게 구현할 지 고민했는데 Array를 사용해서 클릭 순서대로 <code>Array.push()</code>했고 제거시 해당 index의 요소를 삭제하면서 Array 순서가 그대로 유지될 수 있도록 구현했다.</li></ul></li><li>타이머 만들기: setInterval을 활용하여 3분 타이머 구현<ul><li>오랜만에 함수로 만드니까 재밌었다.</li></ul></li><li>jQuery 비중을 줄이고 Vanilla JS 사용<ul><li>지난 프로젝트부터 의식적으로 jQuery 사용을 줄이고 Vanilla JS를 더 많이 사용했다. 바닐라JS는 제이쿼리보다 코드는 길어지지만 제이쿼리API를 다녀오지않아도 되기에 속도가 빠르다. 이미 손에 익어버린 jQuery를 의식적으로 바닐라JS를 사용하려니 처음에는 버벅거렸지만 프로젝트 갈수록 코딩속도가 붙었다. 다음 프로젝트도 바닐라JS를 의식적으로 사용해야겠다.</li></ul></li><li>SVN 저장소에서 GitLab으로 마이그레이션하기<ul><li>단독으로 마이그레이션을 담당한 것이 처음이라서 재밌었다.</li><li>관련 포스팅: <a href="https://sowon-dev.github.io/2024/04/02/240403svn-to-git/">SVN에서 사내 GitLab으로 변경하기(ft.migration)</a></li></ul></li></ol><p><br><br><br></p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>개선이 필요하다고 생각되는 부분</p><ol><li>오라클 DB 프로시저 mybatis와 연동하여 사용법<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="callSampleProcedure" statementType="CALLABLE"&gt;</span><br><span class="line">  &#123; call SAMPLE_PROCEDURE(</span><br><span class="line">      <span class="comment">#&#123;param1, mode=IN, jdbcType=VARCHAR&#125;,</span></span><br><span class="line">      <span class="comment">#&#123;param2, mode=OUT, jdbcType=VARCHAR&#125;</span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; parameterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">parameterMap.put(<span class="string">"param1"</span>, <span class="string">"input_value"</span>);</span><br><span class="line">parameterMap.put(<span class="string">"param2"</span>, <span class="keyword">null</span>); <span class="comment">// Output 파라미터도 선언해줘야</span></span><br></pre></td></tr></table></figure><p>statementType=”CALLABLE” 을 사용하여 프로시저를 호출해야했다. 그걸 모르고 얼마나 삽질했는지… 또한 out파라미터도 null로 선언해줘야한다.</p><p><br><br><br></p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>네트워크 공부를 하면서 겸사겸사 네트워크 관리사2급를 취득할 것이다.<ul><li>ONE ACTION: 24년 제03회 필기신청 2024-07-26, 필기응시 2024-08-25, 실기 2024-09-29 최종 합격발표 2024-10-08</li></ul></li><li>Oracle DB 공부</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2024/04/02/240403prjtreview11/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[GIT]reset과 revert의 차이</title>
      <link>https://sowon-dev.github.io/2024/03/08/240309-reset-vs-revert/</link>
      <guid>https://sowon-dev.github.io/2024/03/08/240309-reset-vs-revert/</guid>
      <pubDate>Fri, 08 Mar 2024 07:23:52 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 타 팀의 꼬여버린 커밋을 해결하면서 reset과 revert를 사용했다.&lt;br&gt;오랜만에 쓰다보니 기억이 잘 안나서 예전에 쓴 포스팅를 봤는데 내용이 부족해서 보완을 해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 타 팀의 꼬여버린 커밋을 해결하면서 reset과 revert를 사용했다.<br>오랜만에 쓰다보니 기억이 잘 안나서 예전에 쓴 포스팅를 봤는데 내용이 부족해서 보완을 해봤다.</p><a id="more"></a><h1 id="reset과-revert의-차이"><a href="#reset과-revert의-차이" class="headerlink" title="reset과 revert의 차이"></a>reset과 revert의 차이</h1><ul><li>revert: 커밋을 취소한다고 커밋을 남기며 되돌림.</li><li>reset: 커밋을 작성한 걸 아예 되돌림. 이전 커밋기록은 삭제.<ul><li>프로덕션에 올라간 커밋은 reset을 하면 안된다. 히스토리가 안 남기때문.</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="left">로그</th><th align="left">추천 사용상황</th></tr></thead><tbody><tr><td align="center">reset</td><td align="left">생성X</td><td align="left">로컬 저장소에서 작업시 사용 추천</td></tr><tr><td align="center">revert</td><td align="left">생성O</td><td align="left">원격저장소에 이미 올렸을때 사용 추천</td></tr></tbody></table><p><br><br></p><h1 id="취소-기록을-남기면서-커밋취소하는-revert"><a href="#취소-기록을-남기면서-커밋취소하는-revert" class="headerlink" title="취소 기록을 남기면서 커밋취소하는 revert"></a>취소 기록을 남기면서 커밋취소하는 revert</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert 커밋넘버 --옵션</span><br></pre></td></tr></table></figure><p>만약 커밋넘버가 c,b,a순으로 있고 a번으로 되돌리고 싶다면 아래 명령어를 입력하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 커밋순서 확인하기</span><br><span class="line">git log --oneline</span><br><span class="line">- c커밋 blahblah</span><br><span class="line">- b커밋 blahblah</span><br><span class="line">- a커밋 blahblah</span><br><span class="line"></span><br><span class="line">2. 취소하고싶은 커밋넘버로 취소하기</span><br><span class="line">git revert b커밋넘버 --hard</span><br></pre></td></tr></table></figure><p>이제 c,b커밋은 취소되고 a커밋만 남게 된다.<br>그럼 c,b커밋에 staged되었던 파일들은 어떻게 될까?<br>staging Area전인 working directory로 가게 된다!</p><p><br><br></p><h1 id="아무도-모르게-커밋을-취소하는-reset"><a href="#아무도-모르게-커밋을-취소하는-reset" class="headerlink" title="아무도 모르게 커밋을 취소하는 reset"></a>아무도 모르게 커밋을 취소하는 reset</h1><p>reset은 주의사항이 있다!</p><ul><li>주의: reset은 로컬 저장소에서만 실행할 것</li></ul><p>원격저장소에 올라간 뒤 reset을 실행하면 이전 커밋 내역들이 전부 삭제된다.<br>만약 다른 개발자들과 함께 작업했는데 reset을 한 걸 모른채로 커밋을 하면 삭제한 커밋들이 다시 살아난다.<br>따라서 미리 공지를 하거나 <code>git revert사용을 추천</code>한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset 커밋넘버 --옵션</span><br><span class="line">git reset b커밋넘버 --hard</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="가장-최근-commit-한개-취소하기"><a href="#가장-최근-commit-한개-취소하기" class="headerlink" title="가장 최근 commit 한개 취소하기"></a>가장 최근 commit 한개 취소하기</h1><p>가장 최근 커밋을 삭제하기 위해선 가장 최근 커밋을 가리키는 HEAD가 어디있는지 중요하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. HEAD위치 확인</span><br><span class="line">$ git log --oneline</span><br><span class="line"></span><br><span class="line">2. HEAD의 커밋 한개 삭제</span><br><span class="line">$ git reset --hard HEAD~1</span><br><span class="line"></span><br><span class="line">3. 삭제 후 최신 commit 확인</span><br><span class="line">$ git log --oneline</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="옵션"><a href="#옵션" class="headerlink" title="옵션"></a>옵션</h1><ul><li>soft: 취소한 커밋안의 작업 파일들을 staging단계로 돌린다. 따라서 add되어있다.</li><li>hard: 취소한 커밋안의 작업 파일들을 working directory단계로 돌린다. 따라서 add되어있지도 않다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/GIT/">GIT</category>
      
      
      <comments>https://sowon-dev.github.io/2024/03/08/240309-reset-vs-revert/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[네트워크] Socket(소켓) vs Websocket(웹소켓) 차이점</title>
      <link>https://sowon-dev.github.io/2024/01/10/240111websocket-vs-tcpipsocket/</link>
      <guid>https://sowon-dev.github.io/2024/01/10/240111websocket-vs-tcpipsocket/</guid>
      <pubDate>Wed, 10 Jan 2024 16:46:25 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 팀장님과 커피챗을 하면서 소켓이야기를 했다.&lt;br&gt;내가 알고 있는 소켓은 클라이언트의 요청없이 서버가 응답하는 것이였는데 오늘 팀장님 말씀을 들어보니까 뭔가 다른 내용이었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 팀장님과 커피챗을 하면서 소켓이야기를 했다.<br>내가 알고 있는 소켓은 클라이언트의 요청없이 서버가 응답하는 것이였는데 오늘 팀장님 말씀을 들어보니까 뭔가 다른 내용이었다.</p><a id="more"></a><p>알고보니 팀장님은 소켓통신을 얘기하셨는데 내가 웹소켓으로 오해했기때문이다.<br>이참에 둘 차이를 공부해봤다.<br>내가 제일 부족한 부분은 네트워크인 듯하다. 올해는 이 부분에 대해 집중적으로 공부해봐야겠다. </p><h1 id="Socket-소켓"><a href="#Socket-소켓" class="headerlink" title="Socket(소켓)"></a>Socket(소켓)</h1><p><img src="/img/240111OSI7LayerAndTCPIP.jpg" alt="해시넷"></p><ul><li>OSI 7계층은 네트워크를 관리하는 계층이다. 계층별 각 프로토콜, 즉 통신규약이 존재한다. 프로토콜을 구현하려면 구체적인 구현부인 함수가 필요하다.</li><li>소켓이란? 별도의 구현없이 소켓을 이용하여 프로토콜 함수의 BODY를 만들 수 있다. 일반적으로 TCP/IP를 사용한다. <ul><li>연결역할: 일종의 endpoint로 IP와 서비스포트를 통해서 두 개의 소프트웨어를 연결한다.</li><li>데이터송수신역할: 두 개의 소프트웨어를 연결하고 데이터를 송수신한다.</li><li>종류: 클라이언트 소켓, 서버 소켓</li></ul></li><li>TCP/IP 4계층 중 전송계층에서 사용됨<ul><li>TCP통신이란? <a href="https://sowon-dev.github.io/2021/07/30/210730TCPVSUDP/">TCP통신 vs UDP통신 차이점</a></li></ul></li></ul><p><br><br><br></p><h1 id="Websocket-웹소켓-과의-차이점"><a href="#Websocket-웹소켓-과의-차이점" class="headerlink" title="Websocket(웹소켓)과의 차이점"></a>Websocket(웹소켓)과의 차이점</h1><ul><li><a href="https://sowon-dev.github.io/2023/01/26/230127resttemplate-vs-websocket/">웹소켓</a>이란? 서버가 클라이언트에게 먼저 말(메세지)을 걸 수 있다. 즉, 클라이언트 요청없이도 서버가 클라이언트에 응답가능!</li><li>Socket(소켓)과 차이점? <ul><li>동작계층: 소켓은 인터넷프로토콜을 기반하므로 TCP가 속한 OSI 4계층에서 이루어지고 웹소켓은 TCP에 의존하지만 HTTP기반이므로 7계층에서 이루어짐</li><li>데이터형식: TCP에 기반한 소켓통신은 단순히 바이트로 이루어진 데이터, 웹소켓통신은 메시지형식의 데이터</li></ul></li></ul><p>사실 소켓과 웹소켓은 완전 다른 개념이 아니다. 소켓통신을 웹어플리케이션에 맞게 디자인한 것이 웹소캣이다.</p><p><br><br><br></p><h1 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h1><p>팀장님께 네트워크 공부를 어떻게 하면 좋을지 조언을 부탁드리니 <a href="https://www.icqa.or.kr/cn/page/network">네트워크관리사 자격증</a>이 있다고 알려주셨다.<br>올해는 이 자격증을 취득해봐야겠다!</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://sowon-dev.github.io/2023/01/26/230127resttemplate-vs-websocket/">RestTemplate(레스트템플릿)과 Websocket(웹소켓)차이점</a></li><li><a href="https://sowon-dev.github.io/2021/07/30/210730TCPVSUDP/">TCP통신 vs UDP통신 차이점</a></li><li><a href="https://velog.io/@rhdmstj17/%EC%86%8C%EC%BC%93%EA%B3%BC-%EC%9B%B9%EC%86%8C%EC%BC%93-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%A0%95%EB%A6%AC-1">Konseo - 소켓과 웹소켓</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Network/">Network</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%B0%A8%EC%9D%B4/">차이</category>
      
      <category domain="https://sowon-dev.github.io/tags/Websocket/">Websocket</category>
      
      
      <comments>https://sowon-dev.github.io/2024/01/10/240111websocket-vs-tcpipsocket/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>예약, 대관, 대여프로그램 프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2024/01/10/240111prjtreview10/</link>
      <guid>https://sowon-dev.github.io/2024/01/10/240111prjtreview10/</guid>
      <pubDate>Wed, 10 Jan 2024 15:13:12 GMT</pubDate>
      
      <description>&lt;p&gt;이번 프로젝트에서는 예약, 대관, 대여프로그램을 주 업무로 맡았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번 프로젝트에서는 예약, 대관, 대여프로그램을 주 업무로 맡았다.</p><a id="more"></a><p>프로젝트마다 예약,대관,대여등을 도맡으면서 일정과 관련된 DB설계와 달력표현부분은 이제 익숙해졌다.<br>또한 동적 테이블도 편한게 만들 수 있게 되었다.<br>이번에는 처음으로 JsRender를 활용했는데 template을 활용한 데이터바인딩이 너무 편해서 좋았다.<br>이번 플젝은 시간이 촉박한데 해야할 작업들은 방대해서 시간분배가 중요했다.<br>집중해서 자잘한 업무를 빨리 쳐내고 큰 작업을 진득하게 구현하기 위해 노력했는데 결론적으로 잘 되서 다행이다.</p><h1 id="keep"><a href="#keep" class="headerlink" title="keep"></a>keep</h1><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li><code>대관,대여,예약 기능 구현시 moment.js 활용</code><ul><li>대관,예약 기능 구현시 moment.js 활용하여 날짜와 시간을 효과적으로 다뤘고 달력은 현재 프레임워크 내 경량라이브러리로 적합한 JsRender를 선택하여 코드 반복을 최소화하고 효율적으로 작성했다. JsRender를 이번에 처음 써봤는데 데이터바인딩이 너무 편해서 앞으로도 달력만들때 쭉 쓰고싶다. 다만 JsRender가 업데이트가 활발하게 되고있지않아 jsp말고 Vue.js, React, Angular와 같은 라이브러리 및 프레임워크를 다루고싶다.</li></ul></li><li><code>jQuery 비중을 줄이고 바닐라JS 사용</code><ul><li>속도향상을 위해 jQuery 사용을 줄이고 바닐라JS를 일부러 사용했다. 바닐라JS는 제이쿼리보다 코드는 길어지지만 제이쿼리API를 다녀오지않아도 되기에 속도가 빠르다. 이미 손에 익어버린 jQuery를 의식적으로 바닐라JS를 사용하려니 중간중간에 코드 검색이 필요해서 처음에는 시간이 걸렸지만 프로젝트 후반에 갈수록 코딩속도가 붙었다. 앞으로도 바닐라JS를 의식적으로 사용해야겠다. </li></ul></li><li><code>Mybatis에서 resultMap 사용</code><ul><li>Mybatis에서 객체안에 객체를 매핑하기 위해 resultMap를 사용하여 유연한 맵핑이 가능하도록 구현했으며 코드재사용과 유지보수와 디버깅이 편하도록 작성했다. 사실 resultMap이 익숙하지 않아서 resultType에 dto 맞춰서 사용할까하다가 resultMap도 익숙해질수있도록 실무에 써보자!라고 판단했고 결과적으로 resultMap을 실무에서 한 번 써보고나니 자신감이 생겼고 다음에도 언제든지 사용할 수 있게 되었다.</li></ul></li><li><code>observer</code><ul><li>동적 웹페이지에서 비동기적인 DOM조작을 잡기 위해서 Mutation Observer를 이용했다. 이를 위해 페이지라이프사이클을 추가로 공부했다. DOM에 대해서 더 공부가 필요하다.</li></ul></li><li><code>외부API연동을 위한 RestTemplate 활용</code><ul><li>지난 프로젝트에서 진득하게 공부했던 RestTemplate을 활용하여 쉽게 외부API인 문자전송 서비스를 구현했다.</li></ul></li></ol><p><br><br><br></p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>개선이 필요하다고 생각되는 부분</p><ol><li><code>네트워크 지식</code></li><li><code>통합예약 설계에 겁먹은 점</code></li><li><code>DOM</code></li></ol><p><br><br><br></p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>네트워크 공부를 하면서 겸사겸사 네트워크 관리사2급과 리눅스마스터 자격증을 취득할 것이다. <ul><li>ONE ACTION: 24년 제01회 필기 2024-02-25, 실기 2024-03-31 최종 합격발표 2024-04-09</li></ul></li><li>설계는 경험이 제일 중요하다고 생각하는데 경험이 없기에 지레 겁먹고있다. 경험을 늘리는 방법을 고민해봤는데 사이드프로젝트와 책이라고 생각한다. 따라서 올해 데이터베이스 설계 책 상반기에 1권을 읽고 후기글을 작성해야겠다. 하반기는 <a href="https://www.yes24.com/Product/Goods/69775589">파워오브데이터베이스</a>, <a href="https://www.yes24.com/Product/goods/12191214?art_bl=7769257">가장 쉬운 데이터베이스 설계 책</a> 중 고민해보고 읽을 것<ul><li>ONE ACTION: 그림으로 공부하는 TCP/IP구조 </li></ul></li><li>DOM 문서객체모델 포스팅 1건이상 하기<ul><li>ONE ACTION: <a href="https://bitsofco.de/what-exactly-is-the-dom/">What, exactly, is the DOM?</a> 번역 포스팅, <a href="https://javascript.info/dom-nodes">DOM tree</a> 번역 포스팅</li></ul></li></ol><p><br><br><br></p><h1 id="관련-포스팅"><a href="#관련-포스팅" class="headerlink" title="관련 포스팅"></a>관련 포스팅</h1><ul><li><a href="https://sowon-dev.github.io/2023/09/10/230911ajax-sucess-error/">분명 success인데 왜 계속 error로 가는걸까?</a></li><li><a href="https://sowon-dev.github.io/2023/10/15/231016imgtag-onerrer/">IMG태그 기본이미지설정(DEFAULT IMG, ONERROR속성) 에러 해결</a></li><li><a href="https://sowon-dev.github.io/2023/10/17/231018momentjs-issame/">isSame 오늘날짜와 비교가 안되는 이유</a></li><li><a href="https://sowon-dev.github.io/2023/10/18/231019momentjs-to-localdatetime/">moment String을 Controller에서 LocalDateTime으로 받기</a></li><li><a href="https://sowon-dev.github.io/2023/10/19/231020URLsearchparams/">URL 파라미터(쿼리파라미터Query Parameter)가져오기</a></li><li><a href="https://sowon-dev.github.io/2023/11/14/231114mybatis-if-update-all/">mybatis update시 모두 if test를 써야 할 경우</a> </li><li><a href="https://sowon-dev.github.io/2023/11/14/231114mybatis-resultMap-manyassociation/">mybatis 객체 안에 객체 매핑하기</a></li><li><a href="https://sowon-dev.github.io/2023/11/14/231115lable-for/">radio/checkbox 클릭 안 되는 오류가 label for 때문이라고?</a></li><li><a href="https://sowon-dev.github.io/2023/11/20/231121js-observer/">observer 사용하기</a></li><li><a href="https://sowon-dev.github.io/2024/01/01/240102byte-check/">글씨쓸때마다 바이트 계산하기</a></li><li><a href="https://sowon-dev.github.io/2024/01/07/240108jsp-el-queryparam/">URL 파라미터(쿼리파라미터Query Parameter)가져오기(ft.EL표현식)</a></li><li><a href="https://sowon-dev.github.io/2024/01/08/240109domcontentloaded-vs-onload/">DOMContentLoaded와 window.onload차이(ft.페이지 라이프사이클Page Lifecycle)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2024/01/10/240111prjtreview10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] DOMContentLoaded와 window.onload차이(ft.페이지 라이프사이클Page Lifecycle)</title>
      <link>https://sowon-dev.github.io/2024/01/08/240109domcontentloaded-vs-onload/</link>
      <guid>https://sowon-dev.github.io/2024/01/08/240109domcontentloaded-vs-onload/</guid>
      <pubDate>Mon, 08 Jan 2024 19:56:23 GMT</pubDate>
      
      <description>&lt;p&gt;화면작업을 하면서 페이지로드가 다 된 후 클릭이벤트를 실행하고 싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>화면작업을 하면서 페이지로드가 다 된 후 클릭이벤트를 실행하고 싶었다.</p><a id="more"></a><p>DOMContentLoaded를 쓰다가 window.onload와는 뭐가 다른지 궁금해서 찾아보게되었다.</p><h1 id="✏️-DOMContentLoaded와-window-onload-차이"><a href="#✏️-DOMContentLoaded와-window-onload-차이" class="headerlink" title="✏️ DOMContentLoaded와 window.onload 차이"></a>✏️ DOMContentLoaded와 window.onload 차이</h1><p>window.onload와 DOMContentLoaded 이벤트는 페이지 라이프사이클과 관련이 있고 차이점이 존재한다.</p><p><br><br><br></p><h2 id="1-window-onload-이벤트"><a href="#1-window-onload-이벤트" class="headerlink" title="1. window.onload 이벤트"></a>1. window.onload 이벤트</h2><p>페이지에 있는 모든 자원, 이미지와 스크립트를 포함하여 모두 로드되었을 때 발생한다.<br>전체 페이지가 완전히 로드된 후에 제공된 함수가 실행된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 여기에 코드 작성</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="2-DOMContentLoaded-이벤트"><a href="#2-DOMContentLoaded-이벤트" class="headerlink" title="2. DOMContentLoaded 이벤트"></a>2. DOMContentLoaded 이벤트</h2><p>HTML 문서가 완전히 로드되고 파싱된 후에 발생하며 스타일시트, 이미지, 서브프레임의 로드를 기다리지 않는다.<br>DOM을 조작하거나 상호작용하는 스크립트를 실행하고자 할 때 주로 사용되며, window.onload보다 빠른 시점에 발생한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM이 준비되면 실행할 코드</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>대부분의 경우에는 DOMContentLoaded를 사용하는 것이 좋다.<br>외부 자원이 모두 로드되기를 기다리지 않고 최대한 빨리 JavaScript를 실행할 수 있어 사용자가 기다리지않고 빠르게 페이지를 제공할 수 있기 때문이다.<br>만약 모든 외부 자원의 로드를 기다려야 하는 특별한 상황이 있다면 window.onload을 사용할 수 있겠지만, 대부분의 개발에서는 주로 DOMContentLoaded를 더 많이 사용한다.</p><p><br><br><br></p><h1 id="✏️-DOMContentLoaded와-ready-차이"><a href="#✏️-DOMContentLoaded와-ready-차이" class="headerlink" title="✏️ DOMContentLoaded와 ready 차이"></a>✏️ DOMContentLoaded와 ready 차이</h1><p>두 이벤트는 동일한 목적이다.<br>둘 다 DOM이 완전히 로드되고 스크립트 실행히 가능한 시점을 감지하는 것을 목표로 한다.<br>차이점은 jQuery라이브러리 사용유무이다.</p><p><br><br><br></p><h2 id="1-DOMContentLoaded-이벤트"><a href="#1-DOMContentLoaded-이벤트" class="headerlink" title="1. DOMContentLoaded 이벤트"></a>1. DOMContentLoaded 이벤트</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM이 준비되면 실행할 코드</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이벤트 리스너를 사용하는 방법은 pure JS(Vanilla JS)를 사용하는 방법이다.<br>이벤트 리스너를 통해 DOMContentLoaded 이벤트를 감지하고 그 때 실행할 코드를 정의한다.<br>이벤트 리스너는 여러 개 등록 가능하다.</p><p><br><br><br></p><h2 id="2-jQuery-라이브러리-사용"><a href="#2-jQuery-라이브러리-사용" class="headerlink" title="2. jQuery 라이브러리 사용"></a>2. jQuery 라이브러리 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM이 준비되면 실행할 코드</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 문법을 더 단축해서 사용할 수 있다.</p><ul><li>단축된 jQuery 문법<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM이 준비되면 실행할 코드</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h1 id="✏️-페이지-라이프사이클-Page-Lifecycle"><a href="#✏️-페이지-라이프사이클-Page-Lifecycle" class="headerlink" title="✏️ 페이지 라이프사이클(Page Lifecycle)"></a>✏️ 페이지 라이프사이클(Page Lifecycle)</h1><p><img src="https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings/screen_shot_2019-05-03_at_1.06.27_pm.png" alt="MDN-Navigation and resource timings"></p><p>자바스크립트이 페이지 라이프사이클은 아래와 같다</p><ol><li>문서 객체 모델 (DOM) 생성: HTML 문서의 파싱이 끝나면 브라우저는 DOM을 생성</li><li>DOMContentLoaded: HTML 전체가 로드되고 DOM트리가 완성되었지만 이미지, stylesheets등의 외부리소스는 아직 로드되지 않은 상태</li><li>이미지, stylesheets등의 외부리소스 업로드</li><li>load: HTML뿐만 아니라 이미지, stylesheets등의 외부리소스까지 로드가 완료된 상태</li><li>beforeunload: 사용자가 페이지를 떠나려 하는 상태<ol><li>페이지를 떠날 때 사용자에게 확인 메시지를 표시할 수 있는 기회를 제공한다</li></ol></li><li>unload: 페이지가 완전히 로딩된 후 사용자가 브라우저에서 페이지를 나간 상태<ol><li>주로 사용자가 페이지를 닫거나 새로고침할 때 실행되는 코드에 사용한다.</li></ol></li></ol><p>각각 예시를 보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. DOMContentLoaded 이벤트</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM이 준비되면 실행할 코드</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. load 이벤트</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 이미지, 스크립트까지 준비되면 실행할 코드</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. beforeunload</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'beforeunload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 확인 메시지를 사용자에게 표시할 수 있는 기회</span></span><br><span class="line">    <span class="keyword">const</span> confirmationMessage = <span class="string">'정말로 떠나시겠습니까?'</span>;</span><br><span class="line">    event.returnValue = confirmationMessage; <span class="comment">// Standard for most browsers</span></span><br><span class="line">    <span class="keyword">return</span> confirmationMessage; <span class="comment">// For some older browsers</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. unload</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'unload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 페이지가 완전히 로딩된 후에 실행되는 코드</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://javascript.info/onload-ondomcontentloaded">모던자바스크립트-onload</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2024/01/08/240109domcontentloaded-vs-onload/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] URL 파라미터(쿼리파라미터Query Parameter)가져오기(ft.EL표현식)</title>
      <link>https://sowon-dev.github.io/2024/01/07/240108jsp-el-queryparam/</link>
      <guid>https://sowon-dev.github.io/2024/01/07/240108jsp-el-queryparam/</guid>
      <pubDate>Sun, 07 Jan 2024 17:20:47 GMT</pubDate>
      
      <description>&lt;p&gt;정말 초간단한 Query Parameter 가져오는 방법은 param 객체를 사용하는 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>정말 초간단한 Query Parameter 가져오는 방법은 param 객체를 사용하는 것이다.</p><a id="more"></a><p>네이버 검색을 예로 들어보자.<br>아래와 같은 URL에서 <code>query=가나다</code>만 가져오고 싶다면 어떻게 해야할까?</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.naver.com/search.naver?where=nexearch&amp;sm=top_hty&amp;fbm=0&amp;ie=utf8&amp;query=가나다</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="1-EL표현식-사용"><a href="#1-EL표현식-사용" class="headerlink" title="1. EL표현식 사용!"></a>1. EL표현식 사용!</h1><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;param.query&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output : 가나다</span></span><br></pre></td></tr></table></figure><p>해결!</p><p><br><br><br></p><h1 id="2-request사용"><a href="#2-request사용" class="headerlink" title="2. request사용!"></a>2. request사용!</h1><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= request.getAttribute(<span class="string">"query"</span>) %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output : 가나다</span></span><br></pre></td></tr></table></figure><p>이 방법을 활용하면 String뿐만 아니라 객체도 가져올 수 있다.<br>객체 파라미터를 가져오는 방법은 아래 포스팅 참고하면 된다.</p><ul><li><a href="https://sowon-dev.github.io/2020/10/12/201013spring/">참고: 스프링SPRING에서 페이지이동하기, 파라미터가지고 페이지이동하기</a></li></ul><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://sowon-dev.github.io/2023/10/19/231020URLsearchparams/">js에서 URL 파라미터(쿼리파라미터Query Parameter)가져오기</a></li><li><a href="https://sowon-dev.github.io/2024/01/07/240108jsp-el-queryparam/">jsp에서 URL 파라미터(쿼리파라미터Query Parameter)가져오기(ft.EL표현식)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      
      <comments>https://sowon-dev.github.io/2024/01/07/240108jsp-el-queryparam/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP/JAVA]글씨쓸때마다 바이트 계산하기</title>
      <link>https://sowon-dev.github.io/2024/01/01/240102byte-check/</link>
      <guid>https://sowon-dev.github.io/2024/01/01/240102byte-check/</guid>
      <pubDate>Mon, 01 Jan 2024 14:54:53 GMT</pubDate>
      
      <description>&lt;p&gt;문자전송 서비스를 만들고있다. 이번에 만드는 문자전송서비스는 바이트 제한이 있으므로 textarea에 글씨를 입력할때마다 자동으로 byte가 계산되며 2000바이트를 넘지 않게 만들고 싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>문자전송 서비스를 만들고있다. 이번에 만드는 문자전송서비스는 바이트 제한이 있으므로 textarea에 글씨를 입력할때마다 자동으로 byte가 계산되며 2000바이트를 넘지 않게 만들고 싶었다.</p><a id="more"></a><p><br><br><br></p><h1 id="화면-jsp"><a href="#화면-jsp" class="headerlink" title="화면 jsp"></a>화면 jsp</h1><p>onkeyup 이벤트를 통해서 textarea에 무언가를 기입하는 순간 바이트 계산이 messagebyte에 실시간으로 보여진다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">let</span> pickUserList = [];</span><br><span class="line"><span class="keyword">let</span> maxByte = <span class="number">2000</span>; <span class="comment">//sms 는 90바이트 이내로 작성,lms 는 2000바이트</span></span><br><span class="line"><span class="keyword">let</span> totalByte = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn_chk_byte</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    totalByte = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> message = $(obj).val();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rlen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> one_char = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> str2 = <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;message.length; i++) &#123;</span><br><span class="line">        one_char = message.charAt(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">escape</span>(one_char).length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            totalByte += <span class="number">2</span>; <span class="comment">//한글2Byte</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            totalByte++; <span class="comment">//영문 등 나머지 1Byte</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(totalByte &lt;= maxByte)&#123;</span><br><span class="line">            rlen = i+<span class="number">1</span>; <span class="comment">//return할 문자열 갯수</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"#messagebyte"</span>).text(totalByte);</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">if</span>(totalByte &gt; maxByte) &#123;</span><br><span class="line">        <span class="comment">// alert("한글 "+(maxByte/2)+"자 / 영문 "+maxByte+"자를 초과 입력할 수 없습니다.");</span></span><br><span class="line">        toastr.error(<span class="string">"메세지는 최대 "</span> + maxByte + <span class="string">"byte를 초과할 수 없습니다."</span>);</span><br><span class="line">        str2 = str.substr(<span class="number">0</span>,rlen);                                  <span class="comment">//문자열 자르기</span></span><br><span class="line">        obj.value = str2;</span><br><span class="line">        fnChkByte(obj, maxByte);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 문자내용 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">&lt;h4&gt;[문자 내용 작성]&lt;/</span>h4&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-12 col-sm-12 col-md-12"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">&lt;textarea id=<span class="string">"msg"</span> name=<span class="string">"msg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> placeholder=<span class="string">"문자내용을 입력하세요. 최대 2000Byte까지 작성 가능하며 90Byte가 넘으면 단문(SMS)에서 장문(LMS)발송으로 변경됩니다. "</span> rows=<span class="string">"5"</span> onkeyup=<span class="string">"fn_chk_byte(this);"</span>&gt;&lt;<span class="regexp">/textarea&gt;</span></span><br><span class="line"><span class="regexp">&lt;span id="messagebyte"&gt;0&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>/ 2000 Byte<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;div style=<span class="string">"text-align: right;"</span>&gt;* 최대 <span class="number">2000</span>Byte까지 작성 가능하며 <span class="number">90</span>Byte가 넘으면 단문(SMS)에서 장문(LMS)발송으로 변경됩니다.&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="자바코드"><a href="#자바코드" class="headerlink" title="자바코드"></a>자바코드</h1><p>컨트롤러에서 받은 뒤 바이트 계산하는 코드는 아래와 같다.<br>특히 getBytes()에서 한글 인코딩을 제대로 해야지 js와 동일한 바이트수가 계산된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesLength = param.get(<span class="string">"msgCn"</span>).toString().getBytes(<span class="string">"KSC5601"</span>).length;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/JAVA/">JAVA</category>
      
      <category domain="https://sowon-dev.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sowon-dev.github.io/2024/01/01/240102byte-check/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[js]observer 사용하기</title>
      <link>https://sowon-dev.github.io/2023/11/20/231121js-observer/</link>
      <guid>https://sowon-dev.github.io/2023/11/20/231121js-observer/</guid>
      <pubDate>Mon, 20 Nov 2023 22:45:55 GMT</pubDate>
      
      <description>&lt;p&gt;load 후에 removeFile 버튼들에 click이벤트를 걸고 싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>load 후에 removeFile 버튼들에 click이벤트를 걸고 싶었다.</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> removeFileButtons = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[data-role="removeFile"]'</span>);</span><br><span class="line">removeFileButtons.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">button</span>) </span>&#123;</span><br><span class="line">    button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fileItem = <span class="keyword">this</span>.closest(<span class="string">'.fileItem'</span>);</span><br><span class="line"><span class="keyword">let</span> uploadFileNm = fileItem.querySelector(<span class="string">'[name="attachFileNm"]'</span>).value;</span><br><span class="line">        <span class="keyword">let</span> uploadFileKey = fileItem.querySelector(<span class="string">'[name="attachFileKey"]'</span>).value;</span><br><span class="line">    deleteFile(uploadFileKey, uploadFileNm);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>하지만 이벤트가 걸렸다 안 걸렸다해서 팀장님께 문의드리고 답을 얻었다.<br>현재 프로그램에서 사용하는 커스텀js파일은 비동기를 호출하는데 load가 되어도 비동기때문에 removeFile이 아직 생성되지 않은 상태에서 클릭이벤트를 추가하려고하니 생기는 <code>순서의 문제</code>였다.<br>커스텀js파일의 콜백함수가 따로 없기때문에(레거시라서 수정할 수가 없다….) 동적변화를 잡기위해 observer를 사용하면 해결할수있다.</p><p><br><br><br></p><h1 id="해결코드"><a href="#해결코드" class="headerlink" title="해결코드"></a>해결코드</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> targetNode = $(<span class="string">"[data-role=fileUploader]"</span>);</span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params">mutations</span>) </span>&#123;</span><br><span class="line">    mutations.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">mutation</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mutation.addedNodes.length; i++ ) &#123;</span><br><span class="line">    <span class="keyword">var</span> tag = mutation.addedNodes[i];</span><br><span class="line">    $(tag).find(<span class="string">'[data-role="removeFile"]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="keyword">let</span> fileItem = <span class="keyword">this</span>.closest(<span class="string">'.fileItem'</span>);</span><br><span class="line"><span class="keyword">let</span> uploadFileNm = fileItem.querySelector(<span class="string">'[name="attachFileNm"]'</span>).value;</span><br><span class="line"><span class="keyword">let</span> uploadFileKey = fileItem.querySelector(<span class="string">'[name="attachFileKey"]'</span>).value;</span><br><span class="line">        deleteFile(uploadFileKey, uploadFileNm);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">observer.observe(targetNode[<span class="number">0</span>],&#123; <span class="attr">attributes</span>: <span class="literal">false</span>, <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span>&#125; );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>observer를 사용해서 해결!</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>팀장님 지식</li><li><a href="https://ko.javascript.info/mutation-observer">https://ko.javascript.info/mutation-observer</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/11/20/231121js-observer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[이클립스/STS] enum 코드 예쁘게 포맷팅하기</title>
      <link>https://sowon-dev.github.io/2023/11/15/231115java-enum-code-formatter/</link>
      <guid>https://sowon-dev.github.io/2023/11/15/231115java-enum-code-formatter/</guid>
      <pubDate>Wed, 15 Nov 2023 01:41:29 GMT</pubDate>
      
      <description>&lt;p&gt;enum을 쓰는데 자동포맷팅이 너무 못생겨서 가독성이 떨어졌다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>enum을 쓰는데 자동포맷팅이 너무 못생겨서 가독성이 떨어졌다.</p><a id="more"></a><p>현재 <a href="https://github.com/google/google-java-format">Google Java Style Guide</a>을 사용하고 있는데 여기서 enum code formatting만 수정했다.</p><h1 id="설정방법"><a href="#설정방법" class="headerlink" title="설정방법"></a>설정방법</h1><ol><li>Preferences &gt; Java &gt; Code Style &gt; Formatter 쿨릭</li><li>Active profile 옆 edit 클릭</li><li>Line Wrapping 탭 클릭</li><li>목록에서 ‘enum’ declaration 찾기</li><li>‘enum’ declaration 하위 Constants 클릭 후 Line wrapping policy를 Wrap all elements, every element on a new line로 변경</li><li>OK 클릭 끝!</li></ol><ul><li>결과</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> Food &#123;</span><br><span class="line">APPLE, </span><br><span class="line">BANANA, </span><br><span class="line">STRAWBERRY</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>가독성도 좋고 속시원한 코드 포맷팅스타일이 완성된다!</p><p>코드포맷팅 이클립스/STS 단축키: <code>ctrl + shift + F</code></p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://stackoverflow.com/questions/19424275/formatting-java-enums-using-one-line-for-every-enum-value-with-eclipse">Formatting Java enums using one line for every enum value with Eclipse</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Eclipse/">Eclipse</category>
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2023/11/15/231115java-enum-code-formatter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[HTML] radio/checkbox 클릭 안 되는 오류가 label for 때문이라고?</title>
      <link>https://sowon-dev.github.io/2023/11/14/231115lable-for/</link>
      <guid>https://sowon-dev.github.io/2023/11/14/231115lable-for/</guid>
      <pubDate>Tue, 14 Nov 2023 16:22:56 GMT</pubDate>
      
      <description>&lt;p&gt;radio와 checkbox가 클릭이 안되는 오류가 발생했다.&lt;br&gt;css문제인 줄 알고 디자인팀에 문의했는데 css문제가 전혀 없었고 &lt;code&gt;id를 추가하면 됩니다~&lt;/code&gt;하는 답변을 받았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>radio와 checkbox가 클릭이 안되는 오류가 발생했다.<br>css문제인 줄 알고 디자인팀에 문의했는데 css문제가 전혀 없었고 <code>id를 추가하면 됩니다~</code>하는 답변을 받았다.</p><a id="more"></a><h1 id="문제코드"><a href="#문제코드" class="headerlink" title="문제코드"></a>문제코드</h1><p>FORM으로 데이터를 넘길거니까 name과 value만 신경써서 작업했다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"reply_type"</span> <span class="attr">value</span>=<span class="string">"email"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"reply_type"</span> <span class="attr">value</span>=<span class="string">"post"</span> &gt;</span><span class="tag">&lt;<span class="name">labelfor="post"</span>&gt;</span>우편<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그런데 라디오버튼이 클릭도 안되고 post로 보내도 값이 넘어오지않았다!<br>어디가 문제일까?</p><p><br><br><br></p><h1 id="해결코드"><a href="#해결코드" class="headerlink" title="해결코드"></a>해결코드</h1><p>원인은 <code>label for</code>이었다.<br>웹접근성을 위해 디자인팀에서 추가했는데 내가 미처 확인하지 못했다.<br><code>label for</code>를 쓴다면 input 속성에 id값과 일치 시켜줘야한다!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"reply_type"</span> <span class="attr">value</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"reply_type"</span> <span class="attr">value</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"post"</span> &gt;</span><span class="tag">&lt;<span class="name">labelfor="post"</span>&gt;</span>우편<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>해결!</p><p><br><br><br></p><h1 id="그럼-checkbox의-경우는"><a href="#그럼-checkbox의-경우는" class="headerlink" title="그럼 checkbox의 경우는?"></a>그럼 checkbox의 경우는?</h1><p>checkbox도 이와 동일하다.<br>name과 value를 잘 넣었는데도 눌러지지않는다면 <code>lable for</code>값과 <code>id</code>값이 일치하는지 의심해보자<br>그리고 사소한 실수 하지말자!</p><p><br><br><br></p><h1 id="근데-label은-왜-쓸까"><a href="#근데-label은-왜-쓸까" class="headerlink" title="근데 label은 왜 쓸까?"></a>근데 label은 왜 쓸까?</h1><ol><li>input 태그 타입 중 month, number, password, radio, range같은 경우 placeholder속성이 없기에 어떤 input인지 설명해줄수가 없다. 따라서 label을 사용해서 명시적으로 용도를 나타내줄수있다.</li><li>웹접근성을 위해 필요하다.</li></ol><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://www.tcpschool.com/html-tag-attrs/label-for">TCP SCHOOL - label태그의 for 속성</a></li><li><a href="https://batcave.tistory.com/79">개발자의 낙원 - label태그 왜 쓸까?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/HTML-CSS/">HTML&amp;CSS</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/HTML-CSS/">HTML&amp;CSS</category>
      
      
      <comments>https://sowon-dev.github.io/2023/11/14/231115lable-for/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[mybatis] 객체 안에 객체 매핑하기</title>
      <link>https://sowon-dev.github.io/2023/11/14/231114mybatis-resultMap-manyassociation/</link>
      <guid>https://sowon-dev.github.io/2023/11/14/231114mybatis-resultMap-manyassociation/</guid>
      <pubDate>Tue, 14 Nov 2023 01:26:31 GMT</pubDate>
      
      <description>&lt;p&gt;객체를 필드로 사용하는 경우 mybatis에서 &lt;code&gt;&amp;lt;association&amp;gt;&lt;/code&gt;을 활용할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>객체를 필드로 사용하는 경우 mybatis에서 <code>&lt;association&gt;</code>을 활용할 수 있다.</p><a id="more"></a><h1 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h1><p>User객체를 필드로 사용하는 2개의 컬럼이 있는 Board객체가 있다.<br>이를 하나의 쿼리로 select해오려면 <code>resultMap</code>과 <code>&lt;association&gt;</code>을 사용하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> writerIdx;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> editorIdx;</span><br><span class="line"><span class="keyword">private</span> User writer;</span><br><span class="line"><span class="keyword">private</span> User editor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="쿼리"><a href="#쿼리" class="headerlink" title="쿼리"></a>쿼리</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Board 객체 매핑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"boardMap"</span> <span class="attr">type</span>=<span class="string">"Board"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"idx"</span> <span class="attr">column</span>=<span class="string">"IDX"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"TITLE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"content"</span> <span class="attr">column</span>=<span class="string">"CONTENT"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 아래 userMap 실행해서 가져옴 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"writer"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">columnPrefix</span>=<span class="string">"WRITER_"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"editor"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">columnPrefix</span>=<span class="string">"EDITOR_"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- userMap 객체 매핑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"idx"</span> <span class="attr">column</span>=<span class="string">"IDX"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"NAME"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"mobile"</span> <span class="attr">column</span>=<span class="string">"MOBILE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위처럼 resultMap 매핑코드를 작성해주고 아래와같이 select문을 호출하면 된다</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="getBoardDetail" parameterType="int" resultMap="reportMap"&gt;</span><br><span class="line"> <span class="keyword">SELECT</span> </span><br><span class="line">b.*,</span><br><span class="line">writer.NAME <span class="keyword">AS</span> WRITER_NAME,</span><br><span class="line">writer.mobile <span class="keyword">AS</span> WRITER_MOBILE,</span><br><span class="line">editor.NAME <span class="keyword">AS</span> EDITOR_NAME,</span><br><span class="line">editor.mobile <span class="keyword">AS</span> EDITOR_MOBILE</span><br><span class="line"><span class="keyword">FROM</span> BOARD b</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">USER</span> writer</span><br><span class="line"><span class="keyword">ON</span> b.WRITER_IDX = writer.IDX</span><br><span class="line"><span class="keyword">JOIN</span> <span class="keyword">USER</span> editor</span><br><span class="line"><span class="keyword">ON</span> b.EDITOR_IDX = editor.IDX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> b.IDX = <span class="comment">#&#123;idx&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="주의점"><a href="#주의점" class="headerlink" title="주의점"></a>주의점</h1><p>association의 resultMap를 동일한 userMap으로 사용하므로 <code>association의 속성인 columnPrefix</code>로 꼭 구분해줘야한다!<br>이걸 못찾아서 몇시간을 삽질했는지… 절레절레</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MyBatis/">MyBatis</category>
      
      
      <comments>https://sowon-dev.github.io/2023/11/14/231114mybatis-resultMap-manyassociation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[mybatis] update시 모두 if test를 써야 할 경우</title>
      <link>https://sowon-dev.github.io/2023/11/14/231114mybatis-if-update-all/</link>
      <guid>https://sowon-dev.github.io/2023/11/14/231114mybatis-if-update-all/</guid>
      <pubDate>Tue, 14 Nov 2023 01:21:04 GMT</pubDate>
      
      <description>&lt;p&gt;mybatis에서 update시 모든 컬럼에 if 조건물을 걸어야할때가 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>mybatis에서 update시 모든 컬럼에 if 조건물을 걸어야할때가 있다.</p><a id="more"></a><p>아래와 같이 사용하면 된다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id="testUpdate" parameterType="VO"&gt;</span><br><span class="line">   <span class="keyword">UPDATE</span> testTable</span><br><span class="line">   &lt;<span class="keyword">trim</span> prefix=<span class="string">"SET"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"testItem1 != null"</span>&gt;testItem1 = <span class="comment">#&#123;testItem1&#125;,&lt;/if&gt;</span></span><br><span class="line">      &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"testItem2 != null"</span>&gt;testItem2 = <span class="comment">#&#123;testItem2&#125;,&lt;/if&gt;</span></span><br><span class="line">   &lt;/<span class="keyword">trim</span>&gt;</span><br><span class="line">   <span class="keyword">WHERE</span></span><br><span class="line">      idx = <span class="comment">#&#123;idx&#125;</span></span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MyBatis/">MyBatis</category>
      
      
      <comments>https://sowon-dev.github.io/2023/11/14/231114mybatis-if-update-all/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] URL 파라미터(쿼리파라미터Query Parameter)가져오기</title>
      <link>https://sowon-dev.github.io/2023/10/19/231020URLsearchparams/</link>
      <guid>https://sowon-dev.github.io/2023/10/19/231020URLsearchparams/</guid>
      <pubDate>Thu, 19 Oct 2023 15:26:14 GMT</pubDate>
      
      <description>&lt;p&gt;정말 초간단한 Query Parameter 가져오는 방법은 URL객체를 사용하는 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>정말 초간단한 Query Parameter 가져오는 방법은 URL객체를 사용하는 것이다.</p><a id="more"></a><p>네이버 검색을 예로 들어보자.<br>아래와 같은 URL에서 <code>query=가나다</code>만 가져오고 싶다면 어떻게 해야할까?</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.naver.com/search.naver?where=nexearch&amp;sm=top_hty&amp;fbm=0&amp;ie=utf8&amp;query=가나다</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a>URLSearchParams</h1><p>URLSearchParams 객체를 활용하면 된다!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search);</span><br><span class="line"><span class="keyword">const</span> query = urlParams.get(<span class="string">'query'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(query)</span><br><span class="line"><span class="comment">//output: 가나다</span></span><br></pre></td></tr></table></figure><p>해결!</p><p><br><br><br></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">MDN URLSearchParams 객체</a></li><li><a href="https://sowon-dev.github.io/2023/10/19/231020URLsearchparams/">js에서 URL 파라미터(쿼리파라미터Query Parameter)가져오기</a></li><li><a href="https://sowon-dev.github.io/2024/01/07/240108jsp-el-queryparam/">jsp에서 URL 파라미터(쿼리파라미터Query Parameter)가져오기(ft.EL표현식)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2023/10/19/231020URLsearchparams/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
