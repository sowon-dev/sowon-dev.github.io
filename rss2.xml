<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Thu, 19 Aug 2021 00:39:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Lombok]@build, @Data 차이</title>
      <link>https://sowon-dev.github.io/2021/08/17/210818Lombok-build/</link>
      <guid>https://sowon-dev.github.io/2021/08/17/210818Lombok-build/</guid>
      <pubDate>Tue, 17 Aug 2021 23:13:17 GMT</pubDate>
      
      <description>&lt;p&gt;자바프로젝트를 사용하면서 없어선 안될 라이브러리가 바로 롬복이다.&lt;br&gt;스프링부트프로젝트로 생성시 롬복 라이브러리를 바로 추가할 수 있다.&lt;br&gt;또는 사이트에서 jar를 다운로드받아 외부라이브러리로 import하여 사용할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바프로젝트를 사용하면서 없어선 안될 라이브러리가 바로 롬복이다.<br>스프링부트프로젝트로 생성시 롬복 라이브러리를 바로 추가할 수 있다.<br>또는 사이트에서 jar를 다운로드받아 외부라이브러리로 import하여 사용할 수 있다.</p><a id="more"></a><ul><li><a href="https://projectlombok.org/">Lombok 사이트</a></li></ul><p>이제 어노테이션별 차이를 살펴보자.</p><h2 id="롬복-어노테이션"><a href="#롬복-어노테이션" class="headerlink" title="롬복 어노테이션"></a>롬복 어노테이션</h2><table><thead><tr><th align="center">구분</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">@Data</td><td align="center">@Getter + @Setter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode 를 한꺼번에 제공</td></tr><tr><td align="center">@Builder</td><td align="center">@AllArgsConstructor와 비슷하게 객체를 생성하고 필드값을 주입해주는데 빌더의 형식을 제공함</td></tr><tr><td align="center">@NoArgsConstructor</td><td align="center">파라미터가 없는 생성자 제공. JPA 사용시 필수</td></tr><tr><td align="center">@AllArgsConstructor</td><td align="center">필드의 모든 변수가 있는 생성자 제공</td></tr></tbody></table><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><ul><li>User.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdAt = LocalDateTime.now();</span><br><span class="line"><span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 클래스를 jUnit으로 테스트해보자.</p><ul><li>UserTest.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// setter 사용</span></span><br><span class="line">User u1 = <span class="keyword">new</span> User();</span><br><span class="line">u1.setName(<span class="string">"마리아"</span>);</span><br><span class="line">u1.setEmail(<span class="string">"maria@example.com"</span>);</span><br><span class="line">u1.setCreatedAt(LocalDateTime.now());</span><br><span class="line">u1.setUpdatedAt(LocalDateTime.now());</span><br><span class="line">System.out.println(<span class="string">"@ test u1: "</span>+u1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @AllArgsConstructor 생성자로 생성</span></span><br><span class="line">User u2 = <span class="keyword">new</span> User(<span class="string">"가나다"</span>, <span class="string">"ganada@example.com"</span>, LocalDateTime.now(), LocalDateTime.now());</span><br><span class="line">System.out.println(<span class="string">"@ test u2: "</span>+u2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @NoArgsConstructor 생성자로 생성</span></span><br><span class="line">User u3 = <span class="keyword">new</span> User();</span><br><span class="line">System.out.println(<span class="string">"@ test u3: "</span>+u3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Builder 로 생성</span></span><br><span class="line">User u4 = User.builder()</span><br><span class="line">.name(<span class="string">"마바사"</span>)</span><br><span class="line">.email(<span class="string">"mabasa"</span>)</span><br><span class="line">.updatedAt(LocalDateTime.now())</span><br><span class="line">.build();</span><br><span class="line">System.out.println(<span class="string">"@ test u4: "</span>+u4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User객체 4개가 생성되었고 그 결과는 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ test u1: User(name&#x3D;마리아, email&#x3D;maria@example.com, createdAt&#x3D;2021-08-18T22:01:39.588614800, updatedAt&#x3D;2021-08-18T22:01:39.588614800)</span><br><span class="line">@ test u2: User(name&#x3D;가나다, email&#x3D;ganada@example.com, createdAt&#x3D;2021-08-18T22:01:39.588614800, updatedAt&#x3D;2021-08-18T22:01:39.588614800)</span><br><span class="line">@ test u3: User(name&#x3D;null, email&#x3D;null, createdAt&#x3D;2021-08-18T22:01:39.588614800, updatedAt&#x3D;null)</span><br><span class="line">@ test u4: User(name&#x3D;마바사, email&#x3D;mabasa, createdAt&#x3D;null, updatedAt&#x3D;2021-08-18T22:01:39.589613600)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>상황에 맞는 롬복을 사용하면 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Lombok/">Lombok</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/17/210818Lombok-build/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>application.properties과 application.yml 차이</title>
      <link>https://sowon-dev.github.io/2021/08/17/210818Spring-applicationyml/</link>
      <guid>https://sowon-dev.github.io/2021/08/17/210818Spring-applicationyml/</guid>
      <pubDate>Tue, 17 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링부트 프로젝트를 설정하다보면 application.properties 또는 application.yml 혹은 둘 다 만날때가 있다.&lt;br&gt;이 둘은 외부 속성을 설정하는 파일이다. 그럼 둘의 차이점은 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링부트 프로젝트를 설정하다보면 application.properties 또는 application.yml 혹은 둘 다 만날때가 있다.<br>이 둘은 외부 속성을 설정하는 파일이다. 그럼 둘의 차이점은 무엇일까?</p><a id="more"></a><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>키-밸류형식을 사용하여 외부 구성의 속성을 설정할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:h2:DB이름</span><br><span class="line">spring.datasource.username=유저이름</span><br><span class="line">spring.datasource.password=비밀번호</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>YAML기반으로 외부 구성의 속성을 설정할 수 있다.<br>반복되는 접두사가 없어 가독성이 좋다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:h2:DB이름</span><br><span class="line">        username: 유저이름</span><br><span class="line">password: 비밀번호</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>application.yml이 계층적으로 잘 표현할 수 있어 편리하다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/SpringBoot/">SpringBoot</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/17/210818Spring-applicationyml/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Springboot]Springfox Boot Starter</title>
      <link>https://sowon-dev.github.io/2021/08/15/210816Spring-springfoxswagger/</link>
      <guid>https://sowon-dev.github.io/2021/08/15/210816Spring-springfoxswagger/</guid>
      <pubDate>Sun, 15 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Swagger는 다양한 라이브러리가 있다. 그 중 Swagger2와 Swagger-ui 조합이 현재 가장 많이 사용된다.&lt;br&gt;오늘 포스팅에서는 스프링부트환경에서 Swagger2 라이브러리보다 쉽게 사용할 수 있는 Springfox Boot Starter를 소개하려고한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Swagger는 다양한 라이브러리가 있다. 그 중 Swagger2와 Swagger-ui 조합이 현재 가장 많이 사용된다.<br>오늘 포스팅에서는 스프링부트환경에서 Swagger2 라이브러리보다 쉽게 사용할 수 있는 Springfox Boot Starter를 소개하려고한다.</p><a id="more"></a><h2 id="Springfox-Boot-Starter-라이브러리"><a href="#Springfox-Boot-Starter-라이브러리" class="headerlink" title="Springfox Boot Starter 라이브러리"></a>Springfox Boot Starter 라이브러리</h2><p><a href="https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter">Maven Repository Springfox Boot Starter</a>에서 메이븐 또는 그레들 중 원하는 소스를 복사한다.</p><ul><li>Gradle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter</span></span><br><span class="line">implementation group: <span class="string">'io.springfox'</span>, name: <span class="string">'springfox-boot-starter'</span>, version: <span class="string">'3.0.0'</span></span><br></pre></td></tr></table></figure><ul><li>실행하기<br>서버를 실행한 뒤 <code>http://localhost:8080/swagger-ui/</code>에서 바로 확인할 수 있다.</li></ul><p><br><br><br></p><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><table><thead><tr><th align="center">종류</th><th align="center">자주 사용하는 속성</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">@Api</td><td align="center">tags</td><td align="center">해당 클래스를 Swagger에 표시함, API 클래스명을 한글로 제공 가능</td></tr><tr><td align="center">@ApiParam</td><td align="center">value</td><td align="center">파라미터 설명(Description)</td></tr><tr><td align="center">@ApiImplicitParams</td><td align="center"></td><td align="center">@ApiImplicitParam와의 조합으로 파라미터 설명(Description)</td></tr><tr><td align="center">@ApiImplicitParam</td><td align="center">name, value, dataTape</td><td align="center">@ApiImplicitParams의 조합으로 파라미터 설명(Description)</td></tr><tr><td align="center">@ApiResponses</td><td align="center">code, message, response</td><td align="center">@ApiResponse 조합으로 API 응답 지정</td></tr><tr><td align="center">@ApiModelProperty</td><td align="center">value, example, required</td><td align="center">모델의 변수 설명</td></tr></tbody></table><p>@ApiResponses로 응답지정시 주의점이 있다.<br>만약 code = 400 응답을 2개만들고 싶다면 어떻게 해야할까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"리턴 성공"</span>, response = UserRes<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">ApiResponse</span>(<span class="title">code</span> </span>= <span class="number">400</span>, message = <span class="string">"사용자 이름이 10자리 이상인 경우"</span>),</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"사용자 나이가 15살 이하인 경우"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위와 같이 동일 코드에 @ApiResponse를 2개이상 작성하면 message는 최상단 1개밖에 보이지 않는다.<br>즉 <code>사용자 이름이 10자리 이상인 경우</code>만 표시된다. 따라서 <code>사용자 나이가 15살 이하인 경우</code>도 표시하고 싶은 경우 아래처럼 message에 기입해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"리턴 성공"</span>, response = UserRes<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">ApiResponse</span>(<span class="title">code</span> </span>= <span class="number">400</span>, message = <span class="string">"1.사용자 이름이 10자리 이상인 경우 \t\n 2.사용자 나이가 15살 이하인 경우"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>이제 전체 코드와 이미지 예시를 보자.</p><ul><li><p>Controller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"사용자 컨트롤러"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"안녕"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/plus/&#123;x&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(@ApiParam(value = <span class="string">"x 값"</span>)</span> @PathVariable <span class="keyword">int</span> x, </span></span><br><span class="line"><span class="function">@<span class="title">ApiParam</span><span class="params">(value = <span class="string">"y 값"</span>)</span> @RequestParam <span class="keyword">int</span> y) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line"><span class="comment">// 필수속성: name, value, dataType</span></span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"x"</span>, value = <span class="string">"x2 값"</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"y"</span>, value = <span class="string">"y2 값"</span>, dataType = <span class="string">"int"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/plus2/&#123;x&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus2</span><span class="params">(@PathVariable <span class="keyword">int</span> x, @RequestParam <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"사용자 이름과 나이를 리턴하는 메서드"</span>)</span><br><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"리턴 성공"</span>, response = UserRes<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">/* 동일코드 @<span class="title">ApiResponse</span>를 작성하는 경우 첫번째 작성한 메시지만 노출된다.</span></span><br><span class="line"><span class="class">//            @<span class="title">ApiResponse</span>(<span class="title">code</span> </span>= <span class="number">400</span>, message = <span class="string">"사용자 이름이 10자리 이상인 경우"</span>),</span><br><span class="line"><span class="comment">//            @ApiResponse(code = 400, message = "사용자 나이가 15살 이하인 경우")</span></span><br><span class="line"> * 따라서 하나의 메시지안에서 구분을 줘야한다.</span><br><span class="line"> * */</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"1.사용자 이름이 10자리 이상인 경우 \t\n 2.사용자 나이가 15살 이하인 경우"</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRes <span class="title">userGet</span><span class="params">(UserReq req)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserRes(req.getName(), req.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"사용자 이름과 나이를 리턴하는 메서드"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRes <span class="title">userPost</span><span class="params">(@RequestBody UserReq req)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserRes(req.getName(), req.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dto.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRes</span> </span>&#123;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"사용자 이름"</span>, example = <span class="string">"가나다"</span>, required = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"사용자 나이"</span>, example = <span class="string">"100"</span>, required = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h3 id="1-컨트롤러-전체-및-사용자-컨트롤러의-메서드"><a href="#1-컨트롤러-전체-및-사용자-컨트롤러의-메서드" class="headerlink" title="1 컨트롤러 전체 및 사용자 컨트롤러의 메서드"></a>1 컨트롤러 전체 및 사용자 컨트롤러의 메서드</h3><p><img src="/img/210817springfoxsbootstarter1.PNG" alt=""></p><p>내가 만든 컨트롤러는 <code>사용자 컨트롤러(Api Controller)</code>인데 <code>basic-error-controller</code>는 도대체 뭘까?<br><code>basic-error-controller</code>는 Springfox Boot Starter라이브러리에서 기본적으로 제공되는 컨트롤러이다.<br><code>사용자 컨트롤러(Api Controller)</code>를 클릭하면 위 코드에서 작성한 GET메서드 4개와 POST메서드 1개를 확인할 수 있다.<br>그리고 @ApiOperation를 이용한 경우 메서드 URI옆에 설명이 기재됨을 확인할 수 있다.</p><p><br><br><br></p><h3 id="2-api-plus-x-메서드-api-plus2-x-메서드"><a href="#2-api-plus-x-메서드-api-plus2-x-메서드" class="headerlink" title="2 /api/plus/{x}메서드, /api/plus2/{x} 메서드"></a>2 <code>/api/plus/{x}</code>메서드, <code>/api/plus2/{x}</code> 메서드</h3><p><img src="/img/210817springfoxsbootstarter2.PNG" alt=""></p><p>GET메서드 <code>/api/plus/{x}</code>와 <code>/api/plus2/{x}</code>는 동일하게 swagger에 표시된다.<br>둘의 차이는 @ApiParam로 스웨거에 표시했는 지 @ApiImplicitParams로 스웨거에 표시했는 지이다.</p><p><br><br><br></p><h3 id="3-api-user-메서드"><a href="#3-api-user-메서드" class="headerlink" title="3 /api/user 메서드"></a>3 <code>/api/user</code> 메서드</h3><p><img src="/img/210817springfoxsbootstarter3.PNG" alt=""></p><p>@ApiModelProperty로 기재한 설명과 example속성에 있는 내용도 잘 표기되어있다.<br>@ApiResponses로 표기한 각 코드마다의 message를 확인할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/15/210816Spring-springfoxswagger/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Junit</title>
      <link>https://sowon-dev.github.io/2021/08/12/210813Spring-junit/</link>
      <guid>https://sowon-dev.github.io/2021/08/12/210813Spring-junit/</guid>
      <pubDate>Thu, 12 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Junit 사용법을 예시와 함께 확인해보자&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Junit 사용법을 예시와 함께 확인해보자</p><a id="more"></a><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><ul><li>java 기반의 단위 테스트를 위한 프레임워크</li><li>어노테이션기반으로 테스트 지원</li><li>Assert를 통해서 예상과 실제를 비교하여 검증</li></ul><p><br><br><br></p><h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><p>Mock이란 실제 사용되어야하는 객체의 대체객체로 실제 객체를 만들어서 하기엔 시간이 부족하고 비용이 높은 경우, 구현이 까다로울 경우에 가짜 객체를 만들어서 사용하는데 그중 하나가 Mock객체이다.</p><ul><li>행위를 검증하기 위해 사용되는 객체</li><li>직접 만들거나 스프링프레임워크를 통해서 간단하게 만들수 있음</li><li>@Mock<ul><li>Mockito 라이브러리에 위치</li><li>주로 @injectMocks 조합으로 사용</li><li>give, when, then으로 Mock객체의 행위 정의함</li></ul></li><li>@MockBean<ul><li>Springboot 테스트 패키지 내에 위치</li><li>테스트를 하려는 객체 내에서 기존에 등록된 Bean이 아닌, MockBean을 주입함.</li><li>주로 @SpringbootTest, @WebMVCTest와 함께 사용</li><li>give, when, then으로 Mock객체의 행위 정의함</li></ul></li></ul><p><br><br><br></p><h2 id="Jacoco"><a href="#Jacoco" class="headerlink" title="Jacoco"></a>Jacoco</h2><p>자바코드의 코드 커버리지를 체크하는 라이브러리로 결과를 html로 확인 가능하다.</p><p>플러그인 id에 <code>jacoco</code>를 추가하기만하면 끝!</p><ul><li>build.gradle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line"></span><br><span class="line">(중략)</span><br><span class="line">id <span class="string">'jacoco'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/12/210813Spring-junit/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]RestTemplate 활용</title>
      <link>https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/</link>
      <guid>https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/</guid>
      <pubDate>Wed, 11 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;클라이언트와 서버끼리 RestTemplate객체를 사용하여 JSON을 주고받을 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>클라이언트와 서버끼리 RestTemplate객체를 사용하여 JSON을 주고받을 수 있다.</p><a id="more"></a><h2 id="클라이언트"><a href="#클라이언트" class="headerlink" title="클라이언트"></a>클라이언트</h2><p>클라이언트에서 GET방식, POST방식으로 서버에 응답을 요청해보자.</p><p><br><br><br></p><h3 id="ClientApiController-java"><a href="#ClientApiController-java" class="headerlink" title="ClientApiController.java"></a>ClientApiController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/client"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplateService service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"get메서드 호출"</span>);</span><br><span class="line"><span class="keyword">return</span> service.hello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"post메서드 호출"</span>);</span><br><span class="line">service.post();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/exchange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"exchange메서드 호출"</span>);</span><br><span class="line"><span class="keyword">return</span> service.exchange();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/genericExchange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Req&lt;UserResponse&gt; <span class="title">genericExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"genericExchange메서드 호출"</span>);</span><br><span class="line"><span class="keyword">return</span> service.genericExchange();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="RestTemplateService-java"><a href="#RestTemplateService-java" class="headerlink" title="RestTemplateService.java"></a>RestTemplateService.java</h3><ul><li>UriComponentsBuilder: 원하는 uri를 만들 수 있는 객체</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//클라이언트이므로 주소를 만들어서 리턴해야한다 -&gt; 이때 URI컴포넌트를 주로 사용함.</span></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server"</span>)</span><br><span class="line"><span class="comment">//쿼리파람을 사용할 수 있다.</span></span><br><span class="line">.queryParam(<span class="string">"name"</span>, <span class="string">"신경숙"</span>)</span><br><span class="line">.queryParam(<span class="string">"age"</span>, <span class="number">22</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line">.toUri();</span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* =====================================================================</span></span><br><span class="line"><span class="comment"> * getForObject()와 getForEntity()의 차이</span></span><br><span class="line"><span class="comment"> * 여기서 get은 가져온다의 get이 아니라 HTTP GET 메서드의 get이다.</span></span><br><span class="line"><span class="comment"> * getForObject(): Object형태</span></span><br><span class="line"><span class="comment"> * getForEntity(): Entity형태로 getStatusCode(), getBody()를 확인할 수 있어 유용</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * =====================================================================</span></span><br><span class="line"><span class="comment"> * 두 방식 다 동일한 결과를 나타냄</span></span><br><span class="line"><span class="comment"> * 1. String으로 테스트</span></span><br><span class="line"><span class="comment"> * 호출: http://localhost:8083/api/client</span></span><br><span class="line"><span class="comment"> * 결과: 안녕 나는 클라이언트야, 내가 사라져볼께 얍! 안녕 나는 서버야</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. UserResponse로 json 받기</span></span><br><span class="line"><span class="comment"> * 호출: http://localhost:8083/api/client</span></span><br><span class="line"><span class="comment"> * 결과: &#123;</span></span><br><span class="line"><span class="comment"> *    "name": "신경숙",</span></span><br><span class="line"><span class="comment"> *    "age": 22</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 상세정보를 알기 위해서 ResponseEntity를 받는 것을 추천</span></span><br><span class="line">RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String result1 = rt.getForObject(uri, String.class);</span></span><br><span class="line">UserResponse result1 = rt.getForObject(uri, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"@ result1: "</span>+result1.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ResponseEntity&lt;String&gt; result2 = rt.getForEntity(uri, String.class);</span></span><br><span class="line">ResponseEntity&lt;UserResponse&gt; result2 = rt.getForEntity(uri, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"@ HTTP CODE확인: "</span>+result2.getStatusCode());</span><br><span class="line">System.out.println(<span class="string">"@ BODY 확인: "</span>+result2.getBody());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result2.getBody();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line"><span class="comment">//위 PathVariable과 expand()안 콤마로 순서대로 매칭</span></span><br><span class="line">.expand(<span class="string">"wony"</span>, <span class="string">"choi"</span>)</span><br><span class="line">.toUri();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line">UserRequest req = <span class="keyword">new</span> UserRequest();</span><br><span class="line">req.setAge(<span class="number">44</span>);</span><br><span class="line">req.setName(<span class="string">"최정원"</span>);</span><br><span class="line"></span><br><span class="line">RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">ResponseEntity&lt;UserResponse&gt; res = rt.postForEntity(uri, req, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"@ HTTP CODE확인: "</span>+res.getStatusCode());</span><br><span class="line">System.out.println(<span class="string">"@ HTTP Header확인: "</span>+res.getHeaders());</span><br><span class="line">System.out.println(<span class="string">"@ BODY 확인: "</span>+res.getBody());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line"><span class="comment">//위 PathVariable과 expand()안 콤마로 순서대로 매칭</span></span><br><span class="line">.expand(<span class="string">"wony"</span>, <span class="string">"choi"</span>)</span><br><span class="line">.toUri();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line">UserRequest userReq = <span class="keyword">new</span> UserRequest();</span><br><span class="line">userReq.setAge(<span class="number">44</span>);</span><br><span class="line">userReq.setName(<span class="string">"최정원"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestEntity로 header에 원하는 데이터를 넣어서 보낼 수 있다.</span></span><br><span class="line">RequestEntity&lt;UserRequest&gt; reqEntity = RequestEntity</span><br><span class="line">.post(uri)</span><br><span class="line">.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">.header(<span class="string">"x-authorization"</span>, <span class="string">"abc"</span>)</span><br><span class="line">.header(<span class="string">"custom-header"</span>, <span class="string">"ABC"</span>)</span><br><span class="line">.body(userReq);</span><br><span class="line"></span><br><span class="line">RestTemplate resTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">ResponseEntity&lt;UserResponse&gt; res = resTemplate.exchange(reqEntity, UserResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">return</span> res.getBody();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 원하는 Req&lt;UserResponse&gt; 타입의 JSON형태 주고 받기</span></span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    "header": &#123;</span></span><br><span class="line"><span class="comment">        "resCode": null</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    "responseBody": &#123;</span></span><br><span class="line"><span class="comment">        "name": "가나다",</span></span><br><span class="line"><span class="comment">        "age": 55</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Req&lt;UserResponse&gt; <span class="title">genericExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">.fromUriString(<span class="string">"http://localhost:9090"</span>)</span><br><span class="line">.path(<span class="string">"/api/server/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line">.encode()</span><br><span class="line">.build()</span><br><span class="line"><span class="comment">//위 PathVariable과 expand()안 콤마로 순서대로 매칭</span></span><br><span class="line">.expand(<span class="string">"wony"</span>, <span class="string">"choi"</span>)</span><br><span class="line">.toUri();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"@ uri.toString(): "</span> + uri.toString());</span><br><span class="line"></span><br><span class="line">UserRequest userReq = <span class="keyword">new</span> UserRequest();</span><br><span class="line">userReq.setAge(<span class="number">55</span>);</span><br><span class="line">userReq.setName(<span class="string">"가나다"</span>);</span><br><span class="line"></span><br><span class="line">Req&lt;UserRequest&gt; req = <span class="keyword">new</span> Req&lt;&gt;();</span><br><span class="line">req.setHeader(<span class="keyword">new</span> Req.Header());</span><br><span class="line">req.setResponseBody(userReq);</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestEntity로 header에 원하는 데이터를 넣어서 보낼 수 있다.</span></span><br><span class="line">RequestEntity&lt;Req&lt;UserRequest&gt;&gt; reqEntity = RequestEntity</span><br><span class="line">.post(uri)</span><br><span class="line">.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">.header(<span class="string">"x-authorization"</span>, <span class="string">"abc"</span>)</span><br><span class="line">.header(<span class="string">"custom-header"</span>, <span class="string">"ABC"</span>)</span><br><span class="line">.body(req);</span><br><span class="line"></span><br><span class="line">RestTemplate resTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"><span class="comment">// 제네릭에는 class를 사용할 수 없다 즉, Req&lt;UserResponse&gt;.class -&gt; 오류발생 -&gt; 따라서 RestTemplate의 ParameterizedTypeReference를 사용해야한다. </span></span><br><span class="line"><span class="comment">// ResponseEntity&lt;Req&lt;UserResponse&gt;&gt; res = resTemplate.exchange(reqEntity, Req&lt;UserResponse&gt;.class);</span></span><br><span class="line">ResponseEntity&lt;Req&lt;UserResponse&gt;&gt; res = resTemplate.exchange(reqEntity, <span class="keyword">new</span> ParameterizedTypeReference&lt;Req&lt;UserResponse&gt;&gt;()&#123;&#125;);</span><br><span class="line"><span class="keyword">return</span> res.getBody();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="UserResponse-java"><a href="#UserResponse-java" class="headerlink" title="UserResponse.java"></a>UserResponse.java</h3><p>응답 DTO이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResponse</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="UserRequest-java"><a href="#UserRequest-java" class="headerlink" title="UserRequest.java"></a>UserRequest.java</h3><p>요청 DTO이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Req-java"><a href="#Req-java" class="headerlink" title="Req.java"></a>Req.java</h3><p>DTO이다. 제네릭타입으로 원하는 JSON형태를 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Req</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Header header;</span><br><span class="line"><span class="keyword">private</span> T responseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String resCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="서버"><a href="#서버" class="headerlink" title="서버"></a>서버</h2><p>클라이언트의 요청에 적절한 응답을 할 수 있다.</p><p><br><br><br></p><h3 id="ServerApiComtroller-java"><a href="#ServerApiComtroller-java" class="headerlink" title="ServerApiComtroller.java"></a>ServerApiComtroller.java</h3><ul><li>순수한 HttpEntity<String>을 파라미터 변수로 받으면 디버깅 등에 유용하다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/server"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApiComtroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(@RequestParam String name, @RequestParam <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">User u = <span class="keyword">new</span> User();</span><br><span class="line">u.setName(name);</span><br><span class="line">u.setAge(age);</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@PostMapping("/user/&#123;userId&#125;/name/&#123;userName&#125;")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">post</span><span class="params">(@RequestBody User user, </span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userId, </span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userName)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"client req: &#123;&#125;"</span>, user);</span><br><span class="line">log.info(<span class="string">"userId: &#123;&#125;, userName: &#123;&#125;"</span>, userId, userName);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@PostMapping("/user/&#123;userId&#125;/name/&#123;userName&#125;")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">exchange</span><span class="params">(@RequestBody User user, </span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userId,</span></span></span><br><span class="line"><span class="function"><span class="params"> @PathVariable String userName,</span></span></span><br><span class="line"><span class="function"><span class="params"> @RequestHeader(<span class="string">"x-authorization"</span>)</span> String xAuthorization,</span></span><br><span class="line"><span class="function"> @<span class="title">RequestHeader</span><span class="params">(<span class="string">"custom-header"</span>)</span> String customHeader</span></span><br><span class="line"><span class="function"> ) </span>&#123;</span><br><span class="line">log.info(<span class="string">"client req: &#123;&#125;"</span>, user);</span><br><span class="line">log.info(<span class="string">"userId: &#123;&#125;, userName: &#123;&#125;"</span>, userId, userName);</span><br><span class="line">log.info(<span class="string">"xAuthorization: &#123;&#125;, customHeader: &#123;&#125;"</span>, xAuthorization, customHeader);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 순수한 HttpEntity&lt;String&gt;을 파라미터 변수로 받으면 디버깅 등에 유용하다</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/&#123;userId&#125;/name/&#123;userName&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Req&lt;User&gt; <span class="title">genericExchange</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">//HttpEntity&lt;String&gt; entity, </span></span></span><br><span class="line"><span class="function"><span class="params">@RequestBody Req&lt;User&gt; user, </span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestHeader(<span class="string">"x-authorization"</span>)</span> String xAuthorization,</span></span><br><span class="line"><span class="function">@<span class="title">RequestHeader</span><span class="params">(<span class="string">"custom-header"</span>)</span> String customHeader</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line"><span class="comment">//log.info("entity 순수한 : &#123;&#125;", entity);</span></span><br><span class="line">log.info(<span class="string">"HttpEntity&lt;String&gt; 디버깅 등에 유용: &#123;&#125;"</span>, user);</span><br><span class="line">log.info(<span class="string">"userId: &#123;&#125;, userName: &#123;&#125;"</span>, userId, userName);</span><br><span class="line">log.info(<span class="string">"xAuthorization: &#123;&#125;, customHeader: &#123;&#125;"</span>, xAuthorization, customHeader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원하는 json형태로 응답하기</span></span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    "header": &#123;</span></span><br><span class="line"><span class="comment">        "resCode": null</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    "responseBody": &#123;</span></span><br><span class="line"><span class="comment">        "name": "가나다",</span></span><br><span class="line"><span class="comment">        "age": 55</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">Req&lt;User&gt; response = <span class="keyword">new</span> Req&lt;&gt;();</span><br><span class="line">response.setHeader(<span class="keyword">new</span> Req.Header());</span><br><span class="line">response.setResponseBody(user.getResponseBody());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><ul><li>@Data: @ToString, @EqualsAndHashCode, @Getter(모든 필드), @Setter(정적 필드가 아닌 모든 필드), @RequiredArgsConstructor</li><li>@NoArgsConstructor: 파라미터가 없는 기본 생성자 생성</li><li>@AllArgsConstructor: 모든 필드 값을 파라미터로 받는 생성자 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Req-java-1"><a href="#Req-java-1" class="headerlink" title="Req.java"></a>Req.java</h3><p>DTO이다. 제네릭타입으로 원하는 JSON형태를 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Req</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Header header;</span><br><span class="line"><span class="keyword">private</span> T responseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String resCode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/11/210812Spring-resttemplate/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Springboot Excel파일 업로드 후 DB에 저장</title>
      <link>https://sowon-dev.github.io/2021/08/09/210810Spring-excel/</link>
      <guid>https://sowon-dev.github.io/2021/08/09/210810Spring-excel/</guid>
      <pubDate>Mon, 09 Aug 2021 20:07:29 GMT</pubDate>
      
      <description>&lt;p&gt;스프링프로젝트에서 엑셀파일을 업로드 한 뒤 각 열을 DB 컬럼과 맞춰서 저장하는 기능을 구현해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링프로젝트에서 엑셀파일을 업로드 한 뒤 각 열을 DB 컬럼과 맞춰서 저장하는 기능을 구현해보자.</p><a id="more"></a><h2 id="엑셀데이터-예시"><a href="#엑셀데이터-예시" class="headerlink" title="엑셀데이터 예시"></a>엑셀데이터 예시</h2><table><thead><tr><th align="center">아이디</th><th align="center">비밀번호</th><th align="center">사용자이름</th></tr></thead><tbody><tr><td align="center">sea</td><td align="center">1234</td><td align="center">김바다</td></tr><tr><td align="center">sun</td><td align="center">5678</td><td align="center">박태양</td></tr><tr><td align="center">wind</td><td align="center">1234</td><td align="center">이바람</td></tr></tbody></table><p>3행 3열로 이루어진 데이터를 DB에 넣어보려고한다.</p><p><br><br><br></p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>먼저 dependency를 추가해야한다. <a href="https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml">메이븐 레포지토리 사이트</a>에서 원하는 버전과 프로젝트를 선택한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="userController-java"><a href="#userController-java" class="headerlink" title="userController.java"></a>userController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/addExcel"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;? extends BasicResponse&gt; addExcel(HttpServletRequest request,</span><br><span class="line">HttpServletResponse response, MultipartFile file) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok().body(service.insertExcel(file));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="userService-java"><a href="#userService-java" class="headerlink" title="userService.java"></a>userService.java</h2><p>확장자 유효성 검사는 1안과 2안이 있는데 2안이 훨씬 좋다.<br>그 이유는 이름만 xls, xlsx로 바꿀 수 있기때문이다 아예 contentType이 XLSX인 것을 확인하는 것이 좋다.</p><ol><li>FilenameUtils.getExtension(file.getOriginalFilename()).toLowerCase()로 한 뒤 xlsx이나 xls이 일치하는 지 확인</li><li>file.getFile().getContentType()을 변수에 담아서 ConstContentType.XLSX과 일치하는 지 확인</li></ol><p><br><br><br>아래는 userService안의 addExcel 메서드 소스 코드이다.<br>BasicResponse클래스는 그냥 response클래스이므로 생략하고 mapper클래스도 생략한다.</p><p>로직 순서이다.</p><ol><li>파라미터에 파일이 있는지 확인 -&gt; 없으면 return 에러</li><li>확장자가 엑셀인지 확인  -&gt; 아니면 return 에러</li><li>엑셀테이터를 가져와서 각 행마다 VO객체에 저장 -&gt; list에 저장</li><li>list를 DB에 insert</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ExcelUtil excelUtil;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BasicResponse <span class="title">addExcel</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">BasicResponse res = <span class="keyword">new</span> BasicResponse();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 파일 존재하지 않는 경우</span></span><br><span class="line"><span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">res.setEmpty();</span><br><span class="line">res.setMessage(<span class="string">"Excel 파일을 선택해주세요."</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 확장자 유효성 검사 -&gt; 엑셀파일만 가능</span></span><br><span class="line"><span class="comment">//1안: tring ext = fileUtil.getExtension(file.getOriginalFilename());</span></span><br><span class="line"><span class="comment">//2안</span></span><br><span class="line">String contentType = file.getFile().getContentType();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1안: if (!ext.equals("xlsx") &amp;&amp; !ext.equals("xls")) &#123;</span></span><br><span class="line"><span class="comment">//2안</span></span><br><span class="line"><span class="keyword">if</span>(!contentType.equals(ConstContentType.XLSX)) &#123;</span><br><span class="line">res.setEmpty();</span><br><span class="line">res.setMessage(<span class="string">"Excel 파일을 선택해주세요."</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; listUser = <span class="keyword">new</span> ArrayList&lt;UserVO&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 엑셀의 셀데이터를 가져와서 VO에 담기</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMap = excelUtil.getListData(file, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : listMap) &#123;</span><br><span class="line">UserVO userInfo = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 셀의 데이터를 VO에 set한다.</span></span><br><span class="line">userInfo.setUserId(map.get(<span class="string">"1"</span>).toString());</span><br><span class="line">userInfo.setPassword(map.get(<span class="string">"2"</span>).toString());</span><br><span class="line">userInfo.setUserName(map.get(<span class="string">"3"</span>).toString());</span><br><span class="line"></span><br><span class="line">listUser.add(userInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리스트에 담은 VO를 DB에 저장</span></span><br><span class="line"><span class="keyword">for</span> (UserVO oneUser : listUser)&#123;</span><br><span class="line">userMapper.insertUser(oneUser);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getListData(file, 1, 3)의 의미<br>엑셀파일의 1번째 행부터 3번째 열까지의 데이터를 listMap에 담는다.<br>0번째 행부터 하지 않는 이유는 보통 0번째행은 머리글행으로 제목이나 구분명칭을 작성하기 때문이다.<br>3인 이유는 엑셀데이터에 3열이 있기때문이다.<br>가지고 있는 엑셀데이터에 따라 변경하면 된다.</li></ul><p><br><br><br></p><h2 id="ExcelUtil-java"><a href="#ExcelUtil-java" class="headerlink" title="ExcelUtil.java"></a>ExcelUtil.java</h2><p>제일 중요한 엑셀유틸객체이다.</p><p>getListData 메서드의 파라미터 정의</p><ul><li>startRowNum : 시트 시작 행 번호이다. 시트 행은 0부터 시작한다.</li><li>columnLength : 시트 열의 총 개수</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 셀의 데이터타입에 맞게 값 가져오기</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCellValue</span><span class="params">(XSSFCell cell)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String value = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cell == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (cell.getCellType()) &#123;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line">value = cell.getStringCellValue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> NUMERIC:</span><br><span class="line">value = (<span class="keyword">int</span>) cell.getNumericCellValue() + <span class="string">""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 엑셀파일의 데이터 목록 가져오기 (파라미터들은 위에서 설명함)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getListData(MultipartFile file, <span class="keyword">int</span> startRowNum, <span class="keyword">int</span> columnLength) &#123;</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; excelList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">OPCPackage opcPackage = OPCPackage.open(file.getInputStream());</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line">XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(opcPackage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 시트</span></span><br><span class="line">XSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rowIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> columnIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 행(0)은 컬럼 명이기 때문에 두번째 행(1) 부터 검색</span></span><br><span class="line"><span class="keyword">for</span> (rowIndex = startRowNum; rowIndex &lt; sheet.getLastRowNum() + <span class="number">1</span>; rowIndex++) &#123;</span><br><span class="line">XSSFRow row = sheet.getRow(rowIndex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 빈 행은 Skip</span></span><br><span class="line"><span class="keyword">if</span> (row.getCell(<span class="number">0</span>) != <span class="keyword">null</span> &amp;&amp; !row.getCell(<span class="number">0</span>).toString().isBlank()) &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cells = columnLength;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (columnIndex = <span class="number">0</span>; columnIndex &lt;= cells; columnIndex++) &#123;</span><br><span class="line">XSSFCell cell = row.getCell(columnIndex);</span><br><span class="line">map.put(String.valueOf(columnIndex), getCellValue(cell));</span><br><span class="line">logger.info(rowIndex + <span class="string">" 행 : "</span> + columnIndex+ <span class="string">" 열 = "</span> + getCellValue(cell));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">excelList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> excelList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="파일-업로드-사이즈-초과-에러"><a href="#파일-업로드-사이즈-초과-에러" class="headerlink" title="파일 업로드 사이즈 초과 에러"></a>파일 업로드 사이즈 초과 에러</h2><p>파일 사이즈를 초과해서 업로드할 수 있으므로 예외처리를 해준다.<br><code>@RestControllerAdvice</code>를 사용한 BadRequestHandler 클래스에서 예외처리를 해주었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadRequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;MaxUploadSizeExceededException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;? <span class="keyword">extends</span> <span class="title">BasicResponse</span>&gt; <span class="title">uploadException</span>(<span class="title">MaxUploadSizeExceededException</span> <span class="title">exc</span>, </span></span><br><span class="line"><span class="class">      <span class="title">HttpServletRequest</span> <span class="title">request</span>,</span></span><br><span class="line"><span class="class">      <span class="title">HttpServletResponse</span> <span class="title">response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(<span class="keyword">new</span> ErrorResponse(String.valueOf(HttpStatus.PAYLOAD_TOO_LARGE.value()), <span class="string">"파일 사이즈를 초과하였습니다. (10MB 이하의 파일을 선택해주세요.)"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/08/09/210810Spring-excel/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>STS git clone 깃허브연동하여 스프링 maven프로젝트 가져오기</title>
      <link>https://sowon-dev.github.io/2021/08/09/210810STSgitClone/</link>
      <guid>https://sowon-dev.github.io/2021/08/09/210810STSgitClone/</guid>
      <pubDate>Mon, 09 Aug 2021 19:23:00 GMT</pubDate>
      
      <description>&lt;p&gt;프로젝트 셋팅을 자주하지 않기때문에 헷갈릴 염려가 있어 아예 순서를 적어두려고 한다.&lt;br&gt;github 레포지토리의 springboot maven(메이븐)프로젝트를 가져오는 방법이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로젝트 셋팅을 자주하지 않기때문에 헷갈릴 염려가 있어 아예 순서를 적어두려고 한다.<br>github 레포지토리의 springboot maven(메이븐)프로젝트를 가져오는 방법이다.</p><a id="more"></a><h2 id="1-STS에서-Perpectives를-git으로-변경"><a href="#1-STS에서-Perpectives를-git으로-변경" class="headerlink" title="1 STS에서 Perpectives를 git으로 변경"></a>1 STS에서 Perpectives를 git으로 변경</h2><p><img src="/img/210810STSgitClone1.PNG" alt=""></p><ol><li>STS 또는 이클립스에서 Perspectives의 돋보기 아이콘을 클릭한다.</li><li>git 검색</li><li>Perpectives git 선택</li></ol><p><br><br><br></p><h2 id="2-Clone-a-Git-repository"><a href="#2-Clone-a-Git-repository" class="headerlink" title="2 Clone a Git repository"></a>2 Clone a Git repository</h2><p><img src="/img/210810STSgitClone2.PNG" alt=""></p><ol><li><code>Clone a Git repository</code> 클릭</li><li>깃헙 레포에서 복사한 clone URI를 붙여넣기한다.<br>깃헙에서 초록색 <code>Code</code>버튼을 클릭한 뒤 URI를 복사했다면 붙여넣지 않아도 자동적으로 기입된다.</li><li>NEXT를 클릭한 뒤 Clone을 원하는 브랜치를 선택한다.<br>기본값은 main 또는 master 브랜치가 체크되어 있다.<br>Tag fetching strateguy는 기본값으로 진행하나 필요에 따라 바꾸면 된다.</li><li>LocalDestination의 Directory를 선택한다.<br>저장은 원하는 곳에 설정하면 된다. 나는 보통 D 드라이브로 경로를 설정한다.</li></ol><p>이제 깃헙 연동이 끝났다!<br>잘 가져왔는 지 어떻게 확인할까?<br>아래 이미지에서 체크한 부분을 보자.</p><p><img src="/img/210810STSgitClone3.PNG" alt=""></p><p>STS의 Progress탭을 보면 클론이 진행중인 걸 확인할 수 있다.<br>프로젝트 크기에 따라 시간이 꽤 걸릴 수 있다.</p><p><br><br><br></p><h2 id="3-STS에서-Perpectives를-java로-변경"><a href="#3-STS에서-Perpectives를-java로-변경" class="headerlink" title="3 STS에서 Perpectives를 java로 변경"></a>3 STS에서 Perpectives를 java로 변경</h2><p><img src="/img/210810STSgitClone4.PNG" alt=""></p><ol><li>import projects 클릭</li><li>maven 검색</li><li>Existing Maven Projects선택</li></ol><p><img src="/img/210810STSgitClone5.PNG" alt=""></p><ol start="4"><li><p>Browe 선택 후 위에서 저장된 경로 선택<br>나는 D에 저장햇으므로 D에 있는 파일 경로를 선택했다.</p></li><li><p>pom.xml 선택 확인<br>자동적으로 pom.xml이 검색되고 체크되므로 확인한다.</p></li><li><p>finish 버튼<br>조금만 기다리면 불러오기가 완료된다!<br>끝!</p></li></ol><h2 id="gradle-프로젝트라면"><a href="#gradle-프로젝트라면" class="headerlink" title="gradle 프로젝트라면?"></a>gradle 프로젝트라면?</h2><p>1,2번은 동일하게 진행하면 되고 3번에서 maven이 아니라 gradle폴더를 선택한 후 <code>Existing Gradle Project</code>를 클릭하면 된다!<br>참 쉽죠?!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/STS/">STS</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/09/210810STSgitClone/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Interceptor</title>
      <link>https://sowon-dev.github.io/2021/08/08/210809Spring-interceptor/</link>
      <guid>https://sowon-dev.github.io/2021/08/08/210809Spring-interceptor/</guid>
      <pubDate>Sun, 08 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링에서 인터셉터에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링에서 인터셉터에 대해 알아보자.</p><a id="more"></a><h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><ul><li><a href="https://sowon-dev.github.io/2021/08/06/210807Spring-filter/">Filter</a>와 매우 유사한 형태지만 차이점은 Spring Context에 등록됨.</li><li>Controller 영역 안에 존재</li><li>AOP와 유사한 기능 제공 가능</li><li>주로 <code>인증 단계</code>를 처리하는데 사용 (조직에 따라 Logging용도로 사용)</li><li>인터셉터를 선/후처리함으로써, 서비스 비즈니스 로직과 분리시킴.</li><li><code>@RequiredArgsConstructor</code>: final로 선언된 객체들을 생성자에서 주입받을 수 있도록 해줌</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/08/210809Spring-interceptor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Filter</title>
      <link>https://sowon-dev.github.io/2021/08/06/210807Spring-filter/</link>
      <guid>https://sowon-dev.github.io/2021/08/06/210807Spring-filter/</guid>
      <pubDate>Fri, 06 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;스프링에서 필터에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링에서 필터에 대해 알아보자.</p><a id="more"></a><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li>Filter란 웹 어플리케이션에서 관리되는 영역</li><li>스프링부트 프레임워크에서 요청/응답의 최초와 최종단계에 위치</li><li>필터를 통해 요청/응답 정보 변경 가능</li><li><strong>유일하게 ServletRequest, ServletResponse 객체를 변환할 수 있음</strong></li><li>주로 인증로직과 logging용도로 활용<ul><li>보통 실무에선 logging용도로 사용되고 <a href="https://sowon-dev.github.io/2021/08/09/210809Spring-interceptor/">intercepter</a>가 인증단계로 사용됨</li></ul></li></ul><p><br><br><br>전역 Filter설정방법과 특정 컨트롤러에만 Filter를 설정하는 방법을 예제 코드와 함께 보자.<br>차이점으로는 특정 컨트롤러 필터사용시 아래 두 어노테이션을 사용한다는 점이다.</p><ul><li><code>@ServletComponentScan</code></li><li><code>@WebFilter(&quot;/api2/user/*&quot;)</code></li></ul><p><br><br></p><h2 id="Filter-공통-코드"><a href="#Filter-공통-코드" class="headerlink" title="Filter 공통 코드"></a>Filter 공통 코드</h2><ul><li>User.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="전역-Filter-코드-예제"><a href="#전역-Filter-코드-예제" class="headerlink" title="전역 Filter 코드 예제"></a>전역 Filter 코드 예제</h2><ul><li>FilterApplication.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(FilterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller1.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"user1: &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GlobalFilter1.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//전처리</span></span><br><span class="line">    ContentCachingRequestWrapper req = <span class="keyword">new</span> ContentCachingRequestWrapper((HttpServletRequest) request);</span><br><span class="line">    ContentCachingResponseWrapper res = <span class="keyword">new</span> ContentCachingResponseWrapper((HttpServletResponse) response);</span><br><span class="line"></span><br><span class="line">    chain.doFilter(req, res);</span><br><span class="line">    String url = req.getRequestURI();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//후처리</span></span><br><span class="line">    String reqContent = <span class="keyword">new</span> String(req.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone url: &#123;&#125;, reqBody: &#123;&#125;"</span>, url, reqContent);</span><br><span class="line"></span><br><span class="line">    String resContent = <span class="keyword">new</span> String(res.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone resBody: &#123;&#125;"</span>, resContent);</span><br><span class="line">    <span class="comment">// 필수: 한 번 읽었기때문에 원래대로 copy 돌려놓아야한다.</span></span><br><span class="line">    res.copyBodyToResponse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="특정-컨트롤러-Filter-코드-예제"><a href="#특정-컨트롤러-Filter-코드-예제" class="headerlink" title="특정 컨트롤러 Filter 코드 예제"></a>특정 컨트롤러 Filter 코드 예제</h2><ul><li>FilterApplication.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span> <span class="comment">//2번방법용</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(FilterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller2.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 컨트롤러에만 필터적용</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Api2Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"Api2Controller 컨트롤러에만 GlobalFilter2 필터 적용"</span>);</span><br><span class="line">    log.info(<span class="string">"user2: &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GlobalFilter2.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/api2/user/*"</span>) <span class="comment">//특정 컨트롤러에만 사용 가능하도록 설정</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//전처리</span></span><br><span class="line">    ContentCachingRequestWrapper req = <span class="keyword">new</span> ContentCachingRequestWrapper((HttpServletRequest) request);</span><br><span class="line">    ContentCachingResponseWrapper res = <span class="keyword">new</span> ContentCachingResponseWrapper((HttpServletResponse) response);</span><br><span class="line"></span><br><span class="line">    chain.doFilter(req, res);</span><br><span class="line">    String url = req.getRequestURI();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//후처리</span></span><br><span class="line">    String reqContent = <span class="keyword">new</span> String(req.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone url: &#123;&#125;, reqBody: &#123;&#125;"</span>, url, reqContent);</span><br><span class="line"></span><br><span class="line">    String resContent = <span class="keyword">new</span> String(res.getContentAsByteArray()); <span class="comment">//default가 UTF-8</span></span><br><span class="line">    log.info(<span class="string">"respone resBody: &#123;&#125;"</span>, resContent);</span><br><span class="line">    <span class="comment">// 필수: 한 번 읽었기때문에 원래대로 copy 돌려놓아야한다.</span></span><br><span class="line">    res.copyBodyToResponse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/06/210807Spring-filter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>delete mapper에서 여러 테이블의 데이터 한꺼번에 삭제 오류</title>
      <link>https://sowon-dev.github.io/2021/08/04/210805MyBatis-multiqueries/</link>
      <guid>https://sowon-dev.github.io/2021/08/04/210805MyBatis-multiqueries/</guid>
      <pubDate>Wed, 04 Aug 2021 21:17:49 GMT</pubDate>
      
      <description>&lt;p&gt;개인정보와 같은 경우 회원 탈퇴를 할때 여러 테이블에 있는 해당 사용자 정보를 전부 다 삭제해야한다.&lt;br&gt;이를 한꺼번에 아래 코드처럼 처리할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>개인정보와 같은 경우 회원 탈퇴를 할때 여러 테이블에 있는 해당 사용자 정보를 전부 다 삭제해야한다.<br>이를 한꺼번에 아래 코드처럼 처리할 수 있다.</p><a id="more"></a><h2 id="다중쿼리"><a href="#다중쿼리" class="headerlink" title="다중쿼리"></a>다중쿼리</h2><p>아래는 user id를 가지고 userinfo테이블, payment테이블, authority테이블, board테이블, 총 4개의 테이블에서 해당 유저정보를 삭제하는 다중쿼리이다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deletePersonalData"</span> parameterType=<span class="string">"String"</span>&gt;</span><br><span class="line">DELETE FROM userinfo</span><br><span class="line"> WHERE user_id = #&#123;userId&#125;;</span><br><span class="line"></span><br><span class="line">DELETE FROM payment</span><br><span class="line"> WHERE user_id = #&#123;userId&#125;;</span><br><span class="line"></span><br><span class="line">DELETE FROM authority</span><br><span class="line"> WHERE user_id = #&#123;userId&#125;;</span><br><span class="line"></span><br><span class="line">DELETE FROM board</span><br><span class="line"> WHERE user_id = #&#123;userId&#125;;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>delete메서드이다보니 조심스럽게 run을 돌렸는데 syntax에러가 나타났다!</p><p><img src="/img/210805MyBatis-multiqueries.PNG" alt=""></p><p>해당 쿼리를 전혀 읽지 못하고 있었다.<br>구글링으로 엄청 삽질하다가 과장님께 물어보니 멀티 쿼리 허용했는 지를 물어보셨다<br>내 대답은 아뇨…였다.</p><p>과장님 감사합니다🙏</p><p><br><br><br></p><h2 id="멀티쿼리-허용하기"><a href="#멀티쿼리-허용하기" class="headerlink" title="멀티쿼리 허용하기"></a>멀티쿼리 허용하기</h2><p><code>application.properties</code>에 기재되어있는 DB주소 정보 뒤에 멀티쿼리를 설정해줘야한다!</p><ul><li><code>allowMultiQueries=true</code></li></ul><p>아래는 코드 예시이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:log4jdbc:mariadb:<span class="comment">//DB서버IP주소/DatabaseName?allowMultiQueries=true</span></span><br></pre></td></tr></table></figure><p>설정해야지만 쓸 수 있는 것이 다중쿼리이다!<br>까먹지말고 DB주소 뒤에 설정하자!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MyBatis/">MyBatis</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/04/210805MyBatis-multiqueries/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]@Transactional 쓰는 이유</title>
      <link>https://sowon-dev.github.io/2021/08/04/210805Spring-Transactional/</link>
      <guid>https://sowon-dev.github.io/2021/08/04/210805Spring-Transactional/</guid>
      <pubDate>Wed, 04 Aug 2021 20:05:51 GMT</pubDate>
      
      <description>&lt;p&gt;세상에 이렇게 재밌는 일이 또 있을까?&lt;br&gt;습관처럼 쓰던 것들이 왜 써야하는 지 알게될 때의 그 재미.&lt;br&gt;정말 겪어 본 사람만 안다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>세상에 이렇게 재밌는 일이 또 있을까?<br>습관처럼 쓰던 것들이 왜 써야하는 지 알게될 때의 그 재미.<br>정말 겪어 본 사람만 안다.</p><a id="more"></a><h2 id="이럴때-있으시죠"><a href="#이럴때-있으시죠" class="headerlink" title="이럴때 있으시죠?"></a>이럴때 있으시죠?</h2><p>Service에서 mapper로 여러 SQL쿼리를 처리할 때 그 중 하나가 오류가 난 경우 그 전에 실행되었던 SQL 쿼리들이 다 롤백되어야한다.<br>이를 트랜잭션 처리라고 부른다.<br>트랜잭션 처리는 SQL에서 할 수도 있고 Spring에서 할수도 있다.</p><p><br><br><br></p><h2 id="Spring에서-트랜잭션을-설정하는-2가지-방법"><a href="#Spring에서-트랜잭션을-설정하는-2가지-방법" class="headerlink" title="Spring에서 트랜잭션을 설정하는 2가지 방법"></a>Spring에서 트랜잭션을 설정하는 2가지 방법</h2><ol><li>xml파일에서 AOP + tx:advice 태그 활용</li><li>어노테이션 @Transactional</li></ol><p>트랜잭션처리를 하면 transaction begin, commit을 자동 수행해준다. 만약 예외가 생겼다면 rollback 처리를 자동 수행해준다.<br>정말 간편!</p><p><br><br><br></p><h2 id="Springboot에서-Transactional-설정"><a href="#Springboot에서-Transactional-설정" class="headerlink" title="Springboot에서 @Transactional 설정"></a>Springboot에서 @Transactional 설정</h2><p>어노테이션은 클래스뿐만 아니라 인터페이스, 클래스 내 메서드위에도 붙일 수 있다.<br>세상 간편!</p><p>주로 아래 에시코드처럼 서비스 클래스 위에 붙여준다.<br>이걸로 설정 끝!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(UserDTO user)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 비즈니스 로직</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 기타 메서드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예시 코드의 rollbackFor속성외에도 @Transactional에는 다양한 속성이 있다. <a href="https://www.hanumoka.net/2018/09/11/spring-20180911-spring-Transactional/">하누모카님의 @Transactional 포스팅</a>에 알기 쉽게 적혀있다. 꼭 읽어보자!</p><p>그리고 rollbackFor 속성을 꼭 붙여줘야하는 이유는 <a href="https://velog.io/@kdhyo/JavaTransactional-Annotation-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-26her30h">kdhyo님의 @Transactional Annotation 알고 쓰자 포스팅</a>에 정말 자세하게 나와있으니 꼭 읽어보자. 정말 좋은 글이다.</p><p><br><br><br></p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><p>요약하자면 @Transactional은 기본적으로 Unchecked Exception, Error를 rollback한다.<br>try catch로 명시해준 에러인 경우 Checked Exception이기 때문에 트랜잭션이 일어나지 않을 수 있다.<br>따라서 <code>rollbackFor = Exception.class</code>속성을 통해서 Unchecked Exception, Error뿐만 아니라 checked Exception도 트랜잭션 처리를 가능하게할 수 있다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/08/04/210805Spring-Transactional/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]Springboot Exception처리</title>
      <link>https://sowon-dev.github.io/2021/08/03/210804springbootError/</link>
      <guid>https://sowon-dev.github.io/2021/08/03/210804springbootError/</guid>
      <pubDate>Tue, 03 Aug 2021 21:35:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;예외처리-어노테이션&quot;&gt;&lt;a href=&quot;#예외처리-어노테이션&quot; class=&quot;headerlink&quot; title=&quot;예외처리 어노테이션&quot;&gt;&lt;/a&gt;예외처리 어노테이션&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="예외처리-어노테이션"><a href="#예외처리-어노테이션" class="headerlink" title="예외처리 어노테이션"></a>예외처리 어노테이션</h2><a id="more"></a><ul><li><code>@ControllerAdvice</code>: 글로벌 예외처리 및 특정 package/controller 예외처리<ul><li>속성 basePackageClasses</li></ul></li><li><code>@ExceptionHandler</code>: 특정 controller예외처리</li></ul><p>Exceprion이 발생했을 때 어떤 부분의 예외인지 그 이름을 알고 싶을때 Exception클래스 내 <code>e.getClass().getName()</code>메서드를 사용할 수 있다.</p><p><br><br><br></p><h2 id="다른-개발자가-봐도-알기쉽도록-메시지를-꾸며보자"><a href="#다른-개발자가-봐도-알기쉽도록-메시지를-꾸며보자" class="headerlink" title="다른 개발자가 봐도 알기쉽도록 메시지를 꾸며보자"></a>다른 개발자가 봐도 알기쉽도록 메시지를 꾸며보자</h2><ul><li>ErrorResponse.java<br>한 파라미터에 조건이 여러 개가 있을 수 있으므로 List로 에러필드와 에러메시지를 받을 필요가 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span> </span>&#123;</span><br><span class="line">String statusCode;</span><br><span class="line">    String requestUrl;</span><br><span class="line">    String code;</span><br><span class="line">    String message;</span><br><span class="line">    String resultCode;</span><br><span class="line"></span><br><span class="line">    List&lt;Error&gt; errorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Error.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String field; <span class="comment">//파라미터명</span></span><br><span class="line"><span class="keyword">private</span> String message; <span class="comment">//오류메시지</span></span><br><span class="line"><span class="keyword">private</span> String invalidValue; <span class="comment">//입력한 값</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 제일 중요한 컨트롤러 부분을 보자.</p><ul><li>ApiControllerAdvice.java<br>String으로 각각 에러값을 받은 다음 위에서 선언한 Error클래스에 set해준 뒤 list에 add해준다.<br>각 예외클래스마다 사용할 수 있는 것들이 다르니 디버그나 공식문서를 통해서 원하는 내용을 찾으면 된다!</li></ul><p>아래 예시는 가장 기본이 되는 방식</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 다른 컨트롤러들말고 오로지 ApiController에서만 사용하고싶을때 basePackageClasses속성을 사용한다</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span>(basePackageClasses = ApiController<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApiControllerAdvice</span> </span>&#123;</span><br><span class="line"> <span class="meta">@ExceptionHandler</span>(value = MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">methodArgumentNotValidException</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">httpServletRequest</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Error&gt; errorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        BindingResult bindingResult = e.getBindingResult();</span><br><span class="line">        bindingResult.getAllErrors().forEach(error -&gt; &#123;</span><br><span class="line">            FieldError field = (FieldError) error;</span><br><span class="line"></span><br><span class="line">            String fieldName = field.getField();</span><br><span class="line">            String message = field.getDefaultMessage();</span><br><span class="line">            String value = field.getRejectedValue().toString();</span><br><span class="line">            </span><br><span class="line">            Error errorMessage = <span class="keyword">new</span> Error();</span><br><span class="line">            errorMessage.setField(fieldName);</span><br><span class="line">            errorMessage.setMessage(message);</span><br><span class="line">            errorMessage.setInvalidValue(value);</span><br><span class="line"></span><br><span class="line">            errorList.add(errorMessage);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ErrorResponse errorResponse = <span class="keyword">new</span> ErrorResponse();</span><br><span class="line">        errorResponse.setErrorList(errorList);</span><br><span class="line">        errorResponse.setMessage(<span class="string">""</span>);</span><br><span class="line">        errorResponse.setRequestUrl(httpServletRequest.getRequestURI()); <span class="comment">//현재 api주소 </span></span><br><span class="line">        errorResponse.setStatusCode(HttpStatus.BAD_REQUEST.toString());</span><br><span class="line">        errorResponse.setResultCode(<span class="string">"FAIL"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = ConstraintViolationException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">constraintViolationException</span>(<span class="title">ConstraintViolationException</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">httpServletRequest</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Error&gt; errorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        e.getConstraintViolations().forEach(error -&gt;&#123;</span><br><span class="line">            Stream&lt;Path.Node&gt; stream = StreamSupport.stream(error.getPropertyPath().spliterator(), <span class="keyword">false</span>);</span><br><span class="line">            List&lt;Path.Node&gt; list = stream.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            String field = list.get(list.size() -<span class="number">1</span>).getName();</span><br><span class="line">            String message = error.getMessage();</span><br><span class="line">            String invalidValue = error.getInvalidValue().toString();</span><br><span class="line"></span><br><span class="line">            Error errorMessage = <span class="keyword">new</span> Error();</span><br><span class="line">            errorMessage.setField(field);</span><br><span class="line">            errorMessage.setMessage(message);</span><br><span class="line">            errorMessage.setInvalidValue(invalidValue);</span><br><span class="line"></span><br><span class="line">            errorList.add(errorMessage);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ErrorResponse errorResponse = <span class="keyword">new</span> ErrorResponse();</span><br><span class="line">        errorResponse.setErrorList(errorList);</span><br><span class="line">        errorResponse.setMessage(<span class="string">""</span>);</span><br><span class="line">        errorResponse.setRequestUrl(httpServletRequest.getRequestURI()); <span class="comment">//현재 api주소 </span></span><br><span class="line">        errorResponse.setStatusCode(HttpStatus.BAD_REQUEST.toString());</span><br><span class="line">        errorResponse.setResultCode(<span class="string">"FAIL"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = MissingServletRequestParameterException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">missingServletRequestParameterException</span>(<span class="title">MissingServletRequestParameterException</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">httpServletRequest</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Error&gt; errorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String fieldName = e.getParameterName();</span><br><span class="line">        String invalidValue = e.getMessage();</span><br><span class="line"></span><br><span class="line">        Error errorMessage = <span class="keyword">new</span> Error();</span><br><span class="line">        errorMessage.setField(fieldName);</span><br><span class="line">        errorMessage.setMessage(e.getMessage());</span><br><span class="line"></span><br><span class="line">        ErrorResponse errorResponse = <span class="keyword">new</span> ErrorResponse();</span><br><span class="line">        errorResponse.setErrorList(errorList);</span><br><span class="line">        errorResponse.setMessage(<span class="string">""</span>);</span><br><span class="line">        errorResponse.setRequestUrl(httpServletRequest.getRequestURI());</span><br><span class="line">        errorResponse.setStatusCode(HttpStatus.BAD_REQUEST.toString());</span><br><span class="line">        errorResponse.setResultCode(<span class="string">"FAIL"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p>만약 valid 설정을 아래와 같이 했다면 예외 메시지는 어떻게 나올까?</p><ul><li><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotEmpty</span> <span class="meta">@Size</span>(min=<span class="number">1</span>, max=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Min</span>(<span class="number">1</span>) <span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ApiController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/user"</span>)</span><br><span class="line"><span class="meta">@Validated</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">post</span><span class="params">(@Valid @RequestBody User user)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"@ post call"</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>위처럼 유효성체크를 설정한 뒤 POST맨을 통한 결과를 알아보자.<br>name에 빈값을 넣었고, age에는 0을 넣었다.</p><p><img src="/img/210805SpringbootError.PNG" alt=""></p><p>사진처럼 다른 개발자가 보아도 이해하기 쉬운 에러메시지를 확인할 수 있다.</p><p><br><br><br></p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li><a href="https://github.com/steve-developer/fastcampus-springboot-introduction/tree/master/06.%20%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98%20%EA%B8%B0%EB%8A%A5%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/SourceCode/exception">https://github.com/steve-developer/fastcampus-springboot-introduction/tree/master/06.%20%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98%20%EA%B8%B0%EB%8A%A5%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/SourceCode/exception</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/03/210804springbootError/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>@의 의미와 ROWNUM으로 활용하기</title>
      <link>https://sowon-dev.github.io/2021/08/03/210804rownum/</link>
      <guid>https://sowon-dev.github.io/2021/08/03/210804rownum/</guid>
      <pubDate>Tue, 03 Aug 2021 19:30:55 GMT</pubDate>
      
      <description>&lt;p&gt;MySql에서 사용하는 @의 의미는 무엇일까? 사용자 정의 변수이다.&lt;br&gt;게시판 글번호 매기는 기능은 화면에서 할 수 있지만 MySQL에서도 할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MySql에서 사용하는 @의 의미는 무엇일까? 사용자 정의 변수이다.<br>게시판 글번호 매기는 기능은 화면에서 할 수 있지만 MySQL에서도 할 수 있다.</p><a id="more"></a><h2 id="사용자-정의-변수"><a href="#사용자-정의-변수" class="headerlink" title="사용자 정의 변수"></a>사용자 정의 변수</h2><p>접두사 <code>@</code>는 사용자정의함수를 의미한다.<br>아래처럼 변수를 초기화할 수 있고 초기화시 NULL값이 할당된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//변수 abc 선언</span></span><br><span class="line">SELECT <span class="meta">@abc</span>;</span><br></pre></td></tr></table></figure><p>MySQL은 NULL을 리턴한다.<br>사용자 정의 변수는 하나의 커넥션상에서 공유되기때문에 변수를 사용하고 초기화하지않으면 다른 쿼리 결과에 영향을 미칠 수 있다.<br>따라서 사용자 정의 변수 사용시 변수값을 항상 초기화해줘야한다. </p><p><br><br><br></p><h2 id="사용자-정의-변수-초기화"><a href="#사용자-정의-변수-초기화" class="headerlink" title="사용자 정의 변수 초기화"></a>사용자 정의 변수 초기화</h2><p>사용자 정의 변수에 할당할 수 있는 데이터 타입은 5가지이다.<br>별도의 타입을 지정하는 것은 아니고 스크립트언어처럼 저장하는 값에 의해 타입이 정해진다. </p><ol><li>문자열</li><li>정수</li><li>십진수</li><li>부동 소수점</li><li>NULL</li></ol><p>사용자 정의 변수 초기화 방법에는 3가지가 있다.</p><ol><li>SET 이용</li><li>SELECT 이용 + FROM절에서 초기화</li><li>SELECT 이용 + WHERE절에서 초기화</li></ol><p>이때 명령문 2가지를 사용할 수 있는데 두 명령문은 동일하다.</p><ol><li>SET이용시 <code>@변수명=값</code> 또는 <code>@변수명:=값</code></li><li>SELECT이용시 <code>@변수명:=값</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. SET이용하여 변수 abc 초기화</span></span><br><span class="line">SET <span class="meta">@abc</span>=<span class="number">77</span>; </span><br><span class="line">SET <span class="meta">@abc</span>:=<span class="number">77</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set한 변수 사용 예시</span></span><br><span class="line">SELECT <span class="meta">@abc</span> as <span class="string">'순번'</span></span><br><span class="line">FROM example;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. SELECT이용 + FROM절에서 변수 abc를 77로 초기화 후 10씩 증가</span></span><br><span class="line">SELECT <span class="meta">@abc</span>:=<span class="meta">@abc</span>+<span class="number">10</span></span><br><span class="line">FROM   example t1, (SELECT <span class="meta">@abc</span>:=<span class="number">77</span>) t2;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. SELECT 이용 + WHERE절에서 변수 abc를 77로 초기화 후 10씩 증가</span></span><br><span class="line">SELECT <span class="meta">@abc</span>:=<span class="meta">@abc</span>+<span class="number">10</span></span><br><span class="line">FROM   example t1</span><br><span class="line">WHERE  (<span class="meta">@abc</span>:=<span class="number">77</span>) = <span class="number">77</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">87</span></span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="number">107</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="ROWNUM-사용"><a href="#ROWNUM-사용" class="headerlink" title="ROWNUM 사용"></a>ROWNUM 사용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FROM절에서 초기화</span></span><br><span class="line">SELECT <span class="meta">@rowNum</span>:=<span class="meta">@rowNum</span>+<span class="number">1</span>  as <span class="string">'순번'</span></span><br><span class="line">FROM   example t1, (SELECT <span class="meta">@rowNum</span>:=<span class="number">0</span>) t2;</span><br></pre></td></tr></table></figure><p>실제로 내가 업무에서 사용하고 있는 방식은 WHERE절에서 초기화하는 방식이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WHERE절에서 초기화</span></span><br><span class="line">SELECT <span class="meta">@rowNum</span>:=<span class="meta">@rowNum</span>+<span class="number">1</span> as <span class="string">'순번'</span></span><br><span class="line">FROM   example</span><br><span class="line">WHERE (<span class="meta">@rowNum</span>:=<span class="number">0</span>) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>추가로 역순으로 나타내고 싶을 때 사용할 수 있는 방법이 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 역순 정렬</span></span><br><span class="line">SELECT A.no as <span class="string">'순번'</span></span><br><span class="line">FROM (</span><br><span class="line">   SELECT <span class="meta">@rowNum</span> := <span class="meta">@rowNum</span> + <span class="number">1</span> AS 순번</span><br><span class="line">   FROM   example t1, (SELECT <span class="meta">@rowNum</span>:=<span class="number">0</span>) t2;</span><br><span class="line">     ) A</span><br><span class="line">ORDER BY 순번 DESC</span><br></pre></td></tr></table></figure><p>여기서 하나 의문점은 select절 별칭부분에 따옴표를 넣어 <code>as &#39;순번&#39;</code>을 사용하고 <code>order by &#39;순번&#39; desc</code>를 한다면 정렬이 되지 않는 다.<br>여러 테스트를 해본 결과 DBtool이 아닌 MariaDB문제인 것 같다.<br>왜 <code>순번</code>은 되고 <code>&#39;순번&#39;</code>은 안될까?<br>구글링해도 뚜렷한 답이 나오지 않아 issue를 보내려고 했으나 <a href="https://github.com/MariaDB/server">레포에 issue창은 없고 PR창만 있어서</a> 기여는 다음에 언젠가 하는 걸로….</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://three-pleasure.tistory.com/256">https://three-pleasure.tistory.com/256</a></li><li><a href="https://wakestand.tistory.com/556">https://wakestand.tistory.com/556</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/user-variables.html">https://dev.mysql.com/doc/refman/8.0/en/user-variables.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/03/210804rownum/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Springboot validation annotation parttern 정규식 오류 해결</title>
      <link>https://sowon-dev.github.io/2021/08/01/210802Pattern-regexp/</link>
      <guid>https://sowon-dev.github.io/2021/08/01/210802Pattern-regexp/</guid>
      <pubDate>Sun, 01 Aug 2021 17:48:46 GMT</pubDate>
      
      <description>&lt;p&gt;Spring 프로젝트에서 서비스단에서 처리하는 유효성체크를 VO에서 처리하고 싶었다.&lt;br&gt;내가 원하는 바는 String depart컬럼에 null은 허용하지만 빈값과 white space는 허용하지 않는 유효성체크를 하고 싶었다.&lt;br&gt;만약 빈값과 white space가 들어온다면 null로 변경해서 DB에 저장해야하는 로직이었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Spring 프로젝트에서 서비스단에서 처리하는 유효성체크를 VO에서 처리하고 싶었다.<br>내가 원하는 바는 String depart컬럼에 null은 허용하지만 빈값과 white space는 허용하지 않는 유효성체크를 하고 싶었다.<br>만약 빈값과 white space가 들어온다면 null로 변경해서 DB에 저장해야하는 로직이었다.</p><a id="more"></a><h2 id="기본-어노테이션들"><a href="#기본-어노테이션들" class="headerlink" title="기본 어노테이션들"></a>기본 어노테이션들</h2><p>NULL체크를 위해 기본으로 제공되는 어노테이션들이 있다.</p><table><thead><tr><th align="center"></th><th align="center">NULL</th><th align="center">빈칸(“”)</th><th align="center">White Space(“ “)</th></tr></thead><tbody><tr><td align="center"><code>@NotNull</code></td><td align="center">허용X</td><td align="center">허용O</td><td align="center">허용O</td></tr><tr><td align="center"><code>@NotEmpty</code></td><td align="center">허용X</td><td align="center">허용X</td><td align="center">허용O</td></tr><tr><td align="center"><code>@NotBlank</code></td><td align="center">허용X</td><td align="center">허용X</td><td align="center">허용X</td></tr></tbody></table><p>내 경우는 NULL은 허용해주어야했기에 위의 어노테이션들을 전부 사용할 수 없었다.</p><p><br><br><br></p><h2 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h2><ul><li>VO코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exampleVO</span></span>&#123;</span><br><span class="line">String depart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SERVICE 클래스의 checkVal메서드<br>서비스에서 null은 허용되면서도 isBlank가 참인 조건으로 만들었다. 정상작동하지만 마음에 들지 않았다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkVal</span><span class="params">(String depart)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(exampleVO.getDepart() != <span class="keyword">null</span> &amp;&amp; exampleVO.getDepart().isBlank()) &#123;</span><br><span class="line">  exampleVO.setDepart(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//비즈니스 로직</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="정규표현식-코드"><a href="#정규표현식-코드" class="headerlink" title="정규표현식 코드"></a>정규표현식 코드</h2><p><a href="https://regexr.com/">정규식 테스트 사이트</a>를 이용하여 원하는 정규식인 <code>[0-9a-zA-Z가-힣]</code>를 만들었다.<br>혹시 정규표현식이 처음이라면 <a href="https://sowon-dev.github.io/2021/03/16/210317pythonRegularExpression/">정규표현식 기초 포스팅</a>을 참고하자</p><p>내가 만든 정규식 <code>[0-9a-zA-Z가-힣]</code>은 아래와 같이 처리한다.</p><ul><li>허용: 숫자와 영대소문자, 한글, NULL</li><li>허용하지않음: 빈칸, 공백 </li></ul><p><br><br><br></p><h3 id="첫시도-gt-실패"><a href="#첫시도-gt-실패" class="headerlink" title="첫시도 =&gt; 실패"></a>첫시도 =&gt; 실패</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exampleVO</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern</span>(groups = &#123;ValidationGroups.insert<span class="class">.<span class="keyword">class</span>, <span class="title">ValidationGroups</span>.<span class="title">update</span>.<span class="title">class</span>&#125;</span></span><br><span class="line"><span class="class">, <span class="title">regexp</span> </span>= <span class="string">"[0-9a-zA-Z가-힣]"</span>, message = <span class="string">"빈값이나 공백이 들어갈 수 없습니다."</span>)</span><br><span class="line">String depart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>포스트맨을 통해서 아래와 같이 테스트를 해봤는데 문자열을 입력할때 <code>&quot;빈값이나 공백이 들어갈 수 없습니다.&quot;</code>가 응답되면서 에러가 발생했다.</p><table><thead><tr><th align="center">파라미터</th><th align="center">정상작동여부</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">null</td><td align="center">O</td><td align="center">DB에 null값이 정상적으로 insert, update됨</td></tr><tr><td align="center">빈값(“”)</td><td align="center">O</td><td align="center">@Pattern message속성에 걸어둔 메시지가 출력됨</td></tr><tr><td align="center">white space(“ “)</td><td align="center">O</td><td align="center">@Pattern message속성에 걸어둔 메시지가 출력됨</td></tr><tr><td align="center">숫자,영대소문자,한글이 포함된 문자열</td><td align="center">X</td><td align="center">@Pattern message속성에 걸어둔 메시지가 출력됨</td></tr></tbody></table><p>도대체 왜일까? 에러를 이해하지못해서 삽질하고 있었는데 과장님이 간단하게 해결해주셨다.<br>과장님 감사합니다.🙏</p><p><br><br><br></p><h3 id="성공코드"><a href="#성공코드" class="headerlink" title="성공코드"></a>성공코드</h3><p>글자수<code>{0,64}</code>만 추가하면 된다!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exampleVO</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern</span>(groups = &#123;ValidationGroups.insert<span class="class">.<span class="keyword">class</span>, <span class="title">ValidationGroups</span>.<span class="title">update</span>.<span class="title">class</span>&#125;</span></span><br><span class="line"><span class="class">, <span class="title">regexp</span> </span>= <span class="string">"[0-9a-zA-Z가-힣]&#123;0,64&#125;"</span>, message = <span class="string">"빈값이나 공백이 들어갈 수 없습니다."</span>)</span><br><span class="line">String depart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">파라미터</th><th align="center">정상작동여부</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">null</td><td align="center">O</td><td align="center">DB에 null값이 정상적으로 DB에 insert, update됨</td></tr><tr><td align="center">빈값(“”)</td><td align="center">O</td><td align="center">@Pattern message속성에 걸어둔 메시지가 출력됨</td></tr><tr><td align="center">white space(“ “)</td><td align="center">O</td><td align="center">@Pattern message속성에 걸어둔 메시지가 출력됨</td></tr><tr><td align="center">숫자,영대소문자,한글이 포함된 문자열</td><td align="center">O</td><td align="center">문자열값이 정상적으로 DB에 insert, update됨</td></tr></tbody></table><p>세상 간단한 에러였는데 내 눈에는 보이지 않는 것이 참 이상했다.<br>앞으로는 절대 빼먹을 일 없겠다! 과장님 다시한번 감사합니다!</p><p>여담이지만 사실 이렇게 사소한 오류일지를 적어야할지 고민이 많았다.<br>하지만 사소한 것일수록 남겨놔야 나중에 시간을 단축시킬 수 있고, 또 누군가는 나처럼 삽질할 수 도 있으니 단 한 명에게라도 도움을 줄수있다면 아주 사소한 오류일지라도 적여야겠다는 생각이 들었다.<br>주니어개발자 여러분 우리 모두 화이팅합시다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      <category domain="https://sowon-dev.github.io/tags/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/">정규표현식</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/01/210802Pattern-regexp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring]validation라이브러리, 커스텀 validation annotation만들기</title>
      <link>https://sowon-dev.github.io/2021/08/01/210802Spring-Validation/</link>
      <guid>https://sowon-dev.github.io/2021/08/01/210802Spring-Validation/</guid>
      <pubDate>Sun, 01 Aug 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;일반적으로 validation을 진행할 때 아래와 같이 서비스단에서 null값을 체크해준다.&lt;br&gt;파라미터가 3개이상인 경우나 여러 상황에서 한계점이 존재한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>일반적으로 validation을 진행할 때 아래와 같이 서비스단에서 null값을 체크해준다.<br>파라미터가 3개이상인 경우나 여러 상황에서 한계점이 존재한다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">example</span><span class="params">(String 파람<span class="number">1</span>, String 파람<span class="number">2</span>, <span class="keyword">int</span> 파람<span class="number">3</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(파람<span class="number">1</span> == <span class="keyword">null</span> || 파람<span class="number">2</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(파람<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 비즈니스 로직시작</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="예상할-수-있는-한계점"><a href="#예상할-수-있는-한계점" class="headerlink" title="예상할 수 있는 한계점"></a>예상할 수 있는 한계점</h2><ol><li>검증해야 할 파라미터가 많은 경우 코드가 길어짐</li><li>구현에 따라 Service Logic과 분리가 필요할 수 있음</li><li>흩어져 있는 경우 어디에서 검증하는 지 알기 어려움</li><li>재사용의 한계 존재</li></ol><p>이럴때는 spring-boot-starter-validation 라이브러리를 사용할 수 있다.<br><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbiYEHh%2FbtqHscMte8C%2FZhCLLxW0FrI5rUYnrVfK7K%2Fimg.png" alt="출처: https://prinha.tistory.com/entry/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-annotation%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%A2%85%EB%A5%98"></p><p><a href="https://prinha.tistory.com/entry/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-annotation%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%A2%85%EB%A5%98">끄적끄적님의 어노테이션 포스팅</a>에 자세한 설명과 예시가 나와있다.</p><p><br><br><br></p><h2 id="BindingResult객체"><a href="#BindingResult객체" class="headerlink" title="BindingResult객체"></a>BindingResult객체</h2><p>해당 객체를 통해 예외처리 가능하다.</p><ul><li>참고: <a href="https://jhparkkk.tistory.com/12">https://jhparkkk.tistory.com/12</a></li></ul><p><br><br><br></p><h2 id="validation-커스텀-어노테이션-만들기"><a href="#validation-커스텀-어노테이션-만들기" class="headerlink" title="validation 커스텀 어노테이션 만들기"></a>validation 커스텀 어노테이션 만들기</h2><p>YearMonth형태가 yyyyMM형태인 어노테이션을 만들어보자.</p><br>1. Annotation 클래스 생성하기new Annotation을 생성하고 아래처럼 작성하면 된다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy =&#123; YearMonthValidator<span class="class">.<span class="keyword">class</span> &#125;) // 어떠한 클래스를 가지고 유효성 검사를 할 것인지 작성해야함</span></span><br><span class="line"><span class="class">@<span class="title">Target</span>(</span>&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> YearMonth &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "yyyyMM 형식에 맞지 않습니다."</span>;</span><br><span class="line"></span><br><span class="line">  Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function">String <span class="title">pattern</span><span class="params">()</span> <span class="keyword">default</span> "yyyyMMdd"</span>; <span class="comment">//기본패턴이 yyyyMM이지만 validator에서 Datetime으로 받기 때문에 yyyyMMdd를 넣어줘야함.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2. Validator 로직 작성하기위에서 만든 어노테이션을 활용하여 유효성체크를 하는 클래스를 만들어야한다.new Java Class를 생성하고 아래처럼 작성하면 된다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearMonthValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">YearMonth</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(YearMonth constratintAnnotation)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.pattern = constratintAnnotation.pattern();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext cxt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LocalDate l = LocalDate.parse(value+<span class="string">"01"</span>, DateTimeFormatter.ofPattern(<span class="keyword">this</span>.pattern));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3. 사용하기<p>그리고 사용법은 VO에서 패턴을 걸어주면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VO 일부</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@YearMonth</span></span><br><span class="line"><span class="keyword">private</span> String reqDate;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/08/01/210802Spring-Validation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TCP통신 vs UDP통신 차이점</title>
      <link>https://sowon-dev.github.io/2021/07/30/210730TCPVSUDP/</link>
      <guid>https://sowon-dev.github.io/2021/07/30/210730TCPVSUDP/</guid>
      <pubDate>Fri, 30 Jul 2021 05:52:57 GMT</pubDate>
      
      <description>&lt;p&gt;두 통신의 차이점에 대해서는 면접은 물론 실무에서도 알고있어야하는 내용으로 이에 대해 알아보자&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>두 통신의 차이점에 대해서는 면접은 물론 실무에서도 알고있어야하는 내용으로 이에 대해 알아보자</p><a id="more"></a><h1 id="TCP통신-vs-UDP통신"><a href="#TCP통신-vs-UDP통신" class="headerlink" title="TCP통신 vs UDP통신"></a>TCP통신 vs UDP통신</h1><p>TCP통신</p><ul><li>신뢰성있는 통신: 보낸 데이터를 잘 받았다고 ACK를 보내지 않으면 다음 데이터를 보내지 않고 계속 기다린다.</li><li>request가 잘 왔는지 ACK를 통해 꼭 확인하고 response를 한다.</li><li>속도 느림</li><li>예) 모든 웹통신</li></ul><p>UDP통신</p><ul><li>신뢰성없는 통신: 보낸 데이터가 중간에 유실이 되어도 확인하지 않고 다음 데이터를 보낸다.</li><li>ACK를 받지 않고 보내고싶은 데이터를 마구 보낼 수 있다.</li><li>속도빠름</li><li>사람이 이해할 수 있는 모든 것들은 UDP통신을 하면 됨</li><li>예) 전화</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Network/">Network</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/07/30/210730TCPVSUDP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring 들여다보기: IoC, AOP</title>
      <link>https://sowon-dev.github.io/2021/07/27/210728Spring/</link>
      <guid>https://sowon-dev.github.io/2021/07/27/210728Spring/</guid>
      <pubDate>Tue, 27 Jul 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;IoC란&quot;&gt;&lt;a href=&quot;#IoC란&quot; class=&quot;headerlink&quot; title=&quot;IoC란&quot;&gt;&lt;/a&gt;IoC란&lt;/h1&gt;&lt;p&gt;스프링에서 일반적으로 Java 객체를 new로 생성하여 Spring Container에게 관리를 맡긴다.&lt;br&gt;즉, 개발자에서 프레임워크로 객체 제어의 권한이 넘어 갔으므로 &lt;code&gt;제어의 역전(Inversion of Control)&lt;/code&gt;이라고 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="IoC란"><a href="#IoC란" class="headerlink" title="IoC란"></a>IoC란</h1><p>스프링에서 일반적으로 Java 객체를 new로 생성하여 Spring Container에게 관리를 맡긴다.<br>즉, 개발자에서 프레임워크로 객체 제어의 권한이 넘어 갔으므로 <code>제어의 역전(Inversion of Control)</code>이라고 한다.</p><a id="more"></a><p>스프링이 알아서 객체의 생명주기를 관리한다면 개발자는 어떻게 그 객체를 사용할 수 있을까?<br>DI를 통해서 사용할 수 있다.</p><p><br><br><br></p><h2 id="DI-Dependency-Injection"><a href="#DI-Dependency-Injection" class="headerlink" title="DI(Dependency Injection)"></a>DI(Dependency Injection)</h2><p>의존성 주입이란 객체를 직접 생성/제어하는 것이 아니라, 제어의 역행을 사용해서 특정 객체를 필요한 객체의 외부에 가져다가 연결하는 것을 뜻한다.<br>객체가 필요한 어떤 객체를 생성자 혹은 setter를 통해 주입하는 것을 말한다.</p><ul><li><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EB%B2%95">DI 두가지 방법 예시</a></li></ul><p><br><br><br></p><h2 id="빈-Bean-이란"><a href="#빈-Bean-이란" class="headerlink" title="빈(Bean)이란?"></a>빈(Bean)이란?</h2><p>스프링 컨테이너에서 관리되는 객체들을 모두 빈이라고 한다.</p><p><br><br><br></p><h2 id="DI된-빈-사용하는-방법"><a href="#DI된-빈-사용하는-방법" class="headerlink" title="DI된 빈 사용하는 방법"></a>DI된 빈 사용하는 방법</h2><ul><li>@SpringBootApplication: 등록된 빈을 확인할 수 있다.</li><li>@Component: 해당 어노테이션이 붙은 클래스는 스프링에서 빈으로 생성하여 자동적으로 관리한다.</li><li>@Qualifier(“빈이름”): @Component가 여러 개가 있는 경우 스프링이 어느 것을 선택해야할 지 헷갈리므로 @Qualifier로 이름을 지정해서 빈을 사용하면 된다.</li></ul><p>이렇게 빈으로 등록한 클래스를 어떻게 가져와서 사용할까?<br>먼저 ApplicationContextAware를 구현한 ApplicationProvider클래스를 생성한 뒤 <code>@Component</code>를 통해서 빈 등록을 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationProvider</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = applicationContext;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new로 생성할 필요없이 <code>@Component</code>로 등록된 빈들은 getBean()메서드를 통해서 접근할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 방법: 개발자가 직접 new로 클래스 생성</span></span><br><span class="line">Example ex1 = <span class="keyword">new</span> Example(클래스명);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스프링에게 loC한 방법</span></span><br><span class="line">Example ex1 = context.getBean(빈등록한클래스명<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="한-클래스에서-여러-개-빈-생성하고-싶은-경우"><a href="#한-클래스에서-여러-개-빈-생성하고-싶은-경우" class="headerlink" title="한 클래스에서 여러 개 빈 생성하고 싶은 경우"></a>한 클래스에서 여러 개 빈 생성하고 싶은 경우</h2><ul><li>@Configuration: 한 클래스에서 여러 개의 빈을 등록하겠다는 의미. @Component와 동일한 동작이지만 여러 개 빈을 한 클래스에 등록할 수 있다. </li><li>@Bean(“빈이름”): @Configuration를 사용한 클래스 안에서 여러 개의 빈을 @Bean으로 등록할 수 있다. 스프링이 헷갈리지 않도록 각각 빈이름을 붙여줘야한다.</li></ul><p>한 클래스에서 여러 개의 빈 생성하는 예시를 보자.<br>여기서 return에 new로 생성한 것은 예시일뿐 실무에서는 set메서드, 생성자, 변수에 @Autowird, Inject등의 방법을 통해서 객체를 받아온 뒤 진행한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"빈이름1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Example <span class="title">ex</span><span class="params">(FirstBaseClass firstBaseClass)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Example(firstBaseClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"빈이름2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Example <span class="title">ex</span><span class="params">(SecondBaseClass secondBaseClass)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Example(secondBaseClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 생성한 빈 중 FirstBaseClass를 사용하는 예시이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example ex1 = context.getBean(<span class="string">"firstBaseClass"</span> , Example<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="AOP-Aspect-Oriented-Programming-란"><a href="#AOP-Aspect-Oriented-Programming-란" class="headerlink" title="AOP( Aspect Oriented Programming)란"></a>AOP( Aspect Oriented Programming)란</h1><p>AOP는의 관점 지향 프로그래밍으로 반복되는 코드들을 한 곳으로 모아서 사용할 수 있게하는, 즉 모듈화하겠다는 개념이다. </p><p>자주 사용하는 어노테이션은 아래와 같다.</p><ul><li>@Aspect: AOP를 정의하는 Class에 할당</li><li>@Pointcut: 기능을 어디에 적용시킬지, 예를 들어 메서드에 적용시킬 지, 어노테이션에 적용시킬지와 같은 AOP를 적용시킬 지점을 설정</li><li>@Before (이전) : 메서드 실행하기 이전</li><li>@After (이후) : 메서드의 결과에 관계없이(즉 성공, 예외 관계없이) 메서드가 완료 되면 실행</li><li>@AfterReturning 메서드호출 성공 실행 시</li><li>@AfterThrowing (예외 발생 이후) : 메서드호출 실패 예외 발생시</li><li>@Around (메소드 실행 전후) : Before / After 모두 제어</li></ul><p><br><br><br></p><h1 id="ObjectMapper"><a href="#ObjectMapper" class="headerlink" title="ObjectMapper"></a>ObjectMapper</h1><p>objectMapper 클래스를 통해서 Json node에 접근 할 수 있다.</p><ul><li>참고: <a href="https://www.baeldung.com/jackson-object-mapper-tutorial">https://www.baeldung.com/jackson-object-mapper-tutorial</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/07/27/210728Spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MyBatis] insert할때 자동으로 키 생성하기(useGeneratedKeys과 selectKey방식 차이점)</title>
      <link>https://sowon-dev.github.io/2021/07/26/210727MyBatis-keyProperty/</link>
      <guid>https://sowon-dev.github.io/2021/07/26/210727MyBatis-keyProperty/</guid>
      <pubDate>Mon, 26 Jul 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;😎-insert할때-자동으로-번호를-올리고-싶어&quot;&gt;&lt;a href=&quot;#😎-insert할때-자동으로-번호를-올리고-싶어&quot; class=&quot;headerlink&quot; title=&quot;😎 insert할때 자동으로 번호를 올리고 싶어&quot;&gt;&lt;/a&gt;😎 insert할때 자동으로 번호를 올리고 싶어&lt;/h2&gt;&lt;p&gt;방금 insert한 autoincrement가 걸린 PK값을 바로 사용하고싶다면 어떻게 해야할까?&lt;br&gt;두가지방식이 있다. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;useGeneratedKeys와 keyProperty 사용하기&lt;/li&gt;
&lt;li&gt;selectKey 사용하기&lt;br&gt;이름을 어떻게 부르는 지 몰라서 그냥 내가 지어보았다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="😎-insert할때-자동으로-번호를-올리고-싶어"><a href="#😎-insert할때-자동으로-번호를-올리고-싶어" class="headerlink" title="😎 insert할때 자동으로 번호를 올리고 싶어"></a>😎 insert할때 자동으로 번호를 올리고 싶어</h2><p>방금 insert한 autoincrement가 걸린 PK값을 바로 사용하고싶다면 어떻게 해야할까?<br>두가지방식이 있다. </p><ol><li>useGeneratedKeys와 keyProperty 사용하기</li><li>selectKey 사용하기<br>이름을 어떻게 부르는 지 몰라서 그냥 내가 지어보았다.<a id="more"></a></li></ol><p><br><br><br></p><h2 id="방법1-useGeneratedKeys와-keyProperty"><a href="#방법1-useGeneratedKeys와-keyProperty" class="headerlink" title="방법1: useGeneratedKeys와 keyProperty"></a>방법1: useGeneratedKeys와 keyProperty</h2><p>항상 useGeneratedKeys와 keyProperty는 함께 사용하면 된다.</p><ul><li>useGeneratedKeys : insert나 update됨가 동시에 자동생성된 키를 가져올 수 있는 속성으로 true로 설정 (default: false)</li><li>keyProperty : 리턴 될 key property 설정. 즉 values나 set 다음에 오는 컬럼명과 동일하게 설정하면 됨. 여러개를 사용한다면 ,(콤마)를 구분자로 설정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> exampleVO &#123;</span><br><span class="line">  <span class="keyword">int</span> userCode;</span><br><span class="line">  String name;</span><br><span class="line">  String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertExample"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"userCode"</span> <span class="attr">parameterType</span>=<span class="string">"exampleVO"</span>&gt;</span> </span><br><span class="line">INSERT INTO example </span><br><span class="line">   (name, email ) </span><br><span class="line">VALUES </span><br><span class="line">   (#&#123;name&#125;, #&#123;email&#125; ) </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>userCode가 자동 증감되어 DB에 등록된다.<br>따로 set해주지 않더라도 exampleVO.getUserCode()를 하면 autoIncrement된 값을 get할 수 있다!<br>세상 간편하다!<br>insert 나 update return받을 때 주로 사용할 수 있다.</p><p><br><br><br></p><h2 id="방법2-selectKey"><a href="#방법2-selectKey" class="headerlink" title="방법2: selectKey"></a>방법2: selectKey</h2><p>마이바티스는 자동생성키 칼럼을 지원하지 않는 다른 데이터베이스를 위해 다른 방법 또한 제공한다.<br>바로 selectKey를 이용하는 것이다.<br>아래 예제에서 selectKey구문이 먼저 실행되고 userCode 최대값에서 1씩 증가되게끔 셋팅된다. 그리고 나서 insert 구문이 실행된다. 이건 복잡한 자바코드 없이도 데이터베이스에 자동생성키의 행위와 비슷한 효과를 가지도록 해준다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertExample"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"userCode"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">    SELECT IFNULL(MAX(userCode+1),1) FROM example</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  INSERT INTO example</span><br><span class="line">   (userCode, email)</span><br><span class="line">  VALUES</span><br><span class="line">     (#&#123;userCode&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>selectKey에 대한 추가설명은 아래 포스팅을 참고하면 된다.</p><ul><li><a href="https://sowon-dev.github.io/2021/06/03/210604MyBatis-selectKey/">select한 값을 바로 insert할 수 있을까?</a></li></ul><p><br><br><br></p><h2 id="방법1과-방법2의-차이"><a href="#방법1과-방법2의-차이" class="headerlink" title="방법1과 방법2의 차이"></a>방법1과 방법2의 차이</h2><p>위의 두 예시는 최근 userCode에서 <code>+1</code>을 해주는 결과를 나타낸다.<br>결과가 같은데 왜 방식이 두개일까? 사용방향에 따라 차이점이 존재하기때문이다.</p><p>방법 1은 DBMS의 도움이 필요하다. 즉 auto increment가 되는 DBMS만 사용가능하다.<br>만약 사용하는 DBMS는 AUTO INCREMENT를 지원해주지 않는다면 방법 2를 써야한다.</p><p>auto increment를 지원해주는 DBMS라 하더라도 단순히 <code>+1</code> 증감이 아닌 뭔가 커스텀하게 증가시키고싶다면 2번을 사용해야한다.<br>커스텀하게 증가시키는 게 무엇일까?<br>아래 예시처럼 항상 5자리로 userCode를 등록할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertExample"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">keyProperty</span>=<span class="string">"userCode"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">SELECT lpad(cast((IFNULL(MAX(userCode), 0) + 1) as char),5,'0') </span><br><span class="line">  FROM example</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span> </span><br><span class="line">  INSERT INTO example</span><br><span class="line">   (userCode, email)</span><br><span class="line">  VALUES</span><br><span class="line">     (#&#123;userCode&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>만약 현재 userCode의 최대값이 12라면 다음 userCode는 selectKey 실행에 의해 <code>00013</code>으로 DB에 등록된다.</p><p><br><br></p><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>방법1: DBMS가 auto increment를 지원하고 특정 컬럼에 <code>+1</code>하는 로직인 경우 사용</li><li>방법2: <ul><li>DBMS가 auto increment를 지원하지 않는 경우 사용</li><li>DBMS가 auto increment를 지원하지만 특정 규칙으로 컬럼값을 증가시키는 로직인 경우 사용</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://mybatis.org/mybatis-3/sqlmap-xml.html">https://mybatis.org/mybatis-3/sqlmap-xml.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MyBatis/">MyBatis</category>
      
      
      <comments>https://sowon-dev.github.io/2021/07/26/210727MyBatis-keyProperty/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[패스트캠퍼스]올인원패키지 기술면접 인강 솔직 후기</title>
      <link>https://sowon-dev.github.io/2021/07/24/210725skillinterview/</link>
      <guid>https://sowon-dev.github.io/2021/07/24/210725skillinterview/</guid>
      <pubDate>Sat, 24 Jul 2021 23:05:03 GMT</pubDate>
      
      <description>&lt;p&gt;패스트캠퍼스 올인원패키지 중 기술면접 완전 정복 강의를 듣고 요약 정리 및 후기를 작성해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>패스트캠퍼스 올인원패키지 중 기술면접 완전 정복 강의를 듣고 요약 정리 및 후기를 작성해보았다.</p><a id="more"></a><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><p>추천도(5점만점):⭐⭐<br>특별할 것없이 구글링만해봐도 나오는 내용만 하기때문에 초반에는 살짝 지루했다.<br>실제 모의면접 음성을 들으면서 조언하는 부분이 인상적이었다. 이부분이 없었다면 그냥 유투브의 기술면접 팁 영상들과 비슷한 느낌이다.</p><p><br><br><br></p><h2 id="최근-기술-면접-형태-손코딩-테스트"><a href="#최근-기술-면접-형태-손코딩-테스트" class="headerlink" title="최근 기술 면접 형태: 손코딩 테스트"></a>최근 기술 면접 형태: 손코딩 테스트</h2><p>손코딩 테스트를 통해 확인하고자 하는 것은 크게 3가지이다.</p><ol><li>커뮤니케이션이 되는가?</li><li>꼼꼼하게 작성하는가?<ul><li>예를 들어 데이터를 처리하시오 라는 애매모호한 문제를 출제했다면 그 데이터가 정수인지, 부동소수점은 있는지, 문자열인지 등을 확인하고 작성하는 지 확인</li></ul></li><li>Problem Solving Logic이 합리적인가?</li></ol><p>그럼 손코딩 테스트는 어떻게 해결하면 좋을까? 아래 5단계를 따라하면 좋다.</p><ol><li>문제 듣기</li><li>예제를 통해 문제 이해하기</li><li>무식하게 풀기</li><li>질문자와 커뮤니케이션을 통해 개선하기</li><li>마이너한 부분의 최적화</li><li>검토하기</li></ol><p><br><br><br></p><h2 id="자기소개질문-팁"><a href="#자기소개질문-팁" class="headerlink" title="자기소개질문 팁"></a>자기소개질문 팁</h2><p>채용자는 시간이 없다. 조직이 원하는 기능을 개발할 수 있는 지, 함께 일하는데 문제가 없는 지를 보는 질문이다.<br>성장과정, 성격을 중점을 둘 필요없고 <code>지원동기</code>에 중점을 두고 말하면 된다.<br>비전공자인 점을 먼저 얘기할 필요가 없다. 가장 중요한 점을 먼저 얘기해야한다.<br>즉 개발경험을 먼저 얘기해야한다.</p><p><br><br><br></p><h2 id="프로젝트시-어려운-점과-극복방법"><a href="#프로젝트시-어려운-점과-극복방법" class="headerlink" title="프로젝트시 어려운 점과 극복방법"></a>프로젝트시 어려운 점과 극복방법</h2><p>시간압박, 마감기한의 어려움보다는 기술적인 애로점을 만났고 스스로 익혀서 극복했다고 한 점을 말하는 것이 더 좋다.</p><p><br><br><br></p><h2 id="CS-기본지식"><a href="#CS-기본지식" class="headerlink" title="CS 기본지식"></a>CS 기본지식</h2><h3 id="주요질문1-프로세스와-스레드-차이"><a href="#주요질문1-프로세스와-스레드-차이" class="headerlink" title="주요질문1: 프로세스와 스레드 차이"></a>주요질문1: 프로세스와 스레드 차이</h3><ul><li>프로세스: 운영체제로부터 자원을 할당받아 실행</li><li>스레드: 프로세스로부터 자원을 할당받아 실행<br>추가로<br>하나의 프로세스 안에서 여러 스레드 생성 가능하며, 각 스레드별 개별 스택을 가지고 있고 프로세스의 전역 메모리 공간을 공유하며 프로그램을 실행한다.</li><li>프로세스는 코드/데이터/스택/힙 메모리 영역을 기반으로 실행</li><li>스레드는 프로세스 안에서 개별적인 스택을 가지고 코드/데이터/힙 영역을 공유하며 실행</li></ul><p><br><br><br></p><h3 id="주요질문2-스크립트-언어와-컴파일-언어-차이"><a href="#주요질문2-스크립트-언어와-컴파일-언어-차이" class="headerlink" title="주요질문2: 스크립트 언어와 컴파일 언어 차이"></a>주요질문2: 스크립트 언어와 컴파일 언어 차이</h3><ul><li>스크립트언어: 파이썬, 루비, PHP등 컴파일 단계없이 실행 단계에서 한 줄씩 기계어로 번역 후 실행되므로 통상 컴파일 언어보다 실행이 느림</li><li>컴파일언어: C계열, JAVAE등 컴파일러를 통해 사전에 컴파일되어 기계어 상태되므로 실행이 빠름</li></ul><p><br><br><br></p><h3 id="주요질문3-동기식과-비동기식-차이"><a href="#주요질문3-동기식과-비동기식-차이" class="headerlink" title="주요질문3: 동기식과 비동기식 차이"></a>주요질문3: 동기식과 비동기식 차이</h3><ul><li>동기식: 요청에 대한 응답을 기다린 후, 응답이 오면 다음 요청을 하는 방식</li><li>비동기식: 요청에 대한 응답을 기다리지않고, 다음 동작은 진행하는 방식<br>추가로 장단점을 설명하면 좋다.</li><li>동기식<ul><li>장점: 구성이 단순, 순서대로 실행가능</li><li>단점: 멀티태스킹 불가</li></ul></li><li>비동기식<ul><li>장점: 멀티태스킹 가능</li><li>단점: 일정 시간당 요청량이 많아질 경우 부하 발생 -&gt; 이를 해결하기 위한 추가 처리 필요</li></ul></li></ul><p><br><br><br></p><h3 id="주요질문4-DB에서-인덱스를-사용하는-이유와-장단점"><a href="#주요질문4-DB에서-인덱스를-사용하는-이유와-장단점" class="headerlink" title="주요질문4: DB에서 인덱스를 사용하는 이유와 장단점"></a>주요질문4: DB에서 인덱스를 사용하는 이유와 장단점</h3><ul><li>인덱스: 데이터를 논리적으로 정렬해서 검색과 정렬 속도를 높이기 위해 사용</li><li>단점: 데이터 삽입 및 변경이 수시로 일어나면 매번 인덱스를 변경해야 하므로 성능 저하를 막기 위한 고려가 필요함</li></ul><p><br><br><br></p><h3 id="주요질문5-TCP와-UDP-차이점과-장단점"><a href="#주요질문5-TCP와-UDP-차이점과-장단점" class="headerlink" title="주요질문5: TCP와 UDP 차이점과 장단점"></a>주요질문5: TCP와 UDP 차이점과 장단점</h3><ul><li>UDP: 비연결형 프로토콜과 흐름제어, 오류제어를 하지않음 -&gt; 송수신에 적은 데이터가 필요</li><li>TCP: 연결혈 프로토콜로 흐름제어, 오류제어를 함 -&gt; 데이터 송수신에 신뢰성을 가짐<br>TCP는 신뢰성있는 데이터 전송에서 사용 -&gt;  로직이 들어가기에 상대적으로 느림<br>UDP는 유실이 조금 되어도 상관없는 데이터 전송에서 사용 -&gt; 로직이 적게 들어가기때문에 상대적으로 빠름<br>더 자세한 내용은 <a href="https://sowon-dev.github.io/2021/07/30/210730TCPVSUDP/">TCP통신 vs UDP통신 차이점</a>포스팅 참고</li></ul><p><br><br><br></p><h2 id="자바질문"><a href="#자바질문" class="headerlink" title="자바질문"></a>자바질문</h2><h3 id="주요질문1-JVM과-JAVA-프로그램-실행-과정을-설명해보세요"><a href="#주요질문1-JVM과-JAVA-프로그램-실행-과정을-설명해보세요" class="headerlink" title="주요질문1: JVM과 JAVA 프로그램 실행 과정을 설명해보세요"></a>주요질문1: JVM과 JAVA 프로그램 실행 과정을 설명해보세요</h3><ul><li>JVM: Java Virtual Machine(자바 가상 머신)의 약자로, 자바 프로그램을 자바 API를 기반으로 실행하는 역할</li><li>JAVA 프로그램 실행과정: 프로그램 실행하면 JVM이 OS로부터 필요한 메모리만큼 할당 받고 -&gt; 자바 클래스파일을 실행한다.</li></ul><p><br><br><br></p><h3 id="주요질문2-Garbage-Collection이-필요한-이유"><a href="#주요질문2-Garbage-Collection이-필요한-이유" class="headerlink" title="주요질문2: Garbage Collection이 필요한 이유"></a>주요질문2: Garbage Collection이 필요한 이유</h3><p>java 프로그램은 메모리를 명시적으로 지정해서 해제하지 않기 때문에, Garbage Collection을 통해 필요없는 객체를 찾아 지우는 작업을 수행한다.</p><p><br><br><br></p><h3 id="주요질문3-Overriding-vs-overloading"><a href="#주요질문3-Overriding-vs-overloading" class="headerlink" title="주요질문3: Overriding vs overloading"></a>주요질문3: Overriding vs overloading</h3><ul><li>overriding: 상속관계일때 사용. 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의해서 사용<ul><li>메서드 이름 및 파라미터수 동일</li></ul></li><li>overloading: 같은 이름의 메서드 여러개를 가지면서 매개변수의 유형과 개수가 다르도록 하는 기술</li></ul><p>더 자세한 <a href="https://sowon-dev.github.io/2020/07/05/200706javai/#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%EC%8B%9C-%EB%98%91%EA%B0%99%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%83">오버로딩과 오버라이딩은 차이가 있으니 용어에 주의하자</a> 포스팅을 참고하면 된다.</p><p><br><br><br></p><h3 id="주요질문4-Interface-와-Abstract"><a href="#주요질문4-Interface-와-Abstract" class="headerlink" title="주요질문4: Interface 와 Abstract"></a>주요질문4: Interface 와 Abstract</h3><ul><li>Abstract: 추상클래스는 추상 메서드 1개이상을 가진 클래스<ul><li>상속시 추상메서드를 반드시 구현하게 해야할 때 사용</li><li>단일 상속. 클래스끼리 다중 상속 안됨</li><li>new로 객체 생성 안됨</li></ul></li><li>Interface: 상수와 메서드의 집합. implements 받은 곳에서 모두 구현을 강제함<ul><li>인터페이스끼리 다중 상속 가능</li></ul></li></ul><p><br><br><br></p><h3 id="주요질문5-디자인패턴이-무엇인지-싱글톤에-대해-간단히-설명"><a href="#주요질문5-디자인패턴이-무엇인지-싱글톤에-대해-간단히-설명" class="headerlink" title="주요질문5: 디자인패턴이 무엇인지 싱글톤에 대해 간단히 설명"></a>주요질문5: 디자인패턴이 무엇인지 싱글톤에 대해 간단히 설명</h3><p>공부했던 패턴보다 어떤 프로젝트를 할때 이러한 패턴을 사용해봤습니다라는 식으로 답변하는 것이 좋다.</p><ul><li>디자인패턴: 공통적인 소프트웨어 코드 작성 문제를 해결하는데 도움이 될 수 있느 코드 패턴</li><li>싱글톤: 전체 프로그램에서 단 1개의 객체를 생성해서 공유할 수 있는 코드 패턴</li></ul><p><br><br><br></p><h2 id="운영체제-및-데이터베이스-주요-질문"><a href="#운영체제-및-데이터베이스-주요-질문" class="headerlink" title="운영체제 및 데이터베이스 주요 질문"></a>운영체제 및 데이터베이스 주요 질문</h2><p>아래 질문들은 스스로 찾아봐야하는 질문이다.<br>따라서 내가 찾은 답변들을 적어보려고 한다.</p><ul><li>deadlock의 개념 및 해결방법</li><li>뮤텍스와 세마포어의 차이점</li><li>가상메모리란?</li><li>컨텍스트 스위칭이란?</li><li>트랜잭션이란?</li><li>RDBMS와 NoSQL 차이점</li></ul><p><br><br><br></p><h2 id="네트워크-주요-질문"><a href="#네트워크-주요-질문" class="headerlink" title="네트워크 주요 질문"></a>네트워크 주요 질문</h2><p>아래 질문들은 스스로 찾아봐야하는 질문이다.<br>따라서 내가 찾은 답변들을 적어보려고 한다.</p><ul><li>OSI 7계층이란?</li><li>HTTP와 HTTPS 차이점</li><li>쿠키와 세션의 차이점</li><li>RESTfUl 개념</li><li>TCP의 3-way-handShake와 4-way-handShake 차이점 </li></ul><p><br><br><br></p><h2 id="자료구조와-알고리즘-주요-질문"><a href="#자료구조와-알고리즘-주요-질문" class="headerlink" title="자료구조와 알고리즘 주요 질문"></a>자료구조와 알고리즘 주요 질문</h2><p>아래 질문들은 스스로 찾아봐야하는 질문이다. 따라서 내가 찾은 답변들을 적어보려고 한다.<br>참곻로 자료구조와 알고리즘은 코딩테스트를 통해서 검증하는 경우가 더 많다.</p><ul><li>배열과 링크드 리스트의 장단점에 대해 간략히 설명해주세요</li><li>BST의 최악의 시간 복잡도와 최악의 시간이 걸리는 케이스에 대해 설명해주세요</li><li>해쉬 테이블에 대해 설명해주세요</li><li>Fibonacci 공식을 recursive와 dynamic programming으로 구현시 차이점에 대해 설명해주세요.</li><li>DFS와 BFS이란?</li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://fastcampus.co.kr/dev_online_algo">https://fastcampus.co.kr/dev_online_algo</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Lectures-Seminars/">Lectures &amp; Seminars</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Review/">Review</category>
      
      
      <comments>https://sowon-dev.github.io/2021/07/24/210725skillinterview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DBeaver 단축키 추천</title>
      <link>https://sowon-dev.github.io/2021/07/21/210722DEeaver-shortcutkey/</link>
      <guid>https://sowon-dev.github.io/2021/07/21/210722DEeaver-shortcutkey/</guid>
      <pubDate>Wed, 21 Jul 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;오늘 팀장님께 쿼리질문하나 했다가 엄청난 단축키를 알게 되었다. 와 이걸 모르고 DBeaver를 사용하다니 나는 정말 바보였다.&lt;br&gt;여러 단축키 중에서도 실무에서 가장 많이 사용되는 단축키 3개는 필수로 암기하고 있으면 일찍 퇴근할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오늘 팀장님께 쿼리질문하나 했다가 엄청난 단축키를 알게 되었다. 와 이걸 모르고 DBeaver를 사용하다니 나는 정말 바보였다.<br>여러 단축키 중에서도 실무에서 가장 많이 사용되는 단축키 3개는 필수로 암기하고 있으면 일찍 퇴근할 수 있다.</p><a id="more"></a><h2 id="🔑-추천-단축키"><a href="#🔑-추천-단축키" class="headerlink" title="🔑 추천 단축키"></a>🔑 추천 단축키</h2><ul><li><p><code>alt + shift + a</code> : 열편집<br>단축키를 클릭하면 화면이 살짝 커지면서 열편집 화면으로 전환이 된다.<br>이때 마우스로 원하는 열을 드래그하면 해당 열이 선택되고 문자 삽입삭제등 다양한 작업을 선택한 모든 열에 적용할 수 있다. 다만 한글인 경우 쿼리가 삭제되는 오류가 있으니 문자 입력시 꼭 영문자로 입력해야한다.<br>열편집화면에서 나오고 싶을때도 동일한 단축키를 눌리면 된다.</p></li><li><p><code>ctrl + shift + x</code> : 대문자<br>블록을 지정한 뒤 단축키를 누르면 블록안의 모든 문자는 대문자로 바뀐다.</p></li><li><p><code>ctrl + sjoft + y</code> : 소문자<br>블록을 지정한 뒤 단축키를 누르면 블록안의 모든 문자는 소문자로 바뀐다.</p></li></ul><p><br><br><br></p><h2 id="🔑-더-많은-단축키가-궁금하다면"><a href="#🔑-더-많은-단축키가-궁금하다면" class="headerlink" title="🔑 더 많은 단축키가 궁금하다면?"></a>🔑 더 많은 단축키가 궁금하다면?</h2><ul><li><a href="https://dbeaver.com/docs/wiki/Shortcuts/">DBeaver 단축키 docs</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JOURNAL/">JOURNAL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/DBeaver/">DBeaver</category>
      
      
      <comments>https://sowon-dev.github.io/2021/07/21/210722DEeaver-shortcutkey/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
