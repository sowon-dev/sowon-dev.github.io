<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Thu, 11 Aug 2022 00:42:24 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>gson을 이용하여 JSON을 HashMap으로 변환하기(영화관 좌석 예매 예시)</title>
      <link>https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/</link>
      <guid>https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/</guid>
      <pubDate>Wed, 10 Aug 2022 15:02:02 GMT</pubDate>
      
      <description>&lt;p&gt;클라이언트에서 json형태로 넘긴 데이터를 컨트롤러에서 String으로 받아 Json으로 변환한 뒤 Map으로 변환하여 사용하고싶었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>클라이언트에서 json형태로 넘긴 데이터를 컨트롤러에서 String으로 받아 Json으로 변환한 뒤 Map으로 변환하여 사용하고싶었다.</p><a id="more"></a><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><p>영화관 좌석을 체크하면 원하는 정보가 Object형태로 생성한 뒤 리스트에 담아서 form태그로 서버에 전송하고싶었다.</p><ul><li>jsp파일</li></ul><p>html태그에는 체크박스 클릭시 클릭이벤트를 달아준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chkSeat"</span> <span class="attr">value</span>=<span class="string">"'+idx+'"</span> <span class="attr">data-movieId</span>=<span class="string">"17"</span> <span class="attr">data-row</span>=<span class="string">"F"</span> <span class="attr">data-seatNo</span>=<span class="string">"7"</span> <span class="attr">onclick</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>편의상 제이쿼리로 클릭이벤트를 달았다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 각 행 체크박스 클릭시 이벤트</span></span><br><span class="line"><span class="keyword">let</span> chkMovieSeatList = []; <span class="comment">// 전역변수로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tickSeatCheckbox</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentEl = event.currentTarget;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 체크박스 체크시</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.checked) &#123;</span><br><span class="line"><span class="keyword">let</span> tickSeat = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">tickSeat.idx = $(<span class="keyword">this</span>).val();</span><br><span class="line">tickSeat.movieId = $(<span class="keyword">this</span>).data(<span class="string">'movieId'</span>);</span><br><span class="line">tickSeat.row = $(<span class="keyword">this</span>).data(<span class="string">'row'</span>);</span><br><span class="line">tickSeat.seatNo = $(<span class="keyword">this</span>).data(<span class="string">'seatNo'</span>);</span><br><span class="line">chkMovieSeatList.push(tickSeat)</span><br><span class="line"><span class="comment">// 체크박스 체크해제시</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    chkMovieSeatList = chkMovieSeatList.filter(<span class="function">(<span class="params">element</span>)=&gt;</span>element.idx != $(currentEl).val());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 리스트에 담기</span></span><br><span class="line">$(<span class="string">"input[name=chkMovieSeatList]"</span>).val(<span class="built_in">JSON</span>.stringify(chkMovieSeatJson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 체크박스 변화시 체크박스 클릭이벤트 실행</span></span><br><span class="line">    $(<span class="string">"input[name=chkSeat]"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        tickSeatCheckbox();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>전송은 form태그로 했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"form[name=saveFrm]"</span>).submit();</span><br></pre></td></tr></table></figure><ul><li>DTO파일</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line"><span class="keyword">private</span> String chkMovieSeatList; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹시 <a href="https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/">DTO vs Model vs Entity 이 세가지의 차이가 궁금하다면 여기를</a> 클릭하면 된다.</p><ul><li>controller파일</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Seat param, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">String redirect = <span class="string">"redirect:주소"</span>;</span><br><span class="line"></span><br><span class="line">BooleanAndMessageResult result = <span class="keyword">new</span> BooleanAndMessageResult();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = seatService.save(param);</span><br><span class="line"><span class="keyword">if</span> (result.isResult()) &#123;</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"success"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">result.setResult(<span class="keyword">false</span>);</span><br><span class="line">result.setMessage(<span class="string">"등록에 실패 하였습니다."</span>);</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line">redirectAttributes.addFlashAttribute(<span class="string">"result"</span>, result);</span><br><span class="line"><span class="keyword">return</span> redirect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="gson을-이용하여-JSON을-HashMap으로-변환"><a href="#gson을-이용하여-JSON을-HashMap으로-변환" class="headerlink" title="gson을 이용하여 JSON을 HashMap으로 변환"></a>gson을 이용하여 JSON을 HashMap으로 변환</h2><p>String 형태로 받은 chkMovieSeatList을 Map형태로 변환한 뒤 체크된 갯수만큼 반복문을 돌려 db에 insert를 했다.<br>자바 JSON 라이브러리인 <a href="https://github.com/google/gson">goolge.gson</a>를 이용해서 변환했다.<br>chkMovieSeatList에서는 쌍따옴표가 &quot;로 들어가 있기때문에 replaceAll()을 이용해서 변경해줬다.</p><ul><li>SeatServiceImpl.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonMappingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonArray;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonElement;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParseException;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BooleanAndMessageResult <span class="title">save</span><span class="params">(Seat param)</span></span>&#123;</span><br><span class="line">BooleanAndMessageResult result = <span class="keyword">new</span> BooleanAndMessageResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 중략</span></span><br><span class="line"></span><br><span class="line">JsonParser jsonParser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">JsonArray jsonArray = (JsonArray) jsonParser.parse(req.getChkMovieSeatList을().replaceAll(<span class="string">"&amp;quot;"</span>,<span class="string">"\""</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(JsonElement seatEl : jsonArray)&#123;</span><br><span class="line">JsonObject seatObj = (JsonObject) seatEl;</span><br><span class="line">HashMap&lt;String, Object&gt; seatMap;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">seatMap = <span class="keyword">new</span> ObjectMapper().readValue(seatObj.toString(), HashMap<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">seatDAO.insertSeat(seatMap);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonParseException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/JSON/">JSON</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/10/220811Json-convert-map/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL] 서브쿼리(Subquery)보다 조인(Join)을 써야하는 이유(코드비교)</title>
      <link>https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/</link>
      <guid>https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/</guid>
      <pubDate>Tue, 09 Aug 2022 04:09:53 GMT</pubDate>
      
      <description>&lt;p&gt;회차별로 예약할 수 있는 영화 프로그램을 만들어야 한다고 생각해보자.&lt;br&gt;여기서 회차는 요일별로 동일하다. 즉, 이번주 월요일에 총 3회차 영화상영이, 화요일에는 2회차 영화상영이 있었다면 다음주 월요일도 총 3회차, 화요일에는 2회차 영화상영이 예정되어 있는 것이다.&lt;br&gt;사용자가 선택한 날짜의 회차별로 이미 예약된 내역정보뿐만 아니라 예약 가능한 좌석수를 가져오는 쿼리를 만들어야한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>회차별로 예약할 수 있는 영화 프로그램을 만들어야 한다고 생각해보자.<br>여기서 회차는 요일별로 동일하다. 즉, 이번주 월요일에 총 3회차 영화상영이, 화요일에는 2회차 영화상영이 있었다면 다음주 월요일도 총 3회차, 화요일에는 2회차 영화상영이 예정되어 있는 것이다.<br>사용자가 선택한 날짜의 회차별로 이미 예약된 내역정보뿐만 아니라 예약 가능한 좌석수를 가져오는 쿼리를 만들어야한다.</p><a id="more"></a><p>쿼리를 이해하기 위한 정보는 아래와 같다.</p><table><thead><tr><th align="center">구분</th><th align="center">명칭</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">테이블</td><td align="center">TB_TIME</td><td align="center">회차 테이블</td></tr><tr><td align="center">테이블</td><td align="center">TB_RESERVE</td><td align="center">예약 내역테이블</td></tr><tr><td align="center">파라미터</td><td align="center">dt</td><td align="center">조회 날짜</td></tr><tr><td align="center">파라미터</td><td align="center">id</td><td align="center">회차 ID</td></tr><tr><td align="center">컬럼</td><td align="center">ALL_SEAT</td><td align="center">해당 회차의 전체 좌석수</td></tr><tr><td align="center">컬럼</td><td align="center">RESERVE_DT</td><td align="center">상영일</td></tr><tr><td align="center">별칭</td><td align="center">openSeat</td><td align="center">예약가능한 좌석수</td></tr></tbody></table><h2 id="내쿼리"><a href="#내쿼리" class="headerlink" title="내쿼리"></a>내쿼리</h2><p>select구문에 subquery를 넣어서 해당 날짜에서 선택된 회차의 잔여 예약좌석수를 구했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TPOT.ID</span><br><span class="line">, <span class="comment">-- 여러 정보 컬럼 (중략) </span></span><br><span class="line">, <span class="keyword">IFNULL</span>(TPOT.ALL_SEAT,<span class="number">0</span>) - <span class="keyword">IFNULL</span>((<span class="keyword">SELECT</span> <span class="keyword">sum</span>(<span class="keyword">IFNULL</span>(TPR.RESERVED_SEAT, <span class="number">0</span>)) <span class="keyword">FROM</span> TB_RESERVE TPR <span class="keyword">WHERE</span> TPR.ID = <span class="comment">#&#123;id&#125; AND TPR.RESERVE_DT = DATE(#&#123;dt&#125;) GROUP BY TPR.ID),0) as openSeat</span></span><br><span class="line"><span class="keyword">FROM</span> TB_TIME TPOT </span><br><span class="line"><span class="keyword">WHERE</span> TPOT.ID = <span class="comment">#&#123;id&#125;</span></span><br></pre></td></tr></table></figure><p>팀장님이 이 쿼리를 보시곤 join을 써보는게 어떻냐며 알려주셨다.</p><p><br><br><br></p><h2 id="subquery를-제거한-쿼리"><a href="#subquery를-제거한-쿼리" class="headerlink" title="subquery를 제거한 쿼리"></a>subquery를 제거한 쿼리</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TPOT.ID</span><br><span class="line">, <span class="comment">-- 여러 정보 컬럼 (중략) </span></span><br><span class="line">, <span class="keyword">IFNULL</span>(TPOT.ALL_SEAT, <span class="number">0</span>) - <span class="keyword">IFNULL</span>(a.totalReservedSeat, <span class="number">0</span>) <span class="keyword">as</span> openSeat</span><br><span class="line"><span class="keyword">FROM</span> TB_TIME TPOT </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">RESERVE_DT</span><br><span class="line">,<span class="keyword">DATE_FORMAT</span>(RESERVE_DT, <span class="string">'%a'</span>) <span class="keyword">as</span> WEEK_CODE</span><br><span class="line">,TIME_ID </span><br><span class="line">,<span class="keyword">SUM</span>(RESERVED_SEAT) totalReservedSeat </span><br><span class="line"><span class="keyword">FROM</span>  TB_RESERVE</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">DATE</span>(RESERVE_DT) = <span class="built_in">DATE</span>(<span class="comment">#&#123;dt&#125;)</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">RESERVE_DT</span><br><span class="line">,<span class="keyword">DATE_FORMAT</span>(RESERVE_DT, <span class="string">'%a'</span>)</span><br><span class="line">,TIME_ID</span><br><span class="line">) a</span><br><span class="line"><span class="keyword">ON</span> TPOT.WEEK_CODE = a.WEEK_CODE</span><br><span class="line"><span class="keyword">AND</span> TPOT.TIME_ID = a.TIME_ID</span><br><span class="line"><span class="keyword">WHERE</span> TPOT.ID = <span class="comment">#&#123;id&#125;</span></span><br><span class="line"><span class="keyword">AND</span>   <span class="keyword">DATE_FORMAT</span>(<span class="comment">#&#123;dt&#125;, '%a') = TPOT.WEEK_CODE</span></span><br></pre></td></tr></table></figure><p>팀장님이 도와주셔서 다시 작성한 쿼리이다.이 쿼리를 보면 요일 구분이 확실히 들어가있어 요구사항이 제대로 반영되어있다는 걸 알 수 있다.<br>자칫 길어보이는 쿼리인데 왜 subquery보다 join을 쓰면 좋을까?</p><p><br><br><br></p><h2 id="subquery보다-join을-써야하는-이유"><a href="#subquery보다-join을-써야하는-이유" class="headerlink" title="subquery보다 join을 써야하는 이유"></a>subquery보다 join을 써야하는 이유</h2><p>MySQL버전마다 성능이 다르지만 MySQL5.5에서 MySQL5.6으로 버전업되면서 서브쿼리 성능이 개선되었다고 한다.<br>MySQL5.5에서는 서브퀴리 최적화에 많은 문제가 있어왔다. 의도한대로 서브쿼리가 제대로 실행되지 않거나 속도가 느리다.<br><a href="https://jojoldu.tistory.com/520">jojoldu님이 블로그 글 MySQL where in (서브쿼리) vs 조인 조회 성능 비교 (5.5 vs 5.6)</a>을 참고하면 얼마나 속도차이가 나는지까지 확인 할 수 있다.<br>버전과 조건 관계없이 좋은 성능을 내려면 최대한 join을 이용하는 것이 좋다.<br>만약 서브 쿼리를 사용해 필터링을 하면 이는 크게 성능이 저하된다. 이럴땐 LEFT [OUTER] JOIN을 써서 옵티마이저(Optimizer)가 최적화 하기 쉽도록 하여 성능을 개선할 수 있다.</p><p>오늘도 또 하나 배웠다! 뿌듯~</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MySQLDB/">MySQLDB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/08/09/220809SQL-refact-subquery-to-join/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] 쿼리 어노테이션(Query Annotation) 에러(expression or DISTINCT expected, got)해결</title>
      <link>https://sowon-dev.github.io/2022/08/08/220808SpringJPA-queryannotation/</link>
      <guid>https://sowon-dev.github.io/2022/08/08/220808SpringJPA-queryannotation/</guid>
      <pubDate>Mon, 08 Aug 2022 00:57:57 GMT</pubDate>
      
      <description>&lt;p&gt;인텔리제이를 사용하면 Spring 프레임워크를 사용하는데 많은 도움을 받을 수 있다.&lt;br&gt;친구가 인텔리제이로 공부하던 중에 JPA 쿼리어노테이션 에러가 떠서 나한테 물어봤는데 나도 정확히 잘 몰라서 이참에 함께 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>인텔리제이를 사용하면 Spring 프레임워크를 사용하는데 많은 도움을 받을 수 있다.<br>친구가 인텔리제이로 공부하던 중에 JPA 쿼리어노테이션 에러가 떠서 나한테 물어봤는데 나도 정확히 잘 몰라서 이참에 함께 공부해봤다.</p><a id="more"></a><h2 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h2><p>친구는 Todo테이블에서 userId에 일치되는 행을 가져오는 쿼리를 짜고 싶었다고 한다.</p><p><img src="/img/220808jpaqueryannotation.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo WHERE t.userId = ?1"</span>)</span><br></pre></td></tr></table></figure><p>위 쿼리에서 오류가 있어 인텔리제이가 인텔리저이의 아래 error 메시지를 보여줬다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;expression&gt; or DISTINCT expected, got &#39;*&#39;</span><br></pre></td></tr></table></figure><p>에러를 해석해보면, <code>표현식 또는 구별자가 있어야한다</code>라고 한다.<br>어떤 오류일까?</p><p><br><br><br></p><h2 id="오류-해결"><a href="#오류-해결" class="headerlink" title="오류 해결"></a>오류 해결</h2><p>where절에서 t.userId를 불러오는데 쿼리상에 t가 정의되지 않았다.<br>즉 Todo 테이블의 별칭을 t로 정의해줘야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo t WHERE t.userId = ?1"</span>)</span><br></pre></td></tr></table></figure><p>오류가 해결되었다!<br>사실 아주 간단한 문제였다.<br>하지만 JPA Query Annotation을 잘 알지못하니 5초만에 턱 해결할 수가 없었다.<br>JPA Query Annotation은 뭘까?<br>간단하게라도 공부해봤다.</p><p><br><br><br></p><h2 id="JPA-Query-Annotation-간단-설명"><a href="#JPA-Query-Annotation-간단-설명" class="headerlink" title="JPA Query Annotation 간단 설명"></a>JPA Query Annotation 간단 설명</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo t WHERE t.userId = ?1"</span>)</span><br></pre></td></tr></table></figure><p>여기서 물음표의 의미는 파라미터갯수이다.<br>물음표 뒤의 숫자 1의 의미는 무엇일까?<br>물음표에 들어올 파라미터의 위치이다. 즉 첫번째 파라미터는 <code>?1</code>여기에 위치하게된다.<br>만약 파라미터가 두개라면?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT * FROM Todo t WHERE t.userId = ?1 AND t.userName = ?2"</span>)</span><br></pre></td></tr></table></figure><p>간단하다!<br>더 깊은 설명은 아래 글을 참고하면 된다.</p><ul><li><a href="https://attacomsian.com/blog/spring-data-jpa-query-annotation">Spring Data JPA Custom Queries using @Query Annotation</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/08/08/220808SpringJPA-queryannotation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[도서]인증과 인가</title>
      <link>https://sowon-dev.github.io/2022/07/22/220722authenticationVSauthorization/</link>
      <guid>https://sowon-dev.github.io/2022/07/22/220722authenticationVSauthorization/</guid>
      <pubDate>Fri, 22 Jul 2022 01:38:14 GMT</pubDate>
      
      <description>&lt;p&gt;책 &lt;code&gt;React.js, 스프링 부트, AWS로 배우는 웹 개발 101&lt;/code&gt; 를 읽고 공부한 내용을 정리한 글입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>책 <code>React.js, 스프링 부트, AWS로 배우는 웹 개발 101</code> 를 읽고 공부한 내용을 정리한 글입니다.</p><a id="more"></a><p><img src="http://image.kyobobook.co.kr/images/book/xlarge/656/x9791161755656.jpg" alt=""></p><ul><li><a href="http://www.acornpub.co.kr/book/reactjs-springboot#toc">도서 공식 링크</a></li><li><a href="http://www.acornpub.co.kr/book/reactjs-springboot#errata">도서 정오표</a></li><li><a href="https://github.com/fsoftwareengineer/todo-application">공식 레포지토리 링크</a></li></ul><p><br><br></p><h1 id="인증과-인가"><a href="#인증과-인가" class="headerlink" title="인증과 인가"></a>인증과 인가</h1><ul><li>인증: 내 집에 들어올 수 있는 사용자</li><li>인가: 인증받고 들어온 사용자가 내 집에서 할 수 있는 것들<ul><li>화장실 사용, 주방사용, 거실사용 등등</li></ul></li></ul><p>인증에는 여러 방법이 있다.<br>책에서는 3가지 방법에 대해 이야기한다.</p><table><thead><tr><th align="center">인증종류 3가지</th><th align="center">설명</th><th align="center">장점</th><th align="center">단점</th></tr></thead><tbody><tr><td align="center">Basic 인증</td><td align="center">클라이언트는 매 요청시 아이디와 비번을 전달하여 자신이 인증된 사용자임을 증명한다</td><td align="center"></td><td align="center">인코딩헤도 아이디와 비번 노출됨.사용자를 로그아웃시킬수없음.인증서버에 요청이 많아져 단일 장애점이 되버림.</td></tr><tr><td align="center">토근기반인증(Bearer 인증)</td><td align="center">토큰은 최초 로그인시 서버가 만들어 줌. 서버가 자기만 아는 시크릿코드로 토큰을 만들어 반환하면 클라이언트는 이후 요청에 아이디와 비번 대신 토큰을 넘겨 자신이 인증된 사용자임을 증명한다.</td><td align="center">아디랑 비번이 노출되지 않으므로 보안측면에서 Basic인증방식보다 안전함.서버가 토큰을 생성하므로 유효시간, 인가관리가능.</td><td align="center">토큰 이름만 바꾸면 새로운 사용자가 되버리므로 스케일문제 해결못함</td></tr><tr><td align="center">JSON 웹 토큰(JWT)</td><td align="center"><a href="https://jwt.io/">JWT</a>는 JSON Web Token의 약자.</td><td align="center">전자서명된 토큰을 이용항 스케일 문제를 해결함.</td><td align="center">인증서버에 토큰유효성을 물어보지않으므로 단일 장애점문제해결</td></tr></tbody></table><p><br><br><br><br></p><h1 id="인코딩을-했는데-왜-문제가-될까"><a href="#인코딩을-했는데-왜-문제가-될까" class="headerlink" title="인코딩을 했는데 왜 문제가 될까?"></a>인코딩을 했는데 왜 문제가 될까?</h1><p>Basic Auth에서는 아이디와 비밀번호를 인코딩한다. 이 솔루션은 아이디와 비밀번호를 노출한다.<br>인코딩을 했는데 왜 문제가 될까? 인코딩은 보안을 목적으로 하는 것이 아니기때문!<br>인간이 아이디와 비밀번호를 바로 알아내기 어렵지만 디코더만 있으면 누구나 원래의 아이디와 비번을 알아낼수 있다.<br>이렇게 가로채는 것을 <a href="https://blog.larapulse.com/security/prevent-mitm-attacks">MITM(Man in the middle attack)</a>라고한다.</p><p><img src="https://blog.larapulse.com/files/original/images/3e/8c/3e8c78810e53dec80d2a5b2933b564a20c0e0295.png" alt="https://blog.larapulse.com/security/prevent-mitm-attacks"></p><p><br><br><br><br></p><h1 id="JWT-설명-및-각-필드-뜻"><a href="#JWT-설명-및-각-필드-뜻" class="headerlink" title="JWT 설명 및 각 필드 뜻"></a>JWT 설명 및 각 필드 뜻</h1><p>JWT는 JSON 형태로 된 토큰이면서 토큰 기반 인증방식이다.<br>JSON 웹 토큰방식과 토큰 기반 인증방식의 차이점은 무엇일까?<br>JWT는 서버가 헤더와 페이로드를 생성한 후 전자 서명을 한다는 점이 기존 토큰 기반 인증방식과 다르다.<br>JWT에게 전자사명이란 {헤더}.{페이로드}와 시크릿키를 이요앻 해시 함수에 돌린 암호화한 결과값이다.</p><ul><li>HEADER<ul><li>typ: Type의 약자. 토큰타입을 의미.</li><li>alg: Algorithm의 약자. 토큰 서명을 발행하는 데 사용된 해시 알고리즘의 종류를 의미</li></ul></li><li>Payload<ul><li>sub: Subject의 약자. 토큰의 주인을 의미 ex)사용자이메일, 사용자아이디</li><li>iss: Issuer의 약자. 토큰을 발행한 주체를 의미 ex) 내가만든애플리케이션이름, facebook</li><li>iat: issued at의 약자. 토큰이 발행된 날짜와 시간을 의미.</li><li>exp: expiration의 약자. 토큰 만료 시간을 의미.</li></ul></li><li>Signature<ul><li>토큰을 발행한 주체 Issuer가 발행한 서명으로 토큰의 유효성 검사에 사용된다.</li></ul></li></ul><p><br><br><br></p><h2 id="JWT-인증-방식"><a href="#JWT-인증-방식" class="headerlink" title="JWT 인증 방식"></a>JWT 인증 방식</h2><ol><li>최초 로그인: 서버는 사용자 아디와 비번을 서버에 저장딘 아디와 비번에 비교해 인증</li><li>일치하면 사용자의 정보를 이용해 <code>{헤더}.{페이로드}</code> 작성한 뒤 자신의 시크릿키로 <code>{헤더}.{페이로드}</code>부분을 전자서명함.</li><li>전자 서명의 결과로 나온 값을 <code>{헤더}.{페이로드}.{서명}</code>으로 이어붙이고 Base64로 인코딩한 후 반환.</li></ol><p><br><br><br></p><h2 id="만약-누군가가-이-토큰으로-리소스-접근을-요청한다면"><a href="#만약-누군가가-이-토큰으로-리소스-접근을-요청한다면" class="headerlink" title="만약 누군가가 이 토큰으로 리소스 접근을 요청한다면?"></a>만약 누군가가 이 토큰으로 리소스 접근을 요청한다면?</h2><ol><li>서버:토큰을 Base64로 디코딩</li><li>디코딩한 JSON을 <code>{헤더}.{페이로드}</code>과 <code>{서명}</code>으로 나눈다.</li><li>서버는 위에서 나눴던 <code>{헤더}.{페이로드}</code>와 자신이 갖고있는 시크릿키로 전자서명을 만든 후 잘라놨던 <code>{서명}</code>부분과 일치하는 비교</li></ol><p>이렇게 처리하면 좋은 점은 인증서버에 토큰 유효성에 대해 물어볼 필요가 없기에 단일 장애점 문제가 발생하지 않는다.</p><p><br><br><br></p><h2 id="만약-누군가가-토큰을-훔쳐간다면"><a href="#만약-누군가가-토큰을-훔쳐간다면" class="headerlink" title="만약 누군가가 토큰을 훔쳐간다면?"></a>만약 누군가가 토큰을 훔쳐간다면?</h2><p>당연히 해당 계정 리소스에 접근이 가능하다.<br>따라서 반드시 HTTPS로 통신해야만 한다.</p><blockquote><p>그래서 Postman 인증 테스트시 HTTP로 하면 안되었던 거구나. 유레카!</p></blockquote><p><br><br><br></p><h1 id="스프링-시큐리티가-필요한-이유"><a href="#스프링-시큐리티가-필요한-이유" class="headerlink" title="스프링 시큐리티가 필요한 이유?"></a>스프링 시큐리티가 필요한 이유?</h1><p>API 실행시마다 사용자 인증을 해주는 부분을 스프링 시큐리티가 대신해줄수있다.</p><ul><li>스프링 시큐리티란? 서블릿 필터의 집합</li><li>서블릿 필터이란? 서블릿 실행 전 에 실행되는 클래스들로 디스패처 서블릿 실행되기 전에 항상 실행됨.</li><li>스프링 시큐리티에서 서블릿 펄터를 사용하려면 2가지를 해야함<ol><li>서블릿 필터 구현하는 작업</li><li>서블릿 컨테이너에 구현한 필터를 사용하도록 설정해주는 작업</li></ol></li><li>여기서 개발자가 할 일은?<br>서블릿 필터를 구현하고 서블릿 필터를 서블릿 컨테이너가 실행하도록 설정해주기!</li><li>서블릿필터는 꼭 한 개여야할까?<br>서블릿 필터가 1개일 필요는 없다. 하나의 클래스에 모든 필터를 다 담으면 크기가 어마어마해질 것이다. 따라서 기능에 따라 서블릿 필터 여러 개를 작성하는 것이 좋다.<br>생성한 서블릿 필터들을 FilterChain을 통해 연쇄적으로 순서대로 실행시킬수 있음.</li></ul><p><br><br><br></p><h2 id="HttpSecurity란"><a href="#HttpSecurity란" class="headerlink" title="HttpSecurity란?"></a>HttpSecurity란?</h2><ul><li>WebSecurityConfig.java 파일을 생성해서 스프링시큐리티 설정해야 함</li><li>시큐리티 설정을 위한 오브젝트임. </li><li>이 오브젝트를 통해 web.xml 대신 HttpSecurity를 이용해 시큐리티 관련 설정함.</li><li>스프링시큐리티에 JwtAuthenticationFilter를 사용하라고 알려줘야함</li><li><a href="https://github.com/fsoftwareengineer/todo-application/blob/main/4.3-Spring_Security_Integration/demo/src/main/java/com/example/demo/config/WebSecurityConfig.java">코드 출처 및 원본 바로가기</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtAuthenticationFilter jwtAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// http 시큐리티 빌더</span></span><br><span class="line">http.cors() <span class="comment">// WebMvcConfig에서 이미 설정했으므로 기본 cors 설정.</span></span><br><span class="line">.and()</span><br><span class="line">.csrf()<span class="comment">// csrf는 현재 사용하지 않으므로 disable</span></span><br><span class="line">.disable()</span><br><span class="line">.httpBasic()<span class="comment">// token을 사용하므로 basic 인증 disable</span></span><br><span class="line">.disable()</span><br><span class="line">.sessionManagement()  <span class="comment">// session 기반이 아님을 선언</span></span><br><span class="line">.sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">.and()</span><br><span class="line">.authorizeRequests() <span class="comment">// /와 /auth/** 경로는 인증 안해도 됨.</span></span><br><span class="line">.antMatchers(<span class="string">"/"</span>, <span class="string">"/auth/**"</span>).permitAll()</span><br><span class="line">.anyRequest() <span class="comment">// /와 /auth/**이외의 모든 경로는 인증 해야됨.</span></span><br><span class="line">.authenticated();</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 등록.</span></span><br><span class="line"><span class="comment">// 매 리퀘스트마다</span></span><br><span class="line"><span class="comment">// CorsFilter 실행한 후에</span></span><br><span class="line"><span class="comment">// jwtAuthenticationFilter 실행한다.</span></span><br><span class="line">http.addFilterAfter(</span><br><span class="line">jwtAuthenticationFilter,</span><br><span class="line">CorsFilter<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addFilterAfter()메서드는 JwtAuthenticationFilter를 CorsFilter 이후에 실행하라고 설정하는 것임. 즉, 실행순서는 <code>CorsFilter -&gt; JwtAuthenticationFilter</code> 이 된다. 반드시 이 순서로 실행해야하는 것은 아니다. 저자가 보기에 적당해보여서 그렇게 설정한 것이다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Book/">Book</category>
      
      <category domain="https://sowon-dev.github.io/tags/WEB/">WEB</category>
      
      
      <comments>https://sowon-dev.github.io/2022/07/22/220722authenticationVSauthorization/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CORS는 왜 날 헷갈리게 하는걸까?(ft. CSRF, XSS)</title>
      <link>https://sowon-dev.github.io/2022/07/17/220718CORS/</link>
      <guid>https://sowon-dev.github.io/2022/07/17/220718CORS/</guid>
      <pubDate>Sun, 17 Jul 2022 20:42:47 GMT</pubDate>
      
      <description>&lt;p&gt;CORS는 크로스-오리진 리소스 셰어링(Cross-Origin Resource Sharing)의 약자이고 직역하면 교차 출처 리소스 공유이다.&lt;br&gt;처음 리소스를 제공한 도메인(Origin)이 요청 도메인과 다르더라도 요청을 허락해 주는 웹 보안 방침이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>CORS는 크로스-오리진 리소스 셰어링(Cross-Origin Resource Sharing)의 약자이고 직역하면 교차 출처 리소스 공유이다.<br>처음 리소스를 제공한 도메인(Origin)이 요청 도메인과 다르더라도 요청을 허락해 주는 웹 보안 방침이다.</p><a id="more"></a><h2 id="CORS-웹-보안-방침이-왜-필요한-걸까"><a href="#CORS-웹-보안-방침이-왜-필요한-걸까" class="headerlink" title="CORS 웹 보안 방침이 왜 필요한 걸까?"></a>CORS 웹 보안 방침이 왜 필요한 걸까?</h2><p>웹 사이트는 원래 사용자의 공격에 취약하므로 보안에 유의해야한다.<br>서로 다른 출처의 웹 사이트가 통신하는데 제약이 없으면 악의적인 사용자가 웹 사이트 정보를 탈튀할 수도 있다.<br>따라서 같은 출처인지 다른 출처인지 구분이 필요하고 다른 출처인 경우 경고를 하는 것이다.</p><p><br><br><br></p><h3 id="CORS-취약점"><a href="#CORS-취약점" class="headerlink" title="CORS 취약점"></a>CORS 취약점</h3><ul><li>CSRF <small><a href="https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/">(참고: 전자정부프레임워크3.8에 CSRF 설정하기)</a></small>: 사이트 간 요청 위조 약자로 공격대상이 Server</li><li>XSS <small><a href="https://sowon-dev.github.io/2022/04/20/220420XSS/">(참고: XSS 방지)</a></small>: 사이트 간 스크립팅의 약자로 공격대상이 Client</li></ul><p><br><br><br></p><h2 id="개발자도구-F12-의-네트워크-탭"><a href="#개발자도구-F12-의-네트워크-탭" class="headerlink" title="개발자도구(F12)의 네트워크 탭"></a>개발자도구(F12)의 네트워크 탭</h2><p>다른 출처의 웹사이트로 요청을 보내면 브라우저는 2개의 요청을 보낸다.</p><ol><li>Options 메서드를 사용하는 요청</li><li>사용자가 보낸 요청</li></ol><p>Options 메서드는 보통 리소스에 대해 어떤 HTTP 메서드를 사용할 수 있는지 확인하고 싶을 때 보내고 Options 요청이 반환되고 CORS여부 및 GET 요청 사용가능 여부를 확인하면 두번째 요청을 보내게 된다.</p><ul><li>Access-Control-Allow-Origin: 프론트엔드 애플리케이션 서버 주소</li><li>Access-Control-Allow-Methods: 허용되는 메서드 ex) GET,POST,PUT,PATCH,DELETE,OPTIONS</li></ul><p><br><br><br></p><h2 id="CORS가-가능하려면"><a href="#CORS가-가능하려면" class="headerlink" title="CORS가 가능하려면?"></a>CORS가 가능하려면?</h2><p>CORS가 가능하려면 백엔드에서 CORS 방침을 설정해줘야한다.<br>자바의 경우 WebMvcConfig 클래스로 설정할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 스프링 빈으로 등록</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_AGE_SECS = <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 모든 경로에 대해</span></span><br><span class="line">registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line"><span class="comment">// Origin이 http:localhost:3000에 대해</span></span><br><span class="line">.allowedOrigins(<span class="string">"http://localhost:3000"</span>)</span><br><span class="line"><span class="comment">// GET, POST, PUT, PATCH, DELETE, OPTIONS 메서드를 허용한다.</span></span><br><span class="line">.allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>, <span class="string">"OPTIONS"</span>)</span><br><span class="line">.allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">.allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">.maxAge(MAX_AGE_SECS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/fsoftwareengineer/todo-application/blob/main/3.3-Service_Integration/demo/src/main/java/com/example/demo/config/WebMvcConfig.java">예시코드 출처</a></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.acornpub.co.kr/book/reactjs-springboot#toc">React.js, 스프링 부트, AWS로 배우는 웹 개발 101</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/CORS/">CORS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/07/17/220718CORS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>제네릭(Generic) 타입파라미터(T) vs 와일드카드(?) 차이</title>
      <link>https://sowon-dev.github.io/2022/07/14/220715wildcard-vs-typeparameter/</link>
      <guid>https://sowon-dev.github.io/2022/07/14/220715wildcard-vs-typeparameter/</guid>
      <pubDate>Thu, 14 Jul 2022 21:47:59 GMT</pubDate>
      
      <description>&lt;p&gt;제네릭(Generic)의 사전적 의미는 일반화이다.&lt;br&gt;제네릭의 장점은 컴파일시 데이터타입을 체크해줘서 타입이 안정적이고 타입체크와 형변환을 생략할 수 있어 코드가 간결해진다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>제네릭(Generic)의 사전적 의미는 일반화이다.<br>제네릭의 장점은 컴파일시 데이터타입을 체크해줘서 타입이 안정적이고 타입체크와 형변환을 생략할 수 있어 코드가 간결해진다.</p><a id="more"></a><h2 id="와일드카드-lt-gt"><a href="#와일드카드-lt-gt" class="headerlink" title="와일드카드(&lt;?&gt;)"></a>와일드카드(&lt;?&gt;)</h2><ol><li>하나의 참조 변수로 대입된 타입이 다른 객체를 참조 가능하다.</li></ol><table><thead><tr><th align="left">분류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">&lt;? extneds T&gt;</td><td align="left">와일드 카드의 상한 제한. T와 그 자손들만 가능.실무에서 가장 많이 사용함</td></tr><tr><td align="left">&lt;? super T&gt;</td><td align="left">와일드 카드의 하한 제한. T와 그 조상들만 가능</td></tr><tr><td align="left">&lt;?&gt;</td><td align="left">제한 없으므르 모든 타입 가능. &lt;? extneds Object&gt;와 동일</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;? extneds Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;apple&gt;(); <span class="comment">// OK</span></span><br><span class="line">ArrayList&lt;? extneds Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;orange&gt;(); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;apple&gt; list = <span class="keyword">new</span> ArrayList&lt;orange&gt;(); <span class="comment">// 에러발생</span></span><br></pre></td></tr></table></figure><ol start="2"><li>메서드의 매개변수에 와일드 카드를 사용할 수 있다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Payment <span class="title">buyFruit</span><span class="params">(FruitBox&lt;? extends Fruit&gt; box)</span></span>&#123;</span><br><span class="line"><span class="comment">// 매개변수에 와일드카드를 사용했다.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="타입-매개변수-lt-T-gt"><a href="#타입-매개변수-lt-T-gt" class="headerlink" title="타입 매개변수(&lt;T&gt;)"></a>타입 매개변수(&lt;T&gt;)</h2><p>타입 매개변수는 총 3곳에서 사용할 수 있다.</p><table><thead><tr><th align="center">명</th><th align="left">사용 위치</th></tr></thead><tbody><tr><td align="center">제네릭 인터페이스</td><td align="left">인터페이스에 타입 매개변수를 사용</td></tr><tr><td align="center">제네릭 클래스</td><td align="left">클래스에 타입 매개변수를 사용</td></tr><tr><td align="center">제네릭 메서드</td><td align="left">메서드에 타입 매개변수를 사용</td></tr></tbody></table><p>이 중에서 오늘 다룰 내용은 제네릭 클래스이다.<br>제네릭 클래스의 인스턴스를 생성할 때 타입 매개변수로 전달받은 타입으로 데이터타입이 정해진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 제니릭 클래스 선언</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 클래스명&lt;타입 매개변수&gt;</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성</span></span><br><span class="line"><span class="keyword">new</span> 클래스명&lt;타입 인자&gt;(<span class="keyword">new</span> 타입매개변수());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성 - JDK7이후부터는 타입인자 생략 가능</span></span><br><span class="line"><span class="keyword">new</span> 클래스명&lt;타입 인자&gt;();</span><br></pre></td></tr></table></figure><p>과일로 예시를 들어보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitBox</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">T fruit;</span><br><span class="line"><span class="keyword">public</span> FruitBox</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성</span></span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;Grape&gt;(<span class="keyword">new</span> Grape());</span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;Pear&gt;(<span class="keyword">new</span> Pear());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제네릭 클래스 생성 - JDK7이후부터는 타입인자 생략 가능</span></span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;&gt;(<span class="keyword">new</span> Grape());</span><br><span class="line"><span class="keyword">new</span> FruitBox&lt;&gt;(<span class="keyword">new</span> Pear());</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="와일카드-vs-정규타입-매개변수-T차이"><a href="#와일카드-vs-정규타입-매개변수-T차이" class="headerlink" title="와일카드 vs 정규타입 매개변수 T차이"></a>와일카드 vs 정규타입 매개변수 T차이</h2><blockquote><p>The difference is that if you have a type parameter U, you can use that type inside the method;<br>if you use a wildcard, you don’t have access to the actual type inside the method (you only know that it is some unknown type that extends Number).<br>If you need to know the actual type for whatever reason inside the method, then you cannot use the wildcard version.<br>출처: <a href="https://coderanch.com/t/688561/java/difference-Bounded-Type-Parameters-Upper">coderanch 블로그</a></p></blockquote><ul><li>와일드카드는 Object를 받기때문에 get메서드를 사용할 수 있지만 set, put메서드는 사용할 수 없다.</li><li>타입 매개변수는 get, set, put메서드는 사용가능하다.</li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sowon-dev.github.io/2020/07/19/200720javai2/">기본클래스 이외에 자바 구성요소3 : annotation, generic</a></li><li>추천영상: 자바의 정석 기초편 와일드카드, 지네릭 메서드 by 남궁성의 정석코딩 유튜브채널</li></ul><iframe width="600" height="380" src="https://www.youtube.com/embed/LL3PWmGFuQA" title="[자바의 정석 - 기초편] ch12-12~14 와일드카드,  지네릭 메서드" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/14/220715wildcard-vs-typeparameter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DTO vs Model vs Entity</title>
      <link>https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/</link>
      <guid>https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/</guid>
      <pubDate>Thu, 14 Jul 2022 05:34:26 GMT</pubDate>
      
      <description>&lt;p&gt;스프링프레임워크를 공부하면서 DTO와 Entity의 역할 차이는 확실한데 Model의 개념과 셋의 차이점이 궁금해 추가로 공부해봤다.&lt;br&gt;닷넷프레임워크를 사용할땐 대부분의 클래스를 Model라고 칭했기 때문에 더 혼란스러웠다.&lt;br&gt;언어별로 부르는 명칭이 다른 듯하다. 사실 명칭보다 더 중요한 것은 각 클래스가 어떤 역할을 하는지 정확히 아는 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>스프링프레임워크를 공부하면서 DTO와 Entity의 역할 차이는 확실한데 Model의 개념과 셋의 차이점이 궁금해 추가로 공부해봤다.<br>닷넷프레임워크를 사용할땐 대부분의 클래스를 Model라고 칭했기 때문에 더 혼란스러웠다.<br>언어별로 부르는 명칭이 다른 듯하다. 사실 명칭보다 더 중요한 것은 각 클래스가 어떤 역할을 하는지 정확히 아는 것이다.</p><a id="more"></a><table><thead><tr><th align="center">명칭</th><th align="center">역할</th></tr></thead><tbody><tr><td align="center">DTO</td><td align="center">클라이언트의 데이터를 받는 역할. 클라이언트에서 사용하는 것이므로 노출되도 상관없다.</td></tr><tr><td align="center">Model</td><td align="center">비즈니스 데이터를 담는 역할</td></tr><tr><td align="center">Entity</td><td align="center">데이터베이스의 테이블과 스키마를 표현하는 역할. DB컬럼과 연결되기때문에 필드명이 노출되서는 안된다.</td></tr></tbody></table><ul><li><a href="https://sowon-dev.github.io/2021/09/06/210907Jpa-entityVSDto/">참고: Entity VS DTO 차이점, 컨트롤러에서는 뭘 받아야할까?</a></li></ul><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>공부하면서 내가 생각해 본 예시이다.<br>결제프로그램을 예로 들어 DTO, Model, Entity를 비교한다면 아래와 같을 것이다.</p><table><thead><tr><th align="center">명칭</th><th align="center">예시</th></tr></thead><tbody><tr><td align="center">DTO</td><td align="center">클라이언트가 입력한 카드정보, 쿠폰정보, 결정정보 파라미터로 전달한 걸 컨트롤러에서 받음</td></tr><tr><td align="center">Model</td><td align="center">유저별 결제 혜택, 포인트 차감, 통신사할인등 중간에 연산이나 외부시스템연동할때 쓸 필드들을 model에 담아서 처리함</td></tr><tr><td align="center">Entity</td><td align="center">연산되고 DB에 기록되어야 할 데이터(유저ID, 연산 후 포인트등)를 담아서 update시킴</td></tr></tbody></table><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://itzone.com.vn/en/article/entity-domain-model-and-dto-why-so-many/">Entity, domain model and DTO – why so many?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/14/220714dtovsmodelvsentity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트]SPA 동작 순서</title>
      <link>https://sowon-dev.github.io/2022/07/11/220712React-spa/</link>
      <guid>https://sowon-dev.github.io/2022/07/11/220712React-spa/</guid>
      <pubDate>Mon, 11 Jul 2022 23:33:34 GMT</pubDate>
      
      <description>&lt;p&gt;SPA는 Single Page Application의 약자로 한 번 웹 페이지를 로딩하면 사용자가 새로고침하지 않는 이상 페이지를 새로 로딩하지 않는 애플리케이션을 의미한다.&lt;br&gt;이게 무슨 의미일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SPA는 Single Page Application의 약자로 한 번 웹 페이지를 로딩하면 사용자가 새로고침하지 않는 이상 페이지를 새로 로딩하지 않는 애플리케이션을 의미한다.<br>이게 무슨 의미일까?</p><a id="more"></a><h2 id="React-동작순서"><a href="#React-동작순서" class="headerlink" title="React 동작순서"></a>React 동작순서</h2><ol><li>index.html 렌더링<ul><li>HTML이 body태그를 렌더링하다가 마지막에 bundle.js 스크립트를 로딩하게 되고 거기에 index.js가 포함되어있음.</li></ul></li><li>index.js 실행<ul><li>ReactDOM.render() 함수가 실행됨 -&gt; 매개변수가 <code>&lt;APP /&gt;</code>이라서 해당 element를 렌더링하게 됨.</li></ul></li><li>root element 하위에 React.js가 생성한 HTML element 추가됨<ul><li>ReactDOM이 내부 컴포넌트들을 root 엘리먼트에 렌더링함.</li></ul></li><li>root element 하위 element 렌더링</li></ol><p><br><br><br></p><h2 id="SPA에서-페이지를-변경하고-싶다면"><a href="#SPA에서-페이지를-변경하고-싶다면" class="headerlink" title="SPA에서 페이지를 변경하고 싶다면?"></a>SPA에서 페이지를 변경하고 싶다면?</h2><p>root의 하위 엘리먼트를 다른 HTMl로 수정해야한다.<br>HOW?<br>fetch나 ajax등의 함수로 서버에 데이터를 요청한 뒤 응답 데이터를 받음 -&gt; js내에서 HTML 재구성된다.</p><p>이렇게 서버에게 새 HTML 페이지를 요청하지 않고 데이터를 받은 다음에 js가 동적으로 HTML 재구성해서 만드는 클라이언트 애플리케이션을 SPA라고 한다.<br>이 렌더링 과정을 Client-side Rendering이라고 함.</p><ul><li><a href="https://sowon-dev.github.io/2022/01/19/220119prjtreview/#Keep">참고: SSR과 CSR 중 뭐를 우선순위로 두는 게 좋을까?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/11/220712React-spa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] 리턴타입이 옵셔널(Optional)인 이유는?</title>
      <link>https://sowon-dev.github.io/2022/07/10/220711JPA-optional/</link>
      <guid>https://sowon-dev.github.io/2022/07/10/220711JPA-optional/</guid>
      <pubDate>Sun, 10 Jul 2022 22:19:54 GMT</pubDate>
      
      <description>&lt;p&gt;JPA를 사용 중 아래 코드를 만났고 의문이 생겼다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA를 사용 중 아래 코드를 만났고 의문이 생겼다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Optional&lt;TodoEntity&gt; original = repository.findById(entity.getId());</span><br></pre></td></tr></table></figure><p>왜 꼭 Optional로 리턴타입을 감싸줘야하는걸까?<br>그냥 리턴타입만 쓰면 안될까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TodoEntity original = repository.findById(entity.getId());</span><br></pre></td></tr></table></figure><p>이런식으로 말이다.<br>위처럼 옵셔널(Optional)을 빼버리니 바로 IDE가 에러를 알려주었다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type mismatch: cannot convert from Optional&lt;TodoEntity&gt; to TodoEntity</span><br></pre></td></tr></table></figure><p>왜 이런 에러가 발생하는 걸까?<br>원인은 바로 CrudRepository 인터페이스였다.</p><p><br><br><br></p><h2 id="갑자기-CrudRepository라고"><a href="#갑자기-CrudRepository라고" class="headerlink" title="갑자기 CrudRepository라고?"></a>갑자기 CrudRepository라고?</h2><p>Repository 인터페이스를 만들때 JPA를 쓰기 위해서 JpaRepository를 상속받는다.<br>JpaRepository인터페이스에서 find와 관련된 메서드를 알기위해서는 CrudRepository를 확인하라고 적혀있다.</p><ul><li>JpaRepository 인터페이스</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPA specific extension of &#123;<span class="doctag">@link</span> org.springframework.data.repository.Repository&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Oliver Gierke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Christoph Strobl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Paluch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sander Krabbenborg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jesse Wouters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Greg Turnquist</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.CrudRepository#findAll()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.PagingAndSortingRepository#findAll(org.springframework.data.domain.Sort)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.CrudRepository#findAll(java.lang.Iterable)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (중략)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="CrudRepository-인터페이스"><a href="#CrudRepository-인터페이스" class="headerlink" title="CrudRepository 인터페이스"></a>CrudRepository 인터페이스</h2><p>CrudRepository 인터페이스에서 findById 메서드를 확인해보면 리턴값이 Optional 타입으로 고정되어있다.<br>그래서 바로 IDE가 에러를 알려주었다. 그렇다면 Optional를 쓰면 좋은 점이 뭘까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for generic CRUD operations on a repository for a specific type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Oliver Gierke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eberhard Wolff</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jens Schauder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves an entity by its id.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the entity with the given id or &#123;<span class="doctag">@literal</span> Optional#empty()&#125; if none found.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@literal</span> id&#125; is &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">findById</span><span class="params">(ID id)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// (생략)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Optional-쓰면-좋은-점"><a href="#Optional-쓰면-좋은-점" class="headerlink" title="Optional 쓰면 좋은 점?"></a>Optional 쓰면 좋은 점?</h2><p>Optional은 Java 8에 추가되었다. 이전 자바버전에서는 사용 불가능하다.<br>Optional은 고통스러운 null 처리를 도와주는 Wrapper 클래스이다.</p><p>코드 예시를 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">    </span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name is null"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는 try catch문을 이용해서 null을 처리할 수 있도 있고 다양한 NPE 처리 방법이 있다. </p><ul><li><a href="https://sowon-dev.github.io/2021/06/27/210627Memoir6months/#4-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC-%EA%B0%80%EB%8A%A5">참고: 특별한 거 추가 없이 기본 메서드로 NPE처리하는 방법</a></li></ul><p>그런데 만약 필드가 많다면? 모든 필드를 NULL처리를 해줘야한다.</p><p>이때 Optional 클래스와 해당 클래스가 제공하는 orElse 메서드 또는 orElseGet 메서드를 이용하면 쉽게 NPE 처리가 가능하다.</p><table><thead><tr><th align="center">메서드명</th><th align="center">특징</th></tr></thead><tbody><tr><td align="center">orElseThrow(NullPointerException::new)</td><td align="center">null이라면 함수형 파라미터로 생성한 예외(NullPointerException)를 발생시킨다.</td></tr><tr><td align="center">orElse(person)</td><td align="center">null이면 파라미터(person)를 반환한다. 이때 파라미터(person)은 해당 값이 null이든지 말든지 항상 미리 생성된다.</td></tr><tr><td align="center">orElseGet</td><td align="center">null이면 파라미터(person)를 반환한다.  이때 파라미터(person)은 해당 값이 null 일때만 생성된다. 즉 미리 생성되지 않는다.</td></tr></tbody></table><p><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html?is-external=true">https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html?is-external=true</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/10/220711JPA-optional/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>스프링부트에 ModelMapper 적용하기(ft.더블콜론::)</title>
      <link>https://sowon-dev.github.io/2022/07/07/220708DouleColonOperator/</link>
      <guid>https://sowon-dev.github.io/2022/07/07/220708DouleColonOperator/</guid>
      <pubDate>Thu, 07 Jul 2022 19:36:01 GMT</pubDate>
      
      <description>&lt;p&gt;책 &lt;a href=&quot;http://www.acornpub.co.kr/book/reactjs-springboot#toc&quot;&gt;React.js, 스프링 부트, AWS로 배우는 웹 개발 101&lt;/a&gt;을 가지고 5주 스터디를 진행중이다. 책 내용이 정말 좋다! 강력추천&lt;br&gt;서버API 실습과정에서 DTO를 Entity로 변경하기 위해 &lt;a href=&quot;https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/&quot;&gt;Builder패턴&lt;/a&gt;을 사용했지만 나는 ModelMapper를 사용해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>책 <a href="http://www.acornpub.co.kr/book/reactjs-springboot#toc">React.js, 스프링 부트, AWS로 배우는 웹 개발 101</a>을 가지고 5주 스터디를 진행중이다. 책 내용이 정말 좋다! 강력추천<br>서버API 실습과정에서 DTO를 Entity로 변경하기 위해 <a href="https://sowon-dev.github.io/2021/09/06/210907DesignPattern-builder/">Builder패턴</a>을 사용했지만 나는 ModelMapper를 사용해보았다.</p><a id="more"></a><p><br><br></p><h2 id="ModelMapper-추가하기"><a href="#ModelMapper-추가하기" class="headerlink" title="ModelMapper 추가하기"></a>ModelMapper 추가하기</h2><p>책의 코드에서는 builder를 사용했는데 나는 ModelMapper를 사용하고 싶어서 바꿨다.<br>TodoDTO의 toEntity메서드는 없애주고 Gadle에 ModelMapper를 임포트했다.</p><ul><li>build.gradle<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">//중략</span><br><span class="line">implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.4.2'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>그 다음 config 패키지를 추가하고 ModelMapperConfig.java파일을 생성했다.</p><ul><li>ModelMapperConfig.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.modelmapper.ModelMapper;</span><br><span class="line"><span class="keyword">import</span> org.modelmapper.convention.MatchingStrategies;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelMapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelMapper <span class="title">modelMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();</span><br><span class="line">modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);</span><br><span class="line"><span class="keyword">return</span> modelMapper;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br></p><h2 id="기존-코드"><a href="#기존-코드" class="headerlink" title="기존 코드"></a>기존 코드</h2><p>책의 코드는 <a href="https://github.com/fsoftwareengineer/todo-application">도서 공식 리포지토리</a>에서 확인할 수 있다.</p><ul><li><p>TodoDTO.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> done;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TodoDTO</span><span class="params">(<span class="keyword">final</span> TodoEntity entity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = entity.getId();</span><br><span class="line"><span class="keyword">this</span>.title = entity.getTitle();</span><br><span class="line"><span class="keyword">this</span>.done = entity.isDone();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TodoEntity <span class="title">toEntity</span><span class="params">(<span class="keyword">final</span> TodoDTO dto)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> TodoEntity.builder()</span><br><span class="line">.id(dto.getId())</span><br><span class="line">.title(dto.getTitle())</span><br><span class="line">.done(dto.isDone())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TodoController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"todo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TodoService service;</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; createTodo(<span class="meta">@RequestBody</span> TodoDTO dto) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String temporaryUserId = <span class="string">"temporary-user"</span>; <span class="comment">// temporary user id.</span></span><br><span class="line"><span class="comment">// (1) TodoEntity로 변환한다.</span></span><br><span class="line">TodoEntity entity = TodoDTO.toEntity(dto);</span><br><span class="line"><span class="comment">// (2) id를 null로 초기화 한다. 생성 당시에는 id가 없어야 하기 때문이다.</span></span><br><span class="line">entity.setId(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// (3) 임시 유저 아이디를 설정 해 준다. 이 부분은 4장 인증과 인가에서 수정 할 예정이다. 지금은 인증과 인가 기능이 없으므로 한 유저(temporary-user)만 로그인 없이 사용 가능한 어플리케이션인 셈이다</span></span><br><span class="line">entity.setUserId(temporaryUserId);</span><br><span class="line"><span class="comment">// (4) 서비스를 이용해 Todo엔티티를 생성한다.</span></span><br><span class="line">List&lt;TodoEntity&gt; entities = service.create(entity);</span><br><span class="line"><span class="comment">// (5) 자바 스트림을 이용해 리턴된 엔티티 리스트를 TodoDTO리스트로 변환한다.</span></span><br><span class="line">List&lt;TodoDTO&gt; dtos = entities.stream().map(TodoDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line"><span class="comment">// (6) 변환된 TodoDTO리스트를 이용해ResponseDTO를 초기화한다.</span></span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().data(dtos).build();</span><br><span class="line"><span class="comment">// (7) ResponseDTO를 리턴한다.</span></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok().body(response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// (8) 혹시 예외가 나는 경우 dto대신 error에 메시지를 넣어 리턴한다.</span></span><br><span class="line">String error = e.getMessage();</span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().error(error).build();</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.badRequest().body(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>컨트롤러의 create메서드를 확인하다가 생소한 더블콜론(::)을 만났다.<br>더블콜론(::)이 뭐지?</p><p><br><br></p><h2 id="더블콜론-이-뭐지-물고기-대신-물고기-잡는-법"><a href="#더블콜론-이-뭐지-물고기-대신-물고기-잡는-법" class="headerlink" title="더블콜론(::)이 뭐지? 물고기 대신 물고기 잡는 법"></a>더블콜론(::)이 뭐지? 물고기 대신 물고기 잡는 법</h2><p>모르는 걸 만났을때 어떻게 검색해야할까?<br>구글링해도 사용법만 나올뿐 더블콜론이 뭐하는 애다~라는 정의가 없었다.<br>답답해하다가 팀장님께 살포시 질문을 들으니 물고기가 아닌 물고기 잡는 법을 알려주셨다.<br>감사합니다 팀장님👍</p><blockquote><p>언어를 사용하다 모르는 걸 만나면 <code>언어 + 언어버전 + Language Specification</code>의 조합으로 검색해보세요. 원하는 정보를 기본부터 얻을 수 있을 거예요<br>From 팀장님</p></blockquote><p>Language Specification을 검색할 생각은 전혀 못하고 있었는데 팀장님이 알려주신 덕에 얼른 <a href="https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf">java 1.8 language specification ::</a>을 검색해서 찾아냈다! 내가 궁금했던 근본적인 정보가 다 들어있었다!<br>이렇게 찾는 거구나! 또 하나 배웠다! 재밌어!😻</p><p><br><br></p><h2 id="그래서-더블콜론이-뭔데"><a href="#그래서-더블콜론이-뭔데" class="headerlink" title="그래서 더블콜론이 뭔데?"></a>그래서 더블콜론이 뭔데?</h2><p>더블콜론은 Method Reference Expressions(메소드 참조 표현식)의 하나로 실제로 호출을 수행하지 않고 특정 형식의 메서드를 참조하는 역할을 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MethodReference:</span><br><span class="line">ExpressionName :: [TypeArguments] Identifier</span><br><span class="line">ReferenceType :: [TypeArguments] Identifier</span><br><span class="line">Primary :: [TypeArguments] Identifier</span><br><span class="line">super :: [TypeArguments] Identifier</span><br><span class="line">TypeName . super :: [TypeArguments] Identifier</span><br><span class="line">ClassType :: [TypeArguments]</span><br></pre></td></tr></table></figure><p>간단한 예시(<a href="https://www.geeksforgeeks.org/double-colon-operator-in-java/">예시 더 공부하기</a>)로 println을 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the stream</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"치킨"</span>, <span class="string">"이랑"</span>, <span class="string">"여행"</span>, <span class="string">"가"</span>, <span class="string">"고싶다"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the stream</span></span><br><span class="line">stream.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><p>위의 결과값은 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;결과값</span><br><span class="line">치킨</span><br><span class="line">이랑</span><br><span class="line">여행</span><br><span class="line">가</span><br><span class="line">고싶다</span><br></pre></td></tr></table></figure><p>이를 더블콜론으로 간단하게 표현할수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach( System.out::println);</span><br></pre></td></tr></table></figure><p>결과값은? 당연히 위와 동일하다!</p><p><br><br></p><h2 id="완성된-내-코드"><a href="#완성된-내-코드" class="headerlink" title="완성된 내 코드"></a>완성된 내 코드</h2><p>짠! 서버도 잘 동작한다!<br>공부해서 하나하나 알아가는 게 즐겁다!</p><ul><li><p>TodoDTO.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TodoController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"todo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span>  ModelMapper modelMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TodoService service;</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; createTodo(<span class="meta">@RequestBody</span> TodoDTO dto) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String temporaryUserId = <span class="string">"temporary-user"</span>; <span class="comment">// temporary user id.</span></span><br><span class="line"><span class="comment">// (1) TodoEntity로 변환한다.</span></span><br><span class="line">TodoEntity entity = modelMapper.map(dto, TodoEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// (2) id를 null로 초기화 한다. 생성 당시에는 id가 없어야 하기 때문이다.</span></span><br><span class="line">entity.setId(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// (3) 임시 유저 아이디를 설정 해 준다. 이 부분은 4장 인증과 인가에서 수정 할 예정이다. 지금은 인증과 인가 기능이 없으므로 한 유저(temporary-user)만 로그인 없이 사용 가능한 어플리케이션인 셈이다</span></span><br><span class="line">entity.setUserId(temporaryUserId);</span><br><span class="line"><span class="comment">// (4) 서비스를 이용해 Todo엔티티를 생성한다.</span></span><br><span class="line">List&lt;TodoEntity&gt; entities = service.create(entity);</span><br><span class="line"><span class="comment">// (5) 자바 스트림을 이용해 리턴된 엔티티 리스트를 TodoDTO리스트로 변환한다.</span></span><br><span class="line">List&lt;TodoDTO&gt; dtos = entities.stream().map(e -&gt; modelMapper.map(e, TodoDTO<span class="class">.<span class="keyword">class</span>)).<span class="title">collect</span>(<span class="title">Collectors</span>.<span class="title">toList</span>())</span>;</span><br><span class="line"><span class="comment">// (6) 변환된 TodoDTO리스트를 이용해ResponseDTO를 초기화한다.</span></span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().data(dtos).build();</span><br><span class="line"><span class="comment">// (7) ResponseDTO를 리턴한다.</span></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok().body(response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// (8) 혹시 예외가 나는 경우 dto대신 error에 메시지를 넣어 리턴한다.</span></span><br><span class="line">String error = e.getMessage();</span><br><span class="line">ResponseDTO&lt;TodoDTO&gt; response = ResponseDTO.&lt;TodoDTO&gt;builder().error(error).build();</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.badRequest().body(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>재밌다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/07/07/220708DouleColonOperator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Vue]computed를 찾다가 명령형프로그래밍과 선언형 프로그래밍 차이점까지 알게된 썰</title>
      <link>https://sowon-dev.github.io/2022/06/27/220628Vuejs-computed/</link>
      <guid>https://sowon-dev.github.io/2022/06/27/220628Vuejs-computed/</guid>
      <pubDate>Mon, 27 Jun 2022 21:35:59 GMT</pubDate>
      
      <description>&lt;p&gt;VueJS로 화면을 구성하다가 computed와 watch를 사용하는 데 있어 차이점이 궁금했다.&lt;br&gt;둘이 역할이 비슷한 거 같은데 어떤 차이가 있을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>VueJS로 화면을 구성하다가 computed와 watch를 사용하는 데 있어 차이점이 궁금했다.<br>둘이 역할이 비슷한 거 같은데 어떤 차이가 있을까?</p><a id="more"></a><p><a href="https://kr.vuejs.org/v2/guide/computed.html#computed-%EC%86%8D%EC%84%B1-vs-watch-%EC%86%8D%EC%84%B1">Vue.js 한글 공식문서</a>에도 이와 관련해서 자세히 설명되어있다.</p><h2 id="computed-속성"><a href="#computed-속성" class="headerlink" title="computed 속성"></a>computed 속성</h2><p>원래 computed 속성은 계산이 필요한 속성이 반복 호출될때 사용하는 속성이다.<br>아래 코드와 같이 표현식으로 간단한 계산을 할 수 있지만 저 코드가 반복되서 사용되어야한다면? 여러 코드에 반복사용될수록 소스 코드가 지저분해질것이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 간단한 계산</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;책을 가지고 있다:&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;&#123;&#123; author.books.length &gt; 0 ? 'Yes' : 'No' &#125;&#125;&lt;/</span>span&gt;</span><br></pre></td></tr></table></figure><p>이때 computed 속성을 사용할 수 있다.<br>Vue코드에서 아래처럼 호출한 뒤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      author: &#123;</span><br><span class="line">        name: <span class="string">'John Doe'</span>,</span><br><span class="line">        books: [</span><br><span class="line">          <span class="string">'Vue 2 - Advanced Guide'</span>,</span><br><span class="line">          <span class="string">'Vue 3 - Basic Guide'</span>,</span><br><span class="line">          <span class="string">'Vue 4 - The Mystery'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 계산된 값을 반환하는 속성</span></span><br><span class="line">    publishedBooksMessage() &#123;</span><br><span class="line">      <span class="comment">// `this`는 컴포넌트 인스턴스를 가리킵니다.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.author.books.length &gt; <span class="number">0</span> ? <span class="string">'Yes'</span> : <span class="string">'No'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>화면에서는 아래처럼 간단하게 쓸 수 있어 가독성이 좋아진다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>책을 가지고 있다:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>watch속성은 직관적인 이름에서 알 수 있듯 특정데이터의 변화를 감지하고 지정한 함수를 실행하는 속성이다.</p><p>아래 예제는 firstName이나 LastName이 바뀌면 이를 각각 감지하고 fullName에 바뀐 부분을 반영해준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>여기엔 어떤 문제점이 있을까?</p><ol><li>firstName과 lastName안의 코드는 동일하게 바뀐 함수를 조합해 fullname을 리턴하는 데 불필요하게 코드를 반복한다. </li><li>명령형 프로그래밍이다. </li></ol><p>watch속성대신 computed속성을 사용하면 위 두 문제를 해결할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>깔끔하긴 한데 왜 명령형 프로그래밍과 선언형 프로그래밍이 무엇이고 왜 선언형 프로그래밍이 더 좋다고 하는걸까?</p><p><br><br><br></p><h2 id="명령형-프로그래밍-vs-선언형-프로그래밍"><a href="#명령형-프로그래밍-vs-선언형-프로그래밍" class="headerlink" title="명령형 프로그래밍 vs 선언형 프로그래밍"></a>명령형 프로그래밍 vs 선언형 프로그래밍</h2><p>일반적으로 선언형 프로그래밍이 명령형 프로그래밍보다 코드 반복이 적어서 좋다고 한다.<br>명령평 프로그래밍과 선언형 프로그래밍을 검색하면 아래와 같은 정의를 마주하게 된다.</p><ul><li>명령형 프로그래밍: How you do something 어떻게 할 것인지에 초점</li><li>선언형 프로그래밍: What you do 무엇을 할지에 초점.</li></ul><p>머리로는 알겠는데(?) 언뜻 잘 와닿지 않는다!<br>예시를 들으면 쉽게 와닿는다. 식당에 들어갔다고 생각해보자.</p><ul><li>선언형 프로그래밍: 두사람이요~라고 말한다.</li><li>명령형 프로그래밍: 식당 내부 전체를 둘러본다 -&gt; 오른쪽 두번째 창가자리가 비어있음을 확인한다 -&gt; 거기까지 걸어간다 -&gt; 자리에 앉는다.</li></ul><p>이렇듯 선언형 프로그래밍은 How를 알 필요가 없다. 결과만 잘 받으면 된다. 결과에만 신경쓰려면 뭐가 준비되어있어야할까?<br>바로 잘 훈련된 종업원 즉, 명령형으로 이미 추상화가 되어있어야한다!<br>선언형 프로그래밍은 추상화 된 코드는 독립적으로 사용할 수 있기때문에 재사용성이 높고 코드반복이 적다!</p><ul><li>선언형 프로그래밍 언어 예시: SQL, HTML</li><li>명령형 프로그래밍 언어 예시: C, C++, JAVA</li><li>선언형과 명령형이 섞인 프로그래밍 언어 예시: JavaScript, C#, Python</li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ui.dev/imperative-vs-declarative-programming">https://ui.dev/imperative-vs-declarative-programming</a></li><li><a href="https://v3-docs.vuejs-korea.org/guide/essentials/computed.html#basic-example">https://v3-docs.vuejs-korea.org/guide/essentials/computed.html#basic-example</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/VueJS/">VueJS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/27/220628Vuejs-computed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[요약/후기]The End Of Localhost</title>
      <link>https://sowon-dev.github.io/2022/06/26/220627Article-TheEndOfLocalhost/</link>
      <guid>https://sowon-dev.github.io/2022/06/26/220627Article-TheEndOfLocalhost/</guid>
      <pubDate>Sun, 26 Jun 2022 21:46:42 GMT</pubDate>
      
      <description>&lt;p&gt;구독중인 GeekNews에서 아주 흥미로운 글을 봤다. 제목부터가 &lt;a href=&quot;https://news.hada.io/topic?id=6799&amp;utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=202226&quot;&gt;Localhost시대의 종말&lt;/a&gt;이다.&lt;br&gt;GeekNews에서는 친절하게 한글번역 요약을 해주지만 원문이 궁금해서 원문을 읽고 나름 요약해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>구독중인 GeekNews에서 아주 흥미로운 글을 봤다. 제목부터가 <a href="https://news.hada.io/topic?id=6799&utm_source=weekly&utm_medium=email&utm_campaign=202226">Localhost시대의 종말</a>이다.<br>GeekNews에서는 친절하게 한글번역 요약을 해주지만 원문이 궁금해서 원문을 읽고 나름 요약해봤다.</p><a id="more"></a><ul><li><a href="https://dx.tips/the-end-of-localhost">원문 바로가기</a><br>글쓴이는 어떻게 Localhost가 종말한다는 걸까?</li></ul><h2 id="클라우드-덕분에"><a href="#클라우드-덕분에" class="headerlink" title="클라우드 덕분에!"></a>클라우드 덕분에!</h2><ul><li>미래에는 모든 환경은 클라우드가 될 것이고, 모든 노트북은 클라이언트가 될 것</li><li>2030년대 개발자가 위시리스트를 보면 로컬호스트가 아닌 클라우드 환경이 요구됨</li><li>dev환경과 prod환경간에 낭비되는 시간을 단축시킬 수 있음</li></ul><p><br><br><br></p><h2 id="The-“Future-is-Just-Not-Evenly-Distributed”-Argument"><a href="#The-“Future-is-Just-Not-Evenly-Distributed”-Argument" class="headerlink" title="The “Future is Just Not Evenly Distributed” Argument"></a>The “Future is Just Not Evenly Distributed” Argument</h2><ul><li>이미 빅테크 기업들은 전적으로 클라우드 환경에서 일하고 있음.</li></ul><blockquote><p>Google Cider : 구글의 웹 IDE. 거대한 Piper 파일 시스템을 탑재하고 코드리뷰/빌드/테스팅을 통합. 로컬머신에 코드를 내려받을 필요 없음<br>FB On-Demand : 로컬보다 더 충실하게 실시간 기능 프리뷰가 가능하게 “On-Demand”로 환경을 프로비저닝. FB에선 “로컬 개발” 자체가 없음<br>Etsy : 모든 개발이 Cloud VM에서 진행 “VSCode가 VM으로 SSH해서 동작하기 때문에, VM 외부로 코드를 체크아웃 해본 적이 없음”<br>Tesla : 자동차 OS 개발을 로컬에서 클라우드로 전환 (그 전엔 개발자에게 빌드용 비싼 데스크탑을 제공했었다고)<br>Palantir : Coder(리모트 개발환경 SaaS)와 EKS를 사용하는 Remote Ephemeral Workspace로 옮겨감<br>Shopify : 대부분의 개발자가 Spin 이라 불리는 클라우드 개발환경으로 이전 (xhyve 위에서 실행되는 경량 VM)<br>GitHub : 깃헙의 개발의 대부분을 Codespaces로 이관<br>출처: <a href="https://news.hada.io/topic?id=6799&amp;utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=202226">https://news.hada.io/topic?id=6799&amp;utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=202226</a></p></blockquote><ul><li>“sure, but does it work for my small team?” 위 예시 기업들은 이미 큰 회사들이니까 가능한거고 작은 기업에는 그게 가능할까?<ul><li>맞는 말임. 클라우드로 환경변화는 상당한 규모의 내부 투자가 이루어진 후에야 그 이득을 취할 수 있음. 하지만 기술이 상용화되면 점점 클라우드환경으로의 이동은 점점 더 확산될 것임</li></ul></li></ul><p><br><br><br></p><h2 id="Jobs-to-Be-Done-of-Localhost"><a href="#Jobs-to-Be-Done-of-Localhost" class="headerlink" title="Jobs to Be Done of Localhost"></a>Jobs to Be Done of Localhost</h2><ul><li>이미 많은 프로그램에서 로컬을 실행하지 않고 원격으로 코드를 수정하고 실행하고 있음.</li></ul><p><br><br><br></p><h2 id="The-Inevitability-Argument"><a href="#The-Inevitability-Argument" class="headerlink" title="The Inevitability Argument"></a>The Inevitability Argument</h2><ul><li>클라우드로의 이동을 피할 수 없는 일임. 언젠가는 일어날 일임.</li></ul><p><br><br><br></p><h2 id="The-Potential-of-Edge-Compute"><a href="#The-Potential-of-Edge-Compute" class="headerlink" title="The Potential of Edge Compute"></a>The Potential of Edge Compute</h2><ul><li>CRDT 및 에지 컴퓨팅과 같은 기술의 부상은 우리가 실제로 “로컬”이라고 생각하는 것의 경계를 흐리게 할 가능성이 더 높음.</li></ul><p><br><br><br></p><h2 id="Pushback-It’s-Still-Not-Good-Enough"><a href="#Pushback-It’s-Still-Not-Good-Enough" class="headerlink" title="Pushback: It’s Still Not Good Enough"></a>Pushback: It’s Still Not Good Enough</h2><ul><li>김칫국은 ㄴㄴ 아직 충분하지 않음.</li><li>개발자들이 습관처럼 Preview가 빠른 로컬호스트를 사용함</li></ul><p><br><br><br></p><h2 id="내생각"><a href="#내생각" class="headerlink" title="내생각"></a>내생각</h2><p>개발환경으로 더이상 로컬호스트를 사용하지 않을 수 있다는 사실이 흥미로웠다.<br>작은 업체에서 여전히 가능할까 의문이지만 그래도 클라우드환경으로의 변화는 막을 수 없을 것으로 보인다.<br>그쪽으로 공부를 열심히 해봐야지</p><p><br><br><br></p><h2 id="재밌는-표현"><a href="#재밌는-표현" class="headerlink" title="재밌는 표현"></a>재밌는 표현</h2><ul><li>going the way of the Dodo: 인간에 의해 멸종된 도도새처럼 멸종된다는 의미이다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/GeekNews/">GeekNews</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/26/220627Article-TheEndOfLocalhost/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>findAsync와 find의 차이점</title>
      <link>https://sowon-dev.github.io/2022/06/11/220611findAsyncvsfind/</link>
      <guid>https://sowon-dev.github.io/2022/06/11/220611findAsyncvsfind/</guid>
      <pubDate>Sat, 11 Jun 2022 05:34:55 GMT</pubDate>
      
      <description>&lt;p&gt;닷넷프레임워크를 사용하다보면서 find 메서드를 사용했는데 비주얼스튜디오가 FindAsync를 추천해줬다.&lt;br&gt;사용해보니 둘 다 동일한 결과가 나왔는데 둘의 차이점이 궁금해서 공부해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>닷넷프레임워크를 사용하다보면서 find 메서드를 사용했는데 비주얼스튜디오가 FindAsync를 추천해줬다.<br>사용해보니 둘 다 동일한 결과가 나왔는데 둘의 차이점이 궁금해서 공부해보았다.</p><a id="more"></a><h2 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h2><p>비교적 간단한 구문이다.<br>모든 문서를 한 번에 조회한다.<br>따라서 데이터양이 작을 때 사용하면 좋다. 가져오는 데이터양이 클때 Find를 쓸 경우 뷰단이 멈춰버릴 수 있다. 이럴때 비동기인 FindAsync로 처리해야한다.</p><p><br><br></p><h2 id="FindAsync"><a href="#FindAsync" class="headerlink" title="FindAsync"></a>FindAsync</h2><p>모든 DB를 한 번에 조회하지 않는다. return값이 cursor라서 DB cursor에서 문서를 하나씩 검색할 수 있는 interface를 제공한다.<br>따라서 데이터양이 클 때 사용하면 좋다. </p><p>여기서 DB cursor란?<br>쿼리문에 의해서 반환되는 결과값들을 저장하는 메모리공간을 말한다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.entity.dbset.findasync?view=entity-framework-6.2.0">https://docs.microsoft.com/en-us/dotnet/api/system.data.entity.dbset.findasync?view=entity-framework-6.2.0</a></li><li><a href="https://stackoverflow.com/questions/30650722/difference-between-find-and-findasync">https://stackoverflow.com/questions/30650722/difference-between-find-and-findasync</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/NET/">.NET</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/C/">C#</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/11/220611findAsyncvsfind/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DOM과 가상DOM</title>
      <link>https://sowon-dev.github.io/2022/06/05/220605VitualDOM/</link>
      <guid>https://sowon-dev.github.io/2022/06/05/220605VitualDOM/</guid>
      <pubDate>Sun, 05 Jun 2022 05:17:57 GMT</pubDate>
      
      <description>&lt;p&gt;React나 Vue.js를 쓸때 가상돔을 많이 얘기한다.&lt;br&gt;가상돔을 제대로 알고 싶어 DOM이 뭔지 공부해봤다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>React나 Vue.js를 쓸때 가상돔을 많이 얘기한다.<br>가상돔을 제대로 알고 싶어 DOM이 뭔지 공부해봤다.</p><a id="more"></a><h2 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM(Document Object Model)"></a>DOM(Document Object Model)</h2><p>HTML태그들을 작성하면 자바스크립트는 어떻게 읽을까? 한 번쯤 궁금했을 것이다.<br>자바스크립트는 HTML, head, body등의 요소를 구조화 한다. 구조화에는 다양한 방식이 있다. 이때 DOM은 트리구조를 형성한다. 즉 상위 노드와 하위 노드가 트리처럼 연결되어 있는데 여기서 만약 서른마흔다섯번째 노드를 update시키면 어떻게 될까?<br>DOM은 수많은 노드들 중에서 특정 노드를 찾는 과정에서 비용이 발생한다. 만약 한 번의 update가 연결된 다른 500개의 노드들에 변경을 일으킨다면? 점점 더 많은 비용이 발생하게 된다.</p><p>이를 해결하기 위해 등장한 것이 바로 가상돔(Virtual DOM)이다.</p><p><br><br><br></p><h2 id="가상돔-Virtual-DOM"><a href="#가상돔-Virtual-DOM" class="headerlink" title="가상돔(Virtual DOM)"></a>가상돔(Virtual DOM)</h2><p>가상돔은 이름 그대로 실제DOM이 아닌 가짜DOM(HTML돔의 추상화)이다.<br>웹페이지에서 사용자에 의해 이벤트가 발생된다면(update) 실제돔을 바로 수정하지않고, 가상돔을 랜더링한 뒤 이전의 돔과 비교해서 변경된 부분만 실제돔에 반영한다. 이로써 실제돔의 변경을 최소화하여 성능을 향상시킬 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/06/05/220605VitualDOM/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Vue]체크박스 모두 선택 기능 구현하기</title>
      <link>https://sowon-dev.github.io/2022/06/02/220603VueJS-checkall/</link>
      <guid>https://sowon-dev.github.io/2022/06/02/220603VueJS-checkall/</guid>
      <pubDate>Thu, 02 Jun 2022 23:25:35 GMT</pubDate>
      
      <description>&lt;p&gt;Vue.js를 이용하여 체크박스의 모두선택기능 기능을 만들어보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Vue.js를 이용하여 체크박스의 모두선택기능 기능을 만들어보자.</p><a id="more"></a><h2 id="화면코드"><a href="#화면코드" class="headerlink" title="화면코드"></a>화면코드</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkAll"</span> <span class="attr">v-model</span>=<span class="string">"isCheckAll"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>고유번호<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">"mainDataset.getRowCount() == 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"8"</span>&gt;</span>조회 된 데이터가 없습니다.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item, idx) in mainDataset.data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"userList"</span> <span class="attr">:value</span>=<span class="string">item.userNo</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.userNo&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.userNm&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="스크립트-코드"><a href="#스크립트-코드" class="headerlink" title="스크립트 코드"></a>스크립트 코드</h2><p>모달창을 열때마다 isCheckAll를 false로 초기화해주고 watch로 isCheckAll의 value가 변할때 메서드 checkAll()를 실행한다.<br>여기서 핵심은 watch로 기존 값과 변경된 값을 지켜보고있다는 점이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#userPopup'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">searchParams: &#123;</span><br><span class="line">searchText: <span class="string">""</span>,</span><br><span class="line">pageNumber: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line">isCheckAll: <span class="literal">false</span>,</span><br><span class="line">userList: [],</span><br><span class="line">mainDataset: <span class="keyword">new</span> Dataset(),</span><br><span class="line">mainDatasetPaging: <span class="keyword">new</span> PagingSet(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="string">"isCheckAll"</span>: &#123;</span><br><span class="line">handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.checkAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">$(<span class="keyword">this</span>.$refs.userPopup).on(<span class="string">"shown.bs.modal"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">self.isCheckAll = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//중략</span></span><br><span class="line"> methods: &#123;</span><br><span class="line"> checkAll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">app.userList = [];</span><br><span class="line"><span class="keyword">if</span> (self.isCheckAll) &#123;</span><br><span class="line">_.forEach(self.mainDataset.data, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">app.userList.push(obj.userNo);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>이렇게해면 체크박스 전체선택시 각 체크박스의 userNo값이 userList배열에 담긴다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/VueJS/">VueJS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/06/02/220603VueJS-checkall/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[닷넷] Url.Action사용해서 원하는 URL연결하기</title>
      <link>https://sowon-dev.github.io/2022/05/24/220525dotnet-Urlhelper/</link>
      <guid>https://sowon-dev.github.io/2022/05/24/220525dotnet-Urlhelper/</guid>
      <pubDate>Tue, 24 May 2022 19:22:47 GMT</pubDate>
      
      <description>&lt;p&gt;cshtml에서 Url.Action으로 a태그 href를 변경하고 싶었다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>cshtml에서 Url.Action으로 a태그 href를 변경하고 싶었다. </p><a id="more"></a><p>파일구조 </p><ul><li>Areas<ul><li>Student<ul><li>Controller<ul><li>LearningController.cs</li></ul></li><li>View<ul><li>Index.cshtml</li></ul></li></ul></li><li>Professor<ul><li>Controller <ul><li>StudyController.cs</li></ul></li><li>View<ul><li>Index.cshtml</li></ul></li></ul></li></ul></li></ul><p>내가 원하는 것은 아래처럼 2개의 a태그에 각각 다른 컨트롤러의 url이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; url결과</span><br><span class="line">&#x2F;Student&#x2F;Learning</span><br><span class="line">&#x2F;Professor&#x2F;Study</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>","<span class="attr">Learning</span>")" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>","<span class="attr">Study</span>")" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url결과는 아래와 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; url결과</span><br><span class="line">&#x2F;Student&#x2F;Learning</span><br><span class="line">&#x2F;Student&#x2F;Study</span><br></pre></td></tr></table></figure><p><code>Action(string, string)</code>은 처음 URI를 잡고있기때문에 Professor의 Study가 아니라 Student에서 Study를 찾는다.</p><p><br><br><br></p><h2 id="해결법-Action-String-String-Object"><a href="#해결법-Action-String-String-Object" class="headerlink" title="해결법 Action(String, String, Object)"></a>해결법 Action(String, String, Object)</h2><p>routeValues를 사용해서 area를 지정해주었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>", "<span class="attr">Learning</span>", <span class="attr">new</span> &#123; <span class="attr">area</span> = <span class="string">"Student"</span> &#125;)" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@Url.Action("</span><span class="attr">Index</span>", "<span class="attr">Study</span>", <span class="attr">new</span> &#123; <span class="attr">area</span> = <span class="string">"Professor"</span> &#125;)" <span class="attr">id</span>=<span class="string">"menuUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>new 연산자로 area를 지정했기에 해당 area아래의 Url을 각각찾느다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; url결과</span><br><span class="line">&#x2F;Student&#x2F;Learning</span><br><span class="line">&#x2F;Professor&#x2F;Study</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>MS사의 docs는 예시도 많이 없고 UI자체도 가독성이 많이 떨어진다. 그래도 docs 질은 괜찮은 건지 블로그글이 많이 없다. 닷넷개발자들은 영어고수인게 틀림없다.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.urlhelper.action?view=aspnet-mvc-5.2#system-web-mvc-urlhelper-action(system-string-system-string-system-object)">https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.urlhelper.action?view=aspnet-mvc-5.2#system-web-mvc-urlhelper-action(system-string-system-string-system-object)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/NET/">.NET</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/C/">C#</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/24/220525dotnet-Urlhelper/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[리액트]Error: Cannot find module loader에러 해결</title>
      <link>https://sowon-dev.github.io/2022/05/22/220523ReactLoaderError/</link>
      <guid>https://sowon-dev.github.io/2022/05/22/220523ReactLoaderError/</guid>
      <pubDate>Sun, 22 May 2022 20:05:32 GMT</pubDate>
      
      <description>&lt;p&gt;리액트가 궁금해 정적사이트를 하나 만들고 있다.&lt;br&gt;script를 정의하고 &lt;code&gt;npm run start&lt;/code&gt;를 했는데 아래와 같은 오류가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트가 궁금해 정적사이트를 하나 만들고 있다.<br>script를 정의하고 <code>npm run start</code>를 했는데 아래와 같은 오류가 발생했다.</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">node:internal/modules/cjs/loader:<span class="number">361</span></span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line"><span class="built_in">Error</span>: Cannot find <span class="built_in">module</span> <span class="string">'/workspace/프로젝트명/node_modules/finalhandler/node_modules/debug/src/index.js'</span>. Please verify that the package.json has a valid <span class="string">"main"</span> entry</span><br><span class="line">    at tryPackage (node:internal/modules/cjs/loader:<span class="number">353</span>:<span class="number">19</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.Module._findPath (node:internal/modules/cjs/loader:<span class="number">566</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.Module._resolveFilename (node:internal/modules/cjs/loader:<span class="number">919</span>:<span class="number">27</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.Module._load (node:internal/modules/cjs/loader:<span class="number">778</span>:<span class="number">27</span>)</span><br><span class="line">    at Module.require (node:internal/modules/cjs/loader:<span class="number">1005</span>:<span class="number">19</span>)</span><br><span class="line">    at <span class="built_in">require</span> (node:internal/modules/cjs/helpers:<span class="number">102</span>:<span class="number">18</span>)</span><br><span class="line">  code: <span class="string">'MODULE_NOT_FOUND'</span>,</span><br><span class="line">  path: <span class="string">'/workspace/프로젝트명/node_modules/finalhandler/node_modules/debug/package.json'</span>,</span><br><span class="line">  requestPath: <span class="string">'debug'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>에러를 보면 알수있듯 loader에서 err가 잡혔다.<br>구글링하니 nodejs 레포의 이슈<a href="https://github.com/nodejs/help/issues/2644">(링크)</a>로 많은 개발자들이 해결방법을 주고받은 걸 확인할 수 있었다.<br>이 여러 방법중 나는 아래의 방법으로 해결했다.</p><p><br><br><br></p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><ol><li><code>npm cache clean --force</code> 명령어로 캐시를 삭제한다.</li><li>node_modules 폴더를 삭제한다.</li><li>package-lock.json 파일을 삭제한다.</li><li><code>npm install</code> 명령어를 입력하면 node_modules와 package-lock.json가 다시 설치된다.</li></ol><p>위 조치를 취한 후 <code>npm run start</code>를 하니 잘 실행된다.<br>해결!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/React/">React</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/22/220523ReactLoaderError/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS]scope 스코프</title>
      <link>https://sowon-dev.github.io/2022/05/16/220517JSscope/</link>
      <guid>https://sowon-dev.github.io/2022/05/16/220517JSscope/</guid>
      <pubDate>Mon, 16 May 2022 19:12:43 GMT</pubDate>
      
      <description>&lt;p&gt;이번에 프로젝트를 진행하면서 버그가 발생했는데 알고보니 스코프문제였다.&lt;br&gt;이번 기회에 스코프에 대해 확실히 정리해보고자 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번에 프로젝트를 진행하면서 버그가 발생했는데 알고보니 스코프문제였다.<br>이번 기회에 스코프에 대해 확실히 정리해보고자 한다.</p><a id="more"></a><h2 id="스코프란"><a href="#스코프란" class="headerlink" title="스코프란?"></a>스코프란?</h2><p>w3school에 따르면<a href="https://www.w3schools.com/js/js_scope.asp">(링크)</a> Scope란 변수의 유효한 범위이다.</p><p>&lt; 스코프종류 &gt;</p><ol><li>Global scope</li><li>Local Scope<ol><li>Block scope</li><li>Function scope</li></ol></li></ol><p>ES6이전에는 js는 Global Scope and Function Scope만 있었다.<br>ES6전에는 var만 있었는데 ES6이후로 let과 const가 생겨나면서 block scope 개념도 함께 생겨났다.</p><p><br><br><br></p><h2 id="1-Global-scope-블록스코프"><a href="#1-Global-scope-블록스코프" class="headerlink" title="1 Global scope 블록스코프"></a>1 Global scope 블록스코프</h2><p>이름그대로 변수가 전역에 선언된 경우이다.<br>어디서든 접근이 가능하다. 어디서나 접근가능하기때문에 편리한 장점이 있지만 코드가 길어질수록 휴먼에러가 날 확률이 높아진다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> carName = <span class="string">"Volvo"</span>;</span><br><span class="line"><span class="comment">// code here can use carName</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// code here can also use carName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="2-Block-scope-블록스코프"><a href="#2-Block-scope-블록스코프" class="headerlink" title="2 Block scope 블록스코프"></a>2 Block scope 블록스코프</h2><p>블록스코는 <code>브라켓{}</code>블록안에서만 변수가 유효할때를 뜻한다. 아래 비교예시를 보자.</p><ul><li><p>var 키워드 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x CAN be used here</span></span><br></pre></td></tr></table></figure></li><li><p>let 또는 const 키워드 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x can NOT be used here</span></span><br></pre></td></tr></table></figure></li></ul><p>위 두 예시의 차이에서 알 수 있듯이 <code>브라켓 {}</code>을 벗어나도 선언한 변수를 호출할 수 있는지 없는지로 블록스코프인지를 확인할 수 있다.<br>var변수는 블록스코프가 아니기때문에 변수관리에 있어 문제를 초래하기도 한다.</p><p><br><br><br></p><h2 id="3-Function-Scope-로컬스코프"><a href="#3-Function-Scope-로컬스코프" class="headerlink" title="3 Function Scope 로컬스코프"></a>3 Function Scope 로컬스코프</h2><p>말그대로 함수 안에서 선언한 변수로 함수안에서만 호출가능하고 함수 밖에서는 호출할 수 없다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// code here can NOT use carName</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> carName = <span class="string">"Volvo"</span>;</span><br><span class="line">  <span class="comment">// code here CAN use carName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// code here can NOT use carName</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Static-Scoping-Lexical-Scoping"><a href="#Static-Scoping-Lexical-Scoping" class="headerlink" title="Static Scoping (Lexical Scoping)"></a>Static Scoping (Lexical Scoping)</h2><p>JavaScropt, C, Java 등에서는  Static Scoping을 따른다. 즉, 함수를 어디서 선언했는지에 따라 상위 스코프를 결정하는 것이다.<br>var를 사용하여 변수를 선언했을때 어떻게 값이 나올까?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">17</span>;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">a(); <span class="comment">//값은?</span></span><br><span class="line">b(); <span class="comment">//값은?</span></span><br></pre></td></tr></table></figure><ul><li>output</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>a()의 호출값이 17이 아니고 왜 7인 걸까?</p><p>함수가 언제 호출되는지에 따르는 게 아니라 함수를 어디에 선언했냐에 따라 상위 스코프가 결정되기 때문이다.<br>num은 이미 두 함수보다 먼저 선언했으므로 7은 17로 덮어써지지않고 그대로 7로 출력된다.</p><blockquote><p>참고로 함수 호출에 따라 스코프가 결정되는 것을 Dynamic Scope라고 한다. Perl, Bash Shell 등에서 사용된다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/05/16/220517JSscope/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSP에서 엑셀다운로드할때 한글깨짐현상을 해결하는 가장 간단한 방법</title>
      <link>https://sowon-dev.github.io/2022/05/10/220511ExcelKoreanError/</link>
      <guid>https://sowon-dev.github.io/2022/05/10/220511ExcelKoreanError/</guid>
      <pubDate>Tue, 10 May 2022 21:48:42 GMT</pubDate>
      
      <description>&lt;p&gt;JSP에서 엑셀다운로드를 할때 한글깨짐 현상이 나타났다. 이를 해결할 수 있는 가장 간단한 방법이 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JSP에서 엑셀다운로드를 할때 한글깨짐 현상이 나타났다. 이를 해결할 수 있는 가장 간단한 방법이 있다.</p><a id="more"></a><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><p>이럴때는 meta태그에 utf-8이 잘 설정되어있는지 확인하면 된다.<br>만약 utf-8설정을 찾을 수 없다면 코드를 head사이에 추가하면 된다.</p><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">// (중략)</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'Content-Type'</span> <span class="attr">content</span>=<span class="string">'application/vnd.ms-excel; charset=utf-8'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/05/10/220511ExcelKoreanError/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>전자정부프레임워크프로젝트를 끝내며 내가 배운 것</title>
      <link>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/</link>
      <guid>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/</guid>
      <pubDate>Mon, 09 May 2022 04:12:10 GMT</pubDate>
      
      <description>&lt;p&gt;전자정부프레임워크&lt;a href=&quot;https://www.egovframe.go.kr/home/ntt/nttRead.do?menuNo=76&amp;bbsId=171&amp;nttId=1576&quot;&gt;(링크)&lt;/a&gt;는 이번 프로젝트에서 처음 사용해보았다. 사실 특별히 새로울 건 없었다. 왜냐하면 Spring프레임워크와 거의 똑같기 때문이다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>전자정부프레임워크<a href="https://www.egovframe.go.kr/home/ntt/nttRead.do?menuNo=76&bbsId=171&nttId=1576">(링크)</a>는 이번 프로젝트에서 처음 사용해보았다. 사실 특별히 새로울 건 없었다. 왜냐하면 Spring프레임워크와 거의 똑같기 때문이다. </p><a id="more"></a><p>전자정부프레임워크란 “효율적인 정보시스템 개발을 위한 코드 라이브러리, 인터페이스규약, 설정정보 등의 뼈대를 제공하는 표준프레임워크”라고 한다.<br>즉, egovframework는 Spring프레임워크 + MyBatis + MySql + Jsp + Jquery 조합에다가 전자정부프레임워크가 제공하는 라이브러리나 클래스가 추가되어있다고 보면 된다.</p><p><br><br><br></p><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li>가능한 많은 기능을 담당하고자 한 것!<br>팀장님이 일이 많아서 팀장님이 담당하시는 기능 중 일부를 받아냈다. 덕분에 하나의 프로젝트에서 다양한 기능을 담당하여 개발할 수 있었다! 야근도 꽤 했지만 많이 성장했다! 뿌듯해!</li><li>프로젝트 설정을 추가한 것!<br>프로젝트 진행 중 CSRF 방어가 필요했는데 여러 방법으로 해결할 수 있었다. 각 페이지마다 하거나 form태그마다 할수도 있었지만 프로젝트 차원에서 해결하는 방법이 가장 좋다고 판단이 들어 Spring Security도입을 건의했다. 다행히 잘 받아들여져서 프로젝트 설정을 직접 추가하는 경험을 할 수 있었다. 프로젝트 진행 중간에 프로젝트 셋팅을 건든다는 게 살짝 두려웠던 건 사실이다. 혹시나 내가 추가한 설정들때문에 잘되던 동작들이 꼬일까봐 걱정했는데 다행히 잘 작동해서 정말 뿌듯했다. </li><li>XSS와 CSRF의 차이를 명확히 안 것!<br>CSRF<a href="https://sowon-dev.github.io/2022/05/02/220502springsecurity-CSRF/">(링크)</a>는 사이트 간 요청 위조 약자로 공격대상이 Server이다.<br>XSS<a href="https://sowon-dev.github.io/2022/04/20/220420XSS/">(링크)</a>는 사이트 간 스크립팅의 약자로 공격대상이 Client이다.</li><li>ES5와 ES6 차이를 정확히 안 것!<br>브라우저 호환성과 ES5와 ES6 차이<a href="https://sowon-dev.github.io/2022/04/18/220418ECMAScript/">(링크)</a>를 확실히 알게되었다.</li><li>검색조건 유지를 위해 return url을 사용 한 것!<br>필수기능이라고도 할 수 있는 검색조건 유지기능 시작 전에는 어려울 줄 알았는데 막상해보니 간단하게 끝났다! return url을 사용하여 목록화면에서 상세화면으로 들어갔다가 뒤로 가기를 해도 페이징과 검색조건이 그대로 유지되도록 구현했다.</li><li>달력 라이브러리를 커스텀해서 썼다.<br>디자인팀에서 퍼블을 하는데 달력을 넣기 힘들다고 지원요청을 받았다. 달력 라이브러리를 구글링하며 제일 적합하고 커스텀할 수 있는 라이브러리를 선택해서 적용하고 특정 날짜를 클릭하지 못하게 막는다던지, DB에 저장된 날짜는 클릭안되게 달력에 처리한다든지 등 프론트와 백을 넘나들며 기능을 완성했다. library docs가 충분하지않아서 영어로도 엄청 검색을 하면서 구현했는데 꽤나 재미있는 경험이었다.</li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>트리구조 메뉴를 개발하는데 쿼리로 애를 많이 먹었다. 서버로 재귀호출을 돌리면서 tree데이터를 json으로 만들어 화면에 던진 뒤에 jsTree라이브러리<a href="https://www.jstree.com/">(링크)</a>를 사용해 개발을 완료할 수 있었다. 고급 SQL에 대한 공부가 필요하다.</li><li>egovframework를 충분히 활용하지 못했다. 시간도 없을뿐더라 기존 CMS를 건들이지 않는 선에서 다루느라 egovframework의 많은 기능을 활용하지못해 아쉽다.</li><li>프로젝트 전체 흐름을 이해하는 데 꽤나 시간이  걸렸다. 중간중간에 고객사 요구사항이 바뀌기도 했고 내가 담당해야하는 페이지가 계정 권한별로 달라서 초반에 헷갈렸다. 이윽고 적응했지만 더 빠르게 프로젝트 전체 그림을 파악하고 싶다.</li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li>recursive등 고급 SQL을 더 깊게 공부할 것</li><li>프로젝트셋팅때부터 질문을 미친듯이 할 것 </li><li>프로젝트를 한 눈에 빨리 파악하기 위해서는 역시 다양한 프로젝트를 접해본 경험이 중요하다. 앞으로도 성장할 수 있는 기회가 보인다면 미리 걱정하지말고 기회를 잡을 것.</li></ol><p><br><br><br></p><h2 id="코드리뷰-및-질의응답"><a href="#코드리뷰-및-질의응답" class="headerlink" title="코드리뷰 및 질의응답"></a>코드리뷰 및 질의응답</h2><p>팀장님께 부탁드려서 코드리뷰를 진행했다! 바쁘신 와중에도 코드리뷰와 프로젝트리뷰 제안을 흔쾌히 수락해주셨다. 감사합니다 팀장님😀<br>코드리뷰시간을 알차게 사용하기 위해서는 준비를 철저히 해야한다. 팀장님이 구현한 기능들을 쭈욱 살피고 궁금했던 점들과 구글링을 통해 나오지 않는 질문들, 그리고 구현하던 중 궁금했던 모든 것들을 미리 한 데 모아 노션에 정리했다.</p><ol><li>pathvariable보다는 query parameter를 사용하는 게 더 나은가요?<br>이번에 디테일페이지를 들어갈때 pathvariable를 사용했는데 중간에 로직수정이 필요한 바람에 전부 query parameter를 사용하게 되었다.<br>그럼 처음부터 query parameter를 사용하는 게 나았을까하는 의문이 들었다. 네이버나 다음같은 대형사이트들도 대부분 query parameter를 사용하길래 pathvariable은 덜 사용되는 건지 궁금해서 문의드렸다.<br>팀장님이 답변해주시길 RESTful API에 맞게 설계하려면 pathvariable를 사용하면 되고 그게 아니라면 query parameter가 더 나은 프로젝트들도 있다고 답변해주셨다!</li><li>async await는 비동기일때 사용할 것!<br>이번에 async await를 이용하여 코드를 구현했는데 팀장님이 코드개선을 한 번해주셨다. 비동기작업이 없는 경우 async await보다는 flag변수를 선언해서 사용하면 빠르고 간단하게 동기작업을 할 수 있다!</li><li>HashMap 사용시 파라미터 정리를 쉽게할 수 있다.<br>파라미터가 많지 않은 경우 HashMap을 사용하여 DAO내에서 파라미터를 제대로 분리해주면 편리하게 사용할 수 있고 각 클래스의 역할도 완벽히 나눌수있다!</li><li>MariaDB나 MySQL에서는 group by 사용시 모든 select 컬럼을 넣지 않아도 되는 이유?<br>기본적으로 group by 사용시 select절의 모든 컬럼을 넣어줘야하는데 MariaDB나 MySQL에서는 넣지 않아도 정상작동한다.<br>그 이유가 무엇일까? 바로 sql_mode에 only_full_group_by속성을 on한 경우<a href="https://velog.io/@heumheum2/ONLYFULLGROUPBY">(참고글)</a> 모든 컬럼을 넣지않아도 DB가 알아서 group by시 필요한 컬럼들을 챙긴다.<br>하지만 select절의 모든 컬럼을 넣지 않은 쿼리를 다른 DB에서 실행시 오류가 발행하므로 웬만하면 모든 컬럼을 다 기입하는 버릇을 들이는 것이 좋다.</li><li>구글링을 통해 알게된 정보들 중 좋은 글을 어떻게 판단할까요?<br>프로젝트를 할때마다 구글링을 정말 많이하게되는데 관련 글을 읽다보면 서로 반대되는 주장을 하는 글이나 뭐보단 뭐가 더 좋다는 비교글이 많이 있다. 이때 어떤 것이 옳은 것인지 판단이 잘 안 설때가 종종 있어 팀장님께 정보글 판단 기준에 대해 여쭤보았다.<br>팀장님의 경우 <code>일단 수용  → 직접 테스트코드 작성 → 겪어봐야 알게 됨</code> 주로 이 루트로 판단한다고 하셨다. 나도 글만 읽지말고 Test Unit등을 작성해보는 습관을 들여야겠다.</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/05/09/220509prjtreview5/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
