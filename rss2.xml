<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>devlog</description>
    <pubDate>Thu, 24 Feb 2022 02:44:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[OS]메모리vs드라이브vsCPU 코어</title>
      <link>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/</link>
      <guid>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/</guid>
      <pubDate>Wed, 23 Feb 2022 17:12:39 GMT</pubDate>
      
      <description>&lt;p&gt;소스코드를 일절 건드리지않았는데 운영서버의 사이트가 500에러가 났다.&lt;br&gt;팀장님은 드라이브 문제일수있다고 하셨다.&lt;br&gt;여기서 드라이브란?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>소스코드를 일절 건드리지않았는데 운영서버의 사이트가 500에러가 났다.<br>팀장님은 드라이브 문제일수있다고 하셨다.<br>여기서 드라이브란?</p><a id="more"></a><p>스토리지드라이브를 뜻하며 HDD나 SDD가 포함된다.</p><p>메모리와 드라이브 개념을 확실히하기 위해 글을 찾아봤는데 비유가 가장 적합한 글을 찾았다.<br>정말 좋은 글이니 꼭 읽어보기를 바란다.</p><ul><li><a href="https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do">컴퓨터 메모리(RAM)란 무엇이며 어떤 역할을 합니까?</a></li></ul><p>위 글에 따르면 메모리는 책상과 비슷하다고 한다. 책상안에서 서류작성, 파일보관, 업무전화등 다양한 작업을 진행할 수 있다.<br>이때 책상이 크면 클수록 더 많은 작업을 한꺼번에 펼쳐놓고 처리할 수 있어서 서류 보관 캐비넷(드라이브)에 빠르게 접근이 가능하다.<br>책상이 크다면 이미 책상 위에 올려져있을테니까!</p><p>그렇다면 CPU 코어는 뭘까? 코어가 많을수록 메모리가 많을수록 작업이 빨라진다. 이 둘은 어떻게 다를까?<br>이에 관해 팀장님이 비유적으로 설명해주셨다. CPU 코어는 책상앞의 사람의 수로 비유할 수 있다고 한다.👍 사람수가 많을수록 작업이 빨라지니까 CPU 코어가 많을수록 속도가 빨라진다.</p><p>이해 쏙쏙!!!😁👍👍</p><p><br><br><br></p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>메모리: 책상</li><li>드라이브: 서류 보관 캐비넷</li><li>CPU 코어: 일을 처리하기 위해 책상앞에 앉아있는 사람<ul><li>예를 들어 CPU 6코어면 6명의 사람이 일처리를 위해 책상 앞에 있다고 생각하면 됨</li></ul></li><li>CPU 스레드: 사람의 손<ul><li>예를 들어 CPU 2코어 4스레드이면 2명의 사람이 4가지 작업을 동시에 할 수 있다고 생각하면 됨</li><li>한 손에 한 작업씩 진행중인 느낌.</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do">https://www.crucial.kr/articles/about-memory/support-what-does-computer-memory-do</a></li><li>팀장님 설명</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Operating-Systeming/">Operating Systeming</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/02/23/220224CS-cpuMemoryDrive/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>닷넷프로젝트를 끝내며 코드리뷰가 내게 남긴 것</title>
      <link>https://sowon-dev.github.io/2022/01/19/220119prjtreview/</link>
      <guid>https://sowon-dev.github.io/2022/01/19/220119prjtreview/</guid>
      <pubDate>Wed, 19 Jan 2022 02:32:49 GMT</pubDate>
      
      <description>&lt;p&gt;한 달간 진행되었던 네번째 프로젝트가 끝이 났다!&lt;br&gt;처음 사용하는 C#에다가 닷넷프레임워크, 그리고 Visual Studio, MSSQL, Azure까지!&lt;br&gt;모든 것이 새롭게 다가왔고 정말 열심히 배웠고 큰 성장을 이루어냈다.&lt;br&gt;잠깐만 갑자기 C#에다가 닷넷??!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>한 달간 진행되었던 네번째 프로젝트가 끝이 났다!<br>처음 사용하는 C#에다가 닷넷프레임워크, 그리고 Visual Studio, MSSQL, Azure까지!<br>모든 것이 새롭게 다가왔고 정말 열심히 배웠고 큰 성장을 이루어냈다.<br>잠깐만 갑자기 C#에다가 닷넷??!</p><a id="more"></a><p>그렇게 됐다.<br>회사의 일은 가끔(또는 자주) 내 뜻대로 되지 않는 법. 이번에 맡은 프로젝트는 닷넷 프레임워크를 사용했다.<br>아직 스프링프레임워크도 깊게 보지 못한 내게 새로운 언어와 새로운 프레임워크는 혼돈의 카오스 그 자체였다.<br>절망하기보단 <code>이왕 해야 할 거! 최선을 다해 빨리 성장하자 하나라도 더 알자</code>는 마음가짐으로 열정적으로 임했다.<br>그래서 그런지 정말 많은 것들을 배울 수 있었다.</p><p>DDD도 처음이고 CQRS도 처음이었다. 혼자 부트스트랩으로 페이지도 만들고 저장 프로시저 이용해서 쿼리도 짜고 EF도 이용해봤다.<br>성장하고자하는 마음 하나로 한달<br>닷넷프레임워크의 여러 장점 중 가장 좋았던 점은 시간연산이 굉장히 편하다는 점이다!! 날짜 포맷팅도 <code>.ToString(&quot;yyyy-MM-dd&quot;)</code> 이런식으로 정말 간단하다! 최고</p><p><br><br></p><h2 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h2><p>현재 만족하고 있는 부분과 계속해서 이어갔으면 하는 부분</p><ol><li><p>명확한 단어 사용을 위한 단어 합의를 위해 노력했다.<br>기존 4개의 역할(Admin / Owner / Super / Member)이 있었다. 한 눈에 봐도 Super의 역할이 모호했다.<br>프로젝트 구조와 요구사항을 파악하고 나서 역할의 이름을 Super에서 Manager로 변경을 제안했다.<br>몇몇 기능 개발이 되어있던 상태였기때문에 변경에 있어서 고민이 많았지만 “지금이라도 잡아야 나중에 유지보수까지 편해집니다”라는 의견을 피력했고 다행히 내 의견이 받아들여졌고 초반에 합의한 덕분에 후반부 작업이 훨씬 수월해졌다!</p></li><li><p>CSR와 SSR 구분 명확하게 할 수 있다.<br>서버사이드랜더링(SSR)과 클라이언트사이드랜더링(CSR)을 확실하게 구분할 수 있고 나만의 우선순위도 생겼다.</p></li></ol><ul><li>우선순위: SSR &gt; CSR<br>꼭 필요한 경우가 아니면 서버사이드랜더링을 사용하는 것이 좋다.<br>그 이유로는 첫째, 최초 로딩 속도가 빠르다 두번째, SEO최적화, 크롤러에 대응하기 용이하다는 점이 있다.</li></ul><p>닷넷프레임워크에서는 서버사이드랜더링으로 Razor를 사용해보았다. <code>@</code>를 사용하며 간단한 처리는 컨트롤러를 통하지않고 html에서 직접 서비스를 호출하여 처리할 수도 있다.</p><ol start="3"><li>Bootstrap을 자유자재로 구사할 수 있다.<br>항상 템플릿을 가져와서 써봤지 직접 bootstrap으로 화면을 구현한 적은 처음이다.<br>처음에는 내가 원하는 대로 row와 col 나누는 게 너무 어려웠는데 한 번 적응하고 나니 훨씬 편했다.<br>또 기존에는 style속성으로 각 태그에 css를 변경하곤 했으나 비효율적이며 통일성이 떨어졌다. Bootstrap class를 사용하니 훨씬 편했다.</li></ol><ul><li><a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/">참고: Bootstrap Docs</a></li></ul><ol start="4"><li>Auth policy등 enum타입으로 사용하여 휴먼에러를 줄였다.</li></ol><p><br><br><br></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>개선이 필요하다고 생각되는 부분</p><ol><li>DDD의 심도깊은 이해와 EF 사용<br>이번에 처음 CQRS를 사용하면서 ORM(object-relational mapper)인 Entity Framework를 사용해봤다.<br>Application Layer는 다루었으나 Domain Layer는 많이 다루지 못해 아쉬움이 있다.<br>EF는 아주 간단한 Include와 Where만을 사용했다. 조금 복잡하다싶으면 나에게 익숙한 저장 프로시저를 이용했다. EF만 잘 사용한다면 효율적인 쿼리를 구현할 수 있었을텐데 아쉬움이 남는다.</li></ol><ul><li><a href="https://sowon-dev.github.io/2021/03/22/210323jpaVSjdbc/#%F0%9F%86%9ASQL-Mapper-vs-ORM">참고: ORM vs SQL Mappeer</a></li><li><a href="https://incheol-jung.gitbook.io/docs/q-and-a/architecture/ddd">참고: DDD Application Layer란?</a></li></ul><ol start="2"><li>UnitTest를 못한 점<br>프로젝트기한이 촉박해 UnitTest를 거의 하지 못해서 아쉬움이 무척 남는다.</li></ol><p><br><br><br></p><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>Problem의 해결책이 될 수 있는 부분</p><ol><li><p>DDD의 여러 사례 공부와 Domain Layer 공부하기<br><a href="https://docs.microsoft.com/en-us/ef/core/querying/">Entity Framework Docs</a></p></li><li><p>UnitTest를 손에 익히기<br>손에 익으면 프로젝트 기한이 촉박해도 빠르게 test code를 짤 수 있다.</p></li></ol><p><br><br><br></p><h2 id="코드리뷰"><a href="#코드리뷰" class="headerlink" title="코드리뷰"></a>코드리뷰</h2><p>이번 코드리뷰는 질문과 답변을 통해 이루어졌다. 회사코드라서 모든 걸 다 적을 수 없고 적을 수 있는 것만 포편적인 예시를 들어 적어보려고 한다.</p><h3 id="페이지-이동할-때-3가지-방식-중-우선순위가-있나요"><a href="#페이지-이동할-때-3가지-방식-중-우선순위가-있나요" class="headerlink" title="페이지 이동할 때 3가지 방식 중 우선순위가 있나요?"></a>페이지 이동할 때 3가지 방식 중 우선순위가 있나요?</h3><p>페이지 이동할 때 3가지 방식이 있다.</p><ol><li>razor : <code>@Url.Action(&quot;Board&quot;, &quot;Admin&quot;, new {id=@id})</code></li><li>asp.net: <code>&lt;a asp-action=&quot;Board&quot; asp-controller=&quot;Admin&quot; asp-route-id=&quot;@id&quot;&gt;</code></li><li>js: <code>location.href=&quot;/Admin/Board/&quot;+@id</code></li></ol><p>이 중 razor와 asp-action을 이용한 방식은 SSR이고 js는 CSL이다.<br>세 가지 방식 중에 우선순위가 있는 방식은 없다. 상황에 맡게 사용하면 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/19/220119prjtreview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Promise 프로미스</title>
      <link>https://sowon-dev.github.io/2022/01/16/220116JS-promise/</link>
      <guid>https://sowon-dev.github.io/2022/01/16/220116JS-promise/</guid>
      <pubDate>Sun, 16 Jan 2022 05:31:03 GMT</pubDate>
      
      <description>&lt;p&gt;프로미스에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>프로미스에 대해 알아보자.</p><a id="more"></a><h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><p>Promise객체는 자바스크립트에서 비동기 처리에 사용되는 객체이다.</p><h2 id="프로미스의-3가지-상태"><a href="#프로미스의-3가지-상태" class="headerlink" title="프로미스의 3가지 상태"></a>프로미스의 3가지 상태</h2><table><thead><tr><th align="center">용어</th><th align="center">뜻</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">Pending</td><td align="center">대기</td><td align="center">비동기처리를 하지도, 거부하지도 않은 초기 상태</td></tr><tr><td align="center">Fulfilled</td><td align="center">이행</td><td align="center">비동기처리가 성공적으로 완료됨</td></tr><tr><td align="center">Rejected</td><td align="center">거부</td><td align="center">비동기처리가 실패함</td></tr></tbody></table><p><img src="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise"></p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/01/16/220116JS-promise/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>spread operator (...) 점 세 개를 알아보자</title>
      <link>https://sowon-dev.github.io/2022/01/14/220115JS-spreadoperator/</link>
      <guid>https://sowon-dev.github.io/2022/01/14/220115JS-spreadoperator/</guid>
      <pubDate>Fri, 14 Jan 2022 22:12:30 GMT</pubDate>
      
      <description>&lt;p&gt;온점 세 개를 찍어서 표현하는 spread syntax(…)라고 한다.&lt;br&gt;이 spread operator는 S2015에서 새로 추가된 systax으로 병합, 구조 분배 할당(destructuring)등에 다양하게 활용할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>온점 세 개를 찍어서 표현하는 spread syntax(…)라고 한다.<br>이 spread operator는 S2015에서 새로 추가된 systax으로 병합, 구조 분배 할당(destructuring)등에 다양하게 활용할 수 있다.</p><a id="more"></a><h2 id="객체-배열-병합"><a href="#객체-배열-병합" class="headerlink" title="객체/배열 병합"></a>객체/배열 병합</h2><p>객체와 배열의 병합에 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newDBinfo = &#123;</span><br><span class="line">DATABASE_HOST: <span class="string">'나혜석'</span>,</span><br><span class="line">DATABASE_PASSWORD: <span class="string">'나혜석123'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">DATABASE_HOST: <span class="string">'유관순'</span>,</span><br><span class="line">DATABASE_PASSWORD: <span class="string">'유관순123'</span>,</span><br><span class="line">DATABASE_USERNAME: <span class="string">'user'</span>,</span><br><span class="line">... newDBinfo,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">... newDBinfo,</span><br><span class="line">DATABASE_HOST: <span class="string">'유관순'</span>,</span><br><span class="line">DATABASE_PASSWORD: <span class="string">'유관순123'</span>,</span><br><span class="line">DATABASE_USERNAME: <span class="string">'user'</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(config)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">DATABASE_HOST: "나혜석"</span></span><br><span class="line"><span class="comment">DATABASE_PASSWORD: "나혜석123"</span></span><br><span class="line"><span class="comment">DATABASE_USERNAME: "user"</span></span><br><span class="line"><span class="comment">[[Prototype]]: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(config2)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">DATABASE_HOST: "유관순"</span></span><br><span class="line"><span class="comment">DATABASE_PASSWORD: "유관순123"</span></span><br><span class="line"><span class="comment">DATABASE_USERNAME: "user"</span></span><br><span class="line"><span class="comment">[[Prototype]]: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>이 결과값으로 알 수 있듯 spread syntax(…)의 위치에 따라 덮어쓰기가 가능하다.</p><p><br><br><br></p><h2 id="객체-배열-reset"><a href="#객체-배열-reset" class="headerlink" title="객체/배열 reset"></a>객체/배열 reset</h2><p>객체와 배열을 자를 수 있다.</p><h3 id="객체예시"><a href="#객체예시" class="headerlink" title="객체예시"></a>객체예시</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">name: <span class="string">'유관순'</span>,</span><br><span class="line">age: <span class="string">'17'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;age, ...independenceData&#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(independenceData)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;name: "유관순"&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="배열-예시"><a href="#배열-예시" class="headerlink" title="배열 예시"></a>배열 예시</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [one, ...others] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(one) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(others) <span class="comment">// [2,3]</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/01/14/220115JS-spreadoperator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>let과 const와 Var의 차이, 어떻게 쓰면 좋을까?</title>
      <link>https://sowon-dev.github.io/2022/01/14/220115JS-letConstVar/</link>
      <guid>https://sowon-dev.github.io/2022/01/14/220115JS-letConstVar/</guid>
      <pubDate>Fri, 14 Jan 2022 21:56:47 GMT</pubDate>
      
      <description>&lt;p&gt;js에서 변수를 선언할때는 let과 const와 Var를 쓸 수 있다.&lt;br&gt;이들 중 어떨때 무엇을 사용하면 좋을까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>js에서 변수를 선언할때는 let과 const와 Var를 쓸 수 있다.<br>이들 중 어떨때 무엇을 사용하면 좋을까?</p><a id="more"></a><p>이는 block scopting에 해답이 있다.</p><h2 id="Block-scopting"><a href="#Block-scopting" class="headerlink" title="Block scopting"></a>Block scopting</h2><p>아래 var로 선언한 예시를 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>var는 block scoping 자체를 갖지 않기 때문에 두번째 x 선언자체가 첫번째 x의 로컬 scope로 가게된다.<br>따라서 var로 선언한 두 변수는 같은 변수가 되고 가장 마지막에 선언한 값으로 결정된다.</p><p>이제 let과 const를 보자.<br>let과 const는 같은 scoping 룰을 따른다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>block 안과 밖을 구분하는 blcok scoping을 따른다.</p><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>위의 예시에서 알 수 있듯 let과 const는 예측 가능성이 높고 유지보수성이 var보다 뛰어나다.<br>따라서, </p><ul><li>const를 기본으로 사용하고 필요한 경우에 let을 사용하자</li><li>var는 절대 쓰지말자.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
      <comments>https://sowon-dev.github.io/2022/01/14/220115JS-letConstVar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>경로(절대경로, 상대경로, ., ~)</title>
      <link>https://sowon-dev.github.io/2022/01/13/220114path/</link>
      <guid>https://sowon-dev.github.io/2022/01/13/220114path/</guid>
      <pubDate>Thu, 13 Jan 2022 16:30:53 GMT</pubDate>
      
      <description>&lt;p&gt;경로란 파일 위치를 알려줘서 연결할 때 사용한다.&lt;br&gt;이번에 &lt;code&gt;~&lt;/code&gt;라는 경로를 보았다. 항상 &lt;code&gt;.&lt;/code&gt;만 보았기때문에 어떤 경로인지 궁금했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>경로란 파일 위치를 알려줘서 연결할 때 사용한다.<br>이번에 <code>~</code>라는 경로를 보았다. 항상 <code>.</code>만 보았기때문에 어떤 경로인지 궁금했다.</p><a id="more"></a><h2 id="경로"><a href="#경로" class="headerlink" title="경로"></a>경로</h2><p>만약 아래와 같인 디렉토리 구조가 있다고 가정하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">│   README.md</span><br><span class="line">│   exam1.txt</span><br><span class="line">│</span><br><span class="line">└───webroot</span><br><span class="line">│   │   favicon.ico</span><br><span class="line">│   │</span><br><span class="line">│   └───css</span><br><span class="line">│   │   │   maim.css</span><br><span class="line">│   │   │   common.css</span><br><span class="line">│   │   │   ...</span><br><span class="line">│   │</span><br><span class="line">│   └───js</span><br><span class="line">│       │   maim.js</span><br><span class="line">│       │   common.js</span><br><span class="line">│       │   ...</span><br><span class="line">│</span><br><span class="line">└───controller</span><br><span class="line">│   │  HomeController</span><br><span class="line">│   │  UserController</span><br><span class="line">│</span><br><span class="line">└───view</span><br><span class="line">│   │ </span><br><span class="line">│   └───Home</span><br><span class="line">│       │   Home.html</span><br><span class="line">│   │ </span><br><span class="line">│   └───User</span><br><span class="line">│       │   Create.html</span><br><span class="line">│       │   Edit.html</span><br><span class="line">│       │   ...</span><br></pre></td></tr></table></figure><p>현재 <code>Create.html</code>에서 경로를 작성한다고 생각한다면 절대경로와 상대경로 예시는 아래 표와 같다.</p><table><thead><tr><th align="center">표현</th><th align="center">의미</th><th align="center">위치예시</th></tr></thead><tbody><tr><td align="center"><code>/</code></td><td align="center">루트, 가장 최상위 디렉토리</td><td align="center">project</td></tr><tr><td align="center"><code>~/</code></td><td align="center">루트, 가장 최상위 디렉토리</td><td align="center">project</td></tr><tr><td align="center"><code>./</code></td><td align="center">현재 위치</td><td align="center">User</td></tr><tr><td align="center"><code>../</code></td><td align="center">현재 위치의 상단 폴더</td><td align="center">view</td></tr><tr><td align="center"><code>../../</code></td><td align="center">현재 위치의 상단 폴더의 상단폴더</td><td align="center">project</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/HTML-CSS/">HTML&amp;CSS</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/HTML-CSS/">HTML&amp;CSS</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/13/220114path/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Prototype</title>
      <link>https://sowon-dev.github.io/2022/01/09/220109JS-proto/</link>
      <guid>https://sowon-dev.github.io/2022/01/09/220109JS-proto/</guid>
      <pubDate>Sun, 09 Jan 2022 03:28:18 GMT</pubDate>
      
      <description>&lt;p&gt;js는 프로토타입기반 언어이다.&lt;br&gt;여기서 프로토타입이 무엇일까?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>js는 프로토타입기반 언어이다.<br>여기서 프로토타입이 무엇일까?</p><a id="more"></a><p>java나 python등 객체지향언어에는 Class(클래스)가 존재한다. 클래스를 가지고 상속등의 기능을 구현한다.<br>여기서 중요한 점은 js도 객체지향언어라는 점이다. 하지만 js에는 클래스라는 개념이 없다. 그렇다면 상속등의 기능은 어떻게 할 수 있을까? 이때 프로토타입을 사용한다. 기존의 객체를 clone하여 새로운 객체를 생성하는 것이다.</p><h2 id="프로토타입-상속"><a href="#프로토타입-상속" class="headerlink" title="프로토타입 상속"></a>프로토타입 상속</h2><p>사람(person)객체에는 sleep이라는 값이있다.<br>학생(student)객체에도 sleep이라는 값이 있고 <code>person</code>을 상속한다. 이를 <code>student</code>의 프로토타입은 <code>person</code>이라고 말한다.</p><p>아래 아주 간단한 예시를 보자. 3가지 물음표에는 각각 어떤 값이 나올까?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  sleep: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">  __proto__: person,</span><br><span class="line">  sleep: <span class="literal">true</span>,</span><br><span class="line">  study: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert( student.sleep ); <span class="comment">// ? (1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> student.sleep;</span><br><span class="line"></span><br><span class="line">alert( student.sleep ); <span class="comment">// ? (2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.sleep;</span><br><span class="line"></span><br><span class="line">alert( student.sleep ); <span class="comment">// ? (3)</span></span><br></pre></td></tr></table></figure><p>답은 아래와 같다.</p><ol><li>true</li><li>null</li><li>undefined</li></ol><p>이를 잘 활용하면 효율적인 객체생성이 가능하다. 이를 Class와 비교해보자!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pesrson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sleep = <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>는 자는 중`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.__proto__.constructor(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.study = <span class="function"><span class="keyword">function</span> <span class="title">study</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>는 공부중`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(Student.prototype, Person.prototype) <span class="comment">//set해줘야함</span></span><br></pre></td></tr></table></figure><p>위와 아래는 똑같다!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>()</span>&#123;</span><br><span class="line">constructor(name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep()&#123;</span><br><span class="line"><span class="keyword">return</span> `$&#123;<span class="keyword">this</span>.name&#125;는 자는 중`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Pesrson</span></span>&#123;</span><br><span class="line">constructor(name)&#123;</span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">study()&#123;</span><br><span class="line"><span class="keyword">return</span> `$&#123;<span class="keyword">this</span>.name&#125;는 공부중`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Student(<span class="string">"sowon-dev"</span>);</span><br><span class="line">console.log(me.study());</span><br><span class="line">console.log(me.sleep());</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="유용한-메서드"><a href="#유용한-메서드" class="headerlink" title="유용한 메서드"></a>유용한 메서드</h2><table><thead><tr><th align="center">메서드명</th><th align="center">리턴값</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">a instanceof b</td><td align="center">boolean</td><td align="center">a가 b를 상속하는지 확인할 수 있음</td></tr></tbody></table><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.javascript.info/prototype-inheritance">https://ko.javascript.info/prototype-inheritance</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/09/220109JS-proto/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>사내 101번서버에 접속하세요라는 의미(DNS 정보조회)</title>
      <link>https://sowon-dev.github.io/2022/01/05/220106Server-nslookup/</link>
      <guid>https://sowon-dev.github.io/2022/01/05/220106Server-nslookup/</guid>
      <pubDate>Wed, 05 Jan 2022 16:38:12 GMT</pubDate>
      
      <description>&lt;p&gt;한참 모든 것이 궁금한 시기인 나는 오늘도 궁금한 점이 생겼다.&lt;br&gt;오늘 팀장님이 사내서버에 프로젝트를 올렸으니 101번(임의번호)서버로 접속해서 확인해보라고 하셨다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>한참 모든 것이 궁금한 시기인 나는 오늘도 궁금한 점이 생겼다.<br>오늘 팀장님이 사내서버에 프로젝트를 올렸으니 101번(임의번호)서버로 접속해서 확인해보라고 하셨다.</p><a id="more"></a><p>사내 서버의 도메인을 이미 알고있었기때문에 해당 도메인인 link.sowonDev.com(임의도메인)으로 접속하니 잘 접속이 되었다.<br>여기서 궁금증한 건 사내도메인 link.sowonDev.com을 왜 101번서버라고 부르는 지였다.</p><p><br><br><br></p><h2 id="도메인-정보를-조회하는-명령어"><a href="#도메인-정보를-조회하는-명령어" class="headerlink" title="도메인 정보를 조회하는 명령어"></a>도메인 정보를 조회하는 명령어</h2><ul><li>nslookup: 도메인 이름에 대한 정보를 조회할 때 사용할 수 있는 명령어이다.</li></ul><p>cmd를 열어 아래와 같이 nslookup명령어를 입력하면 DNS서버에 해당 도메인정보를 요청하는 것이고 응답으로는 도메인정보가 나온다.<br>요청을 끝내고 싶으면 exit을 통해서 명령어작성에서 빠져나오면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;명령어</span><br><span class="line">$ nslookup [정보를알고싶은도메인]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;명령어 예시</span><br><span class="line">$ nslookup link.sowonDev.com</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;응답</span><br><span class="line">권한 없는 응답:</span><br><span class="line">이름: link.sowonDev.com</span><br><span class="line">Address: 123.000.00.101</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;명령종료</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure><p>자 이제 왜 101서버라고 불리는 지 감이 잡혔다.<br>응답을 보면 address부분의 제일 마지막 IP가 101이기 때문이다!<br>다른 사이트들도 궁금해졌다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup naver.com</span><br><span class="line"></span><br><span class="line">권한 없는  응답:</span><br><span class="line">이름: naver.com</span><br><span class="line">Address: 223.130.200.107</span><br><span class="line">223.130.195.200</span><br><span class="line">223.130.200.104</span><br><span class="line">223.130.195.95</span><br></pre></td></tr></table></figure><p>네이버 예시에서 알 수 있듯 네이버급의 규모가 큰 프로젝트는 4개의 서버를 사용한다.<br>신기해👍</p><p>그리고 좀 더 구글링해보니 굳이 cmd가 아니더라도 DNS recode를 조회할 수 있는 사이트를 찾을 수 있었다.<br>IPv4 Address뿐만 아니라 회사위치와 회사명도 나온다!</p><ul><li><a href="https://www.nslookup.io/">https://www.nslookup.io/</a></li></ul><p>위 사이트에서 google.com을 검색하면 IPv4는 물론 AAAA records인 IPv6 address도 확인할 수 있다!<br>재밌다😎</p><p><br><br><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>새로운 지식 습득은 언제나 재밌다.<br>그려려니 넘어가지말고 꼭 구글링해보자!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Server/">Server</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%8A%98%EB%98%90%EB%AA%BB%EC%95%8C%EC%95%84%EB%93%A3%EA%B3%A0%EB%A7%90%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4/">오늘또못알아듣고말았습니다</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/05/220106Server-nslookup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>클로저(Closure)란</title>
      <link>https://sowon-dev.github.io/2022/01/05/220105JS-closure/</link>
      <guid>https://sowon-dev.github.io/2022/01/05/220105JS-closure/</guid>
      <pubDate>Wed, 05 Jan 2022 05:44:34 GMT</pubDate>
      
      <description>&lt;p&gt;탄탄한 자바스크립트 기본기를 다지기 위해 클로저에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>탄탄한 자바스크립트 기본기를 다지기 위해 클로저에 대해 알아보자.</p><a id="more"></a><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>closure = function + environment<br>클로저는 외부 변수를 기억하고 이 외부 변수에 접근할 수 있는 함수를 의미한다.<br>함수(function)가 하나 생길때마다 클로저는 하나씩 생성된다.<br>일반적으로 외부 함수의 실행이 끝나면 외부 함수가 소멸된다. 하지만 클로저는 외부 함수가 소멸된 이후에도 내부 함수가 외부함수의 변수에 접근할 수 있는 구조이다.</p><p>아래 문제를 풀어보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 이름부르기(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"나혜석"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"권기옥"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a function</span></span><br><span class="line"><span class="keyword">let</span> 인사 = 이름부르기();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 나혜석과 권기옥 중 누구의 이름이 불리게 될까?</span></span><br><span class="line">인사();</span><br></pre></td></tr></table></figure><p>여기서 정답은 바로 <code>나혜석</code>이다.<br>만약 이름부르기함수에서 <code>let name = &quot;나혜석&quot;;</code>이 없었다면 alert창은 <code>권기옥</code>으로 나올 것이다.</p><p>어떻게 이게 가능한걸까?<br>바로 자바스크립트의 함수는 숨겨진 프로퍼티인 [[Environment]]를 이용해 자신이 어디서 만들어졌는지를 기억하기 때문이다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.javascript.info/closure">https://ko.javascript.info/closure</a></li><li><a href="https://edu.goorm.io/learn/lecture/557/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-node-js/lesson/21731/%ED%81%B4%EB%A1%9C%EC%A0%80">https://edu.goorm.io/learn/lecture/557/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-node-js/lesson/21731/%ED%81%B4%EB%A1%9C%EC%A0%80</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/05/220105JS-closure/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>이벤트루프(Event loop)와 메인스레드(Main thread)</title>
      <link>https://sowon-dev.github.io/2022/01/04/220104JS-eventloop/</link>
      <guid>https://sowon-dev.github.io/2022/01/04/220104JS-eventloop/</guid>
      <pubDate>Tue, 04 Jan 2022 05:31:30 GMT</pubDate>
      
      <description>&lt;p&gt;탄탄한 자바스크립트 기본기를 다지기 위해 이벤트 루프에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>탄탄한 자바스크립트 기본기를 다지기 위해 이벤트 루프에 대해 알아보자.</p><a id="more"></a><h2 id="이벤트루프모델"><a href="#이벤트루프모델" class="headerlink" title="이벤트루프모델"></a>이벤트루프모델</h2><p>이벤트 루프 모델은 여러 스레드를 사용한다.<br>Node.js 프로세스에서 메인 스레드는 1개이며, 한 순간에 한 줄씩만 실행하지만 워커스레드(Worker thread)는 여러개이다.<br>이벤트 루프는 앞에 있는 콜백이 전부 처리가 끝나야 다음 콜백을 처리할 수 있다.</p><h2 id="용어정리"><a href="#용어정리" class="headerlink" title="용어정리"></a>용어정리</h2><ul><li>메인스레드: 자바스크립트 코드가 실행되는 스레드</li><li>워커스레드: 파일입출력스레드, 네트워크스레드등 메인스레드 외의 일을 하는 스레드</li><li>콜스택: 현재까지 불린 함수들의 스택</li><li>스택: 스택자료구조로 후입선출의 특성을 가진다.</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/1280px-Data_stack.svg.png" alt="출처: 위키백과"></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>https://sowon-dev.github.io/2022/01/04/220104JS-eventloop/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DDD는 디자인패턴인가 아키텍처인가?</title>
      <link>https://sowon-dev.github.io/2021/12/31/2201013tier-archVSddd/</link>
      <guid>https://sowon-dev.github.io/2021/12/31/2201013tier-archVSddd/</guid>
      <pubDate>Fri, 31 Dec 2021 22:31:52 GMT</pubDate>
      
      <description>&lt;p&gt;DDD(Domain-driven design)으로 프로젝트를 진행하게 되면서 DDD가 무엇인지 궁금해졌다.&lt;br&gt;DDD는 디자인패턴일까 아키텍처일까?&lt;br&gt;사소한 하나하나 다 궁금할 시기이지. 암암 그렇고말고.&lt;br&gt;구글링을 아무리 해봐도 뚜렷한 구분이 나오지 않았다. 그래서 공부한 내용을 바탕으로 팀장님께 문의를 드렸고 팀장님도 함께 고민해주셨다.&lt;br&gt;참 감사하다!&lt;br&gt;이번 포스팅은 스스로 공부하면서 작성한 포스팅이므로 정답이 아닐 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>DDD(Domain-driven design)으로 프로젝트를 진행하게 되면서 DDD가 무엇인지 궁금해졌다.<br>DDD는 디자인패턴일까 아키텍처일까?<br>사소한 하나하나 다 궁금할 시기이지. 암암 그렇고말고.<br>구글링을 아무리 해봐도 뚜렷한 구분이 나오지 않았다. 그래서 공부한 내용을 바탕으로 팀장님께 문의를 드렸고 팀장님도 함께 고민해주셨다.<br>참 감사하다!<br>이번 포스팅은 스스로 공부하면서 작성한 포스팅이므로 정답이 아닐 수 있다.</p><a id="more"></a><p>나에게 가장 익숙한 프로젝트 구조는 MVC패턴으로 프레젠테이션로직, 비즈니스로직, 데이터베이스 로직을 구분한 구조이다. 이를 3계층 구조라고 부른다고 하셨다.<br>디자인패턴으로 보면 MVC패턴이지만 아키텍처관점에서는 3Tier Architecture라는 것이다.</p><h2 id="디자인-패턴이란-🤠"><a href="#디자인-패턴이란-🤠" class="headerlink" title="디자인 패턴이란? 🤠"></a>디자인 패턴이란? 🤠</h2><ul><li>정의: 어떤걸 해결할려고 할때 효율적인 방법에 대해서 정해놓은 규칙</li><li>문제를 해결하기 위한 방법을 가이드</li><li>크기로 보면 패턴이 좀 더 아키텍쳐 보단 작은 느낌</li></ul><p><br><br><br></p><h2 id="소프트웨어-아키텍처란-🤠"><a href="#소프트웨어-아키텍처란-🤠" class="headerlink" title="소프트웨어 아키텍처란? 🤠"></a>소프트웨어 아키텍처란? 🤠</h2><ul><li>정의: 시스템, 컴포넌트 간의 관계가 어떻게 되어있냐 그런 구조적인 측면에서 정의한 것</li><li>특징: 언어적 혹은 시스템 구조적 등 여러가지 환경에 따라 구조가 달라서 해당 구조에서 사용할 수 있는 패턴도 달라짐</li><li>인프라 아키텍쳐(가장 광범위) -&gt; 시스템 아키텍쳐 -&gt; 소프트웨어 아키텍쳐(좁은범위)</li></ul><p><br><br><br></p><h2 id="디자인패턴-VS-소프트웨어-아키텍처-예시"><a href="#디자인패턴-VS-소프트웨어-아키텍처-예시" class="headerlink" title="디자인패턴 VS 소프트웨어 아키텍처 예시"></a>디자인패턴 VS 소프트웨어 아키텍처 예시</h2><table><thead><tr><th align="center"></th><th align="center">디자인패턴</th><th align="center">아키텍처</th></tr></thead><tbody><tr><td align="center">대표 예시</td><td align="center">MVC모델, Commnad, Factory, DAO</td><td align="center">데이터중심 스타일, 규칙기반스타일, 분산스타일, 파이프와 필터스타일</td></tr></tbody></table><p><br><br><br></p><h2 id="내가-내린-결론"><a href="#내가-내린-결론" class="headerlink" title="내가 내린 결론"></a>내가 내린 결론</h2><p>다시 본래 질문으로 돌아가자.<br>DDD는 디자인패턴일까 아키텍처일까?<br>여기서 내가 내린 결론은 소프트웨어 아키텍처이다.<br>왜냐하면 DDD는 디자인패턴 같으면서도 구조적이다. 비즈니스와 디자인패턴, 아키텍쳐까지 포함하기에 디자인패턴보다는 큰 개념인 아키텍처에 적합하다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>팀장님 지식</li><li><a href="https://incheol-jung.gitbook.io/docs/q-and-a/architecture/ddd">https://incheol-jung.gitbook.io/docs/q-and-a/architecture/ddd</a></li><li><a href="https://m.blog.naver.com/limoremo/220073573980">https://m.blog.naver.com/limoremo/220073573980</a></li><li><a href="http://www.jidum.com/jidums/view.do?jidumId=1002">http://www.jidum.com/jidums/view.do?jidumId=1002</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/">디자인패턴</category>
      
      
      <comments>https://sowon-dev.github.io/2021/12/31/2201013tier-archVSddd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA]@CreatedDate에 날짜가 안 담길때 오류</title>
      <link>https://sowon-dev.github.io/2021/11/29/211130Jpa-auditing/</link>
      <guid>https://sowon-dev.github.io/2021/11/29/211130Jpa-auditing/</guid>
      <pubDate>Mon, 29 Nov 2021 15:57:08 GMT</pubDate>
      
      <description>&lt;p&gt;@CreatedDate를 사용하여 save()메서드로 데이터를 insert하는데 날짜가 null로 나왔다.&lt;br&gt;이런 오류는 대부분 auditing이 제대로 적용되지 않았을때 발생한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>@CreatedDate를 사용하여 save()메서드로 데이터를 insert하는데 날짜가 null로 나왔다.<br>이런 오류는 대부분 auditing이 제대로 적용되지 않았을때 발생한다.</p><a id="more"></a><p><img src="/img/211130jpaAuditing1.PNG" alt="created_at 컬럼이 현재시간이 아닌 null값이다"></p><p><br><br><br></p><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><p> Entity클래스에 @EntityListeners 추가되어있지 않아서 Auditing기능이 작동하지않았다.</p><ul><li>Sample.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy =GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">protected</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ol><li><code>패키지Application.java</code>에 @EnableJpaAuditing 어노테이션 추가<br>JpaAuditing 기능을 사용하기 위해서는 패키지Application.java파일에서 @EnableJpaAuditing 추가해줘야한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableJpaAuditing</span> <span class="comment">// 추가</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 패키지<span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"@아아"</span>);</span><br><span class="line">SpringApplication.run(패키지Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Entity클래스에 @EntityListeners 추가<br>이걸 빼먹으면 @CreatedDate등 Auditing기능이 작동하지않는다.</li></ol><ul><li>Sample.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener<span class="class">.<span class="keyword">class</span>) // 추가</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy =GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">protected</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/211130jpaAuditing2.PNG" alt="정상적으로 날짜값이 isnert되었다."></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%B4%88%EA%B2%A9%EC%B0%A8Java-Spring/">패스트캠퍼스(초격차Java/Spring)</category>
      
      
      <comments>https://sowon-dev.github.io/2021/11/29/211130Jpa-auditing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>세번째 팀 프로젝트를 끝내며 코드리뷰가 내게 남긴 것</title>
      <link>https://sowon-dev.github.io/2021/11/16/211117PrjtReview/</link>
      <guid>https://sowon-dev.github.io/2021/11/16/211117PrjtReview/</guid>
      <pubDate>Tue, 16 Nov 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;한달동안 내내 매달렸던 세번째 팀 프로젝트가 오늘부로 끝났다.&lt;br&gt;매일 야근하는 삶이었다. 프로젝트가 끝나고보니 가을이 성큼 다가오다못해 성큼 지나가고 있었다.🍁&lt;br&gt;이번 프로젝트는 끝나고 나서 다음 프로젝트까지 여유가 있어 코드리뷰 시간을 가졌다.&lt;br&gt;현재 회사에서 이번 프로젝트까지 총 3개의 프로젝트를 진행했었는데 코드리뷰는 처음이라 무척 신났다.&lt;br&gt;항상 해보고싶었어 코드리뷰🤩&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>한달동안 내내 매달렸던 세번째 팀 프로젝트가 오늘부로 끝났다.<br>매일 야근하는 삶이었다. 프로젝트가 끝나고보니 가을이 성큼 다가오다못해 성큼 지나가고 있었다.🍁<br>이번 프로젝트는 끝나고 나서 다음 프로젝트까지 여유가 있어 코드리뷰 시간을 가졌다.<br>현재 회사에서 이번 프로젝트까지 총 3개의 프로젝트를 진행했었는데 코드리뷰는 처음이라 무척 신났다.<br>항상 해보고싶었어 코드리뷰🤩</p><a id="more"></a><h2 id="코드리뷰-시간을-잘-활용하기-위한-생각-팁"><a href="#코드리뷰-시간을-잘-활용하기-위한-생각-팁" class="headerlink" title="코드리뷰 시간을 잘 활용하기 위한 생각 팁!"></a>코드리뷰 시간을 잘 활용하기 위한 생각 팁!</h2><p>어떻게 하면 코드리뷰 시간을 잘 활용하여 더 많이 성장할 수 있을까?<br>코드리뷰 시간을 잘 활용하기 위해선 내 코드 돌아보기 뿐만 아니라 다른 팀원분들의 코드도 훑어봐야한다.<br>코드를 보면서 아래와 같이 2가지만 생각하면 끝!!</p><ol><li>나한테 맡겨지면 나는 어떻게 구현했을까?</li><li>왜 이 라이브러리를 사용했을까?</li></ol><p><br><br><br></p><h2 id="코드리뷰-어땠어"><a href="#코드리뷰-어땠어" class="headerlink" title="코드리뷰 어땠어?"></a>코드리뷰 어땠어?</h2><p>첫 코드리뷰는 성공적이었다.<br>궁금했던 부분, 애매했던 부분들을 물어볼 수 있는 좋은 기회였고 왜 해당 라이브러리를 사용했는지, 왜 서비스단에서 처리했는지, 컨트롤러에서 하면 뭐가 안 좋은지 등등 궁금증을 와르르 쏟아냈다.<br>다들 프로젝트가 끝나서 그런지(?) 친절하게 알려주셨다. 듣는 내내 오른쪽 뇌의 한 부분이 깨어나는 기분이었다.<br>아하 아하의 연속!<br>너무 재밌어!!!</p><p>코드리뷰를 통해서 내가 배운 내용들을 정리해보았다.<br>보안상 모든 내용을 기록할 순 없지만 대중적인 부분들을 골라 적었다.<br>잊어버리지 않도록!<br>똑같은 실수를 하지 않도록!</p><p><br><br><br></p><h2 id="동영상에-iframe을-쓰지-않은-이유"><a href="#동영상에-iframe을-쓰지-않은-이유" class="headerlink" title="동영상에 iframe을 쓰지 않은 이유"></a>동영상에 iframe을 쓰지 않은 이유</h2><p>iframe을 사용하면 동적제어가 되지 않는다. 따라서 iframe을 쓰지 않고 <a href="https://videojs.com/getting-started">video.js</a> 를 사용했다.</p><ul><li>iframe예시</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"inlineFrameExample"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"Inline Frame Example"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"동영상url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>video.js 예시<br>비디오보기 버튼을 클릭시 video.js를 이용하여 모달에 비디오가 출력되는 예시이다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"비디오보기"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">id</span>=<span class="string">"videoModalView"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"button[name=비디오보기]"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">let videojs = `<span class="tag">&lt;<span class="name">video</span> <span class="attr">style</span>=<span class="string">"height:500px;width:300px"</span> <span class="attr">class</span>=<span class="string">"video-js vjs-big-play-button vjs-fluid vjs-time-control"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>=<span class="string">"false"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">data-setup</span>=<span class="string">"&#123;&#125;"</span> <span class="attr">controlsList</span>=<span class="string">"nodownload"</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"$&#123;동영상url&#125;"</span>/&gt;</span>`;</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">"#videoModalView"</span>).html(videojs);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="try-catch를-했으면-꼭-예외처리를-해야한다"><a href="#try-catch를-했으면-꼭-예외처리를-해야한다" class="headerlink" title="try catch를 했으면 꼭 예외처리를 해야한다."></a>try catch를 했으면 꼭 예외처리를 해야한다.</h2><p>예외처리 정책을 몰라서 catch 부분에서 error를 log찍고 throw로 던졌다.<br>log만 찍으면 예외가 처리된 것이 아니기때문에 아예 없는 것이 낫다.<br>차라리 try catch문을 없애면 500에러가 발생해서 문제 발생시 바로 확인 및 처리가 가능하다.</p><ul><li>컨트롤러<br>현재 상태로는 로그에 에러가 찍히지만 서버는 계속 돌아가므로 에러를 확실히 잡을 수 없다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">delete</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sampleService.delete(id);</span><br><span class="line">msg = <span class="string">"정상적으로 삭제되었습니다."</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 예외처리정책 필요</span></span><br><span class="line">log.error(<span class="string">"삭제 중 오류가 발생하였습니다."</span>, e);</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>코드리뷰 후 컨트롤러<br>try catch문을 아예 없애 500을 발생시켜 서비스가 멈추도록 했다.<br>global error 처리단계에서 500에러인 경우, 잡아서 500에러 페이지를 보여준다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">delete</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">sampleService.delete(id);</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="string">"정상적으로 삭제되었습니다."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="다중-insert시-서비스에서-처리할-지-퀴리에서-처리할-지"><a href="#다중-insert시-서비스에서-처리할-지-퀴리에서-처리할-지" class="headerlink" title="다중 insert시 서비스에서 처리할 지, 퀴리에서 처리할 지?"></a>다중 insert시 서비스에서 처리할 지, 퀴리에서 처리할 지?</h2><p>경우에 따라 다르다.<br>insert 후 바로 수정, 삭제시 id값이 있어야하는 경우, 쿼리에서 for each 돌리는 것보다 서비스에서 for문으로 insert해주는 것이 낫다.</p><p><br><br><br></p><h2 id="쿼리-parameterType과-resultType에-DTO가-들어가도-되는-지"><a href="#쿼리-parameterType과-resultType에-DTO가-들어가도-되는-지" class="headerlink" title="쿼리 parameterType과 resultType에 DTO가 들어가도 되는 지?"></a>쿼리 parameterType과 resultType에 DTO가 들어가도 되는 지?</h2><p>VO는 readonly이니 쿼리에서 사용해도 될지 고민스러웠다.<br>DTO와 VO를 구분하여 사용한다면 쿼리에 parameterType에는 DTO를 resultType에는 VO를 넣어도 된다.</p><p><br><br><br></p><h2 id="DB요청은-적을수록-좋다"><a href="#DB요청은-적을수록-좋다" class="headerlink" title="DB요청은 적을수록 좋다."></a>DB요청은 적을수록 좋다.</h2><p>상황에 따라 다르지만 기본적으로 DB요청이 적을수록 성능이 빨라진다.</p><p><br><br><br></p><h2 id="쿼리에서-부등호-연산을-한다면-CDATA-구문-말고-대신"><a href="#쿼리에서-부등호-연산을-한다면-CDATA-구문-말고-대신" class="headerlink" title="쿼리에서 부등호 연산을 한다면 CDATA 구문 말고 대신"></a>쿼리에서 부등호 연산을 한다면 CDATA 구문 말고 대신</h2><p>쿼리에서 부등호로 연산을 한다면 CDATA대신 <code>&amp;lt;</code> 와 <code>&amp;gt;</code>를 사용하는 것이 간편하다.</p><ul><li>잘못 사용한 예<br>CDATA를 사용할때 if조건등이 있는경우 꺽쇠가 있어서 쿼리가 실행 되지않는 오류가 생기기 쉽다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="selectList" parameterType="testVO" resultType="testVO"&gt;</span><br><span class="line"><span class="comment">/* selectList by sowon-dev 2021.11.23 */</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line"><span class="keyword">SELECT</span><span class="keyword">id</span></span><br><span class="line">, user_name</span><br><span class="line">, user_no</span><br><span class="line"><span class="keyword">FROM</span> testTable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"startSearchDate != null and endSearchDate != null"</span>&gt;</span><br><span class="line"><span class="keyword">AND</span>regist_dt &gt;= <span class="keyword">date_format</span>(<span class="comment">#&#123;startSearchDate&#125;, '%Y-%m-%d %H:%i:%s')</span></span><br><span class="line"><span class="keyword">AND</span>regist_dt &lt;= <span class="keyword">date_format</span>(<span class="comment">#&#123;endSearchDate&#125;, '%Y-%m-%d %H:%i:%s')</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">]]&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>CDATA 잘 사용한 예<br>따라서 해당 부등호에만 CDATA를 적용하는 것을 습관화하면 좋다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="selectList" parameterType="testVO" resultType="testVO"&gt;</span><br><span class="line"><span class="comment">/* selectList by sowon-dev 2021.11.23 */</span></span><br><span class="line"><span class="keyword">SELECT</span><span class="keyword">id</span></span><br><span class="line">, user_name</span><br><span class="line">, user_no</span><br><span class="line"><span class="keyword">FROM</span> testTable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"startSearchDate != null and endSearchDate != null"</span>&gt;</span><br><span class="line"><span class="keyword">AND</span>regist_dt &lt;![CDATA[ &gt;= ]]&gt; <span class="keyword">date_format</span>(<span class="comment">#&#123;startSearchDate&#125;, '%Y-%m-%d %H:%i:%s')</span></span><br><span class="line"><span class="keyword">AND</span>regist_dt &lt;![CDATA[ &lt;= ]]&gt; <span class="keyword">date_format</span>(<span class="comment">#&#123;endSearchDate&#125;, '%Y-%m-%d %H:%i:%s')</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&amp;lt;</code>, <code>&amp;gt;</code>를 사용한 예<br>CDATA문을 사용하지 않고 HTML방식으로도 가능하며 CDATA문보다 간편하다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="selectList" parameterType="testVO" resultType="testVO"&gt;</span><br><span class="line"><span class="comment">/* selectList by sowon-dev 2021.11.23 */</span></span><br><span class="line"><span class="keyword">SELECT</span><span class="keyword">id</span></span><br><span class="line">, user_name</span><br><span class="line">, user_no</span><br><span class="line"><span class="keyword">FROM</span> testTable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"startSearchDate != null and endSearchDate != null"</span>&gt;</span><br><span class="line"><span class="keyword">AND</span>regist_dt &amp;gt;= date_format(<span class="comment">#&#123;startSearchDate&#125;, '%Y-%m-%d %H:%i:%s')</span></span><br><span class="line">ANDregist_dt &amp;lt;= date_format(<span class="comment">#&#123;endSearchDate&#125;, '%Y-%m-%d %H:%i:%s')</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Journal/">Journal</category>
      
      <category domain="https://sowon-dev.github.io/categories/Journal/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/">회고록</category>
      
      
      <comments>https://sowon-dev.github.io/2021/11/16/211117PrjtReview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL/MariaDB] WITH RECURSIVE 사용법</title>
      <link>https://sowon-dev.github.io/2021/10/19/211020SQL-recurisve/</link>
      <guid>https://sowon-dev.github.io/2021/10/19/211020SQL-recurisve/</guid>
      <pubDate>Tue, 19 Oct 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;MySQL에서 재귀쿼리를 사용해야한다면? with recursive문을 사용할 수 있다.&lt;br&gt;with recursive는 UNION ALL과 함께 사용하며 UNION ALL은 관련 포스팅인 &lt;a href=&quot;https://sowon-dev.github.io/2021/10/18/211019SQL-unionall/&quot;&gt;Union all 사용법&lt;/a&gt;을 참조하면 된다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MySQL에서 재귀쿼리를 사용해야한다면? with recursive문을 사용할 수 있다.<br>with recursive는 UNION ALL과 함께 사용하며 UNION ALL은 관련 포스팅인 <a href="https://sowon-dev.github.io/2021/10/18/211019SQL-unionall/">Union all 사용법</a>을 참조하면 된다. </p><a id="more"></a><h2 id="기본-쿼리"><a href="#기본-쿼리" class="headerlink" title="기본 쿼리"></a>기본 쿼리</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with recursive 테이블명 as (</span><br><span class="line">select 초기값 as 별명1</span><br><span class="line"></span><br><span class="line">union all</span><br><span class="line"></span><br><span class="line">select 별명1 반복_할_계산식 from 테이블명 where 반복을_멈출_제어문</span><br><span class="line">)</span><br><span class="line">select * from 테이블명</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><p>예시코드를 보자.<br>menu테이블이 있고 menu테이블은 계층형구조로 이루어져있다.<br>상위 메뉴ID와 하위 메뉴ID를 동일한 menu테이블에서 가져오는 재귀쿼리로 활용할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">with recursive cte as (</span><br><span class="line">SELECTMENU_ID</span><br><span class="line">, UPPER_MENU_ID</span><br><span class="line">, MENU_NM</span><br><span class="line">FROM menu</span><br><span class="line"></span><br><span class="line">UNION ALL</span><br><span class="line"></span><br><span class="line">SELECTm.MENU_ID</span><br><span class="line">, m.UPPER_MENU_ID</span><br><span class="line">, m.MENU_NM</span><br><span class="line">FROMcte</span><br><span class="line">INNER JOIN </span><br><span class="line">menu m</span><br><span class="line">ON cte.MENU_ID = m.UPPER_MENU_ID</span><br><span class="line">)</span><br><span class="line">SELECT*</span><br><span class="line">FROMmenu M</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2021/10/19/211020SQL-recurisve/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MySQL/MariaDB] Union all 사용법</title>
      <link>https://sowon-dev.github.io/2021/10/18/211019SQL-unionall/</link>
      <guid>https://sowon-dev.github.io/2021/10/18/211019SQL-unionall/</guid>
      <pubDate>Mon, 18 Oct 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;동일한 컬럼을 가지고 있는 두 테이블은 JOIN과 ON절을 이용해서 합칠 수 있다.&lt;br&gt;하지만 동일한 컬럼을 가지고 있지 않은데 검색결과를 함께보고싶다면 고려해봐야할 것이 바로 union all을 사용해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>동일한 컬럼을 가지고 있는 두 테이블은 JOIN과 ON절을 이용해서 합칠 수 있다.<br>하지만 동일한 컬럼을 가지고 있지 않은데 검색결과를 함께보고싶다면 고려해봐야할 것이 바로 union all을 사용해보자.</p><a id="more"></a><ul><li>JOIN: 수직결합</li><li>UNION: 수평결합<ul><li>UNION: 중복데이터 제거 </li><li>UNION ALL: 중복여부와 상관없이 모든 데이터 출력</li></ul></li></ul><p>만약 과일가게테이블과 편의점테이블이 아래처럼 있다고 생각해보자.</p><ul><li><p>과일가게테이블</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">과일가게테이블</span><br><span class="line">+--------+--------+</span><br><span class="line">| 품  명  | 가  격 |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 바나나 |   1500 |</span><br><span class="line">| 딸기   |   2000 |</span><br><span class="line">| 사과   |   2000 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure></li><li><p>편의점테이블</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">편의점테이블</span><br><span class="line">+--------+--------+</span><br><span class="line">| 품  명 | 가  격  |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 바나나 |   1500 |</span><br><span class="line">| 사과   |   2500 |</span><br><span class="line">| 하리보 |   2000 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure></li></ul><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><p>중복데이터 제거한 결과가 출력된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 과일가게테이블 </span><br><span class="line">UNION </span><br><span class="line">SELECT * FROM 편의점테이블;</span><br><span class="line"></span><br><span class="line">// 결과</span><br><span class="line">+--------+--------+</span><br><span class="line">| 품  명 | 가  격  |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 바나나 |   1500 |</span><br><span class="line">| 딸기   |   2000 |</span><br><span class="line">| 사과   |   2000 |</span><br><span class="line">| 바나나 |   1500 |</span><br><span class="line">| 사과   |   2500 |</span><br><span class="line">| 하리보 |   2000 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h2><p>중복여부와 상관없이 모든 데이터 출력된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 과일가게테이블 </span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM 편의점테이블;</span><br><span class="line"></span><br><span class="line">// 결과</span><br><span class="line">+--------+--------+</span><br><span class="line">| 품  명 | 가  격  |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 바나나 |   1500 |</span><br><span class="line">| 딸기   |   2000 |</span><br><span class="line">| 사과   |   2000 |</span><br><span class="line">| 사과   |   2500 |</span><br><span class="line">| 하리보 |   2000 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/MySQL/">MySQL</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://sowon-dev.github.io/2021/10/18/211019SQL-unionall/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[jQuery] 3depth가 있는 ul의 검색기능 구현</title>
      <link>https://sowon-dev.github.io/2021/10/05/211006Jquery-search/</link>
      <guid>https://sowon-dev.github.io/2021/10/05/211006Jquery-search/</guid>
      <pubDate>Tue, 05 Oct 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;제이쿼리를 이용하여 3뎁스 검색기능을 추가하고 싶었다.&lt;br&gt;구글링한 예시들은 죄다 1뎁스여서 내가 원하는대로 만들 수 없었다.&lt;br&gt;내가 원하는 것은 검색어입력시 1뎁스와 2뎁스는 그대로 노출되고 3뎁스에 검색이 적용되어 결과가 노출되는 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>제이쿼리를 이용하여 3뎁스 검색기능을 추가하고 싶었다.<br>구글링한 예시들은 죄다 1뎁스여서 내가 원하는대로 만들 수 없었다.<br>내가 원하는 것은 검색어입력시 1뎁스와 2뎁스는 그대로 노출되고 3뎁스에 검색이 적용되어 결과가 노출되는 것이다.</p><a id="more"></a><h2 id="html코드"><a href="#html코드" class="headerlink" title="html코드"></a>html코드</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"메뉴 검색"</span> <span class="attr">id</span>=<span class="string">"searchInput"</span> <span class="attr">onkeyup</span>=<span class="string">"func.filter();return false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline;"</span>&gt;</span>전체메뉴<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"display: block;"</span> <span class="attr">id</span>=<span class="string">"topLevel"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menu-nm</span>=<span class="string">"댑스1"</span> <span class="attr">data-depth</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>메뉴1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menu-nm</span>=<span class="string">"메뉴1-1"</span> <span class="attr">data-depth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>메뉴1-1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menu-nm</span>=<span class="string">"메뉴1-2"</span> <span class="attr">data-depth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span>&gt;</span>메뉴1-2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menu-nm</span>=<span class="string">"댑스1"</span> <span class="attr">data-depth</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>메뉴2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menu-nm</span>=<span class="string">"메뉴2-1"</span> <span class="attr">data-depth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>메뉴2-1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menu-nm</span>=<span class="string">"메뉴2-2"</span> <span class="attr">data-depth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>메뉴2-2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="js코드"><a href="#js코드" class="headerlink" title="js코드"></a>js코드</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  func = &#123;</span><br><span class="line">   filter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">"#top ul"</span>).slideDown(<span class="number">100</span>);</span><br><span class="line">          <span class="keyword">if</span>($(<span class="string">'#searchInput'</span>).val()==<span class="string">""</span>)</span><br><span class="line">            $(<span class="string">"#topLevel ul li"</span>).css(<span class="string">'display'</span>,<span class="string">''</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">"#topLevel ul li"</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</span><br><span class="line">            $(<span class="string">"#topLevel ul li[data-menu-nm*='"</span>+$(<span class="string">'#searchInput'</span>).val()+<span class="string">"']"</span>).css(<span class="string">'display'</span>,<span class="string">''</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>result 탭에서 메뉴검색 인풋에 <code>2-1</code>을 검색하면 전체메뉴, 메뉴1, 메뉴2 그리고 메뉴2-1가 잘 출력되는 것을 확인할 수 있다.</p><p class="codepen" data-height="600" data-default-tab="html,result" data-slug-hash="MWoMdxZ" data-user="gracehopperdev" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/gracehopperdev/pen/MWoMdxZ">  </a> by sowon-dev (<a href="https://codepen.io/gracehopperdev">@gracehopperdev</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><p><br><br><br></p><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>제이쿼리로 선택자와 그 하위 태그 선택을 하는데 있어 많이 헷갈렸다.<br>구글링하다가 에라이 던질뻔했다.<br>그냥 get방식으로 where 조건절 걸어서 db 다시 다녀올까 했지만 이미 list뿌리면서 가져온 데이터인데 굳이 db까지 다시 다녀오는 건 자원낭비라는 생각이 들었다.<br>어떻게든 제이쿼리로 끝내고싶어서 열심히 구글링하였다.<br>포기하지않고 끝까지 해낸 나자신 칭찬해!<br>이 경험으로 선택자에 대해 깊이 알 수 있었다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/jQuery/">jQuery</category>
      
      
      <comments>https://sowon-dev.github.io/2021/10/05/211006Jquery-search/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA/MariaDB]Entity에 복합키와 FK 제약조건 넣기</title>
      <link>https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/</link>
      <guid>https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/</guid>
      <pubDate>Wed, 15 Sep 2021 21:58:53 GMT</pubDate>
      
      <description>&lt;p&gt;JPA에서 복합키에서 식별관계를 매핑 즉, 복합키를 설정한 뒤 복합키 중 하나는 FK조건을 걸어보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JPA에서 복합키에서 식별관계를 매핑 즉, 복합키를 설정한 뒤 복합키 중 하나는 FK조건을 걸어보자.</p><a id="more"></a><p>만들고 싶은 테이블은 아래와 같이 3개이다<br><img src="/img/210915commoncodegrup3.PNG" alt=""></p><h2 id="1-reviewEntity-생성"><a href="#1-reviewEntity-생성" class="headerlink" title="1 reviewEntity 생성"></a>1 reviewEntity 생성</h2><p>먼저 중심이 되는 review테이블을 생성한다.<br>날짜는 다른 곳에서 자주 사용하므로 TimeEntity를 따로 생성했다.</p><ul><li>ReviewEntity.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"review"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="comment">// XXX 자바빈즈 패턴</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED) <span class="meta">@AllArgsConstructor</span> <span class="comment">// XXX 생성자 패컨</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewEntity</span> <span class="keyword">extends</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">// 게시글 번호</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"shots"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> shots;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"shot_date"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalDate shotDate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"vaccine_type_code"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String vaccineTypeCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"content"</span>) <span class="comment">// 접종후기</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TimeEntity.java<br>@MappedSuperclass는 테이블로 매핑하지 않고 자식 entity에게 매핑정보를 상속하는 에노테이션이다.<br>@EntityListeners(AuditingEntityListener.class)은 JPA에게 해당 Entity는 auditing기능을 사용한다고 알리는 에노테이션이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TimeEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_at"</span>, updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createAt; <span class="comment">//게시글 작성일</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_at"</span>)</span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateAt; <span class="comment">//게시글 수정일</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="2-SymptomEntity-생성"><a href="#2-SymptomEntity-생성" class="headerlink" title="2 SymptomEntity 생성"></a>2 SymptomEntity 생성</h2><ul><li>SymptomEntity.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"symptom"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED) <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@IdClass</span>(SymptomId<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SymptomEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// XXX 연관관계의 주인은 FK(외래키)가 명시된 Entity클래스로 설정</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"review_id"</span>)</span><br><span class="line"><span class="keyword">private</span> ReviewEntity reviewId; <span class="comment">//게시글 번호</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"symptom_code"</span>)</span><br><span class="line"><span class="keyword">private</span> String symptomCode; <span class="comment">//증상코드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h3 id="1-외래키"><a href="#1-외래키" class="headerlink" title="1 외래키"></a>1 외래키</h3><p>reviewEntity와 SymptomEntity는 1대다의 관계이다.<br>FK로 연관관계를 맺을때는 누가 주인이 될지를 고민해봐야한다.<br>해당 고민을 도와줄 포스팅은 <a href="https://siyoon210.tistory.com/27">siyoon210님 - JPA Entity간의 연관관계(방향) 설정하기</a>를 참조하면 된다.</p><p>나는 FK가 걸리는 테이블을 주인으로 삼았다. 그래야 연관관계의 주인이 되어 오류없이 수정 및 삭제가 가능하기 때문이다. </p><ol><li>@ManyToOne: symptom클래스와 review클래스는 다 대 1의 관계에 해당하는 어노테이션을 달아주었다.</li><li>@JoinColumn(name=”review_id”): FK로 매핑을 해주는 어노테이션이다. name속성의 구성은 <code>테이블명_컬럼명</code>이다. 즉, 여기선 review테이블의 id를 FK로 삼겠다는 의미이다.</li></ol><p><br><br><br></p><h3 id="2-복합키"><a href="#2-복합키" class="headerlink" title="2 복합키"></a>2 복합키</h3><ol><li>@IdClass(SymptomId.class): 복합키를 설정하는 어노테이션이다. 복합키를 매핑하기 위해 식별자 클래스(여기선 SymptomId.class)를 별도로 만들어야 한다.이는 아래에서 자세히 설명하겠다.</li><li>복합키를 설정하는 곳에 동일하게 @Id를 붙여준다. 나는 모든 필드가 복합키를 주고싶으므로 둘 다 @Id 를 달아줬다.</li></ol><p><br><br><br></p><h2 id="3-SymptomId-생성"><a href="#3-SymptomId-생성" class="headerlink" title="3 SymptomId 생성"></a>3 SymptomId 생성</h2><p>복합키를 매핑하기 위해 식별자 클래스를 별도로 만들어야 한다.</p><ul><li>식별자 클래스의 필수 조건 5가지<ol><li>필드명 일치</li><li>Serializable 인터페이스구현</li><li>equals, hashcode 구현</li><li>기본생성자 필요</li><li>식별자 클래스는 public이어야함</li></ol></li></ul><p>이제 식별자 클래스 코드를 보자.</p><ul><li>SymptomId.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymptomId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long reviewId;</span><br><span class="line"><span class="keyword">private</span> String symptomCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="여담"><a href="#여담" class="headerlink" title="여담"></a>여담</h2><p>이 구조를 파악하기위해 꼬박 하루가 걸렸다. 특히 FK키 에러가 발생해서 2시간이나 써버렸다. 해당 내용은 <a href="https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/">[JPA: errno: 150 Foreign key constraint is incorrectly formed 해결방법]</a> 포스팅에 상세히 적어두었다.<br>그냥 바로 DDL구문으로 생성했다면 훨씬 빨랐겠지만 JPA만을 이용하여 생성하려니 여간 답답한게 아니었다. 기본으로 알아야하는 지식들도 많아서 시간이 오래걸렸다.<br>시간이 오래 걸린만큼 기초가 확실해진 느낌이다.<br>가장 큰 힘이 된 것은 바로 구글링도 포스팅도 아닌 바로 책 <a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9788960777330">김영한지음 - 자바 ORM 표준 JPA 프로그래밍</a>이었다.<br>처음에는 무슨소리인지 도저히 모르겠다😵‍💫였는데 이제는 확실히 알겠다.<br>역시 하다보면 된다.<br>이런게 학습의 기쁨일까?! 알고나니 JPA가 더 재밌다😁<br>더이상 복합키와 FK키 두렵지 않다!</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA/MariaDB]errno: 150 Foreign key constraint is incorrectly formed 해결방법</title>
      <link>https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/</link>
      <guid>https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/</guid>
      <pubDate>Wed, 15 Sep 2021 21:16:32 GMT</pubDate>
      
      <description>&lt;p&gt;MariaDB와 JPA로 복합키이면서 그 중 하나는 FK인 테이블을 만들고 싶었는데 계속해서 FK 에러가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MariaDB와 JPA로 복합키이면서 그 중 하나는 FK인 테이블을 만들고 싶었는데 계속해서 FK 에러가 발생했다.</p><a id="more"></a><p><img src="/img/210915commoncodegrup3.PNG" alt=""></p><p>위 ERD와 같이 symptom테이블을 만들고 싶었다.<br>모든 키가 복합키이면서 review_id키는 FK 제약조건을 걸고싶었다.<br>create해서 테이블은 잘 생성되지만 FK를 걸다가 에러를 발생했다.</p><ul><li>에러코드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: <span class="function">alter table symptom add constraint FKct400cemwq2cjh9mdfusfieko foreign <span class="title">key</span> <span class="params">(review_id)</span> references <span class="title">review</span> <span class="params">(id)</span></span></span><br><span class="line"><span class="function">GenerationTarget encountered exception accepting command : Error executing DDL "alter table symptom add constraint FKct400cemwq2cjh9mdfusfieko foreign <span class="title">key</span> <span class="params">(review_id)</span> references <span class="title">review</span> <span class="params">(id)</span>" via JDBC Statement</span></span><br><span class="line"><span class="function">org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "alter table symptom add constraint FKct400cemwq2cjh9mdfusfieko foreign <span class="title">key</span> <span class="params">(review_id)</span> references <span class="title">review</span> <span class="params">(id)</span>" via JDBC Statement</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">(중략)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Caused by: java.sql.SQLTransientConnectionException: <span class="params">(conn=<span class="number">115300</span>)</span> Can't create table `boostshot`.`symptom` <span class="params">(errno: <span class="number">150</span> <span class="string">"Foreign key constraint is incorrectly formed"</span>)</span></span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="에러-150을-해결하는-방법-4가지"><a href="#에러-150을-해결하는-방법-4가지" class="headerlink" title="에러 150을 해결하는 방법 4가지"></a>에러 150을 해결하는 방법 4가지</h2><p>아래 4가지 조건에 부합해야한다.</p><ol><li>데이터 타입이 일치해야 함</li><li>NOT NULL or NULL 여부가 동일해야 함</li><li>참조받는 데이터가 unique key / primary key 이어야함</li><li>두 테이블의 charset 이 같아야함</li></ol><p>참고 포스팅 : <a href="https://box0830.tistory.com/211">박스님 - errno: 150 “Foreign key constraint is incorrectly formed</a></p><p><br><br><br></p><h2 id="기존-테이블"><a href="#기존-테이블" class="headerlink" title="기존 테이블"></a>기존 테이블</h2><p><img src="/img/210916jpafkerror1.PNG" alt=""></p><p>위 4가지 조건에서 1번과 4번조건이 부합하지않는다.</p><ol><li>데이터 타입이 BIGINT와 VARCHAR임</li><li>조합이 UTF-8 한쪽만 설정되어 있음</li></ol><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>복합키를 위해 생성한 클래스에서 데이터 타입이 잘못 지정되어있었다.<br>String타입을 Long타입으로 변경하여 일치 시켜주니 정상 작동했다!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymptomId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 기존 </span></span><br><span class="line"><span class="comment">// private String reviewId; </span></span><br><span class="line"><span class="comment">// 변경: String -&gt; Long</span></span><br><span class="line"><span class="keyword">private</span> Long reviewId;</span><br><span class="line"><span class="keyword">private</span> String symptomCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>정상작동한 테이블 모습</li></ul><p><img src="/img/210916jpafkerror2.PNG" alt=""></p><p>여담이지만 이 별것도 아닌 에러를 가지고 2시간이나쓰고 그것도 모자라서 과장님께 한번만 도와달라고 부탁까지했다.<br>과장님은 단 5분만에 데이터 타입이 다른 것을 찾아주셨다…그저 빛🌞<br>역시 물어보길 잘했다. 완벽하게 이해했기때문에 이 에러는 다시는 만나지 않을 것 같다.</p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>에러부분 말고 전체 코드는 <a href="https://sowon-dev.github.io/2021/09/15/210916Jpa-entityPKFK/">JPA: Entity에 복합키와 FK 제약조건 넣기</a> 포스팅에서 확인할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/%EC%98%A4%EB%A5%98%EC%9D%BC%EC%A7%80/">오류일지</category>
      
      
      <comments>https://sowon-dev.github.io/2021/09/15/210916JPA-FKincorrectlyformed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[DB설계]공통코드는 어떻게 만들까?(예시)</title>
      <link>https://sowon-dev.github.io/2021/09/14/210915DB-commonCodeGrup/</link>
      <guid>https://sowon-dev.github.io/2021/09/14/210915DB-commonCodeGrup/</guid>
      <pubDate>Tue, 14 Sep 2021 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;회사에서 스터디를 진행하고있다. 스터디속에 부장님의 특급 강의도 함께 있어서 정말 많이 배우고있다.&lt;br&gt;스터디 넘 재밌다!!!&lt;br&gt;스터디동안에 각자 만들 사이트를 하나씩 정했다. 나는 백신후기웹사이트!!&lt;br&gt;DB설계를 보여드리고 피드백은 받았다.  &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>회사에서 스터디를 진행하고있다. 스터디속에 부장님의 특급 강의도 함께 있어서 정말 많이 배우고있다.<br>스터디 넘 재밌다!!!<br>스터디동안에 각자 만들 사이트를 하나씩 정했다. 나는 백신후기웹사이트!!<br>DB설계를 보여드리고 피드백은 받았다.  </p><a id="more"></a><h2 id="내가-작성한-리뷰테이블"><a href="#내가-작성한-리뷰테이블" class="headerlink" title="내가 작성한 리뷰테이블"></a>내가 작성한 리뷰테이블</h2><p><img src="/img/210915commoncodegrup1.PNG" alt=""></p><p>내가 처음 작성한 리뷰테이블이다.<br>백신종류와 6가지정도 되는 증상이 함께 들어가 있다.</p><ul><li>백신종류</li></ul><table><thead><tr><th align="center">백신종류</th><th align="center">값</th></tr></thead><tbody><tr><td align="center">AZ</td><td align="center">아스트라제네카</td></tr><tr><td align="center">DO</td><td align="center">모더나</td></tr><tr><td align="center">PH</td><td align="center">화이자</td></tr><tr><td align="center">JA</td><td align="center">얀센</td></tr></tbody></table><ul><li>증상(강도보단 유무를 받기로 함)<ol><li>발열유무</li><li>통증(근육통,두통,몸살)유무</li><li>기침유무</li><li>부정출혈유무</li><li>오한유무</li><li>설사유무</li></ol></li></ul><p>이렇게 내가 짠 프로그램을 설명드리니 부장님은 아래와 같은 피드백을 주셨다.</p><blockquote><p>💬 부장님: 공통코드로 만들어보세요</p></blockquote><p><br><br><br></p><h2 id="공통코드"><a href="#공통코드" class="headerlink" title="공통코드?"></a>공통코드?</h2><p>공통코드란 데이터 속성에 사용되는 공통적인 값을 코드로 표현하는 것이다.<br>공통코드를 사용하면 좋은 장점은 무엇일까?</p><ul><li>공통코드 장점<ol><li>데이터 유연성: 현재 4개의 백신종류에서 추가 승인 받은 백신이 생겼다면? 공통코드에서는 코드 하나만 추가하면 끝이기때문에 유연성이 높다. </li><li>데이터 명칭의 일관성: <code>아스트라제네카</code>를 누군가는 <code>아스트라 제네카</code>라고 띄어 쓸 수 도 있다. 코드를 통해 명칭의 일관성을 유지하여 데이터 정합성을 높일 수 있다.</li></ol></li></ul><p><br><br><br></p><h2 id="내가-작성한-공통코드-테이블"><a href="#내가-작성한-공통코드-테이블" class="headerlink" title="내가 작성한 공통코드 테이블"></a>내가 작성한 공통코드 테이블</h2><p><img src="/img/210915commoncodegrup2.PNG" alt=""></p><p>열심히 구글링해서 아래와 같이 공통코드를 구성해보았다. 아래와 같은 궁금증이 생겼다.</p><ul><li>의문점 <ol><li>백신타입을 공통코드로 써야하는 이유가 뭘까? 어차피 한 컬럼에 한 개의 값만 들어가는데..굳이..</li><li>공통코드를 사용한다면 증상이 1개 이상 있는 사람은 어떻게 db에 넣지? -&gt; 리뷰테이블에서 증상부분들을 하나로 합치고 Varchar값으로 콤마로 구분해서 넣을까? -&gt; 그럼 어떻게 보여주지? 보여줄땐 split해서 보여주면 될까?</li></ol></li></ul><p>고민하다가 팀장님께 물어봤는데 바로 해결책을 알려주셨다.<br>팀장님은 역시 천재…빛과 소금😀</p><p><br><br><br></p><h2 id="😎-의문점에-대한-팀장님의-명쾌한-조언"><a href="#😎-의문점에-대한-팀장님의-명쾌한-조언" class="headerlink" title="😎 의문점에 대한 팀장님의 명쾌한 조언"></a>😎 의문점에 대한 팀장님의 명쾌한 조언</h2><blockquote><p>💬 김팀장님:<br>테이블은 성격이 다른 컬럼은 다른 테이블로 나누어야합니다.<br>현재 리뷰테이블은 성격이 다른 컬럼들이 한 곳에 모여있어서 여러 의문점이 생기신 것 같아요.<br>컬럼의 성격에 따라 분류해보세요<br>증상은 성격이 다르니까 다른 테이블로 뺀 뒤 reviewId와 함께 PK를 걸면 좋을거예요. 일대다의 관계.<br>공통코드테이블을 위처럼 작성하면 명칭이 헷갈릴 수 있어요. 코드그룹, 코드, 코드명, 사용여부, 정렬순번을 기본적으로 사용하는 게 어때요?</p></blockquote><p><br><br><br></p><h2 id="공통코드-테이블"><a href="#공통코드-테이블" class="headerlink" title="공통코드 테이블"></a>공통코드 테이블</h2><p>내가 고민했던 모든 것은 테이블을 다시 설계하면 다 해결되는 문제였다!<br>팀장님의 조언을 토대로 테이블을 다시 나누었다.</p><p><img src="/img/210915commoncodegrup3.PNG" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/DB%EC%84%A4%EA%B3%84/">DB설계</category>
      
      
      <comments>https://sowon-dev.github.io/2021/09/14/210915DB-commonCodeGrup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JPA] @Autowired보다 생성자 주입을 사용해야하는 이유</title>
      <link>https://sowon-dev.github.io/2021/09/09/210910Jpa-autowiredVSconstructorInjection/</link>
      <guid>https://sowon-dev.github.io/2021/09/09/210910Jpa-autowiredVSconstructorInjection/</guid>
      <pubDate>Thu, 09 Sep 2021 16:25:47 GMT</pubDate>
      
      <description>&lt;p&gt;MVC패턴 스프링프로젝트에서 Controller에서 Service를 의존성 주입할때 대부분 @Autowired로 필드주입을 한다.&lt;br&gt;하지만 JPA를 사용하는 경우 @Autowired 필드 주입보다는 생성자 주입 사용을 권장한다.&lt;br&gt;그 이유가 무엇인지 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MVC패턴 스프링프로젝트에서 Controller에서 Service를 의존성 주입할때 대부분 @Autowired로 필드주입을 한다.<br>하지만 JPA를 사용하는 경우 @Autowired 필드 주입보다는 생성자 주입 사용을 권장한다.<br>그 이유가 무엇인지 알아보자.</p><a id="more"></a><h2 id="필드-주입-Field-Injection-이란"><a href="#필드-주입-Field-Injection-이란" class="headerlink" title="필드 주입(Field Injection)이란?"></a>필드 주입(Field Injection)이란?</h2><p>사용법이 매우 간단하여 많은 개발자들이 사용한다. 필드에 @Autowired만 붙여주면 끝!<br>해당 필드에 자동으로 의존성이 주입된다.</p><ul><li>ApiController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line">NoticeService noticeService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="생성자-주입-Constructor-Injection-이란"><a href="#생성자-주입-Constructor-Injection-이란" class="headerlink" title="생성자 주입(Constructor Injection)이란?"></a>생성자 주입(Constructor Injection)이란?</h2><p>생성자로 의존성을 주입한다. 방법은 총 두가지이다.</p><h3 id="첫번째-방법-정석"><a href="#첫번째-방법-정석" class="headerlink" title="첫번째 방법: 정석"></a>첫번째 방법: 정석</h3><ul><li>ApiController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line">NoticeRepository noticeRepository;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiController</span><span class="params">(NoticeRepository noticeRepository)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.noticeRepository = noticeRepository;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h3 id="두번째-방법-RequiredArgsConstructor-final사용"><a href="#두번째-방법-RequiredArgsConstructor-final사용" class="headerlink" title="두번째 방법: @RequiredArgsConstructor + final사용"></a>두번째 방법: @RequiredArgsConstructor + final사용</h3><p>위의 방법을 쉽게 할 수 있는 스프링프레임워크의 어노테이션이 있다!<br>바로 @RequiredArgsConstructor를 넣은 뒤 필드를 final로 선언해주면 된다.</p><ul><li>ApiController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NoticeRepository noticeRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h2 id="스프링팀에서-쉬운-필드-주입보다-생성자-주입은-권장하는-이유는"><a href="#스프링팀에서-쉬운-필드-주입보다-생성자-주입은-권장하는-이유는" class="headerlink" title="스프링팀에서 쉬운 필드 주입보다 생성자 주입은 권장하는 이유는?"></a>스프링팀에서 쉬운 필드 주입보다 생성자 주입은 권장하는 이유는?</h2><ol><li>순환참조 방지해서 애플리케이션이 뻗어버리는 걸 방지</li><li>final선언이 가능해서 불변성 확보</li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://sowon-dev.github.io/categories/Spring/JPA/">JPA</category>
      
      
      
      <comments>https://sowon-dev.github.io/2021/09/09/210910Jpa-autowiredVSconstructorInjection/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
