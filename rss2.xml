<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>야망찬 개발자의 블로그</title>
    <link>https://sowon-dev.github.io/</link>
    
    <atom:link href="https://sowon-dev.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 08 Oct 2020 05:06:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[ITWILL : JSP] JSP전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/16/jspList/</link>
      <guid>https://sowon-dev.github.io/2020/11/16/jspList/</guid>
      <pubDate>Mon, 16 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌷프로그래밍기초&quot;&gt;&lt;a href=&quot;#🌷프로그래밍기초&quot; class=&quot;headerlink&quot; title=&quot;🌷프로그래밍기초&quot;&gt;&lt;/a&gt;🌷프로그래밍기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/05/28/200528jspi/&quot;&gt;프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;🌷JS기초&quot;&gt;&lt;a href=&quot;#🌷JS기초&quot; class=&quot;headerlink&quot; title=&quot;🌷JS기초&quot;&gt;&lt;/a&gt;🌷JS기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200601jspi/&quot;&gt;JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌷프로그래밍기초"><a href="#🌷프로그래밍기초" class="headerlink" title="🌷프로그래밍기초"></a>🌷프로그래밍기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200528jspi/">프로그래밍기초이론, 하드웨어 vs 소프트웨어 vs 펌웨어, 기억장치, 클라이언트 vs 서버</a></li></ol><h2 id="🌷JS기초"><a href="#🌷JS기초" class="headerlink" title="🌷JS기초"></a>🌷JS기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200601jspi/">JS기초이론, Compile VS Interprete, 변수, js라이브러리,객체타입</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/06/02/200602jspi/">JS를 문서에 나타내는 3가지방법, undefined VS null, 백의자리 Math.floor(), 복합대입연산자로table생성, A++과 ++A차이점, ==과===차이점, 논리표</a></li><li><a href="https://sowon-dev.github.io/2020/06/03/200603jspi/">JAVA SE/EE/ME 차이점, JAVA EE 설정. Tomcat 설치및설정, 이클립스 단축키</a></li><li><a href="https://sowon-dev.github.io/2020/06/04/200604jspi/">아이디와 비번입력, 새로고침location.reload(), 주석한번에 단축키, switch문 출력문 한줄리팩토링</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200609jspi/">반복문 for 순서 자세히, 개발자 도구로 디버깅, 기본 반복문암기, for문과 if문의 자리바꿈에 따른 변화, 반복문의 전위연산 VS 후위연산, do while문</a></li><li><a href="https://sowon-dev.github.io/2020/06/11/200611jspi/">무한반복문, 보조제어(break와continue)문, 익명함수, 재귀함수, 지역변수를 전역에서 사용하는 방법, 내장함수</a></li></ol><h2 id="🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM"><a href="#🌷JS기초-객체-내장객체-브라우저객체모델-BOM-문서객체모델-DOM" class="headerlink" title="🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))"></a>🌷JS기초 : 객체 (내장객체, 브라우저객체모델(BOM), 문서객체모델(DOM))</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi/">Object객체 전체개념, tv채널객체함수, new를 쓰고 안쓰고의 차이</a></li><li><a href="https://sowon-dev.github.io/2020/06/12/200612jspi2/">Date객체 자세히, 디데이구하는 함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi/">Array객체 (for ~ in구문, join(), reverse(), sort())</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi2/">String객체, 짤라오는 함수 4종류 .substring(), slice(), substr(), charAt(), .indexOf()와 .lastIndexOf()차이, .concat(), .split(), ID자릿수를 제한하는 이메일 유효성검사</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200615jspi3/">이벤트리스너와 이벤트핸들러, 브라우저객체모델, window객체전체</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi/">브라우저객체모델안의 Document객체 (bgColor와 fgColor사용,  img태그에 접근하여 속성 사용, 랜덤 img 출력하기)</a></li><li><a href="https://sowon-dev.github.io/2020/06/16/200616jspi2/">브라우저객체모델안의 location객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi/">브라우저객체모델안의 history객체, screen객체, navigator객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/17/200617jspi2/">문서 객체 모델안의 form태그, 페이지이동방식(get과 post), focus() vs blur() vs select()</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200618jspi/">문서 객체 모델안의 if문에 return;의 역할, radio태그, checkbox태그</a></li></ol><h2 id="🌷JS실습"><a href="#🌷JS실습" class="headerlink" title="🌷JS실습"></a>🌷JS실습</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi/">js로 간단한 회원가입페이지 작성하기</a></li></ol><h2 id="🌷JSP기초"><a href="#🌷JSP기초" class="headerlink" title="🌷JSP기초"></a>🌷JSP기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200622jspi2/">JSP 첫 프로젝트 톰캣과 연결</a></li><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi/">JSP 주석과 JSP directive, JSP 스크립트 요소</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi/">JAVA DATATYPE, Integer.parseInt(문자열), 동일한 파라미터의 값을 가지는 데이터가 여러개있을 경우 변수로 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi2/">커넥션풀(Connection Pool)</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi/">Wrapper클래스, 오토 박싱과 오토 언박싱, hierarchy확인법</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-2/">자바 클래스(객체) vs 추상클래스 vs 인터페이스</a></li></ol><h2 id="🌷JSP기초-내장객체-중-영역객체"><a href="#🌷JSP기초-내장객체-중-영역객체" class="headerlink" title="🌷JSP기초 : 내장객체 중 영역객체"></a>🌷JSP기초 : 내장객체 중 영역객체</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/23/200623jspi2/">내장객체</a></li><li><a href="https://sowon-dev.github.io/2020/06/24/200624jspi2/">영역객체scope</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi/">영역객체 안에서 사용하는 속성(Attribute), 링크이동 방법별 전달가능한 영역(scope)</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200625jspi2/">JSP 디렉티브(directive) 중 include VS 액션태그 include, jspf확장자 파일</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi/">세션(Session)</a></li><li><a href="https://sowon-dev.github.io/2020/06/29/200629jspi2/">==과 str.equals(str2) 차이, 객체와 클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200701jspi/">쿠키(Cookie)</a></li></ol><h2 id="🌷MySQL"><a href="#🌷MySQL" class="headerlink" title="🌷MySQL"></a>🌷MySQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200701jspi2/">MYSQL 설치, MYSQL환경변수설정, cmd에서 명령어 잘못입력해서 mysql못빠져나갈때</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi/">MYSQL 접속순서, DB명령어, 테이블명령어, 데이터명령어</a></li><li><a href="https://sowon-dev.github.io/2020/07/01/200702jspi2/">MySQL 한글깨짐현상 두가지 해결방법 : cmd와 Workbench, 이클립스와 MYSQL연결</a></li></ol><h2 id="🌷JDBC"><a href="#🌷JDBC" class="headerlink" title="🌷JDBC"></a>🌷JDBC</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi/">JDBC활용 - import쓰는 이유, form페이지로 받은 데이터를 DB에 insert하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/03/200703jspi2/">JDBC활용 - JAVA에서 DB 정보 지우기 2가지방법</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi/">JDBC활용 - DB에서 고객정보를 불러와서 HTML테이블에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/07/06/200706jspi2/">JDBC활용 - TIMESTAMP주의점, JDBC에서 데이터처리</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707jspi/">JDBC활용 - 회원정보수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/08/200708jspi/">JDBC활용 - 회원목록출력하는데 관리자는 빼고 출력하기, 자바 에러 두종류</a></li></ol><h2 id="🌷JAVABEAN"><a href="#🌷JAVABEAN" class="headerlink" title="🌷JAVABEAN"></a>🌷JAVABEAN</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi/">Javabean : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200709jspi2/">자바빈 실습1 : 회원가입페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi/">자바빈 실습2 : 로그인 및 로그아웃페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/14/200714jspi2/">자바빈 실습3 : 회원정보조회 및 수정페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi/">자바빈 실습4 : web.xml, 회원정보삭제페이지</a></li><li><a href="https://sowon-dev.github.io/2020/07/15/200715jspi3/">자바빈 실습5 : 관리자만 확인할 수 있는 회원목록페이지만들기</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi2/">자바빈 실습6 : 게시판만들기(글쓰기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/21/200721jspi/">자바빈 실습7 : 게시판만들기(글 총 갯수, 글목록, 페이징처리)</a></li><li><a href="https://sowon-dev.github.io/2020/07/22/200722jspi/">자바빈 실습8 : 게시판만들기(글내용보기, 글수정하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi/">자바빈 실습9 : 게시판만들기(글삭제하기)</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200723jspi2/">자바빈 실습10 : 게시판만들기(답글쓰기)</a></li></ol><h2 id="🌷파일업로드와-다운로드-기능-구현"><a href="#🌷파일업로드와-다운로드-기능-구현" class="headerlink" title="🌷파일업로드와 다운로드 기능 구현"></a>🌷파일업로드와 다운로드 기능 구현</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi/">자바빈 실습11 : MultipartRequest클래스</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi2/">자바빈 실습12 : 파일업로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/27/200727jspi3/">자바빈 실습13 : 파일다운로드</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200728jspi/">자바빈 실습14 : ServletContext 사용하여 파일업로드와 다운로드</a></li></ol><h2 id="🌷자료구조"><a href="#🌷자료구조" class="headerlink" title="🌷자료구조"></a>🌷자료구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/16/200716jspi2/">자료구조1 : Collections Framwork(Set계열, List계열)</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200720jspi/">자료구조2 : Stack클래스, Queue인터페이스, Map인터페이스</a></li></ol><h2 id="🌷model1-홈페이지만들기"><a href="#🌷model1-홈페이지만들기" class="headerlink" title="🌷model1 홈페이지만들기"></a>🌷model1 홈페이지만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/29/200729jspi/">홈페이지만들기1 : 프로젝트 시작 설정 및 자바빈생성과 DB연결</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi/">홈페이지만들기2 : 아이디중복체크 포함한 회원가입기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/07/30/200730jspi2/">홈페이지만들기3 : 로그인/로그아웃 기능 구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200803jspi/">홈페이지만들기4 : 게시판글쓰기구현</a></li><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi/">홈페이지만들기5 : 게시판에 글목록표시구현</a></li></ol><h2 id="🌷JQuery"><a href="#🌷JQuery" class="headerlink" title="🌷JQuery"></a>🌷JQuery</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/04/200804jspi2/">JQuery1 : JQuery 사용설정, 선택자, css()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi/">JQuery2 : attr(), html()와 text(), append()와 prepend()</a></li><li><a href="https://sowon-dev.github.io/2020/08/05/200805jspi2/">JQuery3 : setInterval()와 clearInteval(), CDATA VS PCDATA</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi/">JQuery4 : click(), bind(), event.preventDefault(), unbind(), keyup(), 유효성체크(자바스크립트 vs 제이쿼리)</a></li><li><a href="https://sowon-dev.github.io/2020/08/06/200806jspi2/">JQuery5 : 유효성체크(자바스크립트 vs 제이쿼리), 제이쿼리 기본효과</a></li><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi/">JQuery6 : innerfade 라이브러리, animate(속성, 속도, 콜백함수)</a></li></ol><h2 id="🌷Ajax"><a href="#🌷Ajax" class="headerlink" title="🌷Ajax"></a>🌷Ajax</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/07/200807jspi2/">Ajax : Ajax특징, XMLHttpRequest클래스, txt 페이지 처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi/">Ajax : xml처리, json처리</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200810jspi2/">Ajax : DB데이터를 불러와서 json형태로 변경하여 출력하기</a></li></ol><h2 id="🌷JSTL과-EL"><a href="#🌷JSTL과-EL" class="headerlink" title="🌷JSTL과 EL"></a>🌷JSTL과 EL</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi/">JSTL과 EL : JSTL과 EL개념, CORE 라이브러리(out)</a></li><li><a href="https://sowon-dev.github.io/2020/08/11/200811jspi2/">JSTL과 EL : CORE 라이브러리(set)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi/">JSTL과 EL : CORE 라이브러리(if, forEach, forTokens, choose)</a></li><li><a href="https://sowon-dev.github.io/2020/08/12/200812jspi2/">JSTL과 EL : fmt 라이브러리(formatDate, formatNumber)</a></li><li><a href="https://sowon-dev.github.io/2020/08/13/200813jspi/">JSTL과 EL : EL태그로 동일한 name의 파라미터를 EL태그로 쉽게 가져오기</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi/">JSTL과 EL : EL태그 연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/14/200814jspi2/">EL과 Servlet : RequestDispatcher.forward 로 페이지 이동 후 데이터별 출력방법</a></li></ol><h2 id="🌷model2-MVC패턴-쇼핑몰만들기"><a href="#🌷model2-MVC패턴-쇼핑몰만들기" class="headerlink" title="🌷model2(MVC패턴) 쇼핑몰만들기"></a>🌷model2(MVC패턴) 쇼핑몰만들기</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi/">Servlet : Servlet용어정리, model1과 model2(MVC구조) 개발방식 비교</a></li></ol><h3 id="쇼핑몰회원관리"><a href="#쇼핑몰회원관리" class="headerlink" title="쇼핑몰회원관리"></a>쇼핑몰회원관리</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/17/200817jspi2/">Servlet회원관리1: 기본설정 및 가상주소생성</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi/">Servlet회원관리2: 회원가입</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi2/">Servlet회원관리3: 로그인</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200819jspi3/">Servlet회원관리4: 메인페이지와 로그아웃</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi/">Servlet회원관리5: 회원정보조회</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200827jspi2/">Servlet회원관리6: 회원탈퇴</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi/">Servlet회원관리7: 회원전체목록조회(관리자기능)</a></li></ol><h3 id="게시판"><a href="#게시판" class="headerlink" title="게시판"></a>게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/">Servlet게시판1: 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi/">Servlet게시판2: 게시판 글쓰기</a></li><li><a href="https://sowon-dev.github.io/2020/09/01/200901jspi2/">Servlet게시판3: 게시판 리스트·게시글전체목록·페이징처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi/">Servlet게시판4: 글 내용보기</a></li><li><a href="https://sowon-dev.github.io/2020/09/03/200903jspi2/">Servlet게시판5: 글 수정하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi/">Servlet게시판6: 글 삭제하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi2/">Servlet게시판7: 답글하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi3/">Servlet게시판8: 파일업로드·파일보기</a></li></ol><h3 id="관리자전용-상품목록과-등록게시판"><a href="#관리자전용-상품목록과-등록게시판" class="headerlink" title="관리자전용 상품목록과 등록게시판"></a>관리자전용 상품목록과 등록게시판</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi4/">Servlet관리자전용상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/07/200907jspi5/">Servlet관리자전용상품2 : 상품등록</a></li><li><a href="https://sowon-dev.github.io/2020/09/08/200908jspi/">Servlet관리자전용상품3 : 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi/">Servlet관리자전용상품4 : 상품수정·인기상품처리</a></li><li><a href="https://sowon-dev.github.io/2020/09/09/200909jspi2/">Servlet관리자전용상품5 : 상품삭제</a></li></ol><h3 id="일반유저용-상품목록"><a href="#일반유저용-상품목록" class="headerlink" title="일반유저용 상품목록"></a>일반유저용 상품목록</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi/">Servlet일반상품1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/10/200910jspi2/">Servlet일반상품2 : 카테고리별 상품목록·상품리스트</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi/">Servlet일반상품3 : 상품상세정보</a></li></ol><h3 id="장바구니"><a href="#장바구니" class="headerlink" title="장바구니"></a>장바구니</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi2/">Servlet장바구니1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi3basket/">Servlet장바구니2 : 장바구니에 담기</a></li><li><a href="https://sowon-dev.github.io/2020/09/15/200915jspi4/">Servlet장바구니3 : 장바구니리스트, 장바구니에서 상품삭제</a></li></ol><h3 id="구매하기"><a href="#구매하기" class="headerlink" title="구매하기"></a>구매하기</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/16/200916jspi/">Servlet구매하기1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/17/200917jspi/">Servlet구매하기2 : 구매하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi/">Servlet구매하기3 : 주문목록</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922jspi2/">Servlet구매하기4 : 주문상세정보페이지</a></li></ol><h3 id="관리자용-주문리스트"><a href="#관리자용-주문리스트" class="headerlink" title="관리자용 주문리스트"></a>관리자용 주문리스트</h3><ol><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi/">Servlet관리자용주문목록1 : 기초</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923jspi-1/">Servlet관리자용주문목록2 : 고객주문목록</a></li><li>🌟<a href="https://sowon-dev.github.io/2020/09/23/200923jspi-3/">Servlet관리자용주문목록3 : 고객주문목록에서 주문 상태 및 운송장정보 변경</a></li><li><a href="https://sowon-dev.github.io/2020/09/24/200924jspi/">Servlet관리자용주문목록4 : 고객주문목록에서 삭제</a></li></ol><h2 id="🌷스프링프레임워크"><a href="#🌷스프링프레임워크" class="headerlink" title="🌷스프링프레임워크"></a>🌷스프링프레임워크</h2><ol><li><a href="https://sowon-dev.github.io/2020/10/05/201005springi/">프레임워크란, Spring 특징과 기능, 컨테이너란</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201007spring-1/">스프링(STS)설치 및 기본 설정</a></li><li><a href="https://sowon-dev.github.io/2020/10/08/201008stsAddShortcuts/">STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201006springi/">Spring 기본 동작순서, JSP와 SPRING의 차이점</a></li><li><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/">제어의 역행(IoC)과 의존성 주입(DI)</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201006springi-1/">회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201007spring/">관점 지향(AOP, Aspect-Oriented Programming) 총정리</a></li><li><a href="https://sowon-dev.github.io/2020/10/08/201008spring/">스프링 MVC패턴 프로젝트, MAVEN REPOSITORY</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/16/jspList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : Android] Android전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/androidList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/androidList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:43:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🍫안드로이드기초&quot;&gt;&lt;a href=&quot;#🍫안드로이드기초&quot; class=&quot;headerlink&quot; title=&quot;🍫안드로이드기초&quot;&gt;&lt;/a&gt;🍫안드로이드기초&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/09/200909and/&quot;&gt;안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/09/28/200928and/&quot;&gt;안드로이드 4대 컴포넌트&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🍫안드로이드기초"><a href="#🍫안드로이드기초" class="headerlink" title="🍫안드로이드기초"></a>🍫안드로이드기초</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200909and/">안드로이드 다운로드, 기본개념, 프로젝트 기본순서, 액티비티생명주기, 로그캣</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928and/">안드로이드 4대 컴포넌트</a><a id="more"></a></li></ol><h2 id="🍫화면구성"><a href="#🍫화면구성" class="headerlink" title="🍫화면구성"></a>🍫화면구성</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/10/200910and/">컴파운드버튼(체크박스,라디오버튼,스위치,토글버튼) 한눈에 비교하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and/">레이아웃종류 및 레이아웃 안에서 자주 사용되는 속성</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-1/">고급위젯: 아날로그시계,디지털시계,크로노미터,타임피커,데이트피커,캘린더뷰,자동완성텍스트뷰와 멀티자동완성텍스트뷰</a></li><li><a href="https://sowon-dev.github.io/2020/09/23/200923and-2/">옵션메뉴, 컨텍스트메뉴, 토스트</a></li></ol><h2 id="🍫기능"><a href="#🍫기능" class="headerlink" title="🍫기능"></a>🍫기능</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/24/200924and/">안드로이드 파일처리</a></li><li><a href="https://sowon-dev.github.io/2020/10/07/201007and/">이미지파일 넣기</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/androidList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ITWILL : DB] DB전체목록List</title>
      <link>https://sowon-dev.github.io/2020/11/15/DBList/</link>
      <guid>https://sowon-dev.github.io/2020/11/15/DBList/</guid>
      <pubDate>Sun, 15 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;🌱리눅스와-SQL&quot;&gt;&lt;a href=&quot;#🌱리눅스와-SQL&quot; class=&quot;headerlink&quot; title=&quot;🌱리눅스와 SQL&quot;&gt;&lt;/a&gt;🌱리눅스와 SQL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/01/200602dbi/&quot;&gt;간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/15/200616dbi/&quot;&gt;virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/18/200619dbi/&quot;&gt;CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="🌱리눅스와-SQL"><a href="#🌱리눅스와-SQL" class="headerlink" title="🌱리눅스와 SQL"></a>🌱리눅스와 SQL</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/01/200602dbi/">간단 리눅스명령어(복붙포함), Oracle 명령어, DB작동방법, 접속순서</a></li><li><a href="https://sowon-dev.github.io/2020/06/15/200616dbi/">virtualBox로 가상컴퓨터만들어서 리눅스Linux 설치하기</a></li><li><a href="https://sowon-dev.github.io/2020/06/18/200619dbi/">CUI환경 VS GUI환경, 리눅스명령어자세히, vi단축키</a><a id="more"></a></li><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi/">SQL DEVELOPER사용방법</a></li></ol><h2 id="🌱DB와-SQL개념"><a href="#🌱DB와-SQL개념" class="headerlink" title="🌱DB와 SQL개념"></a>🌱DB와 SQL개념</h2><ol><li><a href="https://sowon-dev.github.io/2020/05/28/200529dbi/">DB기초이론, DBMS</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200602dbi2/">데이터베이스기초활용</a></li><li><a href="https://sowon-dev.github.io/2020/06/05/200605dbi/">DDL vs DML vs DCL</a></li><li><a href="https://sowon-dev.github.io/2020/06/07/200608dbi/">제약조건의 컬럼레벨과 테이블레벨문법, 제약조건 5가지, 버퍼에 있는 자주 사용할 쿼리구문을 저장하는 방법</a></li><li><a href="https://sowon-dev.github.io/2020/06/09/200610dbi/">select as from where, order by, 동일유저 동시접속 가능, 트랜잭션 commit과 rollback</a></li><li><a href="https://sowon-dev.github.io/2020/07/16/200717dbi/">트랜잭션(Transaction), 치환변수, save명령어, 리소스부족에러발생시</a></li><li><a href="https://sowon-dev.github.io/2020/08/03/200804dbi/">Data Dictionary</a></li></ol><h2 id="🌱Select-구문"><a href="#🌱Select-구문" class="headerlink" title="🌱Select 구문"></a>🌱Select 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/22/200623dbi/">Select 구문을 사용한 데이터 검색, null VS 0 VS 공백, Distinct</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi/">테이블 전체목록조회, 테이블구조조회, WHERE(조건문)절</a></li><li><a href="https://sowon-dev.github.io/2020/06/25/200626dbi2/">Order by 정렬</a></li></ol><h2 id="🌱단일행함수"><a href="#🌱단일행함수" class="headerlink" title="🌱단일행함수"></a>🌱단일행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi/">단일행함수 : 문자함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi2/">단일행함수 : 숫자함수, 날짜함수</a></li><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi3/">단일행함수 : 변환함수, 일반함수</a></li><li><a href="https://sowon-dev.github.io/2020/08/10/200811dbi/">단일행함수 : 조건부 표현식</a></li></ol><h2 id="🌱여러행함수"><a href="#🌱여러행함수" class="headerlink" title="🌱여러행함수"></a>🌱여러행함수</h2><ol><li><a href="https://sowon-dev.github.io/2020/06/30/200630dbi4/">여러행함수 : 그룹함수</a></li><li><a href="https://sowon-dev.github.io/2020/07/07/200707dbi/">여러행함수 : Group by절, Having절</a></li></ol><h2 id="🌱중요-구문"><a href="#🌱중요-구문" class="headerlink" title="🌱중요 구문"></a>🌱중요 구문</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/09/200710dbi2/">JOIN</a></li><li><a href="https://sowon-dev.github.io/2020/07/13/200714dbi/">Subquery1: Subquery개념, 중첩Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/23/200824dbi/">Subquery2: Inlineview, Scalar Subquery</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery3: exists연산자, not exists연산자</a></li><li><a href="https://sowon-dev.github.io/2020/08/24/200825dbi/">Subquery4: with절</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi3/">SQL 기억해야 할 쿼리</a></li><li><a href="https://sowon-dev.github.io/2020/08/19/200820dbi/">Top-N분석</a></li></ol><h2 id="🌱데이터조작어-DML-데이터정의어-DDL"><a href="#🌱데이터조작어-DML-데이터정의어-DDL" class="headerlink" title="🌱데이터조작어 (DML) / 데이터정의어 (DDL)"></a>🌱데이터조작어 (DML) / 데이터정의어 (DDL)</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/14/200714dbi2/">데이터조작어DML : insert/update/delete구문</a></li><li><a href="https://sowon-dev.github.io/2020/07/20/200721dbi/">데이터정의어DDL : table 생성 table 복사, varchar2와 varchar와 char비교</a></li><li><a href="https://sowon-dev.github.io/2020/07/23/200724dbi/">데이터정의어DDL : 테이블수정(컬럼수정, 제약조건수정, 컬럼명수정, 제약조건명수정), 테이블명변경, 테이블삭제, 테이블절단, truncate과 delete과 drop차이</a></li></ol><h2 id="🌱SQL의-OBJECT-종류"><a href="#🌱SQL의-OBJECT-종류" class="headerlink" title="🌱SQL의 OBJECT 종류"></a>🌱SQL의 OBJECT 종류</h2><ol><li><a href="https://sowon-dev.github.io/2020/07/27/200728dbi/">SQL의 OBJECT종류 : view</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi/">SQL의 OBJECT종류 : 시퀀스(Sequence)</a></li><li><a href="https://sowon-dev.github.io/2020/07/28/200729dbi2/">SQL의 OBJECT종류 : 인덱스(Index), 시노님(Synonym)</a></li></ol><h2 id="🌱DB구조"><a href="#🌱DB구조" class="headerlink" title="🌱DB구조"></a>🌱DB구조</h2><ol><li><a href="https://sowon-dev.github.io/2020/08/25/200826dbi/">Oracle DB구조1 : Database</a></li><li><a href="https://sowon-dev.github.io/2020/08/27/200828dbi/">Oracle DB구조2 : Instance의 SGA메모리구조</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200831dbi/">Oracle DB구조3 : Instance의 Background process</a></li><li><a href="https://sowon-dev.github.io/2020/08/31/200901dbi2/">Oracle DB구조4 : 구조 완벽정리, 상활별 오라클 DB 순서</a></li></ol><h2 id="🌱DB구현-및-관리"><a href="#🌱DB구현-및-관리" class="headerlink" title="🌱DB구현 및 관리"></a>🌱DB구현 및 관리</h2><ol><li><a href="https://sowon-dev.github.io/2020/09/09/200911dbi/">Oracle DB생성방법 2가지, Oracle DB Tool, Parameterfile 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/14/200914dbi/">오라클의 Database 켜고 끄기</a></li><li><a href="https://sowon-dev.github.io/2020/09/18/200918dbi/">오라클의 Datafile 관리하기</a></li><li><a href="https://sowon-dev.github.io/2020/09/21/200921dbi/">DB유저관리 : user 생성, 권한부여</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi/">데이터충돌, DeadLock</a></li><li><a href="https://sowon-dev.github.io/2020/09/22/200922dbi2/">DB fail 유형</a></li><li><a href="https://sowon-dev.github.io/2020/09/28/200928dbi/">Controlfile다중화, Redoligfile다중화, 데이터베이스로그모드</a></li><li><a href="https://sowon-dev.github.io/2020/10/06/201006dbi/">데이터모델링</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Database/">Database</category>
      
      <category domain="https://sowon-dev.github.io/categories/Database/Oracle/">Oracle</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      <category domain="https://sowon-dev.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://sowon-dev.github.io/tags/List/">List</category>
      
      
      <comments>https://sowon-dev.github.io/2020/11/15/DBList/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008al-c1041/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008al-c1041/</guid>
      <pubDate>Wed, 07 Oct 2020 18:17:16 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)&lt;/h2&gt;&lt;p&gt;영문자 1개를 입력받아 그 다음 문자를 출력해보자.&lt;br&gt;영문자 ‘A’의 다음 문자는 ‘B’이고, 영문자 ‘0’의 다음 문자는 ‘1’이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명"><a href="#문제-1041-기초-산술연산-문자-1개-입력받아-다음-문자-출력하기-설명" class="headerlink" title="문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)"></a>문제 1041 : [기초-산술연산] 문자 1개 입력받아 다음 문자 출력하기(설명)</h2><p>영문자 1개를 입력받아 그 다음 문자를 출력해보자.<br>영문자 ‘A’의 다음 문자는 ‘B’이고, 영문자 ‘0’의 다음 문자는 ‘1’이다.</p><a id="more"></a><p>참고<br>숫자는 수를 표현하는 문자로서 ‘0’ 은 문자 그 자체를 의미하고, 0은 값을 의미한다.</p><p>힌트<br>아스키문자표에서 ‘A’는 10진수 65로 저장되고 ‘B’는 10진수 66으로 저장된다.<br>따라서 문자도 값으로 덧셈을 할 수 있다.</p><ul><li>입력예시<br>영문자 1개가 입력된다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><ul><li>출력예시 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="첫번째-코드"><a href="#첫번째-코드" class="headerlink" title="첫번째 코드"></a>첫번째 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String -&gt; char</span></span><br><span class="line"><span class="keyword">char</span> c = s.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//char+1</span></span><br><span class="line"><span class="keyword">int</span> i = c+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char로 출력</span></span><br><span class="line">System.out.printf(<span class="string">"%s"</span>, (<span class="keyword">char</span>)i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="두번째-코드"><a href="#두번째-코드" class="headerlink" title="두번째 코드"></a>두번째 코드</h2><p>위의 코드보다 더 간결하게 나타낼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">char</span> a = sc.nextLine().charAt(<span class="number">0</span>);</span><br><span class="line">        System.out.printf(<span class="string">"%c"</span>, a+<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>꼭 기억하자</p><ul><li>char를 Scanner로 받을땐 <code>sc.nextLine().charAt(0);</code>로 받으면 String이 아닌 Char형태로 바로 받을 수 있다.</li><li>char를 printf로 출력할때 <code>&quot;%s&quot;</code>가 아니라 <code>&quot;%c&quot;</code>로 출력하면 된다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008al-c1041/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]STS 단축키 추가하기(스프링 이클립스 단축키), System.out.printf()단축키</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/</guid>
      <pubDate>Wed, 07 Oct 2020 17:47:32 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;STS-단축키-추가하기&quot;&gt;&lt;a href=&quot;#STS-단축키-추가하기&quot; class=&quot;headerlink&quot; title=&quot;STS 단축키 추가하기&quot;&gt;&lt;/a&gt;STS 단축키 추가하기&lt;/h2&gt;&lt;p&gt;Spring Tool Suite 4(STS)는 이클립스환경이다. 이클립스와 동일하게 단축키도 이용가능한 줄 알았다.&lt;br&gt;&lt;code&gt;sout&lt;/code&gt; + Ctrl + Space를 통해서 &lt;code&gt;System.out.println()&lt;/code&gt;을 이용하려고 했는데 단축키가 적용되지않았다.&lt;br&gt;&lt;code&gt;sysout&lt;/code&gt; 매번 입력하기는 너&amp;#126;&amp;#126;&amp;#126;&amp;#126;무 귀찮기때문에 구글링하여 직접 단축키를 추가해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="STS-단축키-추가하기"><a href="#STS-단축키-추가하기" class="headerlink" title="STS 단축키 추가하기"></a>STS 단축키 추가하기</h2><p>Spring Tool Suite 4(STS)는 이클립스환경이다. 이클립스와 동일하게 단축키도 이용가능한 줄 알았다.<br><code>sout</code> + Ctrl + Space를 통해서 <code>System.out.println()</code>을 이용하려고 했는데 단축키가 적용되지않았다.<br><code>sysout</code> 매번 입력하기는 너&#126;&#126;&#126;&#126;무 귀찮기때문에 구글링하여 직접 단축키를 추가해보았다.</p><a id="more"></a><p>이클립스도 STS와 별반 다르지않게 단축키를 추가할 수 있다.</p><p><img src="/img/201008stsAddShortcuts.PNG" alt=""></p><p><br><br><br></p><h2 id="1-Window-gt-Preferences-클릭-gt-Templates검색"><a href="#1-Window-gt-Preferences-클릭-gt-Templates검색" class="headerlink" title="1. Window &gt; Preferences 클릭 &gt; Templates검색"></a>1. Window &gt; Preferences 클릭 &gt; Templates검색</h2><h2 id="2-Java-Editor하위의-Templates-클릭-사진-속-1번-참조"><a href="#2-Java-Editor하위의-Templates-클릭-사진-속-1번-참조" class="headerlink" title="2. Java-Editor하위의 Templates 클릭(사진 속 1번 참조)"></a>2. Java-Editor하위의 Templates 클릭(사진 속 1번 참조)</h2><ul><li>여기서 내장되어있는 단축키를 확인할 수 있다.</li><li>기존 단축키 수정도 가능하고 새로운 단축키 추가도 가능하다</li></ul><h2 id="3-New버튼클릭-사진-속-2번-참조"><a href="#3-New버튼클릭-사진-속-2번-참조" class="headerlink" title="3. New버튼클릭(사진 속 2번 참조)"></a>3. New버튼클릭(사진 속 2번 참조)</h2><h2 id="4-Edit-Template에-단축키-추가-사진-속-3번-참조"><a href="#4-Edit-Template에-단축키-추가-사진-속-3번-참조" class="headerlink" title="4. Edit Template에 단축키 추가(사진 속 3번 참조)"></a>4. Edit Template에 단축키 추가(사진 속 3번 참조)</h2><ul><li>Name : 원하는 단축키</li><li>Context : Java statements 설정</li><li>Description : 단축키 설명 입력</li><li>Pattern : 단축키 입력시 원하는 동작 추가</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pattern예시</span></span><br><span class="line">System.out.println($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br></pre></td></tr></table></figure><p>나는 두가지를 단축키로 추가하였다.</p><ul><li><code>System.out.println()</code>를 <code>sout</code>으로 단축키 추가 지정</li><li><code>System.out.printf()</code>를 <code>souf</code>로 단축키 추가 지정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//`System.out.println()`를 `sout`으로 단축키 추가 지정시 Pattern예시</span></span><br><span class="line">System.out.println($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//`System.out.printf()`를 `souf`로 단축키 추가 지정시 Pattern예시</span></span><br><span class="line">System.out.printf($&#123;word_selection&#125;$&#123;&#125;);$&#123;cursor&#125;</span><br></pre></td></tr></table></figure><h2 id="5-OK클릭-gt-Apply-and-Close-클릭-사진-속-4번-참조"><a href="#5-OK클릭-gt-Apply-and-Close-클릭-사진-속-4번-참조" class="headerlink" title="5. OK클릭 &gt; Apply and Close 클릭(사진 속 4번 참조)"></a>5. OK클릭 &gt; Apply and Close 클릭(사진 속 4번 참조)</h2><ul><li>단축키가 잘 되는 지 확인한다.</li><li>완-벽!</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008stsAddShortcuts/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링 MVC프로젝트, MAVEN REPOSITORY</title>
      <link>https://sowon-dev.github.io/2020/10/07/201008spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/07/201008spring/</guid>
      <pubDate>Wed, 07 Oct 2020 16:14:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Spring-MVC-프로젝트-생성하는-두가지-방법&quot;&gt;&lt;a href=&quot;#Spring-MVC-프로젝트-생성하는-두가지-방법&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC 프로젝트 생성하는 두가지 방법&quot;&gt;&lt;/a&gt;Spring MVC 프로젝트 생성하는 두가지 방법&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Spring Legacy Project&lt;ul&gt;
&lt;li&gt;WAS-tomcat 경험과 model2 경험 필요&lt;/li&gt;
&lt;li&gt;상대적으로 설정하는 것이 어렵다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Spring-MVC-프로젝트-생성하는-두가지-방법"><a href="#Spring-MVC-프로젝트-생성하는-두가지-방법" class="headerlink" title="Spring MVC 프로젝트 생성하는 두가지 방법"></a>Spring MVC 프로젝트 생성하는 두가지 방법</h2><ol><li>Spring Legacy Project<ul><li>WAS-tomcat 경험과 model2 경험 필요</li><li>상대적으로 설정하는 것이 어렵다.<a id="more"></a></li><li>실무에서 기존 프로젝트를 이해하기 쉽다 (실무에서 주로 사용하기때문에)</li><li>모든 버전의 스프링을 사용가능</li><li>단점 : 리소스가 많이 필요하다.</li><li>Create a project &gt; Spring Legacy Project &gt; Spring MVC project 클릭하여 생성</li></ul></li><li>Spring Starter Project(Spring Boot)<ul><li>최대한 간결하게 실행, 배포하기 위한 방법</li><li>WAS없이 실행가능</li><li>최근 유행 &gt; 빠르게 처리가능하기에 간단한 테스트용으로 자주 사용</li><li>단점 : jsp뷰 별도의 설정 필요</li></ul></li></ol><p><br><br><br></p><h2 id="Maven-메이븐"><a href="#Maven-메이븐" class="headerlink" title="Maven(메이븐)"></a>Maven(메이븐)</h2><ul><li>빌드도구 중의 하나</li><li>필요한 라이브러리 코드들을 아래 공식 메이븐레파지토리에서 복사한 뒤 <code>pom.xml</code>에 붙여넣어서 사용 및 관리</li><li><a href="https://mvnrepository.com/">메이븐 공식 레파지토리(MAVEN REPOSITORY) 사이트</a>에 접속한 뒤 검색해서 원하는 것을 클릭한 후 코드를 복사해서 <code>pom.xml</code>의 test주석부분의 <code>&lt;dependencies&gt;</code>태그 안에 붙여넣기하면 된다<ul><li>검색한 뒤 어떤 버전을 쓸지 모르겠다면? Usages가 가장 많은 것을 받으면 된다.</li><li>라이브러리 에러 해결방법 두 가지<ul><li>프로젝트 우클릭 &gt; Maven &gt; project update (해당 파일 동기화)</li><li>C:\Users\ITWILL.m2\repository 폴더에 저장 되고 프로젝트 (강제로 삭제후 STS 재실행) </li></ul></li></ul></li></ul><p><br><br><br></p><h2 id="스프링-MVC프로젝트안-src-폴더하위의-각-파일이-가진-의미"><a href="#스프링-MVC프로젝트안-src-폴더하위의-각-파일이-가진-의미" class="headerlink" title="스프링 MVC프로젝트안 src 폴더하위의 각 파일이 가진 의미"></a>스프링 MVC프로젝트안 src 폴더하위의 각 파일이 가진 의미</h2><ul><li><code>servlet-context.xml</code> : 스프링 프로젝트에서 웹과 관련된 모든 속성을 처리</li><li><code>root-context.xml</code> : 스프링 프로젝트에서 웹을 제외한 모든 속성을 처리</li></ul><p><br><br><br></p><h2 id="스프링-웹-프로젝트"><a href="#스프링-웹-프로젝트" class="headerlink" title="스프링 웹 프로젝트"></a>스프링 웹 프로젝트</h2><ul><li>Presentation Layer : UI담당하는 계층, 웹,모바일 구분<ul><li>view-jsp 페이지, html/css/js 페이지, Controller 페이지 처리</li></ul></li><li>Business Layer : 서비스 계층, 사용자 요구사항을 바탕으로 구현하는 계층(기능적 구현)<ul><li>컨트롤러와 DB 직접 연결을 방지하는 역할</li></ul></li><li>Data Access Layer(=Persistence Layer) : 데이터처리 계층, DB관련 처리<ul><li>DAO객체 처리</li><li>My(i)Batis 호출(마이바티스가 아래의 DB에 접근함)</li></ul></li><li>Data Base</li></ul><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RahUjo1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uqvr69zi0mlvh2eh8459.jpg" alt="https://dev.to/urunov/truly-there-is-no-difference-in-implementation-integrating-spring-with-jersey-and-integrating-jersey-with-spring-m2k"></p><p><br><br><br></p><h2 id="My-i-Batis란"><a href="#My-i-Batis란" class="headerlink" title="My(i)Batis란"></a>My(i)Batis란</h2><ul><li>SQL MAPPER 라이브러리</li><li>스프링 프레임워크와 같이 활용하여 효율적인 SQL 처리</li><li>반복되는 try~catch 구문, pstmt,rs 객체를 대신 처리<ul><li>코드양이 줄어드는 장점</li></ul></li><li>XML/애노테이션 형태로 SQL구문 사용가능<ul><li>하지만 보통 XML로 쿼리구문작성한다.</li></ul></li><li>스프링과 자동으로 연동되어 처리되는 라이브러리를 제공한다.</li><li>장점 : 동적 SQL문 사용가능<ul><li>동적 SQL구문이란 SQL구문안에 반복문과 조건문 사용가능한 형태</li></ul></li></ul><p><br><br><br></p><h2 id="MyBatis-설치"><a href="#MyBatis-설치" class="headerlink" title="MyBatis 설치"></a>MyBatis 설치</h2><p>메이븐 레포지토리에서 아래와 같이 4개의 라이브러리 코드를 복붙한다.</p><ul><li><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis/3.4.1">메이븐 레포지토리에서 mybatis</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기</li><li><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis-spring/1.3.0">메이븐 레포지토리에서 mybatis-spring</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 마이바티스를 연결하는 라이브러리</li></ul></li><li><a href="https://mvnrepository.com/artifact/org.springframework/spring-jdbc/5.2.9.RELEASE">메이븐 레포지토리에서 Spring-JDBC</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 JDBC를 연결하는 라이브러리 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//위의 코드 두 개를 버전 수정</span></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.2.9.RELEASE">메이븐 레포지토리에서 Spring-test</a>의 코드 복사하여 <code>pox.xml</code>에 붙여넣기<ul><li>스프링과 마이바티스의 연결을 확인하는 라이브러리 (Junit의 역할)</li></ul></li></ul><p><br><br><br></p><h2 id="MyBatis로-DB연결"><a href="#MyBatis로-DB연결" class="headerlink" title="MyBatis로 DB연결"></a>MyBatis로 DB연결</h2><p>위의 4가지 라이브러리를 설치 후 <code>root-context.xml</code>에 속성을 처리해준다.</p><ul><li>아래 사진처럼 <code>root-context.xml</code>의 Namespaces속성에 위에서 추가한 라이브러리들을 tick한다.</li></ul><p><img src="/img/201008rootContext.PNG" alt=""></p><ul><li>이제 <code>root-context.xml</code>에 DB연결객체를 생성하여 DB를 연결할 수 있다.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mybatis-spring</span>=<span class="string">"http://mybatis.org/schema/mybatis-spring"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Root Context: defines shared resources visible to all other web components --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataSource 정보를 가지고 있는 DriverManagerDataSource 객체를 생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/springdb?useSSL=false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SqlSessionFactory 객체 : Connection을 생성하고 사용하는 객체 + MyBatis설정까지 가능한 객체<ul><li>SqlSessionFactoryBean 클래스를 사용해야함</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/07/201008spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]스프링(STS)설치 및 기본 설정</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007spring-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007spring-1/</guid>
      <pubDate>Tue, 06 Oct 2020 21:56:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;스프링-설치&quot;&gt;&lt;a href=&quot;#스프링-설치&quot; class=&quot;headerlink&quot; title=&quot;스프링 설치&quot;&gt;&lt;/a&gt;스프링 설치&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/tools&quot;&gt;스프링 공식 사이트&lt;/a&gt;에서 project탭 클릭 &amp;gt; Spring Tool 4 클릭</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="스프링-설치"><a href="#스프링-설치" class="headerlink" title="스프링 설치"></a>스프링 설치</h2><ol><li><a href="https://spring.io/tools">스프링 공식 사이트</a>에서 project탭 클릭 &gt; Spring Tool 4 클릭<a id="more"></a><img src="/img/201007spring.PNG" alt=""></li><li>스프링설치후 exe파일을 실행</li><li>workspace생성 후 Lanch</li><li>Help &gt; Marketplace &gt; sts 검색 후 Spring Tools 3 Add-On for Spring Tools 4를 설치한다<br><img src="/img/201007spring2.PNG" alt=""></li><li>restart하고 나면 Create a project &gt; Spring Legacy Project &gt; Spring MVC project 클릭</li><li>project name 작성하고 next클릭 &gt; the top-level pacakge 을 지정<ul><li>보통 회사도메인주소 뒤부터 작성 ex)com.test</li></ul></li><li>설치와 프로젝트 생성까지 끝!</li></ol><p><br><br><br></p><h2 id="기본설정"><a href="#기본설정" class="headerlink" title="기본설정"></a>기본설정</h2><p>Preferences에서 아래 내용을 설정해준다</p><ol><li>General show heap status 틱하기</li><li>General &gt; Appearance &gt; Colors and Fonts &gt; basic &gt;Text Font 더블클릭 &gt; 폰트크기지정 </li><li>General &gt; Web Browser &gt; Use external web browser 틱 &gt; chrome 틱하기</li><li>Web의 CSS Files, HTML Files, JSP Files을 각각 Encoding UTF-8로 설정 </li></ol><p><br><br><br></p><h2 id="Mybatis-설치"><a href="#Mybatis-설치" class="headerlink" title="Mybatis 설치"></a>Mybatis 설치</h2><ul><li><a href="https://sowon-dev.github.io/2020/10/08/201008spring/#MyBatis-설치">스프링 MVC패턴 프로젝트, MAVEN REPOSITORY</a> 참고</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007spring-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]관점 지향(AOP, Aspect-Oriented Programming) 총정리</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007spring/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007spring/</guid>
      <pubDate>Tue, 06 Oct 2020 19:59:21 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;관점-지향-AOP-Aspect-Oriented-Programming&quot;&gt;&lt;a href=&quot;#관점-지향-AOP-Aspect-Oriented-Programming&quot; class=&quot;headerlink&quot; title=&quot;관점 지향 (AOP, Aspect-Oriented Programming)&quot;&gt;&lt;/a&gt;관점 지향 (AOP, Aspect-Oriented Programming)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;메서드나 객체 안에 주기능과 보조기능으로 분리한 후 선택적으로 적용해서 사용하는 방법&lt;/li&gt;
&lt;li&gt;전체 코드에 흩어져있는 보조 기능들을 한 곳에 모아서 처리가능하다&lt;/li&gt;
&lt;li&gt;필요시(=주기능이 사용될때마다) 선택적으로 보조기능을 사용할 수 있다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="관점-지향-AOP-Aspect-Oriented-Programming"><a href="#관점-지향-AOP-Aspect-Oriented-Programming" class="headerlink" title="관점 지향 (AOP, Aspect-Oriented Programming)"></a>관점 지향 (AOP, Aspect-Oriented Programming)</h2><ul><li>메서드나 객체 안에 주기능과 보조기능으로 분리한 후 선택적으로 적용해서 사용하는 방법</li><li>전체 코드에 흩어져있는 보조 기능들을 한 곳에 모아서 처리가능하다</li><li>필요시(=주기능이 사용될때마다) 선택적으로 보조기능을 사용할 수 있다.<a id="more"></a></li><li>예시 : 쇼핑몰개발자는 쇼핑몰 정보를 처리만 하고 보안처리는 spring 프레임워크가 하는 것</li><li>장점 : 코드가 단순해지면서 가독성 향상, 중복된 코드 제거.</li><li>사용처: 로깅, 보안, 트랜젝션처리시 사용</li></ul><p><br><br><br></p><h2 id="AOP용어"><a href="#AOP용어" class="headerlink" title="AOP용어"></a>AOP용어</h2><table><thead><tr><th align="center">AOP용어</th><th align="left">설명</th><th align="left">특징</th></tr></thead><tbody><tr><td align="center">Target</td><td align="left">Advice가 적용되는 클래스/메서드</td><td align="left">-</td></tr><tr><td align="center">Advice</td><td align="left">Aspect의 실체, 구현해놓은 클래스</td><td align="left">메서드호출기준으로 여러 지점에서 호출 가능</td></tr><tr><td align="center">Pointcut</td><td align="left">Jointpoint의 부분으로 실제로 Advice가 적용된 대상, JointPoint의 상세한 스펙을 정의한 것</td><td align="left">패키지이름/클래스이름/메서드이름을 정규식으로 지정 후 처리함</td></tr><tr><td align="center">Jointpoint</td><td align="left">Advice가 적용될 위치, 끼어들 수 있는 지점</td><td align="left">스프링에서는 method 결합점만 제공</td></tr><tr><td align="center">Aspect</td><td align="left">공통기능, 구현하고자 하는 보조 기능</td><td align="left">-</td></tr><tr><td align="center">Weaving(위빙)</td><td align="left">Advice를 핵심기능에 적용하는 행위</td><td align="left">-</td></tr></tbody></table><p><br><br><br></p><h2 id="스프링API를-활용한-AOP구현방법"><a href="#스프링API를-활용한-AOP구현방법" class="headerlink" title="스프링API를 활용한 AOP구현방법"></a>스프링API를 활용한 AOP구현방법</h2><ol><li>Target 클래스 지정</li><li>Advice 클래스 지정</li><li>설정파일(스프링프레임워크)에서 Pointcut을 지정</li><li>설정파일(스프링프레임워크)에서 Advice와 Pointcut을 결합하는 Advicer 생성</li><li>설정파일(스프링프레임워크)에서 ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용</li><li>getBean()메서드로 해당 bean(객체)접근해서 사용</li></ol><p><br><br><br></p><h2 id="스프링API에서-제공하는-Advice인터페이스"><a href="#스프링API에서-제공하는-Advice인터페이스" class="headerlink" title="스프링API에서 제공하는 Advice인터페이스"></a>스프링API에서 제공하는 Advice인터페이스</h2><table><thead><tr><th align="center">인터페이스 이름</th><th align="center">추상메서드 이름</th><th align="left">특징</th></tr></thead><tbody><tr><td align="center">MethodBeforeAdvice</td><td align="center">before()</td><td align="left">주 메서드 실행하기 전에 실행. 예를 들면 내 주기능이 로그인이다. 로그인전에 보안처리나 로깅처리를 실행하고자할때 내 주기능 실행전에 실행하는 것</td></tr><tr><td align="center">AfterReturningAdvice</td><td align="center">afterReturning()</td><td align="left">주 메서드 실행 후 실행</td></tr><tr><td align="center">ThrowsAdvice</td><td align="center">afterThrowing()</td><td align="left">주 메서드에서 예외가 발생시 실행</td></tr><tr><td align="center">MethodInterceptor</td><td align="center">invoke()</td><td align="left">주 메서드의 실행 전/후에 실행(예외발생시 실행도 포함)</td></tr></tbody></table><p><br><br><br></p><h2 id="예시-계산기-만들기"><a href="#예시-계산기-만들기" class="headerlink" title="예시 : 계산기 만들기"></a>예시 : 계산기 만들기</h2><p>간단한 계산기 예제를 통해서 AOP를 알아보자</p><ul><li><code>Calculator.java</code> 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"><span class="comment">//계산기객체 target</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x + y;</span><br><span class="line">System.out.println(<span class="string">"add 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x - y;</span><br><span class="line">System.out.println(<span class="string">"sub 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x * y;</span><br><span class="line">System.out.println(<span class="string">"mul 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = x / y;</span><br><span class="line">System.out.println(<span class="string">"div 결과: "</span>+result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="target-객체생성"><a href="#target-객체생성" class="headerlink" title="target 객체생성"></a>target 객체생성</h3><h3 id="advice-객체생성"><a href="#advice-객체생성" class="headerlink" title="advice 객체생성"></a>advice 객체생성</h3><p>위에서 학습한 순서에 따라 객체 생성해보자.<br>1번과 2번을 함께 xml파일에 생성</p><ul><li><code>AOPTest.xml</code>생성</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- BEAN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.타겟 클래스 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calcTarget"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.Calculator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.로그기능을 처리하는 advice 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.LoggingAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="설정파일-스프링프레임워크-에서-Pointcut을-지정"><a href="#설정파일-스프링프레임워크-에서-Pointcut을-지정" class="headerlink" title="설정파일(스프링프레임워크)에서 Pointcut을 지정"></a>설정파일(스프링프레임워크)에서 Pointcut을 지정</h3><h3 id="설정파일-스프링프레임워크-에서-Advice와-Pointcut을-결합하는-Advicer-생성"><a href="#설정파일-스프링프레임워크-에서-Advice와-Pointcut을-결합하는-Advicer-생성" class="headerlink" title="설정파일(스프링프레임워크)에서 Advice와 Pointcut을 결합하는 Advicer 생성"></a>설정파일(스프링프레임워크)에서 Advice와 Pointcut을 결합하는 Advicer 생성</h3><p>3번 4번을 함께 java파일에 작성하자<br>스프링API에서 제공하는 Advice인터페이스 중 MethodInterceptor를 구현해보았다.</p><ul><li><code>LoggingAdvice.java</code> 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//로그를 기록하는 로강클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//주 메서드의 실행 전/후에 실행(예외발생시 실행도 포함)하는 메서드 오버라이딩</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation inv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//메서드 호출 전에 수행하는 구문</span></span><br><span class="line">System.out.println(inv.getMethod()+<span class="string">" 메서드 호출 전"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메서드 호출</span></span><br><span class="line">Object obj = inv.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">//메서드 호출 후에 수행하는 구문</span></span><br><span class="line">System.out.println(inv.getMethod()+<span class="string">" 메서드 호출 후"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="설정파일-스프링프레임워크-에서-ProxyFactoryBean-스프링에서-제공-클래스를-사용해서-Target에-Advice를-적용"><a href="#설정파일-스프링프레임워크-에서-ProxyFactoryBean-스프링에서-제공-클래스를-사용해서-Target에-Advice를-적용" class="headerlink" title="설정파일(스프링프레임워크)에서 ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용"></a>설정파일(스프링프레임워크)에서 ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용</h3><ul><li><code>AOPTest.xml</code> 추가 작성 (주석 5번내용)</li><li>property의 name이 궁금해져서 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html">ProxyFactoryBean공식문서</a>를 찾아봤다 <ul><li>interceptorNames는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html#setInterceptorNames-java.lang.String...-">setInterceptorNames()</a>를 통해서 의존 주입(Setter)을 하였다.</li><li>하지만 target의 경우 동일한 파라미터이름을 찾을 수 없었다. 하지만 그 비슷한 것을 찾았는데 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html#setTargetName-java.lang.String-">setTargetName(String targetName)</a>이다.  <code>name=&quot;targetName&quot;</code>으로 하면 error가 발생한다. </li><li>데이터타입이 object인데 targetName의 데이터타입은 String이기때문이다. 그럼 어떤 메서드에 의해서 의존주입이 되는 것일까? 부모클래스인 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/framework/AdvisedSupport.html#setTarget-java.lang.Object-">Class AdvisedSupport의 setTarget(Object target)</a></li><li>따라서 property 속성을 꼭 <code>name=&quot;target&quot;</code>으로 지정해야 스프링이 해당 클래스가 target클래스인 걸 알 수 있다. </li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DTD --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- BEAN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.타겟 클래스 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calcTarget"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.Calculator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.로그기능을 처리하는 advice 객체생성  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">class</span>=<span class="string">"com.itwill.aop.LoggingAdvice"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--5.ProxyFactoryBean(스프링에서 제공)클래스를 사용해서 Target에 Advice를 적용  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyCalc"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5-1.타켓클래스 지정(setTargetName메서드를 이용한 setter 의존주입)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"calcTarget"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5-2.타겟클래스에서 메서드 호출시 logAdive객체 실행(setter 의존주입)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>logAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="getBean-메서드로-해당-bean-객체-접근해서-사용"><a href="#getBean-메서드로-해당-bean-객체-접근해서-사용" class="headerlink" title="getBean()메서드로 해당 bean(객체)접근해서 사용"></a>getBean()메서드로 해당 bean(객체)접근해서 사용</h3><ul><li><code>CalcAOPTest.java</code>생성 후 getBean()사용</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcAOPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">" 계산기 실행 ! "</span>);</span><br><span class="line"></span><br><span class="line">ApplicationContext appCtx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"AOPTest.xml"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------target 객체생성"</span>);</span><br><span class="line">Calculator cal2 = (Calculator)appCtx.getBean(<span class="string">"calcTarget"</span>);</span><br><span class="line">cal2.add(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------Proxy로 객체생성"</span>);</span><br><span class="line">Calculator cal = (Calculator)appCtx.getBean(<span class="string">"proxyCalc"</span>);</span><br><span class="line">cal.sub(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">cal.mul(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>로그를 통해 정상적으로 객체를 생성하고 호출하는 것을 확인할 수 있다.</p><p><img src="/img/201007spring3.PNG" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007spring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007al-c1034/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007al-c1034/</guid>
      <pubDate>Tue, 06 Oct 2020 17:12:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명&quot;&gt;&lt;a href=&quot;#문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)&quot;&gt;&lt;/a&gt;문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)&lt;/h2&gt;&lt;p&gt;8진수로 입력된 정수 1개를 10진수로 바꾸어 출력해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명"><a href="#문제-1034-기초-출력변환-8진-정수-1개-입력받아-10진수로-출력하기-설명" class="headerlink" title="문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)"></a>문제 1034 : [기초-출력변환] 8진 정수 1개 입력받아 10진수로 출력하기(설명)</h2><p>8진수로 입력된 정수 1개를 10진수로 바꾸어 출력해보자.</p><a id="more"></a><ul><li>입력예시<br>8진 정수 1개가 입력된다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><ul><li>출력예시<br>10진수로 바꾸어 출력한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//String을 8진수로 변경</span></span><br><span class="line"><span class="keyword">int</span> octal = Integer.parseInt(s, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8진수를 10진수로 출력</span></span><br><span class="line">System.out.printf(<span class="string">"%d"</span>, octal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="배운-지식"><a href="#배운-지식" class="headerlink" title="배운 지식"></a>배운 지식</h2><p>2진수, 8진수 16진수를 Scanner로 받으려면 String 데이터타입으로 지정해야한다.<br>그 후 원하는 타입에 맞춰서 아래와 같이 코딩하면된다.</p><ul><li>2진수 : <code>Integer.parseInt(num, 2);</code></li><li>8진수 : <code>Integer.parseInt(num, 8);</code></li><li>16진수 : <code>Integer.parseInt(num, 16);</code></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007al-c1034/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[안드로이드]이미지파일 넣기</title>
      <link>https://sowon-dev.github.io/2020/10/06/201007and/</link>
      <guid>https://sowon-dev.github.io/2020/10/06/201007and/</guid>
      <pubDate>Tue, 06 Oct 2020 15:13:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;이미지파일-넣기&quot;&gt;&lt;a href=&quot;#이미지파일-넣기&quot; class=&quot;headerlink&quot; title=&quot;이미지파일 넣기&quot;&gt;&lt;/a&gt;이미지파일 넣기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;안드로이드에서 가장 빠르게 처리할 수 있는 이미지파일확장자 : png&lt;/li&gt;
&lt;li&gt;이미지를 사용하려면 그림 파일을 [res]-[drawable]폴더에 미리 복사해놓아야한다.&lt;/li&gt;
&lt;li&gt;이미지파일은 res폴더 하위 drawable폴더 안에 복사·붙여넣기한 뒤 ImageView태그로 불러올 수 있다.</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="이미지파일-넣기"><a href="#이미지파일-넣기" class="headerlink" title="이미지파일 넣기"></a>이미지파일 넣기</h1><ul><li>안드로이드에서 가장 빠르게 처리할 수 있는 이미지파일확장자 : png</li><li>이미지를 사용하려면 그림 파일을 [res]-[drawable]폴더에 미리 복사해놓아야한다.</li><li>이미지파일은 res폴더 하위 drawable폴더 안에 복사·붙여넣기한 뒤 ImageView태그로 불러올 수 있다.<a id="more"></a></li><li><code>@</code>의미는 참조이다.<ul><li>예를 들어 <code>android:src=&quot;@drawable/이미지파일명&quot;</code>인 경우 drawable을 참조해서 그 안의 이미지파일명을 불러와달라는 의미이다.</li></ul></li><li>이미지뷰와 이미지버튼의 xml속성<ul><li>src : 이미지 경로</li><li>maxHeight/maxWidth : 이미지 크기 지정</li><li>scaleType : 이미지 확대/축소방식 결정</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/이미지파일명"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Android/">Android</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/06/201007and/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006al/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006al/</guid>
      <pubDate>Mon, 05 Oct 2020 21:35:07 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기&quot;&gt;&lt;a href=&quot;#문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기&quot; class=&quot;headerlink&quot; title=&quot;문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기&quot;&gt;&lt;/a&gt;문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기&lt;/h2&gt;&lt;p&gt;실수 1개를 입력받아 정수 부분과 실수 부분으로 나누어 출력한다. 만약 실수 부분이 0으로 시작하지 않는다면(예를 들어 1.000009) scanf(“%d.%d”, &amp;amp;a, &amp;amp;b)도 하나의 방법이 될 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기"><a href="#문제-1023-기초-입출력-실수-1개-입력받아-부분별로-출력하기" class="headerlink" title="문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기"></a>문제 1023 : [기초-입출력] 실수 1개 입력받아 부분별로 출력하기</h2><p>실수 1개를 입력받아 정수 부분과 실수 부분으로 나누어 출력한다. 만약 실수 부분이 0으로 시작하지 않는다면(예를 들어 1.000009) scanf(“%d.%d”, &amp;a, &amp;b)도 하나의 방법이 될 수 있다.</p><a id="more"></a><ul><li><p>입력 :<br>실수 1개가 입력된다.<br>(단, 입력값은 절댓값이 10000을 넘지 않으며, 소수점 이하 자릿수는 최대 6자리까지이고<br>0이 아닌 숫자로 시작한다.)</p></li><li><p>출력 :<br>첫 번째 줄에 정수 부분을, 두 번째 줄에 실수 부분을 출력한다.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//입력예시</span></span><br><span class="line"><span class="number">1.414213</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//출력예시</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">414213</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="방법1-split-사용"><a href="#방법1-split-사용" class="headerlink" title="방법1 : split()사용"></a>방법1 : split()사용</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">c1023</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String f = sc.next();</span><br><span class="line"></span><br><span class="line">String[] ff = f.split(<span class="string">"\\."</span>);</span><br><span class="line"></span><br><span class="line">String int1 = ff[<span class="number">0</span>];  </span><br><span class="line">String int2 = ff[<span class="number">1</span>];  </span><br><span class="line"></span><br><span class="line">System.out.println(int1);</span><br><span class="line">System.out.println(int2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="방법2-StringTokenizer사용"><a href="#방법2-StringTokenizer사용" class="headerlink" title="방법2 : StringTokenizer사용"></a>방법2 : StringTokenizer사용</h2><p>StringTokenizer는 단 한 개의 구분자만을 사용할 수 있으므로 복잡한 구분자를 사용해야 할 때는<br>Scanner 나 split을 사용해야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringTokenizer 사용</span></span><br><span class="line">StringTokenizer st = <span class="keyword">new</span> StringTokenizer(s,<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (st.hasMoreElements()) &#123;</span><br><span class="line">System.out.println(st.nextToken());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/Codeup100/">Codeup100</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006al/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>컴파일에러와 런타임에러 차이</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006jspi/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006jspi/</guid>
      <pubDate>Mon, 05 Oct 2020 20:57:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;컴파일에러-VS-런타임에러-차이&quot;&gt;&lt;a href=&quot;#컴파일에러-VS-런타임에러-차이&quot; class=&quot;headerlink&quot; title=&quot;컴파일에러 VS 런타임에러 차이&quot;&gt;&lt;/a&gt;컴파일에러 VS 런타임에러 차이&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;컴파일에</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="컴파일에러-VS-런타임에러-차이"><a href="#컴파일에러-VS-런타임에러-차이" class="headerlink" title="컴파일에러 VS 런타임에러 차이"></a>컴파일에러 VS 런타임에러 차이</h2><ul><li>컴파일에러 : 컴파일시 발생하는 에러, IDE의 빨간줄 에러<ul><li>컴파일이란 개발자가 작성한 고급언어를 기계어로 바꾸어주는 것</li></ul></li><li>런타임에러 : 프로그램 실행시 발생하는 에러, IDE의 노란줄 에러<ul><li>RUN 버튼 클릭 후, 즉 프로그램 실행 후 CONSOLE에 나타나는 에러</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006jspi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[이슈해결]Exception in thread java.lang.ArrayIndexOutOfBoundsException: 점(.)사용시 에러 해결방법</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006java/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006java/</guid>
      <pubDate>Mon, 05 Oct 2020 20:54:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제상황&quot;&gt;&lt;a href=&quot;#문제상황&quot; class=&quot;headerlink&quot; title=&quot;문제상황&quot;&gt;&lt;/a&gt;문제상황&lt;/h2&gt;&lt;p&gt;Scanner로 사용자로부터 문자열을 입력받아 &lt;code&gt;점(.)&lt;/code&gt;을 기준으로 split() 하려고 실행하니 &lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.ArrayIndexOutOfBoundsException:&lt;/code&gt; 런타임에러가 발생했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제상황"><a href="#문제상황" class="headerlink" title="문제상황"></a>문제상황</h2><p>Scanner로 사용자로부터 문자열을 입력받아 <code>점(.)</code>을 기준으로 split() 하려고 실행하니 <code>Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException:</code> 런타임에러가 발생했다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String f = sc.next();</span><br><span class="line">String[] ff = f.split(<span class="string">"."</span>);</span><br><span class="line">String int1 = ff[<span class="number">0</span>];  </span><br><span class="line">String int2 = ff[<span class="number">1</span>];  </span><br><span class="line">System.out.println(int1);</span><br><span class="line">System.out.println(int2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>콘솔창에 런타임에러발생</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12.123</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.ArrayIndexOutOfBoundsException: 0</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ul><li><code>split(&quot;.&quot;)</code>에서 <code>split(&quot;\\.&quot;)</code>으로 변경해준다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String f = sc.next();</span><br><span class="line">String[] ff = f.split(<span class="string">"\\."</span>);</span><br><span class="line">String int1 = ff[<span class="number">0</span>];  </span><br><span class="line">String int2 = ff[<span class="number">1</span>];  </span><br><span class="line">System.out.println(int1);</span><br><span class="line">System.out.println(int2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><ul><li>정규표현식에서 <code>점(.)</code>은 임의의 한 문자(종류를 가리지않지만 \는 넣을 수 없음)를 의미한다.</li><li><code>split()</code>과 <code>replace()</code>를 사용할 때, <code>점(.)</code>이 정규식으로 적용되어 모든 문자를 “”으로 만들어 버린다.</li><li><code>점(.)</code>을 <code>점(.)</code> 그대로 인식시키기 위해서는 <code>\.</code>로 해줘야 한다.</li><li>하지만 <code>\</code> 또한 예약어이기 때문에 <code>\\</code>로 표시해줘야 한다.</li><li>따라서 <code>\\.</code>을 입력해줘야 원하는 <code>.</code>을 출력할 수 있다.</li></ul><p><img src="https://i.imgur.com/M6PjUz7.png" alt="https://skout90.github.io/2017/09/23/Javascript/6.%20javascript-RegExp%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/"></p><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ohgyun.com/4">https://ohgyun.com/4</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006java/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]회원관리프로그램예시를 통한 MODEL2방식에서 스프링방식으로 변경</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006springi-1/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006springi-1/</guid>
      <pubDate>Mon, 05 Oct 2020 17:21:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;회원관리프로그램-순서&quot;&gt;&lt;a href=&quot;#회원관리프로그램-순서&quot; class=&quot;headerlink&quot; title=&quot;회원관리프로그램 순서&quot;&gt;&lt;/a&gt;회원관리프로그램 순서&lt;/h2&gt;&lt;p&gt;회원정보를 DB에서 읽어서 출력하는 동작을 구현해보자&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Action 인터페이스 - execute()&lt;/li&gt;
&lt;li&gt;MemberControllerTest 객체 생성 -&amp;gt; 호출</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="회원관리프로그램-순서"><a href="#회원관리프로그램-순서" class="headerlink" title="회원관리프로그램 순서"></a>회원관리프로그램 순서</h2><p>회원정보를 DB에서 읽어서 출력하는 동작을 구현해보자</p><ol><li>Action 인터페이스 - execute()</li><li>MemberControllerTest 객체 생성 -&gt; 호출<a id="more"></a></li><li>SelectMemberAction 객체 사용 </li><li>DAO 객체 생성 -&gt; 처리 (출력)<ul><li>의존관계 Select &lt;-&gt; DAO  : DAO 객체를 주입 </li><li>객체를 미리 생성(Spring) member.xml 생성</li></ul></li></ol><p><br><br><br></p><h2 id="Action-java-인터페이스-생성"><a href="#Action-java-인터페이스-생성" class="headerlink" title="Action.java 인터페이스 생성"></a><code>Action.java</code> 인터페이스 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"><span class="comment">// Action 페이지의 동작을 미리 선언해서 사용</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberControllerTest-java-코드-생성"><a href="#MemberControllerTest-java-코드-생성" class="headerlink" title="MemberControllerTest.java 코드 생성"></a><code>MemberControllerTest.java</code> 코드 생성</h2><ul><li>기존 모델2 방법 : <code>Action action = new SelectMemberAction();</code></li><li>스프링 방법 : <ul><li><code>SelectMemberAction</code>로도 가능하지만 <code>Action</code>처럼 업캐스팅통한 표현이 약한 결합을 띄고있다는 것을 표현하는 것이기때문에 <code>Action</code>처럼 업캐스팅방식이 더 많이 사용한다</li><li><pre><code class="java">BeanFactory fac = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileSystemResource(<span class="string">"member.xml"</span>));<span class="comment">//SelectMemberAction action = (SelectMemberAction) fac.getBean("action");</span>Action action = (Action) fac.getBean(<span class="string">"action"</span>); <span class="comment">//업캐스팅</span>&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li></ul></li></ul><p><br><br><br></p><h2 id="SelectMemberAction-java-생성"><a href="#SelectMemberAction-java-생성" class="headerlink" title="SelectMemberAction.java 생성"></a><code>SelectMemberAction.java</code> 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectMemberAction</span> <span class="keyword">implements</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// Action 인퍼테이스를 사용하여 다형성구현</span></span><br><span class="line">System.out.println(<span class="string">"M: SelectMemberAction 클래스의 execute메서드실행"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 예를 들어</span></span><br><span class="line"><span class="comment"> * 1.파라미터 저장하기</span></span><br><span class="line"><span class="comment"> * 2.세션아이디체크</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//모델2방식</span></span><br><span class="line"><span class="comment">//3.DB접근 -&gt; DAO객체 생성 </span></span><br><span class="line"><span class="comment">//MemberDAO mdao = new MemberDAOImpl();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//의존주입(DI)방식</span></span><br><span class="line"><span class="comment">//3.DB접근 -&gt; DAO객체 생성 </span></span><br><span class="line">BeanFactory fac = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileSystemResource(<span class="string">"member.xml"</span>));</span><br><span class="line">MemberDAO mdao = (MemberDAO) fac.getBean(<span class="string">"mdao"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.메서드</span></span><br><span class="line">List list = mdao.getMemberList();</span><br><span class="line">System.out.println(<span class="string">"M: List데이터저장 ["</span>+ list+<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.페이지이동</span></span><br><span class="line">System.out.println(<span class="string">"M: 페이지이동(View)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberDAO-java-인터페이스-생성"><a href="#MemberDAO-java-인터페이스-생성" class="headerlink" title="MemberDAO.java 인터페이스 생성"></a><code>MemberDAO.java</code> 인터페이스 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberDAO</span> </span>&#123;</span><br><span class="line"><span class="comment">//DAO역할을 하는 객체로 사용됨</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//회원목록가져오기</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getMemberList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="MemberDAOImpl-java-생성"><a href="#MemberDAOImpl-java-생성" class="headerlink" title="MemberDAOImpl.java 생성"></a><code>MemberDAOImpl.java</code> 생성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDAOImpl</span> <span class="keyword">implements</span> <span class="title">MemberDAO</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//디비연결메서드</span></span><br><span class="line"><span class="comment">//자원해제메서드</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getMemberList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DAO: 디비연결"</span>);</span><br><span class="line">System.out.println(<span class="string">"DAO: sql작성 &amp; pstmt객체생성 &amp; ?입력 &amp; sql쿼리구문실행 &amp; rs에 가져온 정보를 List저장"</span>);</span><br><span class="line">System.out.println(<span class="string">"DAO: 자원해제"</span>);</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"빽다방"</span>);</span><br><span class="line">list.add(<span class="string">"더벤티"</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="member-xml-인터페이스-생성"><a href="#member-xml-인터페이스-생성" class="headerlink" title="member.xml 인터페이스 생성"></a><code>member.xml</code> 인터페이스 생성</h2><ul><li>파라미터가 없으므로 bean태그만 생성. 안에 <code>&lt;property name=&quot;&quot;&gt;</code>를 사용하지않아도 됨</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DTD --&gt;</span><br><span class="line">&lt;!DOCTYPE beans PUBLIC <span class="string">"-//SPRING//DTD BEAN//EN"</span> <span class="string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans&gt;</span><br><span class="line">&lt;!-- Controller_Action  --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"action"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itwill.member.SelectMemberAction"</span>&gt;</span><br><span class="line">&lt;!-- 파라미터가 없으므로 bean태그만 생성  --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DAO --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"mdao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itwill.member.db.MemberDAOImpl"</span>&gt;</span><br><span class="line">&lt;!-- 파라미터가 없으므로 bean태그만 생성  --&gt;</span><br><span class="line">&lt;property name=""&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006springi-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING]Spring 기본 동작순서, JSP와 SPRING의 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/05/201006springi/</link>
      <guid>https://sowon-dev.github.io/2020/10/05/201006springi/</guid>
      <pubDate>Mon, 05 Oct 2020 15:15:13 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;스프링기본동작순서&quot;&gt;&lt;a href=&quot;#스프링기본동작순서&quot; class=&quot;headerlink&quot; title=&quot;스프링기본동작순서&quot;&gt;&lt;/a&gt;스프링기본동작순서&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="스프링기본동작순서"><a href="#스프링기본동작순서" class="headerlink" title="스프링기본동작순서"></a>스프링기본동작순서</h2><a id="more"></a><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F2737783B56DE20C7101302" alt="https://server-engineer.tistory.com/253"></p><p><br><br><br></p><h2 id="JSP와-SPRING의-차이점"><a href="#JSP와-SPRING의-차이점" class="headerlink" title="JSP와 SPRING의 차이점"></a>JSP와 SPRING의 차이점</h2><p>문득 궁금해져서 검색해보니 아주 명쾌한 비유와 설명을 찾았다.</p><blockquote><p>JSP란?<br>JSP는 HTML문서에 내부적으로 자바문법을 사용할 수 있게 하는 웹페이지 스크립트 언어입니다.</p><p>Spring Framework 란?<br>Spring은 다양한 개발 빠르게 적용할 수 있게 만들어 놓은 도구입니다. Java는 삽을 들고 땅을 파는 거라면, Spring은 포크레인으로 땅을 파는 것과 같다고 표현할 수 있습니다.</p><p>JSP와 Spring의 차이<br>JSP는 웹 페이지 영역에서 사용되고, Spring은 웹 서비스 전반적 환경을 구성합니다.</p><p>Spring이 나라라고 한다면, JSP는 도시 입니다. 스프링은 프로그램 전반적인 근본이 되는 환경을 구축하고있고, JSP는 그 환경의 일부분에 사용되는 언어입니다.<br>출처 : <a href="https://cloudstudying.kr/questions/79">https://cloudstudying.kr/questions/79</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/05/201006springi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[스프링SPRING] 프레임워크란, Spring 특징과 기능, 컨테이너란</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005springi/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005springi/</guid>
      <pubDate>Sun, 04 Oct 2020 20:06:41 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Framework란&quot;&gt;&lt;a href=&quot;#Framework란&quot; class=&quot;headerlink&quot; title=&quot;Framework란?&quot;&gt;&lt;/a&gt;Framework란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;어떤것을 구성하는 구조/뼈대/틀&lt;/li&gt;
&lt;li&gt;사용될 기능을 클래스/인터페이스로 만들어놓고 제공해주는 형태&lt;/li&gt;
&lt;li&gt;직접적인 구현X, 활용O</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Framework란"><a href="#Framework란" class="headerlink" title="Framework란?"></a>Framework란?</h2><ul><li>어떤것을 구성하는 구조/뼈대/틀</li><li>사용될 기능을 클래스/인터페이스로 만들어놓고 제공해주는 형태</li><li>직접적인 구현X, 활용O<a id="more"></a></li><li>프레임워크 등장배경 : 기존 언어의 불편함을 개선하기 위해서<ul><li>개발생산성 향상됨</li></ul></li><li><a href="http://ldg.pe.kr/framework_reference/spring/ver1.2.2/html/springbeansdtd.html">spring beans DTD</a> : 해당 문서의 저장되는 데이터를지정한다.</li></ul><p><br><br><br></p><h2 id="컨테이너-Container"><a href="#컨테이너-Container" class="headerlink" title="컨테이너 Container"></a>컨테이너 Container</h2><blockquote><p>Container 는 Spring 의 핵심입니다. Container 는 개발자를 대신하여, Bean 을 생성 / 관리 / 제거합니다. Container 가 Bean 을 관리해주기 때문에, 개발자는 모듈 간에 의존 및 결합으로 인해 발생하는 문제로부터 자유로워 졌습니다. 아래와 같이 독립적인 코드를 작성해서 Annotaion 만 남겨주면 Container 가 개발자가 원하는 상황에 코드를 실행합니다. 따라서 개발자는 메서드가 언제, 어디서 호출되어야 하는지 그리고 메서드를 호출하기 위해 필요한 매개 변수를 준비해서 전달하지 않습니다. Container 가 개발자 대신 알아서 호출합니다.<br>이렇게 Container 가 개발자를 대신하여 메서드가 호출될 때와 메서드가 필요한 자원을 전달하는 설계 구조를 Inversion of Control (IOC) 이라 합니다.<br>IOC 는 메서드가 필요로 하는 자원을 코드가 실행되는 타임에 전달하는데, 이를 Dependency Injection (DI) 이라 합니다. 예를 들어 Container가 알아서 greeting 메서드가 필요로 하는 name 매개변수를 전달하는 과정과 run 메서드가 필요로 하는 RestTemplate 매개변수를 전달하는 과정 모두 Dependency Injection (DI) 입니다.<br>출처: <a href="https://ibocon.tistory.com/122">https://ibocon.tistory.com/122</a></p></blockquote><p><br><br><br></p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ul><li>자바 웹 애플리케이션을 생성하기위한 오픈소스</li><li>스프링은 경량 프레임워크이면서 경량 컨테이너이다.<ul><li>컨테이너란 무엇일까? ex) 톰캣</li><li>EJB(Enterprise Java Beans)프레임워크 : 굉장히 무거움. 스프링 이전에 사용됨.</li></ul></li></ul><p><br><br><br></p><h3 id="스프링의-특징"><a href="#스프링의-특징" class="headerlink" title="스프링의 특징"></a>스프링의 특징</h3><table><thead><tr><th align="center">스프링의 특징</th><th align="left">추가설명</th></tr></thead><tbody><tr><td align="center"><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/#제어의-역행-IoC-Inversion-of-Control">제어의 역행(IoC, Inversion of Control)</a></td><td align="left">서블릿/빈 개발자가 코드로 작성X, 프레임워크로 수행</td></tr><tr><td align="center"><a href="https://sowon-dev.github.io/2020/10/03/201003spring-1/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-DI-Dependency-Injection">의존성 주입(DI, Dependency Injection)</a></td><td align="left">클래스를 사용한 객체를 개발자가 코드로 생성X, 프레임워크가 생성해서 사용</td></tr><tr><td align="center"><a href="">관점 지향 (AOP, Aspect-Oriented Programming)</a></td><td align="left">핵심기능(주요기능) 제외한 부수적인 기능을 프레임워크가 생성해서 제공</td></tr><tr><td align="center">영속성-(DB)</td><td align="left">-</td></tr><tr><td align="center">라이브러리 연동 제공</td><td align="left">-</td></tr><tr><td align="center">POJO(Plain Old Java Object)방식 프레임워크</td><td align="left"><img src="https://yunjigo92.github.io/img/study/POJO.png" alt="https://yunjigo92.github.io/2020/02/18/java_pojo.html"></td></tr></tbody></table><p><br><br><br></p><h2 id="스프링의-주요-기능"><a href="#스프링의-주요-기능" class="headerlink" title="스프링의 주요 기능"></a>스프링의 주요 기능</h2><table><thead><tr><th align="center">스프링의 주요 기능</th><th align="left">설명</th></tr></thead><tbody><tr><td align="center">SPRING Core</td><td align="left">다른 기능과 설정값을 분리하기위한 IoC 기능을 제공한다.</td></tr><tr><td align="center">SPRING Context</td><td align="left">스프링의 기본 기능으로 각각의 애플리케이션을 작동하는 Bean(=객체)에 대한 접근을 처리한다.</td></tr><tr><td align="center">SPRING DAO</td><td align="left">모델2보다 향상된 JDBC기능 활용할 수 있다.</td></tr><tr><td align="center">SPRING ORM</td><td align="left">MyBatis(마이바티스)와 같은 영속성 프레임워크 연동기능을 제공한다.</td></tr><tr><td align="center">SPRING AOP</td><td align="left">관점지향 프로그래밍를 제공한다.</td></tr><tr><td align="center">SPRING Web</td><td align="left">웹 개발에 필요한 기능을 제공한다.</td></tr><tr><td align="center">SPRING WebMVC</td><td align="left">스프링에서 MVC구현에 관한 기능을 제공한다.</td></tr></tbody></table><p><br><br><br></p><h2 id="Tomcat은-컨테이너다"><a href="#Tomcat은-컨테이너다" class="headerlink" title="Tomcat은 컨테이너다?"></a>Tomcat은 컨테이너다?</h2><ul><li>톰캣은 서블릿컨테이너다.</li><li>서블릿 생성,초기화,서비스 실행, 서비스 소멸등 모든 서블릿에 관한 권한을 가지고 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/Spring/">Spring</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005springi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA]사용자로부터 정수 10개를 입력받은 후 3의 배수만 골라서 출력하기</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jsp/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jsp/</guid>
      <pubDate>Sun, 04 Oct 2020 19:56:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;정수 10개를 입력받아 배열에 저장한 후, 배열을 검색하여 3의 배수만 골라서 출력하시오. 3의 배수가 없을 경우 “해당사항 없음” 메세지를 출력 하시오.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 10개를 입력받아 배열에 저장한 후, 배열을 검색하여 3의 배수만 골라서 출력하시오. 3의 배수가 없을 경우 “해당사항 없음” 메세지를 출력 하시오.</p><a id="more"></a><p><br><br><br></p><h2 id="내코드"><a href="#내코드" class="headerlink" title="내코드"></a>내코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정수형 배열 선언</span></span><br><span class="line"><span class="keyword">int</span> inputTen[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스캐너로 총 10개의 정수를 사용자로부터 입력 받기</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"10개의 정수를 입력하세요"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputTen.length; i++) &#123;</span><br><span class="line">inputTen[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에서 3의 배수만 골라서 ArrayList에 담기</span></span><br><span class="line">ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; inputTen.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(inputTen[i]%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">result.add(inputTen[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3의 배수가 있을 경우 ArrayList전체 출력하고 없을 경우 해당사항 없음 메세지 출력</span></span><br><span class="line"><span class="keyword">if</span>(result.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">for</span>(Integer i : result)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"해당사항 없음"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br></pre></td></tr></table></figure><ul><li>배열을 두 개를 생성하면 메모리 낭비가 생긴다. 변수가 가능하다면 객체대신 변수를 사용하는 것이 메모리효율에 좋다.<ul><li>변수인 int는 4바이트인데 객체는 최소 4바이트 이상이니까.</li></ul></li><li>따라서 이 문제에선 변수를 쓰는 것이 속도도 빠르다. 왜냐면 메모리를 만드는 시간이 드니까</li></ul><p><br><br><br></p><h2 id="강사님코드"><a href="#강사님코드" class="headerlink" title="강사님코드"></a>강사님코드</h2><ul><li>10개 check하는 변수를 생성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정수형 배열 선언</span></span><br><span class="line"><span class="keyword">int</span> inputTen[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스캐너로 총 10개의 정수를 사용자로부터 입력 받기</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"10개의 정수를 입력하세요"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputTen.length; i++) &#123;</span><br><span class="line">inputTen[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3의 배수만 출력</span></span><br><span class="line"><span class="keyword">int</span> ck = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inputTen.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(inputTen[i]%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"3의 배수 :"</span>+inputTen[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ck++;</span><br><span class="line"><span class="keyword">if</span>(ck ==<span class="number">10</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"해당사항 없음"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of main()</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jsp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] Redirect방식과 Forwarding방식 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspRedirectVSForwarding/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspRedirectVSForwarding/</guid>
      <pubDate>Sun, 04 Oct 2020 18:12:45 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Redirect-VS-Forwarding&quot;&gt;&lt;a href=&quot;#Redirect-VS-Forwarding&quot; class=&quot;headerlink&quot; title=&quot;Redirect VS Forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/08/31/200831jspi2/#src%ED%8F%B4%EB%8D%94%EC%95%84%EB%9E%98%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80-BoardFrontController-java%EC%83%9D%EC%84%B1&quot;&gt;Redirect VS Forwarding&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;sendRedirect방식&lt;ul&gt;
&lt;li&gt;페이지 이동 O 주소 변경 O (가상주소끼리의 이동)&lt;/li&gt;
&lt;li&gt;session,application 영역의 데이터 전달 가능</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Redirect-VS-Forwarding"><a href="#Redirect-VS-Forwarding" class="headerlink" title="Redirect VS Forwarding"></a><a href="https://sowon-dev.github.io/2020/08/31/200831jspi2/#src%ED%8F%B4%EB%8D%94%EC%95%84%EB%9E%98%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80-BoardFrontController-java%EC%83%9D%EC%84%B1">Redirect VS Forwarding</a></h2><ul><li>sendRedirect방식<ul><li>페이지 이동 O 주소 변경 O (가상주소끼리의 이동)</li><li>session,application 영역의 데이터 전달 가능<a id="more"></a></li><li>사용처: 주소와 화면의 전환이 동시에 일어날때 (가상주소 .bo -&gt; 가상주소로 .bo)</li></ul></li><li>Forwarding방식<ul><li>페이지 이동 O 주소 변경 X (jsp 뷰 페이지로 이동) </li><li>request,response,session,application 영역의 데이터 전달가능</li><li>사용처: 주소는 그대로인데 화면이 바뀔때 (가상주소 .bo에서 request객체정보를 가지고 이동하면서 .jsp를 보여줌)</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspRedirectVSForwarding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[자바JAVA] 전위연산(a++)과 후위연산(++a) 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspPrefixVSPostfix/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspPrefixVSPostfix/</guid>
      <pubDate>Sun, 04 Oct 2020 17:37:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix&quot;&gt;&lt;a href=&quot;#전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix&quot; class=&quot;headerlink&quot; title=&quot;전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/08/200609jspi/#%EC%A0%84%EC%9C%84%EC%97%B0%EC%82%B0-VS-%ED%9B%84%EC%9C%84%EC%97%B0%EC%82%B0&quot;&gt;전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;전위 증감 연산자(++a,–a) : 연산 후 대입&lt;/li&gt;
&lt;li&gt;후위 증감 연산자(a++,a–) : 대입 후 연산</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix"><a href="#전위-증감-연산자-prefix-VS-후위-증감-연산자-postfix" class="headerlink" title="전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)"></a><a href="https://sowon-dev.github.io/2020/06/08/200609jspi/#%EC%A0%84%EC%9C%84%EC%97%B0%EC%82%B0-VS-%ED%9B%84%EC%9C%84%EC%97%B0%EC%82%B0">전위 증감 연산자(prefix) VS 후위 증감 연산자(postfix)</a></h2><ul><li>전위 증감 연산자(++a,–a) : 연산 후 대입</li><li>후위 증감 연산자(a++,a–) : 대입 후 연산<a id="more"></a></li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>아래 문제를 통해 차이점을 알아보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> c = ++a &gt; b++ || a++ &gt;= ++b;</span><br><span class="line">System.out.println(a+<span class="string">","</span>+b);</span><br><span class="line">System.out.println(<span class="string">"변수 c의 값 :"</span>+c);</span><br></pre></td></tr></table></figure><h2 id="답"><a href="#답" class="headerlink" title="답"></a>답</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>, <span class="number">11</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li><code>++a &gt; b++</code>의 값은 11 &gt; 10 이라서 true</li><li><code>a++ &gt;= ++b</code>의 값은 11 &gt;= 12 라서 false</li><li>그렇다면 출력할때 왜 12,12가 아닌 11,11이 나올까?<ul><li>컴파일러는 앞부분이 true인 경우 굳이 <code>||</code> 연산자 뒤를 연산 할 필요가 없다.</li><li>따라서 12,12가 아닌 11,11이고 이것이 논리연산자의 특징이다.</li></ul></li></ul><p><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://dojang.io/mod/page/view.php?id=96">추가학습 : 코딩 도장</a></li></ul><iframe width="100%" height="470" src="https://www.youtube.com/embed/dMw49y6S_K4?list=PLa9dKeCAyr7jsbboqbsSnsTIVds0Dl3Ec" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspPrefixVSPostfix/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JSP] get방식과 post방식 차이점</title>
      <link>https://sowon-dev.github.io/2020/10/04/201005jspGetVSPost/</link>
      <guid>https://sowon-dev.github.io/2020/10/04/201005jspGetVSPost/</guid>
      <pubDate>Sun, 04 Oct 2020 17:33:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;get-방식-VS-post-방식&quot;&gt;&lt;a href=&quot;#get-방식-VS-post-방식&quot; class=&quot;headerlink&quot; title=&quot;get 방식 VS post 방식&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sowon-dev.github.io/2020/06/16/200617jspi2/#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%EB%B0%A9%EC%8B%9D-%EB%91%90%EA%B0%80%EC%A7%80-get%EB%B0%A9%EC%8B%9D%EA%B3%BC-post%EB%B0%A9%EC%8B%9D&quot;&gt;get 방식 VS post 방식&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;get &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전달되는 데이터를 주소줄(URL)에 적어서 전달&lt;/li&gt;
&lt;li&gt;파라미터의 길이 제한 : 256byte</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="get-방식-VS-post-방식"><a href="#get-방식-VS-post-방식" class="headerlink" title="get 방식 VS post 방식"></a><a href="https://sowon-dev.github.io/2020/06/16/200617jspi2/#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%EB%B0%A9%EC%8B%9D-%EB%91%90%EA%B0%80%EC%A7%80-get%EB%B0%A9%EC%8B%9D%EA%B3%BC-post%EB%B0%A9%EC%8B%9D">get 방식 VS post 방식</a></h2><ul><li><p>get </p><ul><li>전달되는 데이터를 주소줄(URL)에 적어서 전달</li><li>파라미터의 길이 제한 : 256byte<a id="more"></a></li><li>처리 속도가 빠름</li><li>보안성이 나쁨</li></ul></li><li><p>post</p><ul><li>전달되는 데이터를 본문(Body)에 담아서 전달=&gt;주소줄X</li><li>파라미터의 길이 제한 : 없음.</li><li>처리 속도가 느림</li><li>보안성이 좋음</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sowon-dev.github.io/categories/JSP/">JSP</category>
      
      
      <category domain="https://sowon-dev.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://sowon-dev.github.io/tags/ITWILL-JAVA/">ITWILL(JAVA)</category>
      
      
      <comments>https://sowon-dev.github.io/2020/10/04/201005jspGetVSPost/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
